SetEchoInput(true);

P<x> := PolynomialRing(Integers());
f := x^5+7*x+2+1;
N := NumberField(f);
f :=  PolynomialAlgebra(Rationals())!f;
P<x> := PolynomialRing(Rationals());
f := Evaluate(f, x/19)*19^Degree(f);
E := EquationOrder(f);
M := MaximalOrder(E : Discriminant := Discriminant(N));
assert Discriminant(M) eq Discriminant(N);
f := x^5+7*x+2+1;
N := NumberField(f);
f :=  PolynomialAlgebra(Rationals())!f;
P<x> := PolynomialRing(Rationals());
f := Evaluate(f, x/(19*37*18731123*2*3))*(19*37*18731123*2*3)^Degree(f);
E := EquationOrder(f);
M := MaximalOrder(E : Discriminant := Discriminant(N));
assert Discriminant(M) eq Discriminant(N);
f := x^2 + 5;
N := NumberField(f);
P<x> := PolynomialRing(MaximalOrder(N));
f := x^2 + 2;
f :=  PolynomialRing(N)!f;
N2 := NumberField(f : Check := false);
d := Discriminant(MaximalOrder(N2));
P<x> := PolynomialRing(N);
f := Evaluate(f, x/19)*19^Degree(f);
f := PolynomialRing(MaximalOrder( N ))!f;
E := EquationOrder(f : Check := false);
M := MaximalOrder(E : Discriminant := d);
assert Discriminant(M) eq d;
P<x> := PolynomialRing(IntegerRing());
f := x^2 + 5;
N := NumberField(f);
P<x> := PolynomialRing(MaximalOrder(N));
f := x^2 + 2;
f :=  PolynomialRing(N)!f;
N2 := NumberField(f : Check := false);
d := Discriminant(MaximalOrder(N2));
P<x> := PolynomialRing(N);
f := Evaluate(f, x/(19*37*18731123*2*3))*(19*37*18731123*2*3)^Degree(f);
f := PolynomialRing(MaximalOrder( N ))!f;
E := EquationOrder(f : Check := false);
M := MaximalOrder(E : Discriminant := d);
assert Discriminant(M) eq d;
P<x> := PolynomialRing(IntegerRing());
E := EquationOrder(x^2 + 5);
M := MaximalOrder(E);
I := ideal<M | M!4, M![0, 8]>;
assert IsPower(I^3, 3);
assert Root(I^3, 3) eq I;
assert Sqrt(I^2) eq I;
assert IsSquare(I^2);
assert IsSquare(I);
assert not IsPower(I, 3);
assert Sqrt(I)^2 eq I;
r, r2 := IsPower(I, 4);
assert r;
assert r2^4 eq I;
assert not IsPower(I, 5);

P<x> := PolynomialRing(Integers());
o := MaximalOrder(x^2-2);
O := MaximalOrder(PolynomialRing(o)!x^2-3);
Oa := AbsoluteOrder(O);

Ao := NumberField(o);
AO := NumberField(O);

Fo := FieldOfFractions(o);
FO := FieldOfFractions(O);

Vo := RSpace(o, 2);
VA := RSpace(Integers(), 4);

x := Random(O, 20);
assert Evaluate(MinimalPolynomial(x, o), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Integers()), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Ao), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Rationals()), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Fo), x) eq 0;
assert Evaluate(MinimalPolynomial(x, O), x) eq 0;
assert Evaluate(MinimalPolynomial(x, FO), x) eq 0;
assert Evaluate(MinimalPolynomial(x, AO), x) eq 0;

assert Evaluate(CharacteristicPolynomial(x, o), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Integers()), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Ao), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Rationals()), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Fo), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, O), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, FO), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, AO), x) eq 0;

assert O!Eltseq(x) eq x;

y := Random(O, 20);
v1 := Vo!Eltseq(y);
v2 := VA!&cat[Eltseq(u) : u in Eltseq(y)];
v := RSpace(O, 1)![y];
assert O!Eltseq(ChangeRing(v1, Ao)*RepresentationMatrix(x, Ao)) eq y*x;
assert O![Fo![s[1], s[2]], Fo![s[3], s[4]]] eq y*x where s is Eltseq(ChangeRing(v2, Rationals())*RepresentationMatrix(x, Rationals()));
assert O!Eltseq(ChangeRing(v1, Fo)*RepresentationMatrix(x, Fo)) eq y*x;
assert O!Eltseq(v*RepresentationMatrix(x, O))[1] eq y*x;
assert O!Eltseq(ChangeRing(v, FO)*RepresentationMatrix(x, FO))[1] eq y*x;
assert O!Eltseq(ChangeRing(v, AO)*RepresentationMatrix(x, AO))[1] eq y*x;

assert RepresentationMatrix(x, Fo) eq RepresentationMatrix(x);
assert RepresentationMatrix(x, Rationals()) eq AbsoluteRepresentationMatrix(x);

assert Norm(x, o) eq Norm(x);
assert Norm(x, Integers()) eq AbsoluteNorm(x);
assert Norm(x, Ao) eq Ao!Norm(x);
assert Norm(x, Rationals()) eq AbsoluteNorm(x);
assert Norm(x, Fo) eq Fo!Norm(x);
assert Norm(x, O) eq x;
assert Norm(x, FO) eq FO!x;
assert Norm(x, AO) eq AO!x;

assert Trace(x, o) eq Trace(x);
assert Trace(x, Integers()) eq AbsoluteTrace(x);
assert Trace(x, Ao) eq Ao!Trace(x);
assert Trace(x, Rationals()) eq AbsoluteTrace(x);
assert Trace(x, Fo) eq Fo!Trace(x);
assert Trace(x, O) eq x;
assert Trace(x, FO) eq FO!x;
assert Trace(x, AO) eq AO!x;

Vo := KSpace(Fo, 2);
VA := KSpace(Fo, 4);

x := Random(FO, 20);
assert Evaluate(MinimalPolynomial(x, o), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Fo), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Ao), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Integers()), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Rationals()), x) eq 0;
assert Evaluate(MinimalPolynomial(x, O), x) eq 0;
assert Evaluate(MinimalPolynomial(x, FO), x) eq 0;
assert Evaluate(MinimalPolynomial(x, AO), x) eq 0;

assert Evaluate(CharacteristicPolynomial(x, o), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Ao), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, O), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Integers()), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Rationals()), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Fo), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, FO), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, AO), x) eq 0;

y := Random(FO, 20);
v1 := Vo!Eltseq(y);
v2 := VA!&cat[Eltseq(u) : u in Eltseq(y)];
v := RSpace(FO, 1)![y];
if IsIntegral(x) and &and[B[1] eq 1*BaseRing(O) : B in PseudoBasis(Module(O))] then
x;
    assert FO!Eltseq(v1*ChangeRing(RepresentationMatrix(x, o), Fo)) eq y*x;
end if;
assert FO!Eltseq(v1*(RepresentationMatrix(x, Fo))) eq y*x;
assert FO!Eltseq(ChangeRing(v1, Ao)*(RepresentationMatrix(x, Ao))) eq y*x;
if IsIntegral(x) and &and[B[1] eq 1*BaseRing(O) : B in PseudoBasis(Module(O))] then
    assert FO![Fo![s[1], s[2]], Fo![s[3], s[4]]] eq y*x where s is 
    Eltseq(v2*ChangeRing(RepresentationMatrix(x, Integers()), Fo));
end if;
assert FO![Fo![s[1], s[2]], Fo![s[3], s[4]]] eq y*x where s is Eltseq(ChangeRing(v2, Rationals())*(RepresentationMatrix(x, Rationals())));
if IsIntegral(x) and &and[B[1] eq 1*BaseRing(O) : B in PseudoBasis(Module(O))] then
    assert FO!Eltseq(v*ChangeRing(RepresentationMatrix(x, O), FO))[1] eq y*x;
end if;
assert FO!Eltseq(ChangeRing(v, FO)*(RepresentationMatrix(x, FO)))[1] eq y*x;
assert FO!Eltseq(ChangeRing(v, AO)*(RepresentationMatrix(x, AO)))[1] eq
 y*x;

assert RepresentationMatrix(x, Fo) eq RepresentationMatrix(x);
assert RepresentationMatrix(x, Rationals()) eq AbsoluteRepresentationMatrix(x);

if IsIntegral(x) then
x;
    assert Norm(x, o) eq Norm(x);
end if;
assert Norm(x, Ao) eq Ao!Norm(x);
assert Norm(x, Fo) eq Fo!Norm(x);
if IsIntegral(x) then
    assert Norm(x, Integers()) eq AbsoluteNorm(x);
end if;
assert Norm(x, Rationals()) eq AbsoluteNorm(x);
if IsIntegral(x) then
    assert Norm(x, O) eq x;
end if;
assert Norm(x, FO) eq FO!x;
assert Norm(x, AO) eq AO!x;

if IsIntegral(x) then
    assert Trace(x, o) eq Trace(x);
    assert Trace(x, Integers()) eq AbsoluteTrace(x);
end if;
assert Trace(x, Ao) eq Ao!Trace(x);
assert Trace(x, Rationals()) eq AbsoluteTrace(x);
assert Trace(x, Fo) eq Fo!Trace(x);
if IsIntegral(x) then
    assert Trace(x, O) eq x;
end if;
assert Trace(x, FO) eq FO!x;
assert Trace(x, AO) eq AO!x;

Vo := KSpace(Ao, 2);
VA := KSpace(Ao, 4);

x := Random(AO, 20);
assert Evaluate(MinimalPolynomial(x, o), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Integers()), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Ao), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Rationals()), x) eq 0;
assert Evaluate(MinimalPolynomial(x, Fo), x) eq 0;
assert Evaluate(MinimalPolynomial(x, O), x) eq 0;
assert Evaluate(MinimalPolynomial(x, FO), x) eq 0;
assert Evaluate(MinimalPolynomial(x, AO), x) eq 0;

assert Evaluate(CharacteristicPolynomial(x, o), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Integers()), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Ao), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Rationals()), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, Fo), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, O), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, FO), x) eq 0;
assert Evaluate(CharacteristicPolynomial(x, AO), x) eq 0;

y := Random(AO, 20);
v1 := Vo!Eltseq(y);
v2 := VA!&cat[Eltseq(u) : u in Eltseq(y)];
v := RSpace(AO, 1)![y];
if IsIntegral(x) then
x;
    assert AO!Eltseq(v1*ChangeRing(RepresentationMatrix(x, o), Ao)) eq y*x;
    assert AO![Ao![s[1], s[2]], Ao![s[3], s[4]]] eq y*x where s is 
    Eltseq(v2*ChangeRing(RepresentationMatrix(x, Integers()), Ao));
end if;
assert AO!Eltseq(ChangeRing(v1, Ao)*(RepresentationMatrix(x, Ao))) eq y*x;
assert AO![Ao![s[1], s[2]], Ao![s[3], s[4]]] eq y*x where s is Eltseq(ChangeRing(v2, Rationals())*(RepresentationMatrix(x, Rationals())));
assert AO!Eltseq(ChangeRing(v1, Fo)*(RepresentationMatrix(x, Fo))) eq y*x;
if IsIntegral(x) then
    assert AO!Eltseq(v*ChangeRing(RepresentationMatrix(x, O), AO))[1] eq y*x;
end if;
assert AO!Eltseq(ChangeRing(v, FO)*RepresentationMatrix(x, FO))[1] eq y*x;
assert AO!Eltseq(ChangeRing(v, AO)*RepresentationMatrix(x, AO))[1] eq y*x;

assert RepresentationMatrix(x, Ao) eq RepresentationMatrix(x);
assert RepresentationMatrix(x, Rationals()) eq AbsoluteRepresentationMatrix(x);

if IsIntegral(x) then
    assert Norm(x, o) eq Norm(x);
    assert Norm(x, Integers()) eq AbsoluteNorm(x);
end if;
assert Norm(x, Ao) eq Ao!Norm(x);
assert Norm(x, Rationals()) eq AbsoluteNorm(x);
assert Norm(x, Fo) eq Fo!Norm(x);
if IsIntegral(x) then
    assert Norm(x, O) eq x;
end if;
assert Norm(x, FO) eq FO!x;
assert Norm(x, AO) eq AO!x;

if IsIntegral(x) then
    assert Trace(x, o) eq Trace(x);
    assert Trace(x, Integers()) eq AbsoluteTrace(x);
end if;
assert Trace(x, Ao) eq Ao!Trace(x);
assert Trace(x, Rationals()) eq AbsoluteTrace(x);
assert Trace(x, Fo) eq Fo!Trace(x);
if IsIntegral(x) then
    assert Trace(x, O) eq x;
end if;
assert Trace(x, FO) eq FO!x;
assert Trace(x, AO) eq AO!x;

function RandomPrimeIdeal(R)

    if Type(R) in {RngOrd, RngQuad, RngCyc, RngFunOrd} then
        p := RandomPrimeIdeal(CoefficientRing(R));
        ps := Decomposition(R, p);
        if ISA(Type(R), RngOrd) then
            return ps[i][1] where i is Random([1 .. #ps]);
        else
            return ps[i] where i is Random([1 .. #ps]);
        end if;
    elif Type(R) eq  RngInt then
        return RandomPrime(10);
    elif Type(R) eq RngUPol then
        if Characteristic(R) eq 0 then
            return R!ChangeUniverse(Eltseq(RandomPrimePolynomial(PolynomialRing(GF(NextPrime(100))), 3)), Integers());
        else
            return RandomPrimePolynomial(R, 3);
        end if;
    elif Type(R) eq RngVal then
        return R!(1/FieldOfFractions(R).1);
    end if;
    assert false;

end function;

K:= QuadraticField(3);
E:= ext< K | Polynomial([1,0,1]) >; 
M:= MaximalOrder(E);
w := WeakApproximation( [ K.1*M ] , [-1] );
assert Valuation(w, K.1*M) eq -1;

P := [RandomPrimeIdeal(M), RandomPrimeIdeal(M)];
w := WeakApproximation(P, [1, 2]);
assert Valuation(w, P[1]) eq 1;
assert Valuation(w, P[2]) eq 2;
w := WeakApproximation(P, [-1, -2]);
assert Valuation(w, P[1]) eq -1;
assert Valuation(w, P[2]) eq -2;
P := [RandomPrimeIdeal(M) : i in [1 .. 3]];
w := WeakApproximation(P, [1, 2, -1]);
assert Valuation(w, P[1]) eq 1;
assert Valuation(w, P[2]) eq 2;
assert Valuation(w, P[3]) eq -1;

f := Polynomial([ 72, 12, 45, 24, 42, 59, 1 ]);
E := EquationOrder(f);
M := MaximalOrder(E);
SetClassGroupBounds("GRH");
time ClassGroup(M);
time IndependentUnits(M);
SetOrderUnitsAreFundamental(M);
U, f := UnitGroup(M);
G, m := PicardGroup(E);
minc := Minimum(Conductor(E));
for I in &cat[[x[1] : x in Decomposition(E, p)] : p in [2, 3, 5, 11, 13, 17, 19]] do
    mincI := minc*I;
    prin, mg := IsPrincipal(I);
    if prin then
	assert mg*E eq I;
    else
	if ColonIdeal(1*E, I)*I eq 1*E then
	    assert not IsId(I @@ m);
	end if;
    end if;
    prin, mg := IsPrincipal(mincI);
    if prin then
	assert mg*E eq mincI;
    else
	if ColonIdeal(1*E, I)*I eq 1*E then
	    assert not IsId(I @@ m);
	end if;
    end if;
end for;

f := Polynomial([ 35, 38, 67, 98, 10, 25, 98, 1 ]);
E := EquationOrder(f);
M := MaximalOrder(E);
SetClassGroupBounds("GRH");
time ClassGroup(M);
time IndependentUnits(M);
SetOrderUnitsAreFundamental(M);
U, f := UnitGroup(M);
G, m := PicardGroup(E);
minc := Minimum(Conductor(E));
for I in &cat[[x[1] : x in Decomposition(E, p)] : p in [2, 3, 5, 11, 13, 17, 19]] do
    mincI := minc*I;
    time prin, mg := IsPrincipal(I);
    if prin then
	assert mg*E eq I;
    else
	if ColonIdeal(1*E, I)*I eq 1*E then
	    assert not IsId(I @@ m);
	end if;
    end if;
    time prin, mg := IsPrincipal(mincI);
    if prin then
	assert mg*E eq minc*I;
    else
	if ColonIdeal(1*E, I)*I eq 1*E then
	    assert not IsId(I @@ m);
	end if;
    end if;
end for;

F := sub<M|3*M.6, 21*M.7>;
A := ideal<F|Matrix(Integers(), 7, 7,
[ 1, 0, 0, 0, 0, 0, 1760212813261937805369, 0, 1, 0, 0, 0, 0,
1663465685850475878343, 0, 0, 1, 0, 0, 0, 1199874686123066036818, 0, 0, 0,
1, 0, 0, 1262917720737191620654, 0, 0, 0, 0, 1, 0, 1059129105603035725755,
0, 0, 0, 0, 0, 1, 146403459190834041259, 0, 0, 0, 0, 0, 0, 2968496435939085044434 ])>;
G, m := PicardGroup(F);
A3 := 3*A;
prin, mg := IsPrincipal(A);
if assigned mg then
    assert mg*E eq A;
else
    if ColonIdeal(1*F, A)*A eq 1*F then
	assert not IsId(A @@ m);
    end if;
end if;
prin, mg := IsPrincipal(A3);
if assigned mg then
    assert mg*E eq A3;
else
    if ColonIdeal(1*F, A3)*A3 eq 1*F then
	assert not IsId(A3 @@ m);
    end if;
end if;

repeat 
    f := RandomPrimePolynomial(PolynomialRing(GF(NextPrime(500))), 4);
    E := EquationOrder(Polynomial(Integers(), f));
    M := MaximalOrder(E);
until M ne E;
Eltseq(f);

