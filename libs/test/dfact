/*
Test multivariate factorization over Z, etc.
AKS 4/10/95.
*/


SetAssertions(true);
VERB := false;
// SetEchoInput(true);

Z := IntegerRing();

test_fact_set := procedure(Q)
    S := { Abs(PrimitivePart(f)): f in Q };
    if VERB then
	print "";
	print "S:", S;
    end if;
    P := &*S;
    time PF := Factorization(P);
    if { t[1]: t in PF } ne S then
	print S, "FAILS";
	print "Factorization:", PF;
	error "";
    end if;
end procedure;

test_fact_seq := procedure(Q)
    P := &*Q;
    L := Factorization(P);
    assert L eq Sort([<Normalize(f), 1>: f in Q]);
end procedure;

test_fact := procedure(F)
    if VERB then
	print "";
	if #Terms(F) gt 50 then
	    print "F: [", #Terms(F), "terms ]";
	else
	    print "F:", F;
	end if;
    end if;
    time Q := Factorization(F);
    if VERB then
	print "Factorization:", Q;
    end if;
    if &*[t[1]^t[2]: t in Q] ne Normalize(F) then
	F, "FAILS";
	"Factorization:", Q;
	error "";
    end if;
    if not forall{t: t in Q | IsIrreducible(t[1])} then
	F, "FAILS";
	"Reducible factor:", Q;
	error "";
    end if;
end procedure;

ran := func<k | Ranbig(k)>;

P<a,b,c,d> := PolynomialRing(Z, 4);

A := b*c*d*(b+c+d);
B := a*c*d*(a+c+d);
C := b*a*d*(b+a+d);
D := b*a*c*(b+a+c);
T := (A + B - C - D)^2 - 4*A*B - 4*C*D;
U := T^2 - 64*A*B*C*D;
test_fact(U);


P<x, y, z> := PolynomialRing(Z, 3);

test_fact_set({ -y*x+1, (-y+z)*x + y, (y+z)^1*x^5-z });
test_fact_set({ (2*y+z)^3*x+3*z, 6*y*(y+1)*x + z*(z+1)*(z+2)*(z+3)*(z+4) });
test_fact_set(
    {
	55555555555555555555*x^3 + 1125899906842625*x*y + 11231*z,
	88888888888888888888*y^5 + 1048576*y*z + 1152921504606846977*x
    }
);
test_fact_set({ x^i + y^j + z^k: i, j, k in [1..2] });
test_fact_set({ (y^i+z^j)*x^k + 1: i,j in [1..2], k in [1..3] });

// Wang paper:
test_fact(
    (4*z^2*y^4 + 4*z^3*y^3 - 4*z^4*y^2 - 4*z^5*y)*x^6 +
    (z^3*y^4 + 12*z*y^3 + (-z^5+12*z^2)*y^2 - 12*z^3*y - 12*z^4)*x^5 +
    (
        8*y^4 + (6*z^2 + 8*z)*y^3 + (-4*z^4 + 4*z^3 - 8*z^2)*y^2 +
        (-4*z^5 - 2*z^4 - 8*z^3)*y
    )*x^4 +
    (
        2*z*y^4 + z^3*y^3 + (-z^5 - 2*z^3 + 9*z)*y^2 +
        (-12*z^3 + 12*z^2)*y - 12*z^4 + 3*z^3
    )*x^3 +
    (6*y^3 + (-6*z^2+8*z)*y^2 + (-2*z^4-8*z^3+2*z^2)*y)*x^2 +
    (2*z*y^3 - 2*z^3*y^2 - 3*z*y + 3*z^3)*x
    -2*y^2 + 2*z^2*y
);

test_fact_set(
    { ran(50) * x^2 + ran(50) * y + ran(50) * z + 1: i in [1..3] }
);

test_fact_set(
    { ran(300) * x^5*y^2 + ran(300) * y*z + ran(300) * x*z + 1: i in [1..3] }
);

P<f1, f2, f3, f4, f5, f6, f7> := PolynomialRing(Z, 7);
F := f3^6 - f4^6*f5^6*f6^2*f7^2;
for i := 1 to 20 do test_fact(F); end for;

_<x1,z1,x2,z2>:=PolynomialRing(Rationals(),4);
F := -1/4*x1^2*x2*z2 + 1/2*x1^2*z2^2 - 1/4*x1*z1*x2^2 + 5/6*x1*z1*x2*z2 -
    3/2*x1*z1*z2^2 + 1/12*z1^2*x2^2 - 13/12*z1^2*x2*z2 + z1^2*z2^2;
for i := 1 to 20 do test_fact(F); end for;

P<f1, f2, f3, f4, f5, f6> := PolynomialRing(GF(3), 6);
F := f3^8 + f3^4*f5^15*f6^24 + f3^4*f5^5*f6^8 +
	f5^30*f6^48 + 2*f5^25*f6^40 + 2*f5^15*f6^24 + f5^10*f6^16;
L := Factorization(F);
assert L eq
[
    <f3^4 + f3^2*f5^5*f6^8 + 2*f5^15*f6^24 + 2*f5^10*f6^16 + 2*f5^5*f6^8, 1>,
    <f3^4 + 2*f3^2*f5^5*f6^8 + 2*f5^15*f6^24 + 2*f5^10*f6^16 + 2*f5^5*f6^8, 1>
];


P<f1, f2, f3, f4, f5, f6> := PolynomialRing(GF(2), 6);
f:=
f1^3*f2*f4^2 + f1^3*f2*f4 + f1^3*f3*f4^2 + f1^3*f3*f4*f6 +
    f1^3*f3*f4 + f1^2*f2^2*f4*f5 + f1^2*f2^2*f4 + f1^2*f2^2*f5 +
    f1^2*f2^2 + f1^2*f2*f3*f4*f5 + f1^2*f2*f3*f4*f6 + f1^2*f2*f3*f4
    + f1^2*f2*f3*f5*f6 + f1^2*f2*f3*f5 + f1^2*f2*f3 + f1^2*f2*f4*f5
    + f1^2*f3^2*f4*f6 + f1^2*f3^2*f6^2 + f1^2*f3^2*f6 + f1^2*f3*f4^2
    + f1*f2^3*f4^2 + f1*f2^3*f4 + f1*f2^2*f3*f4^2 + f1*f2^2*f3*f4*f5
    + f1*f2^2*f3*f4*f6 + f1*f2^2*f3*f4 + f1*f2^2*f3*f5 +
    f1*f2^2*f5^2 + f1*f2^2*f5 + f1*f2*f3^2*f4*f5 + f1*f2*f3^2*f5*f6
    + f1*f2*f3^2*f5 + f1*f2*f3*f4*f5 + f1*f2*f3*f4 + f1*f2*f3*f5*f6
    + f1*f3^2*f4*f6 + f2^3*f4*f5 + f2^2*f3*f4^2 + f2^2*f3*f5^2 +
    f2*f3^2*f4*f5;
L := Factorization(f);
assert L eq
[
    <f1*f2*f4 + f1*f2 + f1*f3*f4 + f1*f3*f6 + f1*f3 + f2*f5 + f3*f4, 1>,
    <f1^2*f4 + f1*f2*f5 + f1*f2 + f1*f3*f6 + f2^2*f4 + f2*f3*f5, 1>
];


P<x,y> := PolynomialRing(GF(2),2);      
assert SquarefreeFactorization(x^2) eq [<x, 2>];
assert SquarefreeFactorization(x^2*y) eq Sort([<x, 2>, <y, 1>]);
assert SquarefreeFactorization(x^2*y^2) eq Sort([<x, 2>, <y, 2>]);
assert SquarefreePart(x^2) eq x;
assert SquarefreePart(x^2*y) eq x*y;
assert SquarefreePart(x^2*y^2) eq x*y;
assert SquarefreePart(x^2*y^3) eq x*y;

//
"Special char 3 fact"; // P Lisonek

P<X,a> := PolynomialRing(GF(3), 2);
L :=
[
    <X^3 + 2*a, 6>,
    <X^3 + X^2 + 2*a, 9>,
    <X^9 + 2*X^3*a + 2*a^3 + 2*a^2, 6>,
    <X^27 + 2*X^18*a + 2*X^9*a^4 + X^9*a^3 + 2*a^9 + 2*a^7, 2>,
    <X^81 + 2*X^63*a + X^54*a^4 + 2*X^54*a^3 + 2*X^54*a^2 + 2*X^45*a^4 + 
        2*X^36*a^10 + X^36*a^7 + X^27*a^13 + 2*X^27*a^12 + 2*X^27*a^11 + 
        X^27*a^9 + X^18*a^13 + 2*X^9*a^19 + 2*X^9*a^16 + 2*a^27 + a^22 + 2*a^21 
        + 2*a^20, 2>
];
f := &*[t[1]^t[2]: t in L];
F := Factorization(f);
assert F eq L;
assert forall{t: t in F | IsIrreducible(t[1])};



f4<a>:=GF(2,2);
A2<X,Y>:=AffineSpace(f4,2);
C:=Curve(A2,X^3+Y^2+Y);
K<X,Y>:=FunctionField(C);
R<T>:=PolynomialRing(K);
q:=T^2 + (Y + (a^2*X + a))*T;
L := Factorization(q);
assert L[1,1]*L[2,1] eq q;
assert L[1,2] eq 1 and L[2,2] eq 1;

// AKS, from Tobias Beck

B := RationalField();
F<s> := FunctionField(B);
R := PolynomialRing(F);
g := (R.1^10 + 13*s*R.1^8 + (446/27*s^3 - 2)*R.1^7 +
16/3*s^2*R.1^6 + (11/3*s^4 + 11*s)*R.1^5 + (s^6 + 344/27*s^3 + 1)*R.1^4 +
(125/27*s^5 + 7/12*s^2)*R.1^3 + 173/108*s^4*R.1^2 + (17/12*s^6 + 4/27*s^3)*R.1 +
1/4*s^8 + 1/27*s^5);
// F1 := FunctionField(g);
F1 := quo<R | g>;
AssignNames(~F1, ["alpha_0"]); alpha_0 := F1.1;

P<z> := PolynomialRing(F1);
f := z^5 + 3*z^4 + (-s*alpha_0 + 3)*z^3 + (-alpha_0^3 -
3*s*alpha_0 - s^3 + 1)*z^2 + (2*s^2*alpha_0^2 - 2*s*alpha_0 - s^3)*z +
s^2*alpha_0^2;

"Factorization over function field (TB)";
time L := Factorization(f);
assert #L eq 2 and [<Degree(t[1]), t[2]>: t in L] eq [ <1, 2>, <3, 1> ];
assert &*[t[1]^t[2]: t in L] eq Normalize(f);

R<p10,g0,g1,g2,g3,g4,X1,X2>:=PolynomialRing(IntegerRing(), 8);
f := -p10^170*X1^10*X2^10 + p10^130*X1^10*X2^5 + p10^130*X1^5*X2^10 -
    p10^90*X1^5*X2^5 + p10^80*X1^5*X2^5 - p10^40*X1^5 - p10^40*X2^5 + 1;
time L := Factorization(f);
assert L eq
[
    <p10^8*X2 - 1, 1>,
    <p10^8*X1 - 1, 1>,
    <p10^18*X1*X2 - 1, 1>,
    <p10^32*X2^4 + p10^24*X2^3 + p10^16*X2^2 + p10^8*X2 + 1, 1>,
    <p10^32*X1^4 + p10^24*X1^3 + p10^16*X1^2 + p10^8*X1 + 1, 1>,
    <p10^72*X1^4*X2^4 + p10^54*X1^3*X2^3 + p10^36*X1^2*X2^2 + p10^18*X1*X2 + 1,
    1>
];

"Factorization over algebraic function field over GF(3)";
k:=GF(3);
K<t>:=RationalFunctionField(k);
r<x>:=PolynomialRing(K);
F<eta>:=FunctionField(2*(1+x^2)^6*(1+x^4)-t*(x^2-1)^8);
R<X>:=PolynomialRing(F);
f := X^8+X^6-t;
time L := Factorization(f);
assert L eq
[
    <X + (t + 1)*eta^14 + (2*t + 1)*eta^12 + 2*eta^10 + (t + 1)*eta^8 + (2*t + 
        1)*eta^6 + (t + 1)*eta^2 + 2*t, 1>,
    <X + (2*t + 2)*eta^14 + (t + 2)*eta^12 + eta^10 + (2*t + 2)*eta^8 + (t + 
        2)*eta^6 + (2*t + 2)*eta^2 + t, 1>,
    <X^6 + ((t + 1)*eta^12 + 2*eta^10 + eta^8 + (t + 2)*eta^6 + t)*X^4 + ((2*t +
        2)*eta^14 + 2*t*eta^12 + (t + 1)*eta^10 + (t + 1)*eta^8 + 2*t*eta^6 + 
        (2*t + 2)*eta^4 + eta^2 + (2*t + 1))*X^2 + (2*t + 2)*eta^12 + (t + 
        2)*eta^10 + (t + 2)*eta^8 + (2*t + 1)*eta^6 + 2*eta^4 + 2*eta^2 + 2, 1>
];
assert &*[t[1]: t in L] eq Normalize(f);

f := (2*t + 2)*X^16 + 2*t*X^14 + (2*t + 2)*X^12 + (2*t + 1)*X^10 +
    2*t*X^8 + (2*t + 1)*X^6 + (2*t + 2)*X^4 + 2*t*X^2 + 2*t + 2;
time L := Factorization(f);
assert L eq
[
    <X + eta, 1>,
    <X + 2*eta, 1>,
    <X + eta^15 + t/(t + 1)*eta^13 + eta^11 + (t + 2)/(t + 1)*eta^9 + t/(t + 
        1)*eta^7 + (t + 2)/(t + 1)*eta^5 + eta^3 + t/(t + 1)*eta, 1>,
    <X + 2*eta^15 + 2*t/(t + 1)*eta^13 + 2*eta^11 + (2*t + 1)/(t + 1)*eta^9 + 
        2*t/(t + 1)*eta^7 + (2*t + 1)/(t + 1)*eta^5 + 2*eta^3 + 2*t/(t + 1)*eta,
    1>,
    <X^12 + (2*eta^14 + 2*t/(t + 1)*eta^12 + 2*eta^10 + (2*t + 1)/(t + 1)*eta^8 
        + 2*t/(t + 1)*eta^6 + (2*t + 1)/(t + 1)*eta^4)*X^10 + (2*eta^12 + 2*t/(t
        + 1)*eta^10 + 2*eta^8 + (2*t + 1)/(t + 1)*eta^6 + 1/(t + 1)*eta^4 + 1/(t
        + 1)*eta^2 + 1)*X^8 + (2*eta^14 + 2*t/(t + 1)*eta^12 + eta^10 + eta^8 + 
        2*t/(t + 1)*eta^6 + 2*eta^4 + 1/(t + 1)*eta^2)*X^6 + (2*eta^12 + 2*t/(t 
        + 1)*eta^10 + 2*eta^8 + (2*t + 1)/(t + 1)*eta^6 + 1/(t + 1)*eta^4 + 1/(t
        + 1)*eta^2 + 1)*X^4 + (2*eta^14 + 2*t/(t + 1)*eta^12 + 2*eta^10 + (2*t +
        1)/(t + 1)*eta^8 + 2*t/(t + 1)*eta^6 + (2*t + 1)/(t + 1)*eta^4)*X^2 + 1,
    1>
];
assert &*[t[1]: t in L] eq Normalize(f);

///

"Bivariate over non-standard extension";
F:=GF(3); _<u>:=PolynomialRing(F);
FF<I>:=ext<F|u^2+1>;
_<y>:=PolynomialRing(FF);
f := y * (y^6 + y^5 - y^3 + y^2 - 1)^4 / (y^2 - y - 1)^12;
K<u,v>:=PolynomialRing(FF,2);
F:=Numerator(Evaluate(f,u)-Evaluate(f,v));
time L:=Factorization(F);
assert #L eq 3;
assert &*[t[1]: t in L] eq Normalize(F);
assert L[1] eq <u - v, 1>;

///

l, S := IsIntrinsic("SetDpolyCheck");
if l then
    _ := eval "S(false); return 1;";
end if;

procedure test_aff_fact(K, D)
    "Factorization over algebraic function field over", K;

    L<a4,a6>:=RationalFunctionField(K, 2);

    P<T>:=PolynomialRing(L);
    g:=-1728*T^8 - 13824*a6*T^6 + (-4608*a4^3 - 31104*a6^2)*T^4 + 1024*a4^6
    + 13824*a4^3*a6^2 + 46656*a6^4;
    A:=quo<P|g/LeadingCoefficient(g)>;
    h:=T^8 + (12*a4^3*a6 + 72*a6^3)/(a4^6 + 18*a4^3*a6^2 + 81*a6^4)*T^6 +
        2/(a4^3 + 9*a6^2)*T^4 - 1/3/(a4^6 + 18*a4^3*a6^2 + 81*a6^4);

    hA:=Polynomial(A,h);
    _<x> := Parent(hA);
    time L := Factorization(hA);

    assert &*[t[1]^t[2]: t in L] eq Normalize(hA);
    assert [Degree(t[1]): t in L] eq D;

end procedure;

test_aff_fact(GF(5), [1, 1, 6]);
test_aff_fact(GF(7), [1, 1, 3, 3]);
test_aff_fact(GF(1009), [1, 1, 3, 3]);
test_aff_fact(RationalField(), [1, 1, 6]);

/////////////

for K in <RationalField(), GF(3), GF(5), GF(7)> do
    "Non-monic def poly over func field over", K;

    F<t> := FunctionField(K);
    P<x> := PolynomialRing(F);
    f := x^8 + 8*x^6 + (-44*t^2 + 20)/(t^2 + 1)*x^4 + (48*t^4 - 64*t^2 + 16)/
    (t^4 + 2*t^2 + 1)*x^2 + (36*t^4 - 24*t^2 + 4)/(t^6 + 3*t^4 + 3*t^2 + 1);
    time L := Factorization(Polynomial(FunctionField(f), f));
    f := &*[t[1]^t[2]: t in L];
    assert [Degree(t[1]): t in L] eq [1, 1, 1, 1, 2, 2];
end for;

/////////////
// Orig from MG, Aug 09

"Factorization with deflation";

P<a,b,c,d> := PolynomialRing(Z, 4);

L := [
    <d - 1, 5>, <d + 1, 5>, <d^2 + 1, 5>, <d^2 - d + 1, 5>, <d^2 + d + 1, 5>, 
    <d^4 + 1, 5>, <d^4 - d^2 + 1, 5>, <d^6 - d^3 + 1, 1>, <d^6 + d^3 + 1, 1>, 
    <d^8 + 1, 2>, <d^8 - d^4 + 1, 5>, <d^12 - d^6 + 1, 1>, <d^16 + 1, 1>, <d^16 
    - d^8 + 1, 2>, <d^24 - d^12 + 1, 1>, <d^32 - d^16 + 1, 1>, <c - 1, 1>, <c + 
    1, 1>, <c - d^2, 1>, <c + d^2, 1>, <c*d^2 - 1, 1>, <c*d^2 + 1, 1>, <c^2 + 1,
    1>, <c^2 + d^4, 1>, <c^2 - c + 1, 1>, <c^2 + c + 1, 1>, <c^2 - c*d^2 + d^4, 
    1>, <c^2 + c*d^2 + d^4, 1>, <c^2*d^4 + 1, 1>, <c^2*d^4 - c*d^2 + 1, 1>, 
    <c^2*d^4 + c*d^2 + 1, 1>, <c^4 + 1, 1>, <c^4 + d^8, 1>, <c^4 - c^2 + 1, 1>, 
    <c^4 - c^2*d^4 + d^8, 1>, <c^4*d^8 + 1, 1>, <c^4*d^8 - c^2*d^4 + 1, 1>, <c^8
    - c^4 + 1, 1>, <c^8 - c^4*d^8 + d^16, 1>, <c^8*d^16 - c^4*d^8 + 1, 1>, <b - 
    1, 1>, <b + 1, 1>, <b^2 + 1, 1>, <b^2 - b + 1, 1>, <b^2 + b + 1, 1>, <b^4 + 
    1, 1>, <b^4 - b^2 + 1, 1>, <b^8 - b^4 + 1, 1>, <a - 1, 5>, <a + 1, 5>, <a - 
    d, 3>, <a + d, 3>, <a - d^2, 1>, <a + d^2, 1>, <a - d^3, 1>, <a + d^3, 1>, 
    <a*d - 1, 1>, <a*d + 1, 1>, <a*d - b, 1>, <a*d + b, 1>, <a*d^2 - 1, 3>, 
    <a*d^2 + 1, 3>, <a*d^3 - 1, 1>, <a*d^3 + 1, 1>, <a*d^4 - 1, 1>, <a*d^4 + 1, 
    1>, <a*b*d - 1, 1>, <a*b*d + 1, 1>, <a^2 + 1, 5>, <a^2 - d, 1>, <a^2 + d, 
    1>, <a^2 + d^2, 3>, <a^2 + d^4, 1>, <a^2 + d^6, 1>, <a^2 - c, 1>, <a^2 + c, 
    1>, <a^2 - a + 1, 5>, <a^2 + a + 1, 5>, <a^2 - a*d + d^2, 3>, <a^2 + a*d + 
    d^2, 3>, <a^2 - a*d^2 + d^4, 1>, <a^2 + a*d^2 + d^4, 1>, <a^2 - a*d^3 + d^6,
    1>, <a^2 + a*d^3 + d^6, 1>, <a^2*d - 1, 2>, <a^2*d + 1, 2>, <a^2*d^2 + 1, 
    1>, <a^2*d^2 + b^2, 1>, <a^2*d^2 - a*d + 1, 1>, <a^2*d^2 + a*d + 1, 1>, 
    <a^2*d^2 - a*b*d + b^2, 1>, <a^2*d^2 + a*b*d + b^2, 1>, <a^2*d^4 + 1, 3>, 
    <a^2*d^4 - a*d^2 + 1, 3>, <a^2*d^4 + a*d^2 + 1, 3>, <a^2*d^6 + 1, 1>, 
    <a^2*d^6 - a*d^3 + 1, 1>, <a^2*d^6 + a*d^3 + 1, 1>, <a^2*d^8 + 1, 1>, 
    <a^2*d^8 - a*d^4 + 1, 1>, <a^2*d^8 + a*d^4 + 1, 1>, <a^2*c - 1, 1>, <a^2*c +
    1, 1>, <a^2*b^2*d^2 + 1, 1>, <a^2*b^2*d^2 - a*b*d + 1, 1>, <a^2*b^2*d^2 + 
    a*b*d + 1, 1>, <a^3 - d, 1>, <a^3 + d, 1>, <a^3*d - 1, 1>, <a^3*d + 1, 1>, 
    <a^3*d^2 - 1, 1>, <a^3*d^2 + 1, 1>, <a^4 + 1, 5>, <a^4 + d^2, 1>, <a^4 + 
    d^4, 3>, <a^4 + d^8, 1>, <a^4 + d^12, 1>, <a^4 + c^2, 1>, <a^4 - a^2 + 1, 
    5>, <a^4 - a^2*d + d^2, 1>, <a^4 + a^2*d + d^2, 1>, <a^4 - a^2*d^2 + d^4, 
    3>, <a^4 - a^2*d^4 + d^8, 1>, <a^4 - a^2*d^6 + d^12, 1>, <a^4 - a^2*c + c^2,
    1>, <a^4 + a^2*c + c^2, 1>, <a^4*d^2 + 1, 2>, <a^4*d^2 - a^2*d + 1, 2>, 
    <a^4*d^2 + a^2*d + 1, 2>, <a^4*d^4 + 1, 1>, <a^4*d^4 + b^4, 1>, <a^4*d^4 - 
    a^2*d^2 + 1, 1>, <a^4*d^4 - a^2*b^2*d^2 + b^4, 1>, <a^4*d^8 + 1, 3>, 
    <a^4*d^8 - a^2*d^4 + 1, 3>, <a^4*d^12 + 1, 1>, <a^4*d^12 - a^2*d^6 + 1, 1>, 
    <a^4*d^16 + 1, 1>, <a^4*d^16 - a^2*d^8 + 1, 1>, <a^4*c^2 + 1, 1>, <a^4*c^2 -
    a^2*c + 1, 1>, <a^4*c^2 + a^2*c + 1, 1>, <a^4*b^4*d^4 + 1, 1>, <a^4*b^4*d^4 
    - a^2*b^2*d^2 + 1, 1>, <a^6 + d^2, 1>, <a^6 - a^3 + 1, 1>, <a^6 + a^3 + 1, 
    1>, <a^6 - a^3*d + d^2, 1>, <a^6 + a^3*d + d^2, 1>, <a^6*d^2 + 1, 1>, 
    <a^6*d^2 - a^3*d + 1, 1>, <a^6*d^2 + a^3*d + 1, 1>, <a^6*d^4 + 1, 1>, 
    <a^6*d^4 - a^3*d^2 + 1, 1>, <a^6*d^4 + a^3*d^2 + 1, 1>, <a^8 + 1, 3>, <a^8 +
    d^4, 1>, <a^8 + c^4, 1>, <a^8 - a^4 + 1, 5>, <a^8 - a^4*d^2 + d^4, 1>, <a^8 
    - a^4*d^4 + d^8, 3>, <a^8 - a^4*d^8 + d^16, 1>, <a^8 - a^4*d^12 + d^24, 1>, 
    <a^8 - a^4*c^2 + c^4, 1>, <a^8*d^4 + 1, 2>, <a^8*d^4 - a^4*d^2 + 1, 2>, 
    <a^8*d^8 + 1, 2>, <a^8*d^8 - a^4*d^4 + 1, 1>, <a^8*d^8 - a^4*b^4*d^4 + b^8, 
    1>, <a^8*d^16 + 1, 1>, <a^8*d^16 - a^4*d^8 + 1, 3>, <a^8*d^24 - a^4*d^12 + 
    1, 1>, <a^8*d^32 - a^4*d^16 + 1, 1>, <a^8*c^4 + 1, 1>, <a^8*c^4 - a^4*c^2 + 
    1, 1>, <a^8*b^8*d^8 - a^4*b^4*d^4 + 1, 1>, <a^12 + d^4, 1>, <a^12 - a^6 + 1,
    1>, <a^12 - a^6*d^2 + d^4, 1>, <a^12*d^4 + 1, 1>, <a^12*d^4 - a^6*d^2 + 1, 
    1>, <a^12*d^8 + 1, 1>, <a^12*d^8 - a^6*d^4 + 1, 1>, <a^16 + 1, 1>, <a^16 - 
    a^8 + 1, 3>, <a^16 - a^8*d^4 + d^8, 1>, <a^16 - a^8*c^4 + c^8, 1>, <a^16*d^8
    + 1, 1>, <a^16*d^8 - a^8*d^4 + 1, 2>, <a^16*d^16 - a^8*d^8 + 1, 2>, 
    <a^16*d^32 - a^8*d^16 + 1, 1>, <a^16*c^8 - a^8*c^4 + 1, 1>, <a^24 - a^12 + 
    1, 1>, <a^24 - a^12*d^4 + d^8, 1>, <a^24*d^8 - a^12*d^4 + 1, 1>, <a^24*d^16 
    - a^12*d^8 + 1, 1>, <a^32 - a^16 + 1, 1>, <a^32*d^16 - a^16*d^8 + 1, 1>
];

S := [
    <d^96 + d^72 + 2*d^48 + d^24 + 1, 1>,
    <c^24 - 1, 1>,
    <c^48*d^48 - c^24*d^96 - c^24 + d^48, 1>,
    <b^24 - 1, 1>,
    <a^48*b^24*d^48 - a^24*b^48*d^24 - a^24*d^24 + b^24, 1>,
    <a^96 + a^72 + 2*a^48 + a^24 + 1, 1>,
    <a^96*c^24 - a^48*c^48 - a^48 + c^24, 1>,
    <a^456*d^336 - a^432*d^408 - a^432*d^384 - a^432*d^312 + a^432*d^288 - 
        a^432*d^264 - a^432*d^240 + a^408*d^456 + a^408*d^384 - a^408*d^360 + 
        3*a^408*d^312 + a^408*d^288 - a^408*d^264 + a^408*d^240 - a^408*d^192 + 
        a^408*d^168 + 2*a^384*d^408 - 2*a^384*d^384 - 3*a^384*d^360 + 
        2*a^384*d^336 - 2*a^384*d^312 - 2*a^384*d^288 + 3*a^384*d^264 - 
        a^384*d^240 - 2*a^384*d^216 + a^384*d^192 + a^384*d^168 - a^384*d^144 + 
        a^384*d^120 - a^360*d^480 + 2*a^360*d^432 + 4*a^360*d^360 - a^360*d^336 
        - 3*a^360*d^312 + 6*a^360*d^288 - 3*a^360*d^240 + 4*a^360*d^216 - 
        2*a^360*d^168 + a^360*d^144 - a^360*d^96 - a^336*d^480 + a^336*d^456 - 
        2*a^336*d^432 - a^336*d^408 + 4*a^336*d^384 - 3*a^336*d^360 - 
        4*a^336*d^336 + 4*a^336*d^312 - 3*a^336*d^288 - 6*a^336*d^264 + 
        4*a^336*d^240 - 4*a^336*d^192 + 4*a^336*d^168 + a^336*d^144 - 
        2*a^336*d^120 + a^336*d^96 - a^312*d^456 - 2*a^312*d^432 + 3*a^312*d^408
        - 2*a^312*d^384 - 3*a^312*d^360 + 8*a^312*d^336 - a^312*d^312 - 
        5*a^312*d^288 + 8*a^312*d^264 - 2*a^312*d^240 - 6*a^312*d^216 + 
        4*a^312*d^192 + a^312*d^168 - 4*a^312*d^144 + a^312*d^120 - 2*a^312*d^72
        + a^288*d^504 + 3*a^288*d^432 - 2*a^288*d^408 - 3*a^288*d^384 + 
        5*a^288*d^360 - 2*a^288*d^336 - 6*a^288*d^312 + 9*a^288*d^288 - 
        9*a^288*d^240 + 7*a^288*d^216 - 5*a^288*d^168 + 5*a^288*d^144 + 
        2*a^288*d^120 - a^288*d^96 + a^288*d^72 + a^288*d^48 - a^264*d^480 + 
        2*a^264*d^456 - a^264*d^432 - 3*a^264*d^408 + 5*a^264*d^384 - 
        4*a^264*d^360 - 6*a^264*d^336 + 9*a^264*d^312 - 6*a^264*d^264 + 
        9*a^264*d^240 + a^264*d^216 - 9*a^264*d^192 + 4*a^264*d^168 + 
        a^264*d^144 - 6*a^264*d^120 + 2*a^264*d^96 - a^264*d^48 + a^240*d^480 + 
        5*a^240*d^408 - 5*a^240*d^360 + 8*a^240*d^336 - 2*a^240*d^312 - 
        9*a^240*d^288 + 11*a^240*d^264 - 8*a^240*d^216 + 8*a^240*d^192 + 
        2*a^240*d^168 - 5*a^240*d^144 + 3*a^240*d^120 + 3*a^240*d^96 - 
        2*a^240*d^72 + 2*a^240*d^48 + a^240*d^24 - a^216*d^480 - 2*a^216*d^456 +
        2*a^216*d^432 - 3*a^216*d^408 - 3*a^216*d^384 + 5*a^216*d^360 - 
        2*a^216*d^336 - 8*a^216*d^312 + 8*a^216*d^288 - 11*a^216*d^240 + 
        9*a^216*d^216 + 2*a^216*d^192 - 8*a^216*d^168 + 5*a^216*d^144 - 
        5*a^216*d^96 - a^216*d^24 + a^192*d^456 - 2*a^192*d^408 + 6*a^192*d^384 
        - a^192*d^360 - 4*a^192*d^336 + 9*a^192*d^312 - a^192*d^288 - 
        9*a^192*d^264 + 6*a^192*d^240 - 9*a^192*d^192 + 6*a^192*d^168 + 
        4*a^192*d^144 - 5*a^192*d^120 + 3*a^192*d^96 + a^192*d^72 - 2*a^192*d^48
        + a^192*d^24 - a^168*d^456 - a^168*d^432 + a^168*d^408 - 2*a^168*d^384 -
        5*a^168*d^360 + 5*a^168*d^336 - 7*a^168*d^288 + 9*a^168*d^264 - 
        9*a^168*d^216 + 6*a^168*d^192 + 2*a^168*d^168 - 5*a^168*d^144 + 
        3*a^168*d^120 + 2*a^168*d^96 - 3*a^168*d^72 - a^168 + 2*a^144*d^432 - 
        a^144*d^384 + 4*a^144*d^360 - a^144*d^336 - 4*a^144*d^312 + 
        6*a^144*d^288 + 2*a^144*d^264 - 8*a^144*d^240 + 5*a^144*d^216 + 
        a^144*d^192 - 8*a^144*d^168 + 3*a^144*d^144 + 2*a^144*d^120 - 
        3*a^144*d^96 + 2*a^144*d^72 + a^144*d^48 - a^120*d^408 + 2*a^120*d^384 -
        a^120*d^360 - 4*a^120*d^336 + 4*a^120*d^312 - 4*a^120*d^264 + 
        6*a^120*d^240 + 3*a^120*d^216 - 4*a^120*d^192 + 4*a^120*d^168 + 
        3*a^120*d^144 - 4*a^120*d^120 + a^120*d^96 + 2*a^120*d^72 - a^120*d^48 +
        a^120*d^24 + a^96*d^408 - a^96*d^360 + 2*a^96*d^336 - 4*a^96*d^288 + 
        3*a^96*d^264 - 6*a^96*d^216 + 3*a^96*d^192 + a^96*d^168 - 4*a^96*d^144 -
        2*a^96*d^72 + a^96*d^24 - a^72*d^384 + a^72*d^360 - a^72*d^336 - 
        a^72*d^312 + 2*a^72*d^288 + a^72*d^264 - 3*a^72*d^240 + 2*a^72*d^216 + 
        2*a^72*d^192 - 2*a^72*d^168 + 3*a^72*d^144 + 2*a^72*d^120 - 2*a^72*d^96 
        - a^48*d^336 + a^48*d^312 - a^48*d^264 + a^48*d^240 - a^48*d^216 - 
        3*a^48*d^192 + a^48*d^144 - a^48*d^120 - a^48*d^48 + a^24*d^264 + 
        a^24*d^240 - a^24*d^216 + a^24*d^192 + a^24*d^120 + a^24*d^96 - d^168, 
    1>,
    <d^24 + 1, 2>,
    <a^72*d^48 + a^48*d^24 - a^24*d^24 - 1, 2>,
    <a^24 + 1, 3>,
    <a^48*d^48 - a^24*d^72 - a^24 + d^24, 3>,
    <d^24 - 1, 5>,
    <a^24 - 1, 5>
];

time f := &*[t[1]^t[2]: t in S];
time L2 := Factorization(f);
assert L2 eq L;

/////////////
// PM, Sep 10

K:=GF(2^5);
R<x,y> := PolynomialRing(K,2);
f := (x^63-1) div (x-1);
g := (y^63-1) div (y-1);
F := (f-g) div (x-y);
time L := Factorization(F);
assert #L eq 2;

/////////////
// Jan 11

p := 79;
R<[x]> := PolynomialRing(GF(p),4);
f1 := x[1] + 61*x[2] + 14*x[3] + 54*x[4];
f2 := x[1]^2 + 52*x[1]*x[2] + 61*x[1]*x[3] + 52*x[1]*x[4]
    + 50*x[2]^2 + 31*x[2]*x[3] + 25*x[2]*x[4] + 36*x[3]^2
    + 47*x[3]*x[4] + 47*x[4]^2;
f := f1*f2;
L := Factorization(f);
assert L eq [<f1, 1>, <f2, 1>];

///////////////

R3<[x]> := PolynomialRing(GF(3),4);
f := x[1]^2 + 2*x[2]^2 + x[2]*x[3] + 2*x[2]*x[4]
    + 2*x[3]^2 + x[3]*x[4] + 2*x[4]^2;
L := Factorization(f);
assert L eq [<f, 1>];

////////////////

P<x,y,z,w> :=  PolynomialRing(GF(5), 4);
f := 3*x^3 + 3*x^2*z + 3*x^2*w + x*y^2 + 3*x*y*z + 4*x*y*w + x*w^2 + y^3
+ 2*y^2*z + 4*y^2*w + 2*y*z*w + 3*y*w^2 +4*z^3 + 3*w^3;
test_fact_seq([f]);
test_fact_seq([f, f + 1]);
test_fact_seq([f + c: c in [0 .. 4]]);
test_fact_seq([f + c: c in [0, 1, x, y, z, w]]);
test_fact_seq([f + c^2: c in [0, 1, x, y, z, w]]);
test_fact_seq([f + L[i]*L[j]: j in [1 .. i - 1], i in [1 .. #L]]
    where L:= [1, -1, x, y, z, w]);

//////////////// Sep 2012

P<a,b,c,d,e,f,g,h,x>:=PolynomialRing(Rationals(),9);
L :=
[
    <a*b*c*f^2 + a*c*d*g^2 - a*c*h^2 - a*d*e^2 - b*c + 1/48*x, 1>,
    <a^2*b^2*c^2*f^4 - 5/2*a^2*b*c^2*d*f^2*g^2 - 2*a^2*b*c^2*f^2*h^2 + 
        5/2*a^2*b*c*d*e^2*f^2 + a^2*c^2*d^2*g^4 - 2*a^2*c^2*d*g^2*h^2 + 
        a^2*c^2*h^4 - 2*a^2*c*d^2*e^2*g^2 + 2*a^2*c*d*e^2*h^2 + a^2*d^2*e^4 - 
        2*a*b^2*c^2*f^2 + 5/2*a*b*c^2*d*g^2 + 2*a*b*c^2*h^2 - 5/2*a*b*c*d*e^2 + 
        1/96*a*b*c*f^2*x + 1/96*a*c*d*g^2*x - 1/96*a*c*h^2*x - 1/96*a*d*e^2*x + 
        b^2*c^2 - 1/96*b*c*x - 1/4608*x^2, 1>
];
f := L[1,1] * L[2, 1];
for i := 1 to 10 do
    assert Factorization(f) eq L;
end for;


//////////////// Feb 2013 (test over function field; orig from MG, 2003)

K<w> := GF(2, 3);
P<x,y>:=PolynomialRing(K, 2);
g := x^6*y^7 + x^5*y^7 + x^4*y^7 + x^3*y^7 + x^2*y^14 + x^2 + x*y^14 +
    x + y^21 + y^14 + y^7 + 1;
FF<a,b> := FunctionField(g);
P_FF<z>:=PolynomialRing(FF);
f := z^21 + (FF.1^2 + FF.1 + 1)*z^14 + (FF.1^2*FF.2^14 + FF.1^2 + FF.1*FF.2^14
    + FF.1 + FF.2^21 + FF.2^14 + 1)/FF.2^7*z^7 + FF.1^2 + FF.1 + 1;
time r := Roots(f);
assert #r eq Degree(f);
assert &*[z - t[1]: t in r] eq f;

//////////////// Mar 2013 (Stuck in evaluation loop on Hensel fail)

P<x,y,z,w> := PolynomialRing(GF(5),4);
f := -4*x^2*z + 5*x^2*w + 7*x*y*z - 10*x*y*w - 3*x*z^2 + 8*x*z*w -
3*x*w^2 - 3*y^2*z + 5*y^2*w + 2*y*z^2 - 6*y*z*w + 2*y*w^2 - 3*z^3 +
13*z^2*w - 18*z*w^2 + 8*w^3;
assert #Factorization(f) eq 1;

//////////////// Sep 2014 (GCD handling bad prime wrongly)

R<x1,x2,x3,x4> := PolynomialRing(IntegerRing(),4);
f := 29863479889565217561237477930*x1 -
494208470496363445237582170615*x2 +
945949281092565382750471421368*x3 - 492208250621843886360799394994*x4;
assert Factorization(f^2) eq [<f, 2>];

