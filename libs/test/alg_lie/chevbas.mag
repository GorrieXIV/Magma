/*
 * Code for creating randomly distorted lie algebras 
 */
function ChangeBasisLie(L, NewBasis : Rep := "Dense") //-> AlgLie, AlgMatElt, UserProgram, UserProgram
/* Changes basis for structure constant Lie algebra L. 
Returns: (1) The new Lie algebra L', (2) the transformation matrix, (3) map L' -> L, (4) map L -> L'. */
	local dim,VNewBasis, tups, Lnw, transf, transfinv,
		dist_to_orig, orig_to_dist,
		i, j, k, v, t0, whichrep;

	Lnw := ChangeBasis(L, Matrix(NewBasis) : Rep := Rep);

	//Construct maps.
	transf := Matrix(NewBasis);
	transfinv := transf^-1;
	dist_to_orig := map<Lnw -> L | x :-> L!(Vector(x)*transf)>;
	orig_to_dist := map<L -> Lnw | x :-> Lnw!(Vector(x)*transfinv)>;

	return Lnw, transf, dist_to_orig, orig_to_dist;
end function;
simdiag := function(Ms)
	local a,b;
	a,b := CommonEigenspaces([ Matrix(m) : m in Ms]);
	return a, SequenceToList(b);
end function;
ismultof := function(a, b)
	//returns i st i*a = b
	local N, nzp, t;

	N := NumberOfColumns(a);
	nzp := exists(i){ i : i in [1..N] | a[i] ne 0};
	if nzp then
		//a is nonzero
		t := b[i]/a[i];
		if ( t*a eq b ) then 
			return t; 
		else
			return false;
		end if;
	elif IsZero(b) then
		//a and b both zero
		return One(BaseRing(a));
	else
		//a is zero, b is not
		return false;
	end if;
end function;

findeigenv := function(h, x)
	if IsZero(x) then return 0; end if;
	return ismultof(x, x*h);
end function;
mult_dim_eigenspc_byev := function(ev)
	local dup, todo, p;

	dup := []; todo := {1..#ev};
	while #todo gt 0 do
		i := Representative(todo);
		p := [ j : j in [1..#ev] | ev[j] eq ev[i] ];
		if #p gt 1 then
			Append(~dup, p);
		end if;
	
		todo diff:= Seqset(p);
	end while;

	return dup;
end function;
mult_dim_eigenspc := function(CBD)
	return mult_dim_eigenspc_byev(CBD`EigenVectors);
end function;

findeigenspcLH := function(L, H)
	//H should be a splitting cartan subalgebra
	//Note that the result assumes H to be acting from the *right*
	//This returns a basis of L on which the basis elements of H
	// act diagonally.
	local Hb,Lb, arL, espcs, evls, rcart,
		espos,
		i,j,v,
		F, LHS, RHS;

	if Type(H) cmpeq SeqEnum then
		Hb := [ L!b : b in H ];
	else
		Hb := [ L!b : b in Basis(H) ];
	end if;
	Lb := Basis(L);
	arL := AdjointRepresentation(L : ComputePreImage := false);
	F := BaseRing(L);


	espcs, evls := simdiag([ arL(b) : b in Hb]);
	rpos := [L|]; rvals := [];
	for i in [1..#espcs] do 
		try
			rpos cat:= [ L | b : b in Basis(espcs[i]) ];
			rvals cat:= [ Vector(evls[i]) : j in [1..Dimension(espcs[i])] ];
		catch errr
			//This happens if the field was enlarged by findeigenspcLH, 
			// i.e. H was not a proper SplittingCartanSubalgebra.
			error "H was not a SCSA in findeigenspcLH";
		end try;
	end for;
	rcart := Hb;

	/* Check */
	for i in [1..#rcart] do for j in [1..#rpos] do
		v := findeigenv(rcart[i],rpos[j]);
		if v cmpeq false then
			printf "Diagonalization failed! i = %o, j = %o\n", i,j;
			return false, _, _;
		end if;
	end for; end for;

	return rpos, rvals, rcart;
end function;

rand_fullrank_mat := function(F, n)
	repeat
		if Characteristic(F) gt 0 then
			R := RandomMatrix(F, n, n);
		elif Type(F) in { FldRat, FldRe } then
			R := RandomMatrix(GF(5), n, n);
			R := ChangeRing(ChangeRing(R, Integers()), F);
		else
			error Sprintf("rand_fullrank_mat does not work over field %o\n", F);
		end if;
	until Rank(R) eq n;
	return R^-1;
end function;

function distort_liealg(L, H)
	local es, ev, F, dim, dup, p, T, i,
		BasisNew, LNew, HNew, transf, dist_to_orig, orig_to_dist;

	es,ev := findeigenspcLH(L, H);
	dim := Dimension(L);
	F := BaseRing(L);

	/* mess up eigenspaces (this includes cart) */
	dup := mult_dim_eigenspc_byev(ev);
	for p in dup do
		T := rand_fullrank_mat(F, #p)*Matrix(es[p]);
		for i in [1..#p] do es[p[i]] := T[i]; end for;
	end for;

	/* compute new basis */
	BasisNew := [ Vector(e) : e in es ];
	LNew, transf, dist_to_orig, orig_to_dist := ChangeBasisLie(L, BasisNew);
	HNew := sub<LNew | [ LNew!Vector(orig_to_dist(L!h)) : h in Basis(H)]>;

	return LNew, HNew, transf, dist_to_orig, orig_to_dist;
end function;

function fully_distort_liealg(L, H)
	local T, LNew, HNew, transf, dist_to_orig, orig_to_dist;

	T := rand_fullrank_mat(BaseRing(L), Dimension(L));
	LNew, transf, dist_to_orig, orig_to_dist := ChangeBasisLie(L, T);
	HNew := sub<LNew | [ LNew!Vector(orig_to_dist(L!h)) : h in Basis(H)]>;

	return LNew, HNew, transf, dist_to_orig, orig_to_dist;
end function;

function standard_liealg_distorted(R, F : FullDistort := true) //-> AlgLie, AlgLie, Rec
/* Creates the Lie algebra with Root datum R over the field F and distorts it.
  Returned are the distorted Lie algebra an its SCSA */
	local Lin, Hin, cin, CBDin, L, H, CBD;

	Lin := LieAlgebra(R,F);
	_,_,cin := StandardBasis(Lin);
	Hin := sub<Lin|cin>;
	if FullDistort then	L,H := fully_distort_liealg(Lin, Hin);
	else				L,H := distort_liealg(Lin, Hin);
	end if;

	return L,H, Lin, Hin;
end function;

/*
 * all isogenies of a given type
 */ 
allisogs := function(tp)
	assert Type(tp) eq MonStgElt;
	fg := FundamentalGroup(tp);
	sg := Subgroups(fg);
	Rs := [* *];
	for s in sg do
		_,phi := sub<fg | s`subgroup>;
		Append(~Rs, RootDatum(tp : Isogeny := phi));
	end for;
	return Rs;
end function;

/*
 * Testing isomorphism.
 */
isisomLie := function(phi)
	assert Type(Domain(phi)) eq AlgLie;
	assert Type(Codomain(phi)) eq AlgLie;
	
	L := Domain(phi); M := Codomain(phi);
	
	ok := Dimension(L) eq Dimension(M);
	ok := ok and forall{1:b,c in Basis(L) | phi(b)*phi(c) eq phi(b*c) };
	ok := ok and Rank(Matrix([ Vector(phi(b)) : b in Basis(L)])) eq Dimension(M);
	return ok;
end function;

checkRootDtmwrtLieAlg := function(L, H, R2)
	local p,n,c;
	p,n,c := ChevalleyBasis(L, H, R2);
	return IsChevalleyBasis(L, R2, p,n,c);
end function;


/* 
 * The fields and root data to be tested
 */
RD4 := allisogs("D4");
FQ := Rationals();
F2 := GF(2,4);
F3 := GF(3);
F101 := GF(101);
TODO := [*
<RootDatum("A1" : Isogeny := "Ad"), [* FQ, F2, F3, F101 *]>,
<RootDatum("A1" : Isogeny := "SC"), [* FQ, F2, F3, F101 *]>,
<RootDatum("A2" : Isogeny := "Ad"), [* FQ, F2, F3, F101 *]>,
<RootDatum("A2" : Isogeny := "SC"), [* FQ, F2, F3, F101 *]>,
<RootDatum("A3" : Isogeny := "Ad"), [*     F2, F3, F101 *]>,
<RootDatum("A3" : Isogeny := 2)   , [*     F2, F3, F101 *]>,
<RootDatum("A3" : Isogeny := "SC"), [*     F2, F3, F101 *]>,
<RootDatum("B2" : Isogeny := "Ad"), [* FQ, F2, F3, F101 *]>,
<RootDatum("B2" : Isogeny := "SC"), [* FQ, F2, F3, F101 *]>,
<RootDatum("B3" : Isogeny := "Ad"), [*     F2, F3, F101 *]>,
<RootDatum("B3" : Isogeny := "SC"), [* FQ, F2, F3, F101 *]>,
<RootDatum("C4" : Isogeny := "Ad"), [* FQ, F2           *]>,
<RootDatum("C4" : Isogeny := "SC"), [*     F2, F3, F101 *]>,
<RD4[1]                           , [* FQ, F2, F3, F101 *]>,
<RD4[2]                           , [*     F2, F3       *]>,
<RD4[3]                           , [* FQ, F2, F3       *]>,
<RD4[4]                           , [*     F2, F3, F101 *]>,
<RD4[5]                           , [*     F2, F3, F101 *]>,
<RootDatum("E6" : Isogeny := "Ad"), [*     F2           *]>,
<RootDatum("E6" : Isogeny := "SC"), [*         F3       *]>,
<RootDatum("F4" : Isogeny := "Ad"), [* FQ, F2, F3, F101 *]>,
<RootDatum("F4" : Isogeny := "SC"), [*         F3       *]>,
<RootDatum("G2" : Isogeny := "Ad"), [* FQ, F2, F3, F101 *]>,
<RootDatum("G2" : Isogeny := "SC"), [* FQ               *]>
*];


/*
 *  The actual test
 */
for tup in TODO do
	R := tup[1];
	for F in tup[2] do
		t0 := Cputime();
		
		sd1, sd2 := GetSeed();
		printf "seed: (%o, %o); R = %o, F = %o\n", sd1, sd2, R, F;
		chr := Characteristic(F);
		npr := NumPosRoots(R);
		
		/* Check default, cached Chevalley basis */
		L := LieAlgebra(R, F);
		p,n,c := ChevalleyBasis(L);
		assert IsChevalleyBasis(L, R, p,n,c);
		
		/* Check computed ChevalleyBasis */
		L, H, L0, H0 := standard_liealg_distorted(R, F : FullDistort := (2*npr + Rank(R) le 20));
		p0,n0,c0 := ChevalleyBasis(L0, H0, R);
		assert IsChevalleyBasis(L0, R, p0, n0, c0);
		B0 := Matrix([ Vector(v) : v in p0 cat n0 cat c0 ]);

		/* 1st, try recognition -- not always since it's rather slow*/
		if chr eq 0 then
			t := SemisimpleType(L);
			R2 := RootDatum(t);
			assert checkRootDtmwrtLieAlg(L, H, R2);
		end if;
		if Dimension(L) lt 50 then
			R3 := ReductiveType(L, H : AssumeAlmostSimple);
		end if;
	
		/* 2nd. check whether ChevalleyBasis(L,H,R) does what it should do */
		p,n,c := ChevalleyBasis(L, H, R);
		assert IsChevalleyBasis(L, R, p, n, c);
	
		/* 3rd. Check that two Chev. bases give an isom */
		B1 := Matrix([ Vector(v) : v in p cat n cat c ]);
		T := (B0^-1)*B1;
		phi := map<L0 -> L | x :-> L!(Vector(L0!x)*T)>;
		assert isisomLie(phi);
		
		/* 4th. Print runtime */
		printf "  Took %o s\n", Cputime() - t0;
	end for; 
end for;



