//Standard generators of A7 are a and b where a is in class 3A, b has order 5
//and ab has order 7.
//Standard generators of the double cover 2.A7 are preimages A and B where A has
//order 3, B has order 5 and AB has order 7. Any two of these conditions implies
//the third.
//Standard generators of the triple cover 3.A7 are preimages A and B where B has
//order 5 and AB has order 7.
//Standard generators of the sextuple cover 6.A7 are preimages A and B where B
//has order 5 and AB has order 7.
_LR := rec < recformat< F: GrpFP, AI: SeqEnum, G: GrpMat > |
      F := FreeGroup(2) >;
_LR`AI := [ [ a^-1, b ] ] where a is (_LR`F).1 where b is (_LR`F).2;
//one constituent

_LR`G :=
/*
Original group: c9Group("2a7p")
Recomputed by direct ARR method
Schur index: 2
Character: ( 20, -20, 2, 2, 0, 0, -2, -2, -1, -1, 0, 0, 0, 0, 1, 1 )
*/
MatrixGroup<20, K | [
Matrix(K,20,20,
[[-1,0],[0,0],[1,0],[0,0],[1,1],[0,0],[1,0],
[0,0],[0,0],[0,0],[-1,0],[0,0],[1,0],[-1,-1],
[0,1],[-1,0],[0,0],[0,0],[0,0],[0,-1],[-2,-2
],[0,0],[0,1],[0,0],[0,1],[0,0],[1,1],[0,0],
[0,0],[0,0],[-1,-1],[0,0],[1,1],[0,0],[-1,0],
[-1,-1],[0,0],[0,0],[0,0],[1,0],[1,5],[-1,-2
],[0,2],[-1,-1],[1,-1],[0,-2],[-1,-1],[-1,0],[
0,-1],[2,1],[0,1],[0,1],[-1,-1],[2,3],[1,0],[
1,1],[-1,-1],[-1,0],[1,1],[-1,1],[-2,-2],[0,0
],[1,1],[1,0],[0,1],[0,0],[1,1],[0,0],[0,0],
[0,0],[-1,-1],[0,0],[1,1],[0,-1],[-1,0],[-1,-1
],[0,0],[0,0],[0,0],[1,0],[2,2],[-1,0],[0,0
],[0,0],[-1,-1],[-1,-1],[0,0],[0,1],[-1,-1],[
1,-1],[1,1],[0,0],[0,-1],[2,1],[0,-1],[0,0],[
-1,0],[0,0],[1,0],[1,1],[6,5],[-1,1],[3,2],[
1,1],[-1,-1],[-1,-1],[-2,-2],[1,1],[-2,-1],[1,
-1],[2,2],[0,0],[-2,-2],[2,0],[1,0],[1,1],[
-1,1],[0,1],[0,-1],[0,0],[-2,-3],[1,-1],[-2,-3
],[0,0],[0,0],[2,3],[0,-1],[0,0],[2,1],[-1,1
],[-1,-1],[-1,0],[1,0],[-2,-2],[-1,0],[0,0],[
1,1],[0,-1],[-1,0],[0,-1],[1,1],[-1,-1],[-1,-1
],[-2,-1],[0,-1],[-2,-1],[1,1],[0,1],[0,0],[
-1,-2],[0,0],[0,0],[0,0],[1,0],[-1,-1],[0,0],
[0,0],[0,0],[1,0],[1,1],[-5,-4],[1,-1],[-1,-1
],[1,-1],[2,1],[2,0],[1,1],[-1,-2],[2,1],[-1,
1],[-2,-1],[-1,0],[2,2],[-3,0],[0,1],[-1,-1],[
1,-1],[0,0],[-1,1],[-1,0],[-4,-5],[1,-1],[-3,-1
],[1,1],[0,2],[4,3],[0,1],[1,-1],[2,1],[0,2
],[-1,-2],[0,0],[1,2],[-3,-1],[-1,0],[0,-1],[
2,0],[-1,-1],[-1,0],[-1,-1],[-2,0],[0,-1],[0,0
],[1,0],[1,1],[2,0],[0,0],[-1,-2],[1,0],[2,2
],[0,0],[0,0],[2,1],[0,2],[1,0],[0,0],[0,-1
],[0,0],[0,1],[-1,0],[-3,-1],[0,0],[1,1],[-1,
0],[1,0],[-1,1],[2,0],[0,1],[1,1],[-2,0],[-1,
0],[0,0],[2,1],[0,-1],[-1,1],[-2,-1],[0,0],[
0,0],[0,0],[1,-1],[0,-2],[1,2],[0,-2],[0,-1],
[1,1],[-2,-1],[1,1],[-1,-1],[-1,1],[-1,-2],[1,
0],[0,-1],[0,0],[0,0],[0,-1],[0,0],[0,0],[1,
0],[0,0],[0,0],[3,2],[-2,-1],[1,1],[-1,0],[
-1,-1],[-2,-1],[-1,0],[0,1],[-1,-1],[1,0],[0,0
],[1,1],[-1,0],[1,0],[0,0],[0,0],[-1,0],[0,1
],[1,0],[1,1],[1,1],[-1,2],[1,-2],[1,-1],[2,0
],[-2,-3],[0,-1],[-2,-1],[-2,-1],[0,-3],[0,2],[
0,-1],[0,-3],[0,0],[1,0],[0,1],[-1,0],[1,0],[
0,0],[0,0],[1,-1],[0,0],[-1,-2],[-1,-2],[0,-1
],[-1,-1],[0,0],[-1,0],[0,0],[-1,-2],[0,-1],[
-1,0],[0,-1],[1,0],[-1,-1],[0,0],[0,1],[1,0],
[0,0],[1,1],[-5,-1],[1,-2],[-4,0],[0,-1],[0,1
],[3,0],[-2,-1],[-1,-1],[1,-1],[3,4],[-1,-1],[
0,1],[-1,-1],[-1,2],[0,0],[0,0],[0,-1],[-2,-2
],[1,2],[-1,0],[-5,-4],[3,0],[-3,0],[1,1],[-2,
2],[4,3],[-1,0],[2,0],[1,0],[0,3],[-1,-2],[
-1,0],[-1,0],[-2,-1],[0,1],[0,0],[2,1],[-1,-2
],[-1,0],[-1,-2],[4,4],[-1,1],[1,1],[2,2],[-2,
-1],[1,0],[-2,-2],[2,1],[-2,-2],[2,0],[1,2],[
0,0],[-2,-3],[1,0],[2,1],[2,2],[0,1],[0,0],[
0,-1],[-1,-1],[2,3],[-2,0],[1,2],[1,0],[0,-1],
[-1,-2],[-1,-1],[-1,0],[-1,-1],[1,-1],[1,1],[0,
0],[0,-1],[2,1],[-1,-1],[0,0],[-1,0],[-1,0],[
1,0],[1,1]]),
Matrix(K,20,20,
[[-3,0],[0,-2],[-3,-1],[-2,-2],[0,0],[1,0],[
-1,0],[0,1],[1,0],[0,0],[-1,-1],[0,1],[-1,-1],
[0,0],[-1,0],[0,0],[1,1],[-1,-1],[1,1],[0,0],
[-2,-2],[0,-1],[-2,-3],[0,-1],[1,0],[0,1],[0,
-1],[-2,-1],[1,1],[-1,0],[0,0],[-1,0],[1,0],[
-1,0],[-1,-1],[0,0],[0,0],[0,-1],[0,1],[0,0],
[2,1],[-2,1],[1,4],[0,1],[-1,-1],[-1,-1],[0,0
],[1,1],[-1,-1],[0,1],[0,0],[1,1],[-1,0],[1,1
],[0,1],[0,0],[-1,-1],[0,1],[0,-1],[1,1],[0,1
],[0,1],[0,-1],[0,-1],[0,-1],[1,0],[-1,-1],[
-1,1],[0,-1],[2,0],[0,1],[0,0],[1,-2],[1,1],[
0,0],[0,0],[-1,0],[0,0],[1,1],[0,0],[2,0],[
-1,1],[0,-1],[0,0],[0,0],[-2,-1],[1,0],[-1,-1
],[-1,0],[-1,-1],[1,1],[0,0],[0,0],[0,0],[0,
-1],[0,0],[-1,-1],[1,0],[0,0],[1,1],[-1,1],[
-1,1],[-1,3],[-2,2],[-1,-2],[-2,1],[1,-1],[1,2
],[0,0],[-3,1],[0,1],[1,1],[-1,0],[0,0],[0,2
],[0,1],[0,0],[-1,-1],[0,-1],[1,-1],[0,1],[1,
-1],[3,2],[1,-1],[1,3],[1,-2],[0,2],[0,-2],[
0,0],[3,0],[-1,-2],[0,-1],[1,2],[1,0],[0,-1],
[0,-1],[0,0],[0,1],[0,0],[0,1],[1,-1],[1,1],
[0,-1],[0,-1],[-1,0],[-1,-1],[0,0],[0,0],[-1,0
],[0,-1],[1,0],[0,0],[-1,-1],[1,0],[0,-1],[0,
0],[-1,0],[1,0],[0,0],[1,1],[5,7],[-2,-1],[4,
3],[0,1],[0,-1],[0,-2],[-1,0],[1,1],[-1,-2],[
3,0],[0,2],[1,0],[0,-1],[2,1],[2,1],[1,1],[
0,0],[0,2],[1,0],[-1,0],[0,0],[0,-2],[2,-2],[
0,-3],[4,3],[0,-2],[1,2],[-3,-3],[1,1],[2,-2],
[-2,-2],[-1,-1],[3,2],[0,0],[-1,-2],[-1,-1],[0,
0],[1,1],[0,1],[0,1],[3,1],[-2,-1],[1,-1],[0,
0],[1,0],[-1,-1],[1,1],[-1,-1],[0,0],[0,-1],[
0,0],[0,0],[1,1],[0,0],[0,-1],[0,0],[0,-1],[
1,1],[0,0],[0,1],[-3,-3],[2,0],[-3,-4],[0,-2],
[-1,-1],[2,2],[-2,-2],[-1,0],[2,1],[0,1],[1,-1
],[-1,0],[0,-2],[0,0],[-1,-1],[0,0],[0,1],[0,
-1],[0,1],[0,0],[-2,-3],[1,-1],[-3,-3],[1,1],[
-1,0],[2,3],[0,-1],[1,0],[1,1],[-2,1],[1,0],[
-1,0],[0,0],[-2,-1],[0,0],[0,0],[1,0],[0,-1],
[-1,0],[-1,-1],[-1,0],[1,1],[2,1],[0,0],[0,1
],[-1,-1],[0,1],[1,0],[-1,0],[0,-1],[0,1],[1,
0],[-1,0],[0,-1],[1,1],[0,0],[1,1],[0,0],[0,
0],[0,-1],[2,4],[-2,0],[-1,1],[-2,3],[-1,-2],[
-1,0],[2,0],[2,2],[-1,-2],[-2,-1],[0,3],[1,0],
[0,-1],[0,0],[1,2],[0,1],[0,-1],[0,0],[1,-1],
[0,-1],[2,0],[1,2],[2,2],[2,3],[-1,0],[0,1],
[1,0],[1,0],[-1,0],[0,1],[1,1],[0,-1],[0,1],
[0,0],[1,0],[1,0],[-1,-1],[0,0],[-1,-1],[0,0
],[0,0],[-3,-3],[1,-1],[1,-2],[4,4],[1,-3],[1,
2],[-3,-4],[0,-1],[3,-1],[-3,-2],[-1,0],[3,1],
[-1,0],[-1,-1],[-1,-1],[0,-1],[1,1],[0,1],[0,1
],[0,0],[0,-1],[-1,-2],[2,-1],[2,0],[1,0],[0,
-1],[-3,-1],[1,1],[1,0],[1,0],[-2,-1],[2,0],[
0,2],[-1,-2],[0,-1],[-1,-1],[-1,0],[0,1],[-1,1
],[2,6],[-5,-2],[0,6],[-2,3],[0,-1],[-2,-1],[
2,0],[1,2],[-1,-2],[-1,1],[-1,2],[1,1],[0,1],
[0,1],[0,2],[0,0],[-1,-2],[-2,0],[1,-1],[1,0
],[1,2],[-3,1],[-1,0],[-3,1],[1,-2],[-3,-1],[
2,-1],[-2,1],[-1,-2],[-1,-1],[-2,2],[1,1],[1,-2
],[1,1],[0,1],[0,2],[-2,-1],[1,-1],[1,0],[2,0
]])
]> where w := K.1 where K := ext<K|Polynomial(K, [1, 1, 1])> where K is 
RationalField();

return _LR;
