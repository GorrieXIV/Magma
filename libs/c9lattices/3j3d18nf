//Standard generators of the Janko group J3 are a and b where a has order 2, b
//Elements of ordfer 6,12 or 15 power to 3A
//is in class 3A, ab has order 19 and ababb has order 9.
//Elements of ordfer 6,12 or 15 power to 3A
//Standard generators of the triple cover 3.J3 are preimages A and B where A has
//order 2 and B is in class +3A.  The condition that B is in class +3A is
//equivalent to the condition that ABABABB has order 17.

_LR := rec < recformat< F: GrpFP, AI: SeqEnum, G: GrpMat > |
      F := FreeGroup(2) >;
_LR`AI := [ [a, b^-1] ] where a is (_LR`F).1 where b is (_LR`F).2;

//four constituents, interchanged in two pairs by _LR`AI[1]
_LR`G :=
/*
Original group: c9Group("3j3p")
From DB /nb/reps/d18.3J3.ext25840.denom18.M
Schur index: 1
Character: ( 18, 2, 18*zeta(15)_3, -18*zeta(15)_3 - 18, 3*zeta(15)_3, 
-3*zeta(15)_3 - 3, 3, 0, -2, -zeta(15)_5^3 - zeta(15)_5^2, zeta(15)_5^3 + 
zeta(15)_5^2 + 1, -2*zeta(15)_3 - 2, 2*zeta(15)_3, zeta(15)_3 + 1, -zeta(15)_3, 
-1, 0, 0, 0, 0, -zeta(15)_5^3 - zeta(15)_5^2 - 1, zeta(15)_5^3 + zeta(15)_5^2, 
2*zeta(15)_3 + 2, -2*zeta(15)_3, -zeta(15)_3 - 1, zeta(15)_3, 1, 
-zeta(15)_3*zeta(15)_5^3 - zeta(15)_3*zeta(15)_5^2 - zeta(15)_3 - zeta(15)_5^3 -
zeta(15)_5^2 - 1, zeta(15)_3*zeta(15)_5^3 + zeta(15)_3*zeta(15)_5^2 + 
zeta(15)_3, zeta(15)_3*zeta(15)_5^3 + zeta(15)_3*zeta(15)_5^2 + zeta(15)_5^3 + 
zeta(15)_5^2, -zeta(15)_3*zeta(15)_5^3 - zeta(15)_3*zeta(15)_5^2, -zeta(15)_5^3 
- zeta(15)_5^2, zeta(15)_3*zeta(15)_5^3 + zeta(15)_3*zeta(15)_5^2 + zeta(15)_5^3
+ zeta(15)_5^2, -zeta(15)_3*zeta(15)_5^3 - zeta(15)_3*zeta(15)_5^2, zeta(15)_5^3
+ zeta(15)_5^2 + 1, -zeta(15)_3*zeta(15)_5^3 - zeta(15)_3*zeta(15)_5^2 - 
zeta(15)_3 - zeta(15)_5^3 - zeta(15)_5^2 - 1, zeta(15)_3*zeta(15)_5^3 + 
zeta(15)_3*zeta(15)_5^2 + zeta(15)_3, 1, 1, -1, -1, 0, 0, 
zeta(15)_3*zeta(15)_5^3 + zeta(15)_3*zeta(15)_5^2, -zeta(15)_3*zeta(15)_5^3 - 
zeta(15)_3*zeta(15)_5^2 - zeta(15)_3, zeta(15)_3*zeta(15)_5^3 + 
zeta(15)_3*zeta(15)_5^2 + zeta(15)_3 + zeta(15)_5^3 + zeta(15)_5^2 + 1, 
-zeta(15)_3*zeta(15)_5^3 - zeta(15)_3*zeta(15)_5^2 - zeta(15)_5^3 - 
zeta(15)_5^2, -zeta(15)_3 - 1, -zeta(15)_3 - 1, zeta(15)_3, zeta(15)_3, 
zeta(15)_3 + 1, -zeta(15)_3, -zeta(15)_3, zeta(15)_3 + 1 )
*/

MatrixGroup<18,K | [
Matrix(SparseMatrix(K,18,18,[<1,16,1/2*(-w^3 + 2*w^2 - 2*w +
1)>,<2,17,1/2*(-w^3 + 2*w^2 - 2*w + 1)>,<3,8,-1>,<4,5,
1/2*(w^3 - 2*w^2 + 2*w + 1)>,<5,4,1/2*(-w^3 + 2*w^2 - 2*w +
1)>,<6,14,1/2*(-w^3 + 2*w^2 - 2*w - 1)>,<7,12,1/2*(-w^3 +
2*w^2 - 2*w - 1)>,<8,3,-1>,<9,11,1/2*(-w^3 + 2*w^2 - 2*w +
1)>,<10,13,1/2*(-w^3 + 2*w^2 - 2*w - 1)>,<11,9,1/2*(w^3 -
2*w^2 + 2*w + 1)>,<12,7,1/2*(w^3 - 2*w^2 + 2*w - 1)>,<13,10,
1/2*(w^3 - 2*w^2 + 2*w - 1)>,<14,6,1/2*(w^3 - 2*w^2 + 2*w -
1)>,<15,15,1>,<16,1,1/2*(w^3 - 2*w^2 + 2*w + 1)>,<17,2,
1/2*(w^3 - 2*w^2 + 2*w + 1)>,<18,18,1>])),Matrix(K,18,18,
[[2/9,0,0,0],[1/9,4/9,-2/9,1/9],[1/18,2/9,
-1/9,1/18],[-1/6,-4/9,2/9,-1/6],[-1/6,-2/9,1/9,
-1/6],[1/6,-1/9,0,1/18],[-1/18,0,-1/9,1/18],[1/6,
-2/9,0,1/18],[1/3,-1/9,0,1/9],[0,1/3,-1/9,1/9],
[-1/9,1/9,-1/9,0],[1/9,-1/3,2/9,-1/9],[0,1/3,
-1/9,1/9],[0,-2/9,1/9,0],[-1/9,-1/3,1/9,-1/9],
[1/9,2/9,-2/9,1/9],[1/9,-1/9,1/9,0],[1/18,2/9,
-1/9,1/18],[-2/9,2/9,0,0],[-1/18,-1/9,1/9,-1/18],
[1/18,1/9,-1/9,1/18],[1/6,1/9,0,1/18],[1/3,2/9,
0,1/9],[-2/9,2/9,-2/9,0],[1/6,-1/9,0,1/18],[
-2/9,0,0,0],[2/9,0,0,0],[1/18,2/9,-1/9,1/18],
[-1/18,1/9,-1/9,1/18],[1/6,-1/9,0,1/18],[1/18,
2/9,-1/9,1/18],[-1/6,-1/9,0,-1/18],[-5/18,0,1/9,
-1/18],[1/9,1/9,-1/9,1/9],[2/9,-4/9,4/9,-2/9],
[-1/9,-2/9,2/9,-1/9],[0,-2/9,1/9,-1/9],[-1/9,0,
0,0],[-1/18,0,0,-1/6],[1/9,-1/9,1/9,0],[-5/18,
-2/9,2/9,-1/6],[-2/9,4/9,-2/9,1/9],[1/3,1/3,-2/9,
2/9],[1/18,-1/9,1/9,-1/18],[-1/18,1/9,-1/9,1/18],
[1/6,1/9,0,1/18],[2/9,-2/9,2/9,-1/9],[0,-1/3,1/9,
-1/9],[1/6,1/9,0,1/18],[-1/9,1/9,-1/9,0],[1/6,
1/3,-2/9,1/6],[5/18,2/9,0,1/6],[1/9,2/9,-2/9,1/9],
[1/9,0,0,0],[-2/9,-1/3,2/9,-2/9],[1/9,-1/9,0,0],
[-1/9,1/9,0,0],[1/18,-1/9,1/9,-1/18],[1/9,-2/9,
2/9,-1/9],[1/9,2/9,-2/9,1/9],[1/9,1/9,-2/9,1/9],
[1/3,2/9,-1/9,1/9],[1/6,1/9,1/9,1/18],[1/9,0,0,
0],[-1/9,-1/9,1/9,-1/9],[-2/9,4/9,-2/9,1/9],[1/9,
0,0,0],[1/9,-2/9,2/9,-1/9],[-1/6,0,-1/9,-1/18],
[-1/9,2/9,-1/9,0],[-2/9,-2/9,2/9,-2/9],[2/9,-2/9,
0,0],[-1/9,-1/3,1/9,-1/9],[2/9,-2/9,0,0],[-1/18,
-4/9,1/3,-1/6],[1/9,-2/9,2/9,-1/9],[1/18,-1/9,1/9,
-1/18],[-1/9,-2/9,2/9,-1/9],[2/9,-4/9,2/9,-1/9],[
0,-2/9,1/9,-1/9],[0,2/9,-1/9,1/9],[-1/9,0,0,0],
[-1/18,1/9,-1/9,-1/18],[-1/9,-1/9,2/9,-1/9],[-1/9,
0,0,0],[-1/9,2/9,-2/9,1/9],[1/6,0,1/9,1/18],
[-1/18,4/9,-2/9,1/6],[-1/9,-1/9,1/9,-1/9],[-2/9,
2/9,0,0],[-1/9,2/9,-1/9,0],[-2/9,-2/9,2/9,-2/9],
[7/18,-1/9,1/9,1/18],[-2/9,0,0,0],[2/9,0,0,0],
[1/18,-1/9,1/9,-1/18],[5/18,2/9,-2/9,1/6],[-1/9,
1/9,0,0],[1/9,-1/9,0,0],[1/18,1/9,-1/9,1/18],[
-1/6,1/9,-2/9,1/18],[-1/18,-1/9,1/9,-1/6],[1/18,1/9,
-1/9,1/18],[2/9,0,0,0],[1/3,1/9,0,1/9],[-1/18,
2/9,0,1/18],[0,2/9,-1/9,1/9],[2/9,2/9,-2/9,2/9],
[-1/18,0,-1/9,1/18],[-1/9,2/9,-1/9,0],[-7/18,-2/9,
1/9,-1/6],[1/6,-1/9,2/9,-1/18],[1/3,4/9,-2/9,2/9],
[5/18,-2/9,2/9,-1/18],[1/9,2/9,-2/9,1/9],[-1/9,
-1/3,1/9,-1/9],[-1/18,0,-1/9,-1/18],[-1/9,1/9,0,
0],[2/9,1/9,0,1/9],[-1/18,-1/9,1/9,-1/18],[-1/9,
1/9,0,0],[1/6,1/9,1/9,1/18],[1/18,2/9,-1/9,1/18],
[5/18,0,0,1/18],[-2/9,-1/9,0,-1/9],[1/9,-2/9,1/9,
0],[5/18,2/9,0,1/6],[1/9,2/9,-2/9,1/9],[1/18,1/9,
-1/9,1/18],[0,4/9,-1/3,2/9],[-1/6,-1/9,0,-1/18],
[1/9,-1/9,1/9,0],[1/6,-1/9,0,1/18],[-1/18,0,0,
-1/6],[1/18,1/3,-1/3,1/6],[1/18,2/9,-1/9,1/18],
[-1/18,1/9,-1/9,1/18],[0,5/9,-1/3,2/9],[1/18,2/9,
-1/9,1/18],[1/6,5/9,-1/3,5/18],[-1/9,1/3,-2/9,1/9],
[1/9,1/9,-1/9,1/9],[1/18,-1/9,1/9,-1/18],[1/18,1/9,
-1/9,1/18],[7/18,1/9,0,1/6],[-1/9,-2/9,2/9,-1/9],
[-1/18,-1/9,1/9,-1/18],[0,2/9,0,1/9],[1/6,1/9,0,
1/18],[-1/9,1/9,-1/9,0],[0,1/9,0,1/9],[1/18,-1/3,
1/3,-1/6],[11/18,0,0,1/6],[-1/18,-2/9,1/9,-1/18],
[1/18,-1/9,1/9,-1/18],[-1/6,1/9,0,-1/18],[-1/18,
-2/9,1/9,-1/18],[-1/6,1/9,0,1/18],[-1/18,0,-1/9,
1/18],[-1/9,-1/9,1/9,-1/9],[-1/18,1/9,-1/9,1/18],
[-1/18,-1/9,1/9,-1/18],[-1/9,-1/3,1/9,-1/9],[-1/9,
1/9,0,0],[1/9,-1/9,0,0],[-1/18,1/9,-1/9,1/18],
[1/18,-1/9,1/9,-1/18],[1/18,1/9,-1/9,1/18],[1/18,
2/9,-1/9,1/18],[0,-2/9,1/9,-1/9],[0,2/9,-1/9,
1/9],[5/9,0,0,0],[1/9,1/9,-1/9,1/9],[1/18,2/9,
-1/9,1/18],[-4/9,0,0,0],[1/18,-1/9,1/9,-1/18],
[0,-1/3,1/9,-1/9],[1/9,-2/9,1/9,0],[-1/9,-1/9,
1/9,-1/9],[-2/9,2/9,0,0],[-1/9,-1/9,1/9,-1/9],
[-1/18,1/9,-1/9,1/18],[2/9,2/9,-2/9,1/9],[-1/18,
-2/9,1/9,-1/18],[1/18,-1/9,-1/9,1/18],[1/6,-1/9,0,
-1/18],[-1/6,-2/9,1/9,-1/6],[-1/18,-1/9,1/9,-1/18],
[1/18,1/9,-1/9,1/18],[1/9,-1/9,1/9,0],[11/18,0,0,
1/6],[0,1/9,1/9,0],[1/9,-1/9,1/9,0],[1/18,2/9,
-1/9,1/18],[-1/18,0,0,1/18],[-1/6,4/9,-2/9,1/18],
[2/9,0,0,0],[1/18,-1/9,1/9,-1/18],[1/9,-1/3,2/9,
-1/9],[-1/9,2/9,-1/9,0],[1/9,-2/9,1/9,0],[-1/3,
-4/9,2/9,-2/9],[-1/6,1/9,-2/9,1/18],[-1/18,1/9,
-1/9,-1/18],[-1/18,-1/9,1/9,-1/18],[-5/18,1/3,-2/9,
1/18],[1/9,1/3,-1/9,1/9],[-1/9,1/9,0,0],[1/18,
1/9,0,-1/18],[1/9,2/9,-2/9,1/9],[-1/9,1/9,0,0],
[-1/3,-2/9,1/9,-1/9],[1/18,2/9,-1/9,1/18],[-1/18,
0,0,1/18],[-2/9,-1/9,0,-1/9],[1/9,-2/9,1/9,0],
[-1/9,-1/3,1/9,-1/9],[-1/9,1/9,0,0],[1/9,-1/9,0,
0],[-1/18,1/9,-1/9,1/18],[1/18,-1/9,1/9,-1/18],
[1/18,1/9,-1/9,1/18],[1/18,2/9,-1/9,1/18],[0,
-2/9,1/9,-1/9],[0,2/9,-1/9,1/9],[-4/9,0,0,0],
[1/9,1/9,-1/9,1/9],[1/18,2/9,-1/9,1/18],[5/9,0,
0,0],[1/18,-1/9,1/9,-1/18],[0,-1/3,1/9,-1/9],[
1/9,-2/9,1/9,0],[-1/9,-1/9,1/9,-1/9],[-2/9,2/9,0,
0],[-1/9,0,1/9,-1/9],[-1/9,1/9,0,0],[1/9,-1/9,
0,0],[1/9,-2/9,2/9,-1/9],[-1/9,2/9,-2/9,1/9],
[-1/9,-2/9,2/9,-1/9],[1/18,-1/9,-1/9,1/18],[1/3,
4/9,-2/9,2/9],[1/6,-1/9,2/9,-1/18],[-1/9,0,0,0],
[1/9,1/9,-1/9,1/9],[-5/18,2/9,-1/9,1/18],[-1/9,0,
0,0],[1/18,-1/9,1/9,-1/18],[-1/6,1/3,-2/9,1/18],
[1/9,-2/9,1/9,0],[2/9,2/9,-2/9,2/9],[-2/9,2/9,0,
0],[1/6,-1/9,0,1/18],[1/9,-1/3,1/3,-1/9],[-5/18,
0,0,-1/18],[-1/9,0,1/9,-1/9],[1/9,0,-1/9,1/9],
[5/18,-1/9,0,1/18],[1/9,1/9,-1/9,1/9],[-1/9,1/3,
-2/9,1/9],[-1/18,0,-1/9,1/18],[1/9,-2/9,1/9,0],
[0,0,-1/9,0],[1/9,1/9,-1/9,1/9],[1/9,-2/9,1/9,0
],[-2/9,-1/3,2/9,-2/9],[1/18,1/9,-1/9,1/18],[1/6,
2/9,-1/9,1/6],[1/3,0,1/9,0],[-1/9,1/3,-1/3,1/9],
[1/9,-2/9,2/9,-1/9],[-1/6,-1/9,0,-1/18],[1/6,-2/9,
0,1/18],[1/6,-1/9,0,1/18],[1/3,1/9,0,1/9],[1/6,
0,1/9,1/18],[-1/6,-1/3,2/9,-1/6],[1/9,-1/9,1/9,
0],[-1/9,1/9,-1/9,0],[1/6,2/9,-1/9,1/6],[-5/18,
-4/9,2/9,-5/18],[0,0,-1/9,0],[1/6,2/9,-1/9,1/6],
[-1/6,1/9,0,-1/18],[-2/9,-1/9,0,-1/9],[2/9,0,0,
0],[1/9,4/9,-2/9,1/9],[1/6,1/9,0,1/18],[0,-2/9,
1/9,-1/9],[-4/9,0,0,0],[-2/9,0,0,0],[-2/9,2/9,
-2/9,0],[-1/9,1/9,-1/9,0],[-1/18,-2/9,1/9,-1/18],
[0,-1/3,1/9,-1/9],[1/18,-1/9,1/9,-1/18],[-1/18,
1/9,-1/9,1/18],[1/6,1/9,0,1/18],[-1/9,-2/9,2/9,
-1/9],[0,-1/3,1/9,-1/9],[1/6,1/9,0,1/18],[2/9,
-2/9,2/9,0],[-1/6,1/3,-2/9,1/6],[-2/9,2/9,0,0],
[-1/18,-1/9,1/9,-1/18],[-2/9,0,0,0],[1/9,1/9,-1/9,
1/9],[-1/9,2/9,-2/9,1/9],[-1/18,1/9,-1/9,1/18],[
-1/9,-4/9,2/9,-1/9],[1/9,4/9,-2/9,1/9],[-1/3,-2/9,
0,-1/9],[1/6,2/9,-1/9,1/6],[1/18,1/9,-1/9,1/18],
[-1/18,-1/9,1/9,-1/18],[2/9,-2/9,2/9,0],[-1/9,0,0,
0],[1/6,2/9,-1/9,1/6],[2/9,-2/9,2/9,0],[1/9,4/9,
-2/9,1/9],[-1/9,-1/3,1/3,-2/9],[0,2/9,-1/9,1/9],
[-2/9,0,0,0],[-1/18,1/9,-1/9,1/18]])
]> where w := K.1 where K := ext<K|Polynomial(K,[1,1,2,-1,1])>
where K is RationalField();

return _LR;
