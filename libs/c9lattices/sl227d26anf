//Standard generators of L2(27) are a and b where a has order 2, b has order 3
//and ab has order 7.
//Standard generators of the double cover 2.L2(27) = SL2(27) are preimages A and
//B where B has order 3 and AB has order 7.  

_LR := rec < recformat< F: GrpFP, AI: SeqEnum, G: GrpMat > |
      F := FreeGroup(2) >;
_LR`AI := [ [a^-1, b^-1], //PSL(2,27).2 = PGL(2,27)
        [a, a^-1*b^-1*a*b*a*b^-1*a*b*a*b*a*b^-1*a*b*a*b^-1*a*b*a*b^-1*a*b]]
                 //PSL(2,27).3 = PSigmaL(2,27)
             where a is (_LR`F).1 where b is (_LR`F).2;
//one constituent
_LR`G :=
/*
Original group: c9Group("sl227p")
Recomputed by BB method
Schur index: 2
Character: ( 26, -26, -1, -1, 0, 1, 1, -2, -2, -2, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 )
*/
MatrixGroup<26, K | [
Matrix(K,26,26,
[[-1/9,0],[-2/9,0],[0,1/3],[0,0],[0,0],[0,1/3],
[2/9,0],[1/9,0],[1/9,1/3],[-1/9,1/3],[0,0],[0,1/3
],[-2/9,0],[-1/9,-1/3],[2/3,0],[1/3,1/3],[-1/9,0],[
-2/9,0],[-1/9,0],[1/9,0],[-1/9,0],[-2/9,0],[1/9,1/3
],[-1/9,1/3],[2/9,0],[1/9,0],[2/9,0],[1/9,0],[
-1/3,-1/3],[0,-1/3],[0,1/3],[-1/3,0],[-1/9,0],[1/9,
0],[-2/9,0],[-1/9,-1/3],[0,1/3],[-1/3,0],[1/9,-1/3
],[2/9,0],[-1/3,1/3],[0,0],[2/9,0],[1/9,0],[-1/9,
0],[-2/9,0],[2/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[
-1/9,0],[1/9,0],[0,1/3],[0,0],[0,1/3],[0,0],[
2/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[0,-1/3],[0,
-1/3],[-2/9,0],[-1/9,-1/3],[2/3,0],[1/3,1/3],[2/9,0
],[1/9,0],[-1/9,0],[-2/9,0],[-1/9,0],[1/9,0],[1/9,
-1/3],[2/9,0],[-1/9,0],[1/9,0],[2/9,0],[1/9,0],[
-1/3,-1/3],[0,-1/3],[-1/3,-1/3],[0,-1/3],[-1/9,0],[
1/9,0],[1/9,-1/3],[2/9,0],[1/3,0],[1/3,1/3],[1/9,
-1/3],[2/9,0],[-1/3,1/3],[0,0],[-1/9,0],[1/9,0],[
2/9,0],[1/9,0],[-1/9,0],[-2/9,0],[1/9,1/3],[-1/9,
1/3],[-1/9,0],[-2/9,0],[-1/9,0],[1/9,0],[1/3,0],[
0,1/3],[-1/9,0],[1/9,0],[1/9,1/3],[-1/9,1/3],[0,
-1/3],[1/3,-1/3],[1/9,-1/3],[2/9,0],[-1/3,-1/3],[
-1/3,-1/3],[-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[
-1/9,0],[1/9,0],[1/9,-1/3],[2/9,0],[-1/9,0],[1/9,0
],[2/9,0],[1/9,0],[0,-1/3],[1/3,-1/3],[0,1/3],[0,
0],[-1/9,0],[-2/9,0],[-2/9,0],[-1/9,-1/3],[0,0],[
0,1/3],[1/9,1/3],[-1/9,1/3],[2/3,0],[1/3,1/3],[2/9,
0],[1/9,0],[2/9,0],[1/9,0],[-1/9,0],[-2/9,0],[
1/9,1/3],[-1/9,1/3],[-1/9,0],[-2/9,0],[-1/9,0],[1/9,
0],[0,0],[0,1/3],[-1/9,0],[1/9,0],[-2/9,0],[-1/9,
-1/3],[0,-1/3],[1/3,-1/3],[1/9,1/3],[-1/9,1/3],[1/3,
1/3],[0,0],[-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[
-1/9,0],[-2/9,0],[-2/9,0],[-1/9,-1/3],[2/9,0],[1/9,
0],[-1/9,0],[1/9,0],[-1/3,1/3],[-1/3,0],[0,-1/3],[
1/3,-1/3],[-1/9,0],[-2/9,0],[1/9,-1/3],[2/9,0],[0,0
],[0,1/3],[-2/9,0],[-1/9,-1/3],[-1/3,-1/3],[1/3,-1/3
],[2/9,0],[1/9,0],[2/9,0],[1/9,0],[2/9,0],[1/9,0
],[1/9,-1/3],[2/9,0],[-1/9,0],[1/9,0],[-1/9,0],[
-2/9,0],[0,-1/3],[0,-1/3],[0,0],[0,1/3],[1/9,1/3],
[-1/9,1/3],[-1/3,-1/3],[0,-1/3],[1/9,-1/3],[2/9,0],[
-1/3,1/3],[0,0],[-1/9,0],[-2/9,0],[-1/9,0],[1/9,0
],[-1/9,0],[1/9,0],[1/9,-1/3],[2/9,0],[2/9,0],[
1/9,0],[-1/9,0],[-2/9,0],[-1/3,-1/3],[0,-1/3],[1/3,
0],[1/3,1/3],[-1/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],
[1/3,0],[0,1/3],[1/9,1/3],[-1/9,1/3],[-1/3,-1/3],[
-1/3,-1/3],[2/9,0],[1/9,0],[-1/9,0],[-2/9,0],[-1/9,
0],[-2/9,0],[1/9,1/3],[-1/9,1/3],[-1/9,0],[1/9,0],
[2/9,0],[1/9,0],[1/3,0],[0,1/3],[-1/3,1/3],[-1/3,0
],[-1/9,0],[-2/9,0],[1/3,0],[0,1/3],[-2/9,0],[
-1/9,-1/3],[-1/3,-1/3],[-1/3,-1/3],[-1/9,0],[-2/9,0],
[2/9,0],[1/9,0],[-1/9,0],[-2/9,0],[1/9,1/3],[-1/9,
1/3],[-1/9,0],[-2/9,0],[-1/9,0],[1/9,0],[-1/3,1/3],
[-1/3,0],[1/3,0],[0,1/3],[2/9,0],[1/9,0],[1/9,1/3
],[-1/9,1/3],[0,1/3],[0,0],[1/9,-1/3],[2/9,0],[
2/3,0],[1/3,1/3],[2/9,0],[1/9,0],[-1/9,0],[1/9,0],
[2/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[2/9,0],[1/9,
0],[-1/9,0],[-2/9,0],[0,-1/3],[0,-1/3],[0,1/3],[
0,0],[-1/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[-2/9,0
],[-1/9,-1/3],[0,0],[1/3,1/3],[-1/9,0],[-2/9,0],[
-1/9,0],[-2/9,0],[2/9,0],[1/9,0],[1/9,1/3],[-1/9,
1/3],[-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[1/3,0],[
0,1/3],[-1/3,1/3],[-1/3,0],[-1/9,0],[1/9,0],[1/9,
-1/3],[2/9,0],[0,-1/3],[1/3,-1/3],[1/9,-1/3],[2/9,0
],[-1/3,1/3],[-2/3,0],[2/9,0],[1/9,0],[2/9,0],[
1/9,0],[-1/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[2/9,0
],[1/9,0],[2/9,0],[1/9,0],[0,1/3],[0,0],[0,-1/3
],[0,-1/3],[-1/9,0],[-2/9,0],[1/9,1/3],[-1/9,1/3],[
0,0],[0,1/3],[0,0],[1/3,1/3],[-1/9,0],[1/9,0],[
-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[1/9,-1/3],[2/9,
0],[-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[0,-1/3],[
1/3,-1/3],[1/3,0],[0,1/3],[2/9,0],[1/9,0],[-2/9,0
],[-1/9,-1/3],[-1/3,1/3],[-1/3,0],[1/9,1/3],[-1/9,1/3
],[-1/3,1/3],[-2/3,0],[-1/9,0],[-2/9,0],[2/9,0],[
1/9,0],[2/9,0],[1/9,0],[1/9,1/3],[-1/9,1/3],[2/9,0
],[1/9,0],[2/9,0],[1/9,0],[0,0],[0,1/3],[0,1/3],
[0,0],[-1/9,0],[1/9,0],[1/9,-1/3],[2/9,0],[0,-1/3
],[0,-1/3],[-2/9,0],[-1/9,-1/3],[-1/9,0],[-2/9,0],[
-1/9,0],[-2/9,0],[2/9,0],[1/9,0],[-2/9,0],[-1/9,
-1/3],[-1/9,0],[1/9,0],[2/9,0],[1/9,0],[0,0],[0,
1/3],[0,0],[0,1/3],[-1/9,0],[-2/9,0],[1/9,1/3],[
-1/9,1/3],[0,1/3],[0,0],[1/9,1/3],[-1/9,1/3],[2/3,0
],[1/3,1/3],[2/9,0],[1/9,0],[2/9,0],[1/9,0],[-1/9,
0],[1/9,0],[1/9,-1/3],[2/9,0],[-1/9,0],[-2/9,0],[
-1/9,0],[1/9,0],[0,1/3],[-1/3,0],[0,1/3],[-1/3,0],
[2/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[-1/3,-1/3],[
0,-1/3],[-2/9,0],[-1/9,-1/3],[-1/3,1/3],[0,0],[2/9,
0],[1/9,0],[2/9,0],[1/9,0],[1/9,-1/3],[2/9,0],[
-1/9,0],[1/9,0],[-1/9,0],[-2/9,0],[0,1/3],[-1/3,0
],[0,1/3],[-1/3,0],[-1/9,0],[1/9,0],[1/9,1/3],[
-1/9,1/3],[1/3,0],[1/3,1/3],[1/9,1/3],[-1/9,1/3],[0,
0],[-1/3,1/3],[-1/9,0],[1/9,0],[-1/9,0],[1/9,0],[
-1/9,0],[1/9,0],[1/9,1/3],[-1/9,1/3],[-1/9,0],[-2/9,
0],[2/9,0],[1/9,0],[0,-1/3],[1/3,-1/3],[0,-1/3],[
1/3,-1/3],[-1/9,0],[-2/9,0],[-2/9,0],[-1/9,-1/3],[
-1/3,1/3],[-1/3,0],[-2/9,0],[-1/9,-1/3],[1/3,1/3],[
0,0],[-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[1/9,-1/3
],[2/9,0],[2/9,0],[1/9,0],[2/9,0],[1/9,0],[0,-1/3
],[0,-1/3],[0,0],[0,1/3],[2/9,0],[1/9,0],[-2/9,0
],[-1/9,-1/3],[0,1/3],[0,0],[1/9,1/3],[-1/9,1/3],[
-1/3,1/3],[-2/3,0],[-1/9,0],[1/9,0],[2/9,0],[1/9,0
],[2/9,0],[1/9,0],[1/9,1/3],[-1/9,1/3],[-1/9,0],[
1/9,0],[-1/9,0],[1/9,0],[1/3,0],[1/3,1/3],[0,1/3],
[-1/3,0],[-1/9,0],[1/9,0],[1/9,-1/3],[2/9,0],[-1/3,
-1/3],[0,-1/3],[-2/9,0],[-1/9,-1/3],[1/3,-1/3],[1/3,
-1/3],[-1/9,0],[-2/9,0],[-1/9,0],[1/9,0],[1/9,1/3],
[-1/9,1/3],[2/9,0],[1/9,0],[-1/9,0],[1/9,0],[0,1/3
],[-1/3,0],[1/3,0],[1/3,1/3],[-1/9,0],[1/9,0],[
1/9,-1/3],[2/9,0],[0,1/3],[-1/3,0],[1/9,1/3],[-1/9,
1/3],[0,0],[-1/3,1/3],[2/9,0],[1/9,0],[-1/9,0],[
-2/9,0],[-1/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3],[-1/9,
0],[1/9,0],[-1/9,0],[-2/9,0],[0,-1/3],[1/3,-1/3],[
-1/3,1/3],[-1/3,0],[-1/9,0],[-2/9,0],[1/9,1/3],[
-1/9,1/3],[0,-1/3],[1/3,-1/3],[-2/9,0],[-1/9,-1/3],[
1/3,1/3],[0,0],[-1/9,0],[1/9,0],[2/9,0],[1/9,0],[
-1/9,0],[-2/9,0],[-1/9,0],[1/9,0],[-1/9,0],[1/9,0
],[0,-1/3],[1/3,-1/3],[0,-1/3],[1/3,-1/3],[2/9,0],[
1/9,0],[1/9,1/3],[-1/9,1/3],[0,-1/3],[1/3,-1/3],[
1/9,1/3],[-1/9,1/3],[0,0],[1/3,1/3],[2/9,0],[1/9,0
],[-1/9,0],[1/9,0],[2/9,0],[1/9,0],[1/9,1/3],[
-1/9,1/3],[-1/9,0],[-2/9,0],[-1/9,0],[-2/9,0],[0,0
],[0,1/3],[0,0],[0,1/3],[-1/9,0],[1/9,0],[-2/9,0
],[-1/9,-1/3],[0,0],[0,1/3],[-2/9,0],[-1/9,-1/3],[
-1/3,1/3],[-2/3,0],[-1/9,0],[1/9,0],[-1/9,0],[-2/9,
0],[-1/9,0],[1/9,0],[-2/9,0],[-1/9,-1/3]]),
Matrix(SparseMatrix(K,26,26,[
<1,1,1>,<2,2,1>,<3,4,1>,<4,3,-1>,<4,4,-1>,<5,5,1>,<6,
6,1>,<7,8,1>,<8,7,-1>,<8,8,-1>,<9,9,-1>,<9,10,-1>,<10,
9,1>,<11,11,1>,<12,12,1>,<13,13,1>,<14,14,1>,<15,15,
-1>,<15,16,-1>,<16,15,1>,<17,17,-1>,<17,18,-1>,<18,17,1>,
<19,20,1>,<20,19,-1>,<20,20,-1>,<21,21,-1>,<21,22,-1>,<22,
21,1>,<23,23,-1>,<23,24,-1>,<24,23,1>,<25,25,-1>,<25,26,
-1>,<26,25,1>]))
]> where w := K.1 where K := ext<K|Polynomial(K, [1, 0, 1])> where K is 
RationalField();

return _LR;
