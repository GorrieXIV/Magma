//Standard generators of A7 are a and b where a is in class 3A, b has order 5
//and ab has order 7.
//Standard generators of the double cover 2.A7 are preimages A and B where A has
//order 3, B has order 5 and AB has order 7. Any two of these conditions implies
//the third.
//Standard generators of the triple cover 3.A7 are preimages A and B where B has
//order 5 and AB has order 7.
//Standard generators of the sextuple cover 6.A7 are preimages A and B where B
//has order 5 and AB has order 7.
_LR := rec < recformat< F: GrpFP, AI: SeqEnum, G: GrpMat > |
      F := FreeGroup(2) >;
_LR`AI := [ [ a^-1, b ] ] where a is (_LR`F).1 where b is (_LR`F).2;
//two constituents interchanged by _LR`AI[1]

_LR`G :=
/*
Original group: c9Group("3a7p")
Recomputed by direct ARR method
Schur index: 1
Character: ( 21, -3, 21*w, -21*w - 21, 0, 0, 1, 1, -3*w, 3*w + 3, 0, 0, 0, 0, 0,
-w - 1, w, w, -w - 1, 0, 0, 0, 0 )
*/
MatrixGroup<21, K | [
Matrix(K,21,21,
[[0,-1],[0,0],[0,0],[0,0],[0,-1],[0,0],[0,0
],[0,0],[0,0],[0,0],[0,1],[0,0],[0,0],[0,0],
[0,0],[0,0],[0,0],[-1,0],[-1,-1],[0,0],[0,0],
[0,1],[0,0],[-1,-1],[-1,0],[-1,-2],[-2,-1],[-1,
0],[0,0],[1,1],[0,-1],[-2,-1],[0,0],[1,1],[0,
1],[0,0],[1,1],[-1,0],[-1,-1],[0,-1],[-1,-1],[
1,1],[0,0],[0,0],[0,0],[0,0],[-1,0],[0,1],[
1,1],[0,0],[0,0],[0,0],[1,1],[0,0],[0,-1],[
0,0],[0,0],[1,0],[1,1],[0,1],[-1,0],[0,0],[
0,0],[0,1],[0,0],[0,0],[-1,0],[1,1],[1,1],[
0,0],[0,1],[0,0],[0,0],[0,0],[0,0],[0,-1],[
0,0],[0,0],[0,0],[0,0],[0,0],[1,1],[0,0],[0,
0],[0,0],[0,0],[0,0],[0,0],[0,0],[-2,0],[0,1
],[-1,-1],[0,0],[0,0],[-1,0],[0,0],[2,1],[0,0
],[0,0],[1,1],[-1,0],[-1,-1],[0,0],[-1,0],[0,
0],[1,2],[0,0],[0,0],[-1,0],[1,2],[2,0],[0,
-1],[1,1],[0,0],[0,0],[1,-1],[0,0],[-2,-2],[
0,0],[0,0],[-1,-1],[1,0],[1,1],[1,1],[1,0],[
0,0],[1,-1],[0,0],[0,0],[1,1],[1,0],[0,-2],[
-1,-1],[0,-1],[0,0],[0,0],[0,-1],[0,0],[-1,1],
[0,0],[0,0],[-1,0],[0,-1],[1,0],[0,0],[0,0],
[0,0],[0,0],[0,0],[0,0],[1,0],[-1,0],[0,0],[
0,0],[0,0],[0,0],[0,0],[1,0],[0,0],[0,0],[0,
0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0
],[0,0],[0,0],[2,1],[0,-1],[1,1],[-1,0],[1,0
],[-1,-1],[-1,0],[1,1],[0,0],[-1,0],[0,0],[-1,
0],[-1,-1],[0,0],[0,0],[0,0],[0,0],[0,0],[-1,
0],[1,1],[-1,-1],[-1,-1],[-1,0],[1,-1],[0,-1],
[-1,-1],[1,1],[0,0],[1,0],[-1,-1],[0,0],[-1,0
],[0,0],[0,0],[0,1],[0,0],[0,0],[0,-1],[0,-1
],[1,1],[-1,-1],[0,0],[0,0],[0,0],[-1,-1],[-1,
0],[0,1],[-1,-1],[0,0],[0,0],[1,2],[0,0],[2,
1],[0,0],[0,0],[1,1],[0,1],[-1,0],[-1,0],[0,
1],[0,0],[0,-2],[0,0],[-1,-1],[1,1],[-2,-3],[
-3,1],[-1,1],[-1,-1],[1,0],[-1,-1],[-2,2],[0,1
],[3,3],[1,1],[0,1],[1,1],[-2,0],[-2,-2],[-2,
-2],[-2,0],[1,0],[1,0],[0,0],[0,0],[0,0],[0,
0],[-1,-2],[0,0],[0,-1],[0,0],[0,0],[-1,-2],[
0,0],[-1,0],[0,0],[0,-1],[0,0],[0,-1],[0,0],[
0,0],[0,-1],[0,0],[-1,0],[-1,-1],[0,1],[1,0],
[1,1],[2,-1],[0,0],[1,1],[-1,-1],[1,1],[2,0],
[0,-1],[-1,-1],[-1,-2],[1,0],[0,1],[1,1],[1,1
],[1,1],[2,1],[-1,-1],[0,-1],[0,0],[0,0],[0,0
],[0,-1],[-2,-2],[-1,0],[0,-1],[0,0],[0,0],[
-2,-1],[0,0],[0,2],[0,0],[0,0],[0,1],[-1,-1],
[0,-1],[-1,-1],[-1,-1],[0,0],[-2,0],[0,0],[-1,
0],[0,0],[-1,-1],[-2,-1],[-1,1],[0,0],[0,0],[
0,0],[0,0],[0,0],[2,1],[0,0],[1,1],[0,1],[
-1,0],[-1,-1],[0,0],[0,0],[0,0],[1,1],[0,0],[
0,0],[0,0],[0,1],[2,2],[2,0],[0,0],[0,0],[0,
0],[0,-1],[0,0],[-2,-2],[0,0],[-1,-1],[0,-2],[
1,0],[2,1],[1,1],[0,0],[0,0],[-1,-1],[0,0],[
-1,-1],[0,0],[-1,-2],[-3,-2],[-1,1],[0,-1],[0,0
],[0,0],[-2,-1],[0,0],[1,2],[0,0],[1,0],[0,1
],[-2,-1],[-1,-1],[-1,-1],[-1,-1],[0,0],[1,0],[
0,0],[0,0],[0,0],[0,0],[2,0],[0,-1],[1,0],[
0,0],[0,0],[1,0],[0,0],[-2,-1],[0,0],[0,0],[
0,-1],[1,0],[1,1],[0,0],[0,0],[0,0],[-2,-1],[
0,0],[0,1],[0,-1],[-1,-1],[-1,0],[0,1],[0,0],
[0,0],[0,0],[-1,0],[0,0],[2,1],[0,0],[1,0],[
0,1],[-1,0],[-2,-1],[-1,-1],[0,0],[0,0],[2,2],
[1,0],[-1,-1],[-1,1],[0,0],[-1,-1],[0,1],[1,0
],[1,0],[-1,-1],[-1,-1],[0,0],[0,0],[1,1],[0,
0],[1,1],[0,0],[0,0],[0,0],[-1,-1],[1,1]]),
Matrix(K,21,21,
[[-1,-1],[0,0],[0,-1],[-2,-1],[1,0],[2,1],[0,
-1],[-1,1],[1,2],[1,0],[-1,0],[1,0],[0,0],[0,
0],[-1,0],[0,0],[0,0],[0,0],[0,0],[0,0],[1,1
],[1,0],[0,0],[0,0],[0,0],[1,1],[1,1],[0,0],
[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[
0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[
-1,0],[0,0],[0,-1],[-1,-1],[1,0],[1,0],[0,-1],
[0,1],[1,1],[1,0],[-1,0],[0,-1],[0,0],[0,0],
[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[
-1,0],[-1,-1],[-1,0],[0,0],[-1,0],[-1,1],[1,2
],[0,0],[-1,-1],[0,1],[1,0],[0,0],[1,-1],[0,
-1],[1,0],[1,0],[0,0],[0,1],[0,1],[0,0],[0,0
],[1,0],[0,0],[2,2],[2,0],[0,2],[-1,1],[1,1
],[-1,-2],[-2,-1],[0,1],[0,-1],[0,1],[0,0],[0,
0],[0,-1],[0,0],[0,0],[0,0],[0,0],[0,0],[-1,
-1],[0,1],[0,0],[0,-1],[-1,-1],[0,0],[-1,-1],[
0,0],[0,0],[0,0],[0,0],[0,-1],[0,0],[0,0],[
0,0],[0,0],[0,0],[0,-1],[0,0],[0,0],[0,-1],[
0,1],[1,0],[1,0],[0,0],[0,0],[1,1],[1,0],[0,
-1],[0,0],[0,0],[0,0],[0,0],[0,0],[-1,0],[0,
0],[0,0],[-1,0],[0,0],[0,0],[0,0],[0,0],[0,0
],[0,2],[0,0],[-1,1],[1,2],[-2,-1],[0,-2],[0,
1],[3,1],[1,-1],[-1,-1],[1,0],[-1,-1],[-1,-1],
[0,0],[1,0],[0,0],[1,1],[1,1],[0,0],[1,0],[
0,-1],[0,0],[0,0],[1,0],[0,-1],[0,1],[0,0],[
1,0],[-1,-1],[0,1],[1,1],[-1,-1],[1,0],[0,0],
[0,0],[-1,-1],[0,0],[0,0],[0,0],[0,0],[0,0],
[0,0],[1,0],[0,0],[-1,-1],[0,1],[1,1],[1,1],
[0,0],[0,1],[1,0],[0,0],[-1,0],[1,0],[0,0],[
1,0],[0,1],[0,0],[0,0],[0,0],[0,0],[0,0],[1,
0],[0,-1],[0,0],[2,1],[2,0],[2,2],[2,1],[0,
-1],[-1,0],[-1,0],[1,1],[0,-1],[1,1],[-1,0],[
0,0],[0,0],[-1,0],[0,0],[0,-1],[1,0],[1,1],[
-1,-1],[0,-2],[0,0],[0,1],[1,1],[0,0],[1,1],[
0,0],[-1,-1],[0,0],[0,0],[0,1],[0,0],[0,0],[
0,0],[0,0],[0,0],[0,1],[0,0],[0,0],[0,1],[0,
-1],[0,0],[0,0],[-1,-1],[-2,0],[1,-1],[0,-3],[
-2,-1],[1,1],[1,1],[0,-1],[-1,-1],[0,-1],[0,1
],[0,0],[0,0],[0,1],[0,-1],[0,0],[0,0],[0,-1
],[1,1],[-1,0],[0,0],[1,1],[2,0],[0,1],[0,1
],[1,1],[0,0],[-1,-1],[0,1],[0,-1],[1,1],[0,0
],[0,0],[1,0],[0,0],[0,0],[0,0],[0,0],[0,0],
[-1,-1],[1,0],[0,0],[0,1],[0,1],[0,0],[1,1],
[0,-1],[0,0],[0,0],[0,0],[0,1],[0,0],[0,0],[
0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1,0],[
1,0],[0,0],[0,-1],[1,1],[1,0],[-1,1],[0,2],[
1,0],[-1,-1],[-1,-1],[0,1],[1,0],[0,1],[0,0],
[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[
0,0],[1,1],[0,1],[-2,-1],[-1,0],[0,-2],[0,-1],
[-1,0],[2,1],[1,0],[-1,-2],[0,1],[-1,-1],[0,0
],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],[0,0],
[0,0],[1,0],[0,0],[0,1],[0,2],[0,0],[1,1],[
0,0],[0,0],[0,0],[0,0],[0,1],[0,0],[0,0],[0,
0],[0,0],[0,0],[0,0],[0,0],[0,0],[-1,0],[1,0
],[0,2],[0,1],[-1,0],[-1,0],[0,0],[1,0],[0,-1
],[1,1],[1,0],[0,-1],[0,0],[-1,-1],[-1,-1],[
-1,0],[0,0],[-1,-1],[0,0],[1,0],[1,1],[0,0],[
0,0],[0,-2],[0,-1],[2,1],[0,0],[0,1],[0,0],[
0,-1],[-2,-2],[-1,0],[0,1],[1,1],[0,1],[0,1],
[0,0],[-1,0],[0,0],[1,0],[0,0],[-1,0],[0,0],
[0,0],[2,1],[-1,0],[2,2],[1,0],[2,3],[1,1],[
1,-1],[0,-1],[-2,-1],[1,1],[0,-1],[-1,0],[-2,-1
],[-1,-1],[0,-1],[-1,-1],[0,-1],[1,0],[1,1],[
0,0],[-1,-1]])
]> where w := K.1 where K := CyclotomicField(3);

return _LR;
