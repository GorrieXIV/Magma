"Source: Text/Group/Grp.text";
"Line: 1835";
"Date: Tue Jun  7 22:27:14 2016";
"Main: Mon May 30 13:40:42 2016";
// original file: Text/Group/Grp.text, line: 1835
// Example: H62E15 ()
print "Example: H62E15";
ei := GetEchoInput();
SetEchoInput(true);
G0:=Group("C10^2*C3");    // cyclic and abelian
G1:=Group("D5");          // dihedral Dn of order 2n
G2:=Group("A5");          // alternating
G3:=Group("S5");          // symmetric

G4:=Group("SL(2,3)");     // linear: GL, SL, AGL, ASL, AGammaL, ASigmaL, PGL, 
G5:=Group("SL(2,F3)");    //   PSL (=L), PGammaL, PSigmaL, SU, PSU, PGammaU, 
G6:=Group("SL_2(3)");     //   PSigmaU, O (=GO), SO, PSO, PGO, PGO+, PGO-, 
G7:=Group("SL2(3)");      //   POmega, POmega+, POmega-, Sp, PSp, PSigmaSp

G8:=Group("S3*GL(4,2)");  // Products 
G9:=Group("C41:C40");     // Split extensions that are not direct products,
                          // [usually with largest action of the quotient group]
G10:=Group("A5wrC2");     // Wreath products

G11:=Group("C2^3.C4");             // unique names returned by GroupName 
                                   // when |G|<512, not multiple of 128
G12:=Group("A5*A_5*A_{5}*Alt(5)"); // name variations
G13:=Group("D10:C8.C2*C3");        // operator order ^ > wr > : > . > *
                                   // (so read left to right in this example)
                                 
G14:=Group("<12,1>");        // Small group database (C3:C4)
G14:=Group("g12n1");         //   same group
G15:=Group("T<12,48>");      // Transitive group database (C2^2*S4)
G15:=Group("t12n48");        //   same group
                             // Simple groups: Lie Type A,B,C,D,E,F,G, returned
G16:=Group("C(4,2)");        //   as matrix groups via standard representation
G17:=Group("Sz(32)");        // Simple groups: Suzuki
G18:=Group("J1*Co3*M11");    // Simple groups: sporadic
G19:=Group("PGL(4,3)`2");    // Names from the almost simple group database 

G20:=Group("He11");          // Heisenberg
G21:=Group("F13");           // Frobenius group Fn of order n(n-1)
G22:=Group("Q8");            // Quasi-cyclic groups of normal 2-rank one:
G23:=Group("SD16");          //   Dihedral, (generalized) quaternion,
G24:=Group("OD16");          //   semi-dihedral, the `other-dihedral' one.
                                   
[GroupName(eval "G"*Sprint(n)): n in [1..24]];     // back to names
SetEchoInput(ei);
