SetEchoInput (true);
for d in [6..16 by 2] do
   for q in [7,25, 27] do
       G := OmegaPlus (d, q);
       E, W, CB := SolveOPlus (G);
       d, q; assert Verify (G, E, W, CB);
   end for;
end for;

for d in [6..16 by 2] do
   for q in [7,25, 27] do
       G := OmegaMinus (d, q);
       E, W, CB := SolveOMinus (G);
       d, q; assert Verify (G, E, W, CB);
   end for;
end for;

for d in [3..16 by 2] do
   for q in [7,25, 27] do
       G := Omega (d, q);
       E, W, CB := SolveO (G);
       d, q; assert Verify (G, E, W, CB);
   end for;
end for;

for d in [6..16 by 2] do
   for q in [5,7,25, 27] do
       G := SOPlus (d, q);
       E, W, CB := SolveSOPlus (G);
       d, q; assert Verify (G, E, W, CB);
   end for;
end for;

for d in [6..16 by 2] do
   for q in [5,7,25, 27] do
       G := SOMinus (d, q);
       E, W, CB := SolveSOMinus (G);
       d, q; assert Verify (G, E, W, CB);
   end for;
end for;

for d in [5..16 by 2] do
   for q in [5,7,25, 27] do
       G := SO (d, q);
       E, W, CB := SolveSO (G);
       d, q; assert Verify (G, E, W, CB);
   end for;
end for;
