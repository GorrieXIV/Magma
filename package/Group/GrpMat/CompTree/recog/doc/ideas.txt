- separate file with all constants, then use import
no literals/numerals in code, always refer to constants
maybe not necessary, strings ok?


- for each aschbacher class, general wrapper functions which handles
SLPs, eg for tensor decomposition, for each generator of a factor,
return pointers to the generators of the parent group that map to
these generators
obsolete?

- avoid storing many attribues on the group object, use special record
removes some problems when using CompositionTree on groups that are present
in a CompositionTree of another (larger) group
if some attributes are already present, then bugs can appear

- use data structure of Akos & Max 

- incorporate permutation groups usign O'Nan Scott? How easy to code reduction algorithms? How much is already in Magma?

- separate file which handles random elements, where Prospector can be put in
use random seed for G in a an image G/N ?

- need clever handling of leaves, similar to Akos "find homomorphism
method" want to be able to have an algorithm for specific case eg
G_2(4) and a more general case eg G_2(2^n) in natural rep so probably
for each algorithm need an "applicability test", or perhaps one can
use a hash table with keys: 
<Category, degree, output from SimpleGroupName> 

probably need a priority, higher priorities for
algorithms specialised for certain field sizes and/or dimensions

use hash table with filenames
each file is eval'd and returns the recognition function which is stored in 
the hash
then one can write a general recognition function that uses this hash
to add more groups one just has to write new files and add entries to the hash
can take advantage of special parameters to the different recognition functions
just define them in each separate file
can also add simple checks to the file, testing for correct field size etc


- coding conventions? 
names of functions, start with capital letter?
start each file with comment blocks as I do
in principle no function longer than one screen, 25 lines
tab space 4


- use exception handling
separates "working" case from "error" case
always use error Error(""), not error "", to get Traceback.
never use repeat's that are potentially infinite, assuming properties of
the group, always have counters and raise errors after a certain number of
failed tries
invent Error objects for different situations, like Java's Throwable objects?


- put everything as members of the node record data structure
this makes it more object oriented, one can see how to use the CT just by
looking at the data structure, not necessary to browse all code files

