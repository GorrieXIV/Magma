freeze;

TranOrds :=  [

{ IntegerRing() | 1 },
{ IntegerRing() | 2 },
{ IntegerRing() | 3, 6 },
{ IntegerRing() | 4, 8, 12, 24 },
{ IntegerRing() | 5, 10, 20, 60, 120 },
{ IntegerRing() | 6, 12, 18, 24, 36, 48, 60, 72, 120, 360, 720 },
{ IntegerRing() | 7, 14, 21, 42, 168, 2520, 5040 },
{ IntegerRing() | 8, 16, 24, 32, 48, 56, 64, 96, 128, 168, 192, 288, 336, 384, 
576, 1152, 1344, 20160, 40320 },
{ IntegerRing() | 9, 18, 27, 36, 54, 72, 81, 108, 144, 162, 216, 324, 432, 504, 
648, 1296, 1512, 181440, 362880 },
{ IntegerRing() | 10, 20, 40, 50, 60, 80, 100, 120, 160, 200, 240, 320, 360, 
400, 640, 720, 800, 960, 1440, 1920, 3840, 7200, 14400, 28800, 1814400, 3628800 
},
{ IntegerRing() | 11, 22, 55, 110, 660, 7920, 19958400, 39916800 },
{ IntegerRing() | 12, 24, 36, 48, 60, 72, 96, 108, 120, 144, 192, 216, 240, 288,
324, 384, 432, 576, 648, 660, 720, 768, 972, 1152, 1296, 1320, 1440, 1536, 1728,
1920, 1944, 2304, 2592, 3072, 3456, 3840, 3888, 4608, 5184, 6912, 7200, 7680, 
7776, 7920, 10368, 11520, 14400, 15552, 20736, 23040, 28800, 31104, 41472, 
46080, 82944, 95040, 259200, 518400, 1036800, 239500800, 479001600 },
{ IntegerRing() | 13, 26, 39, 52, 78, 156, 5616, 3113510400, 6227020800 },
{ IntegerRing() | 14, 28, 42, 56, 84, 98, 112, 168, 196, 294, 336, 392, 448, 
588, 882, 896, 1092, 1176, 1344, 1764, 1792, 2184, 2688, 3528, 5040, 5376, 
10080, 10752, 21504, 56448, 161280, 322560, 645120, 12700800, 25401600, 
50803200, 43589145600, 87178291200 },
{ IntegerRing() | 15, 30, 60, 75, 120, 150, 180, 300, 360, 375, 405, 600, 720, 
750, 810, 1215, 1500, 1620, 2430, 2520, 3000, 3240, 4860, 6000, 9720, 12000, 
14580, 19440, 20160, 24000, 29160, 38880, 48000, 58320, 77760, 155520, 233280, 
466560, 648000, 933120, 1296000, 2592000, 5184000, 10368000, 653837184000, 
1307674368000 },
{ IntegerRing() | 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 192, 240, 256, 
288, 320, 336, 384, 480, 512, 576, 672, 768, 896, 960, 1024, 1152, 1536, 1920, 
2048, 2304, 2688, 2880, 3072, 4096, 4608, 5760, 6144, 6272, 7168, 8192, 9216, 
11520, 12288, 14336, 16384, 18432, 18816, 21504, 24576, 27648, 32768, 36864, 
40320, 43008, 49152, 55296, 56448, 73728, 80640, 82944, 86016, 98304, 110592, 
112896, 147456, 165888, 172032, 225792, 248832, 294912, 322560, 331776, 344064, 
497664, 663552, 995328, 1327104, 1990656, 2580480, 2654208, 3612672, 3981312, 
5160960, 7962624, 10321920, 812851200, 1625702400, 3251404800, 10461394944000, 
20922789888000 },
{ IntegerRing() | 17, 34, 68, 136, 272, 4080, 8160, 16320, 177843714048000, 
355687428096000 },
{ IntegerRing() | 18, 36, 54, 72, 108, 144, 162, 180, 216, 288, 324, 360, 432, 
486, 576, 648, 720, 864, 972, 1008, 1080, 1152, 1296, 1458, 1728, 1944, 2160, 
2304, 2448, 2592, 2916, 3024, 3456, 3888, 4320, 4374, 4608, 4896, 5184, 5832, 
6912, 7776, 8748, 9216, 10368, 11664, 13122, 13824, 14580, 15552, 17496, 18432, 
20736, 23328, 26244, 27648, 29160, 31104, 34992, 36864, 41472, 43740, 52488, 
55296, 58320, 62208, 69984, 73728, 82944, 87480, 93312, 104976, 110592, 129024, 
139968, 165888, 174960, 186624, 209952, 221184, 258048, 262440, 279936, 331776, 
349920, 362880, 373248, 387072, 419904, 508032, 524880, 559872, 648000, 663552, 
725760, 774144, 839808, 1049760, 1119744, 1296000, 1399680, 1524096, 1679616, 
2239488, 2592000, 2799360, 3359232, 4572288, 5184000, 5598720, 8398080, 
10368000, 16796160, 33592320, 46448640, 92897280, 139968000, 185794560, 
279936000, 559872000, 1119744000, 2239488000, 65840947200, 131681894400, 
263363788800, 3201186852864000, 6402373705728000 },
{ IntegerRing() | 19, 38, 57, 114, 171, 342, 60822550204416000, 
121645100408832000 },
{ IntegerRing() | 20, 40, 60, 80, 100, 120, 160, 200, 240, 320, 360, 400, 480, 
500, 640, 720, 800, 960, 1000, 1280, 1440, 1500, 1600, 1920, 2000, 2500, 2560, 
2880, 3000, 3200, 3420, 3840, 4000, 5000, 5120, 5760, 6000, 6840, 7200, 7500, 
7680, 10000, 10240, 11520, 12000, 12800, 14400, 15000, 15360, 20000, 20480, 
23040, 25600, 28800, 30000, 30720, 40000, 40960, 46080, 51200, 57600, 60000, 
61440, 80000, 81920, 92160, 102400, 115200, 120000, 122880, 160000, 163840, 
184320, 204800, 240000, 245760, 259200, 320000, 327680, 368640, 409600, 414720, 
480000, 491520, 518400, 640000, 655360, 737280, 819200, 829440, 960000, 983040, 
1036800, 1244160, 1280000, 1474560, 1658880, 1843200, 1920000, 1966080, 2073600,
2488320, 3317760, 3628800, 3686400, 3840000, 3932160, 4147200, 4976640, 7257600,
7372800, 9953280, 14745600, 14929920, 19906560, 29491200, 29859840, 39813120, 
51840000, 59719680, 79626240, 103680000, 155520000, 159252480, 207360000, 
238878720, 311040000, 414720000, 477757440, 622080000, 829440000, 928972800, 
955514880, 1244160000, 1658880000, 1857945600, 2488320000, 3715891200, 
4976640000, 6584094720000, 13168189440000, 26336378880000, 1216451004088320000, 
2432902008176640000 },
{ IntegerRing() | 21, 42, 63, 84, 126, 147, 168, 252, 294, 336, 441, 504, 588, 
882, 1008, 1029, 1764, 2058, 2520, 3087, 4116, 5040, 5103, 6174, 7560, 8232, 
9261, 10206, 12348, 15120, 15309, 16464, 18522, 20160, 20412, 24696, 27783, 
30240, 30618, 37044, 40320, 45927, 49392, 55566, 60480, 61236, 74088, 91854, 
111132, 120960, 122472, 148176, 183708, 222264, 244944, 367416, 444528, 734832, 
979776, 1837080, 1959552, 2939328, 3674160, 3919104, 5511240, 5878656, 7348320, 
11022480, 11757312, 14224896, 22044960, 23514624, 28449792, 47029248, 352719360,
705438720, 1410877440, 48009024000, 96018048000, 192036096000, 384072192000, 
768144384000, 25545471085854720000, 51090942171709440000 },
{ IntegerRing() | 22, 44, 110, 220, 242, 484, 968, 1210, 1320, 2420, 4840, 6050,
7920, 11264, 12100, 15840, 22528, 24200, 45056, 56320, 112640, 225280, 443520, 
675840, 871200, 887040, 1351680, 8110080, 16220160, 39916800, 79833600, 
125452800, 20437401600, 40874803200, 81749606400, 796675461120000, 
1593350922240000, 3186701844480000, 562000363888803840000, 
1124000727777607680000 },
{ IntegerRing() | 23, 46, 253, 506, 10200960, 12926008369442488320000, 
25852016738884976640000 },
{ IntegerRing() | 24, 48, 72, 96, 120, 144, 168, 192, 216, 240, 288, 336, 384, 
432, 480, 504, 576, 648, 720, 768, 864, 960, 1008, 1152, 1296, 1320, 1344, 1440,
1536, 1728, 1920, 1944, 2016, 2304, 2592, 2640, 2688, 2880, 3072, 3456, 3840, 
3888, 4032, 4320, 4608, 5184, 5760, 5832, 6072, 6144, 6912, 7200, 7680, 7776, 
8064, 8640, 9216, 10368, 10752, 11520, 11664, 12144, 12288, 13824, 14400, 15360,
15552, 15840, 17280, 17496, 18432, 20736, 21504, 23040, 23328, 24576, 27648, 
28800, 30720, 31104, 32256, 34992, 36864, 41472, 46080, 46656, 49152, 52488, 
55296, 57600, 60480, 61440, 62208, 64512, 69120, 69984, 73728, 75264, 82944, 
92160, 93312, 98304, 104976, 110592, 115200, 120960, 122472, 122880, 124416, 
138240, 139968, 147456, 150528, 157464, 165888, 184320, 186624, 190080, 196608, 
209952, 221184, 225792, 241920, 244944, 245760, 248832, 258048, 279936, 294912, 
314928, 331776, 367416, 368640, 373248, 393216, 419904, 442368, 451584, 491520, 
497664, 516096, 518400, 526848, 559872, 589824, 629856, 663552, 734832, 737280, 
786432, 839808, 871200, 884736, 983040, 995328, 1036800, 1053696, 1102248, 
1105920, 1179648, 1259712, 1327104, 1351680, 1469664, 1474560, 1572864, 1580544,
1679616, 1742400, 1769472, 1889568, 1990656, 2073600, 2204496, 2211840, 2359296,
2519424, 2654208, 2703360, 2939328, 2949120, 3145728, 3161088, 3359232, 3484800,
3538944, 3779136, 3932160, 3981312, 4147200, 4408992, 4423680, 4718592, 4741632,
5038848, 5308416, 5406720, 5878656, 5898240, 5971968, 6291456, 6718464, 7077888,
7372800, 7558272, 7864320, 7962624, 8817984, 8847360, 9437184, 9483264, 
10077696, 10616832, 11943936, 12582912, 13436928, 14155776, 14224896, 14745600, 
15116544, 15728640, 15925248, 16220160, 17635968, 17694720, 17915904, 18874368, 
20155392, 21233664, 23592960, 23887872, 26873856, 28311552, 28449792, 29491200, 
30233088, 31457280, 31850496, 32440320, 35831808, 40310784, 42467328, 44089920, 
47029248, 47185920, 47775744, 51840000, 53747712, 56899584, 58982400, 59719680, 
63700992, 71663616, 80621568, 84934656, 88179840, 94058496, 94371840, 95551488, 
103680000, 107495424, 113799168, 117964800, 119439360, 120932352, 125452800, 
127401984, 132269760, 141087744, 143327232, 155520000, 161243136, 169869312, 
176359680, 179159040, 188743680, 194641920, 207360000, 214990848, 227598336, 
238878720, 241864704, 244823040, 264539520, 265420800, 282175488, 286654464, 
311040000, 322486272, 339738624, 358318080, 389283840, 414720000, 429981696, 
479001600, 483729408, 529079040, 530841600, 564350976, 573308928, 622080000, 
644972544, 716636160, 829440000, 859963392, 958003200, 967458816, 1061683200, 
1074954240, 1128701952, 1146617856, 1244160000, 1433272320, 1658880000, 
1719926784, 1934917632, 2123366400, 2149908480, 2257403904, 2293235712, 
2488320000, 3439853568, 4246732800, 4299816960, 4586471424, 4976640000, 
5733089280, 6879707136, 7283146752, 9172942848, 11466178560, 13759414272, 
14566293504, 16930529280, 18065203200, 22932357120, 33861058560, 34398535680, 
67184640000, 67722117120, 68797071360, 134369280000, 137594142720, 201553920000,
268738560000, 403107840000, 490497638400, 537477120000, 806215680000, 
980995276800, 1074954240000, 1612431360000, 1961990553600, 2149908480000, 
3224862720000, 6449725440000, 24580620288000, 49161240576000, 98322481152000, 
196644962304000, 393289924608000, 114721266401280000, 229442532802560000, 
458885065605120000, 310224200866619719680000, 620448401733239439360000 },
{ IntegerRing() | 25, 50, 75, 100, 125, 150, 200, 250, 300, 400, 500, 600, 625, 
800, 1000, 1200, 1250, 2000, 2400, 2500, 3000, 3125, 3600, 5000, 6000, 6250, 
7200, 10000, 12000, 12500, 14400, 15625, 25000, 28800, 31250, 37500, 50000, 
62500, 75000, 125000, 150000, 187500, 250000, 300000, 375000, 500000, 750000, 
1000000, 1500000, 2000000, 3000000, 4000000, 6000000, 8000000, 12000000, 
16000000, 24000000, 32000000, 48000000, 64000000, 96000000, 192000000, 
384000000, 3888000000, 7776000000, 15552000000, 31104000000, 46656000000, 
62208000000, 93312000000, 124416000000, 186624000000, 248832000000, 
497664000000, 746496000000, 1492992000000, 2985984000000, 
7755605021665492992000000, 15511210043330985984000000 },
{ IntegerRing() | 26, 52, 78, 104, 156, 312, 338, 676, 1014, 1352, 2028, 2704, 
3042, 4056, 5408, 5616, 6084, 7800, 8112, 11232, 12168, 15600, 16224, 24336, 
31200, 48672, 53248, 106496, 159744, 212992, 319488, 425984, 638976, 1277952, 
23003136, 46006272, 63078912, 6227020800, 12454041600, 12752938598400, 
25505877196800, 51011754393600, 19387894021816320000, 38775788043632640000, 
77551576087265280000, 201645730563302817792000000, 403291461126605635584000000 },
{ IntegerRing() | 27, 54, 81, 108, 162, 216, 243, 324, 351, 432, 486, 648, 702, 
729, 864, 972, 1053, 1296, 1458, 1512, 1944, 2106, 2187, 2592, 2916, 3024, 3888,
4374, 4536, 5832, 6561, 7776, 8748, 9072, 11664, 13122, 17496, 19683, 23328, 
25920, 26244, 34992, 39366, 51840, 52488, 59049, 69984, 78732, 104976, 118098, 
139968, 151632, 157464, 177147, 209952, 236196, 279936, 303264, 314928, 354294, 
419904, 472392, 531441, 544320, 559872, 629856, 708588, 839808, 944784, 1062882,
1088640, 1119744, 1417176, 1594323, 1679616, 1889568, 2125764, 2177280, 2239488,
2834352, 3188646, 3306744, 3359232, 3779136, 4251528, 4478976, 5668704, 6377292,
6613488, 6718464, 7558272, 8503056, 8957952, 9920232, 10077696, 11337408, 
12754584, 13436928, 17006112, 17915904, 19840464, 20155392, 22674816, 25509168, 
29760696, 30233088, 34012224, 40310784, 45349632, 51018336, 59521392, 60466176, 
68024448, 90699264, 102036672, 120932352, 136048896, 181398528, 204073344, 
241864704, 272097792, 362797056, 384072192, 408146688, 483729408, 544195584, 
725594112, 768144384, 816293376, 1088391168, 1152216576, 1190427840, 1451188224,
1632586752, 2176782336, 2304433152, 2380855680, 2539579392, 3265173504, 
3456649728, 3571283520, 4353564672, 4761711360, 5079158784, 6530347008, 
6913299456, 7142567040, 7618738176, 10369949184, 13060694016, 14285134080, 
15237476352, 20739898368, 914248581120, 1828497162240, 3656994324480, 
17919272189952000, 35838544379904000, 71677088759808000, 143354177519616000, 
286708355039232000, 5444434725209176080384000000, 10888869450418352160768000000 
},
{ IntegerRing() | 28, 56, 84, 112, 168, 196, 224, 252, 336, 392, 448, 504, 588, 
672, 784, 896, 1008, 1092, 1176, 1344, 1372, 1512, 1568, 1764, 1792, 2016, 2184,
2352, 2688, 2744, 3528, 3584, 4032, 4116, 4368, 4704, 5376, 5488, 6048, 6272, 
7056, 7168, 8064, 8232, 9604, 9828, 10080, 10752, 12096, 12348, 12544, 14112, 
14336, 16128, 16464, 18816, 19208, 19656, 20160, 21504, 24696, 25088, 28672, 
28812, 29484, 30240, 32256, 37632, 38416, 40320, 43008, 49392, 56448, 57344, 
57624, 58968, 60480, 64512, 75264, 76832, 86016, 86436, 112896, 114688, 115248, 
120960, 129024, 153664, 172032, 172872, 225792, 229376, 230496, 258048, 259308, 
307328, 322560, 344064, 345744, 401408, 458752, 460992, 516096, 518616, 645120, 
688128, 691488, 777924, 802816, 917504, 921984, 1032192, 1037232, 1204224, 
1290240, 1376256, 1382976, 1451520, 1555848, 1605632, 1835008, 2064384, 2074464,
2333772, 2384928, 2408448, 2580480, 2752512, 2765952, 3111696, 3211264, 3612672,
3670016, 4128768, 4148928, 4667544, 4769856, 4816896, 5505024, 6223392, 6422528,
7225344, 7340032, 8257536, 8297856, 8945664, 9335088, 9539712, 9633792, 
10321920, 11010048, 12446784, 14450688, 14680064, 16515072, 17891328, 18670176, 
19267584, 20643840, 22020096, 24893568, 25401600, 28901376, 29360128, 30965760, 
35782656, 37340352, 41287680, 44040192, 50803200, 57802752, 61931520, 74680704, 
82575360, 83607552, 88080384, 101606400, 123863040, 165150720, 167215104, 
176160768, 203212800, 231211008, 247726080, 250822656, 334430208, 352321536, 
462422016, 495452160, 501645312, 752467968, 924844032, 1003290624, 1321205760, 
1504935936, 2006581248, 2642411520, 3009871872, 3186376704, 4013162496, 
5284823040, 6019743744, 6372753408, 9559130112, 10569646080, 12039487488, 
16052649984, 19118260224, 30098718720, 32105299968, 48157949952, 52022476800, 
60197437440, 64210599936, 87178291200, 90296156160, 96315899904, 104044953600, 
120394874880, 174356582400, 180592312320, 192631799808, 208089907200, 
361184624640, 385263599616, 416179814400, 770527199232, 832359628800, 
5778953994240, 11557907988480, 23115815976960, 161310320640000, 322620641280000,
357082280755200, 483930961920000, 645241282560000, 714164561510400, 
967861923840000, 1290482565120000, 1428329123020800, 1935723847680000, 
2580965130240000, 3871447695360000, 5161930260480000, 7742895390720000, 
15485790781440000, 3800027228275998720000, 7600054456551997440000, 
15200108913103994880000, 152444172305856930250752000000, 
304888344611713860501504000000 },
{ IntegerRing() | 29, 58, 116, 203, 406, 812, 4420880996869850977271808000000, 
8841761993739701954543616000000 },
{ IntegerRing() | 30, 60, 90, 120, 150, 180, 240, 300, 360, 450, 480, 600, 720, 
750, 810, 900, 960, 1080, 1200, 1440, 1500, 1620, 1800, 1920, 2160, 2400, 2430, 
2880, 3000, 3240, 3600, 3750, 3840, 4320, 4800, 4860, 5040, 5760, 6000, 6480, 
7200, 7290, 7500, 7680, 8640, 9720, 11250, 11520, 12000, 12180, 12960, 14400, 
14580, 15000, 15360, 18750, 19440, 21600, 22500, 23040, 24000, 24360, 25920, 
28800, 29160, 30000, 30720, 37500, 38880, 40320, 43200, 43740, 45000, 46080, 
48000, 51840, 56250, 58320, 60000, 61440, 64800, 65610, 75000, 77760, 80640, 
86400, 87480, 90000, 92160, 93750, 96000, 103680, 112500, 116640, 120000, 
122880, 129600, 131220, 150000, 155520, 172800, 174960, 180000, 184320, 187500, 
192000, 196830, 225000, 233280, 245760, 259200, 262440, 281250, 300000, 307200, 
311040, 322560, 328050, 349920, 360000, 368640, 375000, 384000, 393660, 414720, 
450000, 466560, 491520, 518400, 524880, 562500, 590490, 600000, 614400, 622080, 
645120, 648000, 656100, 699840, 720000, 737280, 750000, 787320, 829440, 900000, 
933120, 937500, 983040, 984150, 1036800, 1049760, 1125000, 1180980, 1228800, 
1244160, 1296000, 1312200, 1399680, 1474560, 1500000, 1536000, 1574640, 1658880,
1866240, 1875000, 1966080, 1968300, 2099520, 2250000, 2361960, 2457600, 2488320,
2580480, 2592000, 2624400, 2799360, 2949120, 2952450, 3000000, 3072000, 3149280,
3317760, 3542940, 3732480, 3750000, 3932160, 3936600, 4500000, 4723920, 4915200,
4976640, 5160960, 5184000, 5248800, 5443200, 5598720, 5625000, 5898240, 5904900,
6000000, 6144000, 6298560, 6635520, 7085880, 7464960, 7500000, 7873200, 9000000,
9447840, 9830400, 9953280, 10368000, 10497600, 10886400, 11250000, 11796480, 
11809800, 12000000, 12288000, 12597120, 12700800, 13271040, 14171760, 14929920, 
15746400, 18000000, 18895680, 19660800, 19906560, 20643840, 20736000, 20995200, 
21257640, 21772800, 22500000, 23592960, 23619600, 24000000, 24576000, 25194240, 
26542080, 28343520, 29859840, 30000000, 31492800, 36000000, 37791360, 39813120, 
41287680, 41472000, 42515280, 45000000, 47239200, 48000000, 49152000, 53084160, 
56687040, 59719680, 60000000, 72000000, 75582720, 79626240, 82575360, 82944000, 
85030560, 94478400, 96000000, 98304000, 106168320, 113374080, 119439360, 
120000000, 139968000, 141717600, 144000000, 151165440, 159252480, 170061120, 
180000000, 188956800, 192000000, 196608000, 226748160, 238878720, 240000000, 
279936000, 283435200, 288000000, 302330880, 318504960, 330301440, 360000000, 
377913600, 384000000, 393216000, 425152800, 453496320, 477757440, 559872000, 
566870400, 576000000, 604661760, 637009920, 660602880, 680244480, 720000000, 
755827200, 768000000, 786432000, 812851200, 850305600, 906992640, 955514880, 
960000000, 1119744000, 1133740800, 1152000000, 1209323520, 1274019840, 
1360488960, 1440000000, 1511654400, 1536000000, 1572864000, 1700611200, 
1813985280, 1911029760, 1920000000, 2239488000, 2304000000, 2418647040, 
2548039680, 2654208000, 3023308800, 3072000000, 3401222400, 3627970560, 
3822059520, 3840000000, 3888000000, 4478976000, 4608000000, 4837294080, 
5096079360, 5308416000, 5760000000, 6046617600, 6802444800, 7255941120, 
7644119040, 7680000000, 7776000000, 8957952000, 9674588160, 10616832000, 
10883911680, 11520000000, 12093235200, 14511882240, 15288238080, 15552000000, 
17915904000, 19349176320, 21233664000, 21767823360, 23040000000, 24186470400, 
29023764480, 30576476160, 31104000000, 35712835200, 38698352640, 42467328000, 
43535646720, 46080000000, 46656000000, 48372940800, 58047528960, 62208000000, 
71425670400, 84934656000, 87071293440, 93312000000, 107138505600, 108839116800, 
116095057920, 124416000000, 142851340800, 169869312000, 186624000000, 
214277011200, 217678233600, 232190115840, 248832000000, 279936000000, 
339738624000, 428554022400, 435356467200, 497664000000, 559872000000, 
746496000000, 839808000000, 870712934400, 1119744000000, 1307674368000, 
1492992000000, 1679616000000, 1741425868800, 2239488000000, 2615348736000, 
2799360000000, 2985984000000, 3359232000000, 4478976000000, 5598720000000, 
6718464000000, 8957952000000, 11197440000000, 13436928000000, 16796160000000, 
17915904000000, 26873856000000, 30233088000000, 33592320000000, 35831808000000, 
53747712000000, 54854914867200, 60466176000000, 67184640000000, 71663616000000, 
89579520000000, 107495424000000, 109709829734400, 120932352000000, 
143327232000000, 179159040000000, 214990848000000, 219419659468800, 
241864704000000, 358318080000000, 362797056000000, 483729408000000, 
537477120000000, 725594112000000, 967458816000000, 1074954240000000, 
1451188224000000, 1934917632000000, 2149908480000000, 3869835264000000, 
5804752896000000, 10712468422656000, 11609505792000000, 21424936845312000, 
23219011584000000, 42849873690624000, 17919272189952000000, 
35838544379904000000, 71677088759808000000, 143354177519616000000, 
286708355039232000000, 855006126362099712000000, 1710012252724199424000000, 
3420024505448398848000000, 132626429906095529318154240000000, 
265252859812191058636308480000000 } ];

function WPTriples(n)

    if n eq 1 then return []; end if;
    L := Factorization(n);
    E := [t[2]: t in L];
    k := #L;
    Q := [];
    for t := 2 to Max(E) do
        ft := Factorial(t);
        for u in CartesianProduct([{ 0 .. e div t }: e in E]) do
            M := [L[j, 1]^(u[j]): j in [1 .. #E]];
            P := &*M;
            if P ne 1 then
                cf := n div P^t;
                if cf mod t eq 0 and ft mod cf eq 0 then
                    //printf "%o^%o * %o\n", P, t, cf;
                    Append(~Q, <P, t, cf>);
                end if;
            end if;
        end for;
    end for;
    return Sort(Q);

end function;


//----------------------------------------------------------------------------
intrinsic IsWreathProduct (G::GrpPerm) -> BoolElt, GrpPerm, GrpPerm, GrpPerm

{Determine if the permutation group G is isomorphic to a wreath product
A wr B, where B is transitive}
 
    if IsAltsym(G) then
       //"The group is alternating or symmetric.";
       return false;
    else
       //time 
       T := WPTriples(#G);
       if IsEmpty(T) then 
          //"The group order has no factorisations consistent with being a wreath product.";
          return false; 
       end if;
       //"There are", #T, "possible wreath product factorizations of the group order.";
       //T;
    end if;

    wthprd := false;
    for tup in T do

      //"\n*** Doing triple", tup;
      k, t, m := Explode(tup);

      // Use information about transitive group orders on cofactor m

      if t in [1..30] and m notin TranOrds[t] then
          //"Triple", <k, t, m>, "is eliminated by transitive group order test";
          continue;
      end if;

      b :=  k^t;
      NSubs := [ H`subgroup : H in NormalSubgroups(G : OrderEqual:=b) ];
      // IdentPush();
      //"\n*** There are", #NSubs,"potential base groups for this triple.";

      for i := 1 to #NSubs do
         N := NSubs[i];
         //"\n*** Doing potential base group number", i;

         /* To be a candidate, N must be $K^t$ for some $K$. Do some
          * simple tests to check if this is possible.
          */

         if (not IsPower(#DerivedGroup(N),t)) or (not IsPower(#Centre(N),t)) 
             or (not IsPower(#FrattiniSubgroup(N),t)) then 
             //"    k-th power test eliminates base group", i;
             continue;
         end if;

         f:=Factorisation(k);
         if (#f eq 1) and (f[1][2] le 2) and not IsAbelian(N) then
             //"    Abelian base group test eliminates base group", i;
             continue;
         end if;


         if not exists{ H : H in MinimalNormalSubgroups(N) | k mod #H eq 0 } then
             //"    Minimal normal subgroup test eliminates base group", i;
             continue;
         end if;
                
         // Determine complements for N
         //t0 := Cputime(0);
         comps := Complements(G, N);
         //t1 := Cputime(t0);
         
         //"\n    ***", #comps, "complements found for potential base group in", t1, "seconds.";
         for i := 1 to #comps do
             C := comps[i];

             // Get subgroups of index t
             if #Centraliser(N, C) ne k then 
                //"        Complement", i, "eliminated by diagonal subgroup test (#C_N(S)).";
                continue; 
             end if;


             subs := LowIndexSubgroups(C,<t, t>); 
             nlix := #subs;
             if nlix eq 0 then
                 //"        Complement", i, "eliminated by low index test.";
                          continue;
             end if;
             //"        Complement", i, "has", nlix, "subgroups of index", t;

             for j := 1 to #subs do
                 S := subs[j];
                 if #Core(C,S) ne 1 then 
                    //"        Subgroup", j, "eliminated by core test.";
                    continue; 
                 end if;

                 //"\n      *** Doing subgroup", j, "of complement";

            // See if actions on orbits of N work
            O:=Orbits(N);
            if #O eq t then
              pts:=&cat[SetToSequence(O[i]): i in [2..#O]]; 
              K :=  Stabiliser(N,pts);
              if #K eq k and ncl< G | K > eq N and
                         #CosetImage(G,sub<G|N,S>) eq m then
                //"Action on orbits of N gives wreath product decomposition";
                wthprd := true;
                break tup;
              end if;
            end if;

              //special test for many examples of degree 24 
              //at most 3 generators are needed for K/D and
              //K meet D must have order 2.
            D := DerivedGroup(N);
            if Degree(G) eq 24 and tup eq <16, 3, 3> and #D eq 8 
                                           and D subset Centre(N) then
              //"Special test for <16, 3, 3> situation"; 
              tr := Transversal(N,D);
              T1 := {g : g in tr | #(ncl< N | [g] > meet D) le 2};
#T1;
              for g1 in T1 do
                K := ncl< N | [g1] >;
                T2 := {g : g in T1 | #(ncl< N | [g1,g] > meet D) le 2};
#T2;
                for g2 in T2 do
                  K := ncl< N | [g1,g2] >;
                  T3 := {g : g in T2 | #(ncl< N | [g1,g2,g] > meet D) eq 2};
                  for g3 in T3 do
                   K := ncl< N | [g1,g2,g3] >;
                   if #K eq k and ncl< G | K > eq N and
                             #CosetImage(G,sub<G|N,S>) eq m then
                     //"Found in special test";
                     wthprd := true;
                     break tup;
                   end if;
                  end for;
                end for;
              end for;
              //"Special test eliminates this case";
              continue j;
            end if;


                 CNS := Centraliser(N,S);
                 // Random test for factor of base group 
                 if Index(CNS,DerivedGroup(CNS)) gt 64 then
                    //"      Trying to decompose as wreath product with random subgroup";
                    for ct in [1..20] do
                       //"      Doing ct iteration", ct;
                       // Look for random normal subgroup of N of order k
                       K := ncl< N | Random(CNS) >;
                       while #K lt k do 
                          K := ncl< N | K, Random(CNS) >; 
                       end while;
                       if #K gt k then continue; end if;
                       if ncl< G | K > eq N and #CosetImage(G,sub<G|N,S>) eq m then
                          //"      Found on try number",ct;
                          wthprd := true;
                          break tup;
                       end if;
                    end for;
                   //"Random normal subgroup method failed";
                end if;

               // Full test
               // if IsAbelian(CNS) then
               //     A, phi := AbelianGroup(CNS);
               //     NK := [ H`subgroup@@phi : H in S ];
               //  else    
               //"         Looking for factor K in CNS of order", FactoredOrder(CNS);
                   t0 := Cputime(0);
                   // if IsSoluble(CNS) then
                   if false then
                       PC_CNS, phi := PCGroup(CNS);
                       NK := [ (H`subgroup)@@phi :  
                               H in Subgroups(PC_CNS: IsNormal := true, OrderEqual := k) ];
                   else
                       NK := [ H`subgroup : H in NormalSubgroups(CNS: OrderEqual := k) ];
                   end if;
                   //t1 := Cputime(t0);
               
               //"         Found", #NK, "candidates for the direct factor K in", t1, "seconds ";
               //t0 := Cputime(0);
               for T in NK do
                  if IsNormal(N,T) and ncl< G | T > eq N and 
                     #CosetImage(G,sub<G|N,S>) eq m then
                     wthprd :=  true;
                     K := T;
/*
                      B := DegreeReduction(T);
                      A := CosetImage(G,sub<G|N,S>);
                      H := WreathProduct(B, A);
                      f, phi := IsIsomorphic(G, H);
                      if not f then "***ERROR"; end if;
*/
                     break tup;
                  end if;
              end for;
              t1 := Cputime(t0);
              if #NK ne 0 then
                 //"         The", #NK, "candidates for K were eliminated in", t1, "seconds."
		 ;
              end if;
          end for;
        end for;
      end for;
      // IdentPop();
      
  end for;

  if wthprd then
      return true, K, C, S;
  else
      return false, _, _, _; 
  end if;

end intrinsic;
