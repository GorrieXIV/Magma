freeze;

/*
Code for maximal subgroups of almost simple groups with socle the
sporadic group Suz.
Data from Rob Wilson's online Atlas.
*/

get_standard_gens_Suz := function(G)
    /* G is a group iso to Suz */
    /* standard gens as defined in B'ham Atlas */
    /* coded by Bill Unger, 3/9/200r73 */

    P := RandomProcess(G);
    got_a := false;
    got_b := false;
    repeat
	x := Random(P);
	ord := Order(x);
	if not got_a and ord eq 14 then // 1 in 28
	    a := x^7;
	    got_a := true;
	    continue;
	end if;
	if not got_b and ord in {9, 18} then // about 1 in 7
	    b := x ^(ord div 3);
	    got_b := true;
	    continue;
	end if;
    until got_a and got_b;

    /* get a good b */
    repeat
        b := b^Random(P);
        ab := a*b;
    until Order(ab) eq 13 and Order(ab*ab*b) eq 15; // about 1 in 40
    return a, b;

end function;

SuzIdentify := function(group:max:=true,Print:=0)
    if Print gt 1 then print "Setting up standard group"; end if;
    
    A := PermutationGroup<1782 |
    \[ 949,2,728,1323,275,659,942,1054,908,252,209,1269,13,1514,623,
    1277,1135,778,19,1488,1497,1369,1700,1010,175,1749,1498,337,1406,
    1141,1421,945,1373,462,1340,730,1437,958,1333,1735,1566,364,148,
    1559,1250,755,376,235,758,1399,809,1525,1537,1419,1415,1476,598,
    1179,1091,1241,943,492,1099,804,432,820,360,503,1186,791,608,
    1769,888,1134,239,1675,559,1402,612,1390,434,552,564,761,642,282,
    1586,1659,1169,163,639,1632,1111,1776,1411,1230,605,98,526,923,
    302,924,1756,877,593,410,140,1538,511,323,1225,293,542,1115,644,
    1195,1325,238,119,974,1483,135,236,124,817,1389,554,1198,1524,
    1610,541,1532,1587,284,122,1616,1553,1183,1229,107,1076,718,895,
    1044,308,1037,1507,43,1409,621,1705,1467,1270,1469,1720,1454,1462,
    765,234,321,1215,909,90,169,335,505,1425,1622,164,1190,171,937,
    487,174,25,266,1300,1439,1671,1081,617,1509,273,1221,1166,921,
    844,260,815,838,1496,1149,193,1581,386,1658,1131,1209,1007,841,
    977,646,417,204,1473,1417,1252,658,11,210,1032,1085,789,1330,348,
    802,464,1662,1716,1725,1043,222,1050,1445,1571,1377,1272,228,1382,
    280,373,298,735,159,48,123,584,118,75,1492,1164,1112,808,842,
    1471,341,1470,649,1693,281,673,10,664,1674,374,663,257,917,1331,
    188,936,1227,1376,1388,331,176,982,984,269,1681,1245,1453,183,
    1710,5,1171,1758,1731,960,230,250,86,1771,134,1398,286,1573,533,
    1401,979,504,992,112,1673,1565,803,408,232,1087,1027,1184,101,
    1158,444,343,1689,506,145,1647,1644,551,781,1324,614,398,1266,
    463,419,475,1477,160,872,110,939,1666,527,1104,1381,669,1569,265,
    543,483,1284,165,1259,28,805,466,1232,246,461,305,1645,847,905,
    1213,215,1642,1103,1634,988,1699,843,911,1041,1125,358,1265,67,
    1544,1185,1690,42,365,1305,1176,1656,1535,915,1737,959,231,255,
    1745,47,751,1145,1249,577,874,1678,801,582,1246,195,1542,1384,
    1692,1061,1202,1434,1307,1036,1766,583,1456,315,435,1777,1414,
    1609,1301,760,1239,599,902,297,1264,106,962,835,732,414,807,529,
    203,1455,318,1004,879,717,1665,1387,1408,1490,1288,1773,429,430,
    431,65,870,81,399,1243,736,869,1231,1463,1579,1502,443,304,746,
    1315,1310,727,1247,865,1341,873,837,1357,1423,590,927,458,459,
    1475,342,34,317,217,1500,339,1606,634,550,470,477,1523,508,1762,
    319,476,471,756,479,1072,1413,1668,333,602,1750,1635,173,860,
    1612,996,648,62,1019,585,1629,1568,940,1495,1736,1754,725,640,68,
    291,166,307,1293,473,1580,680,109,512,739,1763,1429,1602,1594,
    1516,1396,1109,747,667,705,524,571,99,326,528,416,763,932,1289,
    288,1405,535,633,766,1427,1430,1228,131,113,332,811,1279,1362,
    1546,1688,1721,469,311,82,752,127,724,1448,1349,558,77,1555,1780,
    1753,1130,83,819,566,1484,1481,749,963,525,1584,1290,762,575,
    1144,380,884,579,1672,1503,384,396,237,494,1066,587,1578,821,456,
    1263,1034,105,676,1617,1501,1545,57,406,1755,699,484,1499,855,97,
    810,1739,71,609,999,1267,79,635,314,615,916,181,1494,1360,1487,
    150,738,15,1078,1574,1236,1022,1335,1526,1244,631,697,536,468,
    613,893,1053,947,91,502,641,85,1258,115,1585,202,1761,491,248,
    740,651,1601,1055,1084,1153,1485,1510,208,6,775,1256,1461,256,
    253,794,1583,522,1504,329,1102,671,798,251,1711,848,594,1547,
    1182,1641,510,782,1371,1280,1508,1386,1242,1080,1344,720,1670,706,
    885,1704,694,1218,1608,632,1142,601,812,701,1079,990,1152,523,
    691,1029,816,750,913,1443,712,1536,1137,1719,875,422,142,836,689,
    1438,833,1596,555,501,906,448,3,1088,36,1276,413,907,863,233,
    437,1286,622,513,650,1660,742,890,1278,900,445,521,1274,569,709,
    377,553,753,1394,46,478,757,49,1139,404,84,574,530,951,158,537,
    887,986,1395,1212,771,1203,1028,1636,660,1096,1013,18,1631,1339,
    312,681,1234,1291,785,1449,1533,1607,213,790,70,792,1009,665,
    1543,851,1412,672,880,1011,383,216,296,64,338,871,415,243,51,
    606,544,700,1687,1031,189,708,125,1306,565,66,589,901,1017,1752,
    1511,1040,1576,828,861,1474,1435,1447,722,1365,412,719,453,190,
    1392,1625,200,244,354,187,845,1175,345,675,1132,1326,796,1391,
    1047,1235,604,1393,1431,858,1506,488,829,1086,734,864,450,1757,
    1650,868,438,433,806,322,452,381,716,1075,104,1348,421,799,1180,
    1407,1035,578,692,956,767,73,1604,743,1143,892,636,894,143,1653,
    1000,1595,1404,745,822,407,1589,1593,346,726,733,9,162,1767,355,
    1380,710,1207,370,616,258,1436,1071,1558,186,1211,100,102,1217,
    926,457,1146,1052,1554,931,531,972,934,1282,261,172,1385,324,497,
    1240,7,61,1446,32,1747,638,1552,1,1528,764,1638,1162,1347,978,
    886,1251,38,372,279,1174,411,570,1303,1746,1444,1623,1734,1418,
    1220,971,933,973,120,1355,1562,201,955,290,1582,1482,267,1020,
    268,985,768,1432,352,1168,703,1159,292,995,994,993,490,1613,1782,
    610,897,1163,1045,1372,420,1123,1345,199,1189,793,24,800,1016,
    777,1014,1615,1012,823,1661,493,983,1188,627,1172,1779,1466,1026,
    300,773,707,1070,814,211,1214,592,883,394,146,1308,1118,826,356,
    1097,221,144,1002,1534,853,1122,1433,223,1051,929,637,8,653,1738,
    1403,1116,1529,1060,390,1328,1095,1199,1128,586,1367,1147,1191,
    1030,919,480,1726,1332,876,141,1106,624,702,687,180,1577,1713,
    654,212,862,299,729,1127,1479,59,1513,1618,1298,1063,776,1042,
    1138,63,1781,1764,670,350,327,1292,1077,1352,1196,520,1210,93,
    242,1486,1744,114,1058,1592,1039,1383,1619,1295,1048,1005,1124,
    357,1224,1089,1065,1567,563,197,849,1531,74,17,1316,714,1098,759,
    1743,30,698,891,576,378,928,1068,1459,192,1663,1151,704,655,1539,
    1519,1599,1760,303,991,1478,1707,953,1001,241,1346,185,1464,989,
    89,1560,276,1023,1772,961,846,367,1177,1621,58,881,1722,678,138,
    301,362,69,1428,1021,1008,170,1069,1319,1530,1197,116,1108,1194,
    128,1064,1550,1590,391,772,1204,1410,1317,914,1691,198,1110,922,
    770,347,1033,161,1489,925,695,1416,970,184,1273,1643,1126,111,
    1493,262,540,139,96,439,340,1287,783,854,626,1648,1515,405,941,
    60,686,436,630,271,385,449,1336,379,45,957,207,1321,1343,1255,
    661,1257,643,336,1363,1458,1741,591,409,359,316,611,1521,12,153,
    1775,227,1222,748,1732,731,16,744,545,683,1614,935,1351,334,1770,
    737,1233,427,532,573,784,1105,507,1527,1121,1353,1548,1094,1712,
    177,403,1679,964,1697,366,818,393,1038,1358,447,1312,1311,1605,
    1774,446,1136,1206,1702,1192,1600,1253,1520,4,313,117,850,1361,
    1062,1329,214,259,1074,39,1334,628,1248,1541,1698,780,35,451,
    1680,1254,688,1006,1165,954,878,557,1375,1283,1107,1296,1669,975,
    1356,454,1309,1575,619,1327,546,1260,1598,834,1441,1067,1465,22,
    1728,682,1003,33,1729,1350,263,226,1686,1684,912,328,229,1119,
    388,938,685,424,264,126,80,852,839,856,754,769,519,1397,285,50,
    1626,289,78,1057,899,534,29,882,425,149,1205,95,797,481,401,55,
    1219,206,969,54,1420,31,1422,455,1522,167,1682,538,1187,515,539,
    857,987,1049,392,831,918,37,721,178,1695,1366,1703,711,966,224,
    944,832,556,786,1611,1646,1491,272,156,418,397,1624,1261,1148,
    1696,662,157,440,1167,1368,1025,152,1627,154,247,245,1472,205,
    830,460,56,320,1160,1090,1639,568,981,121,567,656,1113,620,20,
    1216,426,1452,240,1226,618,498,191,21,27,603,465,596,442,581,
    668,1505,859,147,684,182,657,825,1677,1092,14,1238,518,1742,1667,
    1155,1322,1268,1424,472,129,52,629,1294,950,1059,1193,1133,132,
    787,1046,369,713,53,108,1154,1540,1337,387,795,361,597,547,677,
    1297,1683,1200,1551,948,137,930,560,1724,1591,920,44,1170,1620,
    976,1714,1694,295,41,1129,496,330,1715,225,1709,287,625,1359,827,
    1082,588,441,509,194,980,666,572,645,87,133,1706,903,1201,1557,
    1117,904,517,898,723,1597,1364,1156,1320,652,516,1723,889,1313,
    467,788,696,402,130,1450,489,997,1281,1015,136,595,1093,1120,
    1561,1178,168,967,1457,840,1400,1468,1628,495,1655,779,92,1730,
    351,486,774,1701,952,1480,1640,679,349,1223,310,344,1451,309,
    1237,1649,867,1654,1652,896,1651,1630,368,1718,196,88,741,1018,
    218,1150,1664,423,325,1518,482,1354,690,179,580,294,254,76,1676,
    1512,382,1302,1342,270,1426,1549,1379,1778,1378,813,548,306,363,
    1208,389,249,1564,1440,1460,1304,1338,353,23,1637,1318,1442,693,
    151,1588,1161,1708,1572,274,674,1299,1083,1563,1570,219,1717,1657,
    715,155,549,1181,1603,1556,220,1073,1759,1370,1374,1633,278,1275,
    1733,968,40,499,371,1056,607,1740,1262,1517,1140,1114,375,965,
    946,1748,26,485,1751,824,562,500,600,103,866,277,1727,1157,647,
    474,514,1101,1768,395,910,1765,72,1285,283,1173,428,1314,1271,94,
    400,1685,1024,561,1100,998 ],
    \[ 28,33,42,49,51,17,59,14,70,73,81,84,87,22,99,101,26,15,
    117,120,124,8,133,135,140,6,145,40,156,160,72,163,47,134,179,
    3,186,188,192,1,57,36,4,210,213,137,2,222,43,231,68,240,247,
    250,89,75,255,261,79,37,276,279,287,290,299,302,305,5,311,94,
    324,97,98,333,331,340,342,347,7,62,108,359,361,112,372,375,104,
    23,329,391,399,402,407,9,416,38,31,10,18,427,131,438,445,13,
    448,451,453,11,462,465,468,12,304,481,486,377,150,498,500,154,
    511,518,521,159,529,532,535,543,545,548,16,556,88,220,171,288,
    274,573,576,177,588,591,289,597,184,609,616,415,623,19,632,608,
    638,20,647,199,658,491,21,204,674,676,208,136,690,400,700,702,
    707,710,24,351,118,722,725,729,25,228,229,430,745,748,752,27,
    759,60,182,96,774,596,779,245,787,792,795,803,806,810,29,817,
    621,823,828,30,837,840,843,32,848,268,859,862,272,872,587,882,
    141,449,612,34,785,285,896,422,708,280,904,885,35,627,297,921,
    926,503,933,936,940,943,864,281,82,218,905,959,39,963,318,881,
    975,322,986,506,991,238,41,1001,559,1010,1012,525,338,293,1029,
    61,1036,1038,193,44,622,1052,1054,45,1062,46,1065,264,76,169,80,
    1073,52,1042,875,1030,48,1083,355,164,738,371,1093,1096,1099,
    1105,1108,1053,50,1117,382,1125,605,386,1135,603,389,1143,1146,
    1147,1090,1153,397,1157,717,571,1164,1166,1171,53,1180,561,1022,
    54,1190,414,1110,426,452,306,55,1204,56,1210,425,1218,198,1221,
    1224,58,1228,277,1234,436,1245,1247,719,1154,443,421,515,851,883,
    1268,1271,797,63,505,215,1276,241,1004,460,1281,457,1282,670,203,
    352,455,138,1290,64,473,1301,309,477,814,619,1313,485,1025,244,
    65,358,1329,1333,66,798,1338,67,441,496,1116,671,861,107,469,69,
    1352,437,857,1273,509,1047,1371,1372,1373,516,1382,1387,1144,162,
    246,1393,71,528,527,1384,1398,1085,1324,995,1086,628,639,74,1396,
    541,723,982,912,1109,1424,1430,1416,1399,77,91,554,1440,1168,
    1443,1286,78,691,563,1452,1215,566,242,1310,570,1207,395,119,
    1464,1104,804,553,624,83,546,583,1468,1296,586,1201,1155,574,
    1474,1077,1476,1478,85,1482,1233,1327,86,558,1492,1148,607,1497,
    917,1500,1202,614,1507,530,1512,1514,816,1515,1187,625,821,90,
    1375,173,1519,454,533,1521,1123,360,1460,878,1531,1534,92,1538,
    645,618,1150,974,1388,93,1549,654,296,1552,656,937,1558,600,1149,
    216,95,148,665,773,1562,669,1496,1568,672,1537,1265,1266,1576,
    730,100,934,594,1581,684,1311,1072,688,562,1590,1469,1592,1445,
    102,630,698,1596,1481,781,947,1380,1601,103,459,1222,105,522,
    1606,405,106,1356,1610,369,111,1615,720,895,409,819,784,221,889,
    109,1256,332,110,357,217,219,768,736,1427,1314,128,1098,951,743,
    1626,756,1138,251,1631,113,344,1328,1627,114,786,758,1504,1308,
    589,1013,115,1640,765,898,993,116,860,999,1255,772,564,1633,1417,
    1103,1334,617,1078,227,783,1340,1361,1651,1199,712,790,1572,1659,
    1212,1337,1541,1170,121,801,802,1665,1463,1467,1198,1302,1261,122,
    1670,123,1046,815,939,1049,668,1158,1415,1240,125,575,1189,1677,
    126,836,1517,127,315,834,1434,411,1341,362,1516,517,606,599,1381,
    129,1264,1689,1169,130,1690,855,1470,298,901,1075,990,641,994,
    132,1317,825,343,870,1694,793,1484,1693,278,1088,766,880,1242,
    1699,1700,185,1546,847,1354,408,1439,139,307,893,1397,263,888,
    886,1248,1448,900,1040,664,1557,497,1041,580,142,1707,143,911,
    1447,1114,716,144,1711,919,927,270,187,1342,1102,626,924,1684,
    1094,1404,682,1582,146,714,1501,1674,1493,256,1718,147,918,1696,
    1252,1269,653,308,149,488,949,539,800,1254,1502,955,732,257,1330,
    151,735,581,152,267,1681,1641,153,1679,968,1035,973,972,965,962,
    1064,1128,1283,1284,155,981,363,992,891,283,824,1005,335,489,964,
    1617,1232,157,158,997,961,1423,753,869,1236,1006,1736,167,1692,
    1738,366,762,967,1632,706,1528,161,1612,365,1019,1494,487,1023,
    1374,1733,1027,1300,1473,746,742,1034,1367,1551,1365,1749,1067,
    897,165,1425,166,1080,1045,1251,1288,1048,1089,1145,1151,844,1653,
    1413,495,168,1747,1060,1032,833,807,677,1142,252,1437,170,1137,
    526,172,1364,178,1598,1654,175,954,273,197,418,174,398,1044,1081,
    1176,629,699,176,1346,1559,388,631,1008,849,873,728,749,1229,
    1636,180,1723,1664,1322,1566,1426,709,181,1748,1115,1697,1051,183,
    1106,1122,846,1306,667,1339,744,537,1131,1238,1635,1002,567,464,
    1705,1140,970,439,254,957,1018,1113,976,1715,189,370,190,1249,
    303,582,191,1520,1394,796,381,1623,1613,354,412,1753,958,1230,
    1275,194,1237,1756,1175,195,1758,1272,1179,560,711,1181,1569,1028,
    196,1410,662,740,703,601,1518,1235,275,1141,1195,1420,512,1480,
    348,633,200,838,201,689,763,236,1459,504,1766,202,1524,243,1535,
    1213,1347,1216,1177,841,852,392,551,1709,205,687,948,1385,206,
    1752,1495,295,207,1076,724,1092,928,907,1600,209,704,1057,1456,
    1243,1525,540,1461,1280,466,577,211,1703,1058,212,1671,858,1629,
    747,519,1260,513,1603,265,403,914,214,1644,890,1639,387,989,1011,
    1303,1432,1401,1522,979,1498,226,330,1586,980,1431,555,456,1050,
    223,868,1287,1331,1318,224,1604,225,1444,374,552,284,1294,1159,
    1768,1298,1039,1550,262,1253,867,1761,230,1079,1307,1565,1616,
    1026,1257,1395,482,1548,1775,1435,232,1016,692,1223,339,592,826,
    233,234,1024,1326,1152,1070,1226,930,1722,235,1683,922,1345,953,
    310,248,524,1716,237,695,1556,328,1402,239,721,771,1597,260,1055,
    1442,1390,1136,1441,1583,760,1350,983,754,1436,916,1217,1132,673,
    1450,1363,1770,1594,1020,1370,1369,971,1720,508,1172,854,613,727,
    249,1378,1655,1160,1490,523,1100,1239,1577,420,929,1392,1686,1455,
    507,1087,253,1289,1191,1595,1488,1539,1043,379,686,1074,484,1751,
    327,1309,1706,585,385,696,258,1112,1409,259,1726,1412,1673,1295,
    1267,1698,1773,1418,1735,799,1769,1119,1717,1406,902,376,1451,
    1428,1642,1638,1561,542,1250,731,1667,977,266,463,701,845,604,
    1178,1348,1186,620,590,1185,1483,269,1704,431,1278,835,271,770,
    1429,1743,1391,932,1419,336,367,1325,856,1376,514,1529,1725,830,
    383,1220,1355,1742,282,678,1465,776,646,471,1422,286,394,1728,
    950,884,433,446,291,1277,938,378,292,1646,866,1386,1593,853,1353,
    1173,1031,294,1611,1446,1605,461,1710,1297,1591,1772,1332,899,419,
    598,634,1299,1661,1408,1188,769,300,1527,301,1505,1407,1487,1454,
    1211,423,1745,1687,1542,903,1129,996,876,909,1621,913,1554,693,
    1066,952,813,312,404,894,1656,313,1258,314,1279,1545,1650,1263,
    1320,683,316,1291,350,1485,906,1731,317,644,1351,569,1544,1014,
    733,353,648,319,1009,320,1362,718,842,1526,321,373,578,349,1682,
    1126,685,323,1532,944,325,326,428,892,1411,1130,1746,410,960,
    1708,1165,966,782,1740,447,429,435,334,1082,1509,1734,1587,751,
    337,538,805,1645,442,579,1584,1270,483,1120,341,1713,1292,470,
    1489,879,1741,741,1182,1433,557,345,942,346,865,390,863,458,1208,
    984,908,1061,1405,475,1293,1139,1316,1466,1563,536,850,1588,356,
    734,956,1652,368,364,1192,1730,1244,1017,444,761,1063,1246,396,
    1567,1285,550,1622,1414,697,478,1624,777,1658,1630,1007,1084,636,
    1068,1589,1688,1510,829,998,380,501,1111,547,544,1205,1156,1511,
    572,1647,384,1343,839,1513,1479,479,778,811,1543,1540,1523,1744,
    393,1777,1648,1462,1649,1127,492,1486,1097,417,476,874,401,615,
    1193,413,871,1174,1379,1573,1457,1662,1574,490,1625,642,1508,406,
    1755,1620,635,1214,680,595,1458,1669,1774,1134,1227,877,780,1184,
    1231,655,969,1675,1037,1579,925,1161,1781,1666,1071,568,602,424,
    1680,1200,737,775,493,1614,1602,1643,1499,1739,467,432,1312,694,
    434,1003,1183,1477,593,1091,652,440,651,1438,480,726,1779,1712,
    549,1564,1760,1194,450,1570,920,1421,1359,1503,611,1259,818,1724,
    666,1685,1349,1368,1782,715,1506,472,1403,474,643,1319,681,1225,
    923,1366,1571,1637,494,1599,1729,739,831,822,1472,1530,1765,988,
    1678,1449,1608,1321,610,499,502,1609,1547,649,1101,1672,978,1304,
    827,705,1727,1315,915,510,1389,1059,1377,534,1780,1219,520,1560,
    660,887,1668,1471,531,1274,661,1580,1695,1536,1702,1663,1163,820,
    1107,1197,1719,1767,1203,1000,1778,1121,832,985,791,1764,1133,565,
    637,1754,1206,788,657,584,659,1762,1575,755,945,1585,931,1033,
    1262,1167,1021,1453,910,1763,1336,1305,1335,1400,1344,1578,1676,
    1162,640,1196,935,650,1618,1619,1383,663,1628,808,1771,1657,757,
    1323,675,1357,1360,679,1721,1069,1533,1607,1015,1691,1701,1124,
    812,713,1358,941,1737,794,1553,1056,750,1209,764,767,789,809,
    1491,1776,1555,1714,1757,1660,1118,1759,946,1095,987,1750,1634,
    1241,1475,1732 ] >;
    A`Order := 896690995200;
    c := A.1; b := A.2;
    a := ((c*b)^14)^((c*b*b)^2);

    ab := a*b; abb := ab*b; ababb := ab*abb; 
    assert Order(a) eq 2;
    assert Order(b) eq 3;
    assert Order(ab) eq 13;
    assert Order(ababb) eq 15;
    assert Order(ab*ababb) eq 12;
    
    simp := sub<A|a,b>;
    simp`Order := #A div 2;

    if Print gt 1 then print "Calling FPGroupStrong"; end if;
    F, phi := FPGroupStrong(simp);

    soc := Socle(group);
    aut := Index(group, soc);
    if Print gt 1 then printf "group is Suz:%o\n", aut; end if;
    ga, gb:= get_standard_gens_Suz(soc);
    soc := sub< soc | ga,gb >;
    soc`Order := Order(simp);
    newgens := [ group | ga, gb];
    newgens_grp := sub<group|newgens>;
    newgens_grp`Order := Order(simp);
    for g in Generators(group) do
       if not g in newgens_grp then
	    Append(~newgens,g);
	    newgens_grp := sub<group|newgens>;
	    newgens_grp`Order := 2*Order(simp);
	end if;
    end for;
    group := newgens_grp;
    aSuz := sub< A | a, b, c >;
    aSuz`Order := 2*Order(simp);
    ims := [ aSuz | a, b];
    homom :=  hom< soc -> simp | ims >;
    for i in [Ngens(soc)+1..Ngens(group)] do
	g := group.i;
	CG := aSuz; ce := Id(aSuz);
	for j in [1..2] do
	    x := homom(soc.j^g);
	    CGx := Centraliser(CG, x);
	    isc, h := IsConjugate(CG, simp.j^ce, x: RightSubgroup := CGx);
	    if not isc then error "Conjugation error in Aut(Suz)"; end if;
	    CG := CGx;
	    ce := ce*h;
	end for;
	Append(~ims,ce);
    end for;
    newgens := ims;
    ims_grp := sub<aSuz|ims>;
    ims_grp`Order := #group;
    for g in Generators(aSuz) do
        if not g in ims_grp then
            Append(~ims,g);
            ims_grp := sub<aSuz|ims>;
            ims_grp`Order := 2*Order(simp);
        end if;
    end for;
    aSuz := ims_grp;

    homom :=  hom< group -> aSuz | newgens >;

    maximals:= [];
    if not max then
        return homom, aSuz, maximals, F, phi;
    end if;

    ab := a*b; abb := ab*b; ababb := ab*abb; 

    // G(2,4)
    M := sub<simp| (((ab)^3*b)^6)^((ab)^5), ((ababb)^3)^((abb)^4)>;
    M`Order := 251596800;
    Append(~maximals, M);

    // 3.U(4,3):2
    M := sub<simp|a^b, ((ab^3*ababb^2*abb)^2)^(abb^4)>;
    M`Order := 19595520;
    Append(~maximals, M);

    // U(5,2)
    M := sub<simp|(ab*ababb^2)^4,
		    ((ab*ababb*ab^3*ababb^2)^6)^((ab*ababb*ab)^-9)>;
    M`Order := 13685760;
    Append(~maximals, M);

    // 2^(1+6).U(4,2)
    M := sub<simp| a^b, (ababb^3)^(abb^6)>;
    M`Order := 3317760;
    Append(~maximals, M);

    // 3^5:M11
    M := sub<simp| ((ab*ababb^2)^4)^(ab^6), ((ab*ababb^2)^6)^(abb^5)>;
    M`Order := 1924560;
    Append(~maximals, M);

    // J2:2
    M := sub<simp| a^(ab^4), (ababb^3)^(abb^6) >;
    M`Order := 1209600;
    Append(~maximals, M);

    // 2^(4+6):3A6
    M := sub<simp| ab^-5*b*ab^4, ((ab*ababb^2)^2)^(abb^6) >;
    M`Order := 1105920;
    Append(~maximals, M);
    
    // (A4 x L(3,4)):2
    gens := function(S)
	w1 := S.1; w2 := S.2; w3 := w1 * w2; w4 := w3^6; w5 := w4^-1;
	w6 := w5 * w1; w1 := w6 * w4; w4 := w3 * w2; w5 := w3 * w4;
	w6 := w3 * w5; w7 := w6 * w3; w8 := w7 * w4; w9 := w3 * w8;
	w10 := w9 * w4; w9 := w5 * w10; w2 := w9^3; w6 := w7^4; w7 := w5^4;
	w4 := w7 * w6; w5 := w4^-1; w6 := w5 * w2; w2 := w6 * w4;
	return [w1,w2];
    end function;
    M := sub<simp | gens(simp) >;
    M`Order := 483840;
    Append(~maximals, M);

    // 2^(2+8):(A5 x S3)
    gens := function(S)
		w1 := S.1; w2 := S.2; w3 := w1 * w2; w4 := w3 * w3;
		w5 := w4^-1; w6 := w5 * w1; w1 := w6 * w4; w4 := w3 * w2;
		w5 := w3 * w4; w2 := w5^5; w6 := w3 * w5; w3 := w6^9;
		w4 := w3^-1; w5 := w4 * w2; w2 := w5 * w3;
		return [w1,w2];
	    end function;
    M := sub<simp | gens(simp)>;
    M`Order := 368640;
    Append(~maximals, M);

    // M12:2
    M := sub<simp | ab^-2*b*ab, b^(abb^6)>;
    M`Order := 190080;
    Append(~maximals, M);

    // 3^(2+4):2.(A4 x 2^2).2
    gens := function(S)
		w1 := S.1; w2 := S.2; w3 := w1 * w2; w4 := w3 * w2;
		w5 := w3 * w4; w6 := w3 * w5; w7 := w6 * w3; w8 := w7 * w4;
		w9 := w3 * w8; w10 := w9 * w4; w9 := w5 * w10; w2 := w9^3;
		w1 := w8 * w8; w4 := w3^-1; w9 := w4 * w1; w1 := w9 * w3;
		w6 := w5^12; w5 := w7^7; w7 := w6 * w5; w6 := w7^-1;
		w9 := w6 * w2; w2 := w9 * w7;
		return [w1,w2];
	    end function;
    M := sub<simp| gens(simp) >;
    M`Order := 139968;
    Append(~maximals, M);

    // (A6 x A5).2
    gens := function(S)
	w1 := S.1; w2 := S.2; w3 := w1 * w2; w4 := w3 * w2; w5 := w3 * w4;
	w6 := w3 * w5; w7 := w6 * w3; w8 := w7 * w4; w9 := w3 * w8;
	w10 := w9 * w4; w9 := w5 * w10; w8 := w9^3; w4 := w3^12; w3 := w4^-1;
	w9 := w3 * w8; w1 := w9 * w4; w6 := w5^12; w5 := w7^3; w7 := w6 * w5;
	w6 := w7^-1; w9 := w6 * w8; w2 := w9 * w7;
	return [w1,w2];
    end function;
    M := sub<simp| gens(simp)>;
    M`Order := 43200;
    Append(~maximals, M);

    // (A6 x 3^2:4).2
    gens := function(S)
		w1 := S.1; w2 := S.2; w3 := w1 * w2; w4 := w3 * w2;
		w5 := w3 * w4; w6 := w3 * w5; w7 := w6 * w3; w8 := w7 * w4;
		w9 := w3 * w8; w10 := w9 * w4; w11 := w10 * w4; w12 := w3 * w11;
		w9 := w5 * w10; w8 := w9^3; w5 := w3 * w6; w6 := w5^7;
		w9 := w7^12; w7 := w6 * w9; w6 := w7^-1; w9 := w6 * w8;
		w1 := w9 * w7; w13 := w12^6; w10 := w11 * w3; w9 := w13 * w10;
		w13 := w9^-1; w7 := w13 * w8; w2 := w7 * w9;
		return [w1,w2];
	    end function;
    M := sub<simp| gens(simp)>;
    M`Order := 25920;
    Append(~maximals, M);

    // L(3,3):2
    if aut eq 1 then
	M := sub<simp| ab^-6*b*ab^5, ((ab*ababb*ab*ababb^2)^2)^(abb^3)>;
	M`Order := 11232;
	Append(~maximals, M);
	M := sub<simp|M^c>;
	M`Order := 11232;
	Append(~maximals, M);
    end if;

    // L(2, 25)
    M := sub<simp| a, (ababb^5)^(ab^2*ababb)>;
    M`Order := 7800;
    Append(~maximals, M);

    // A7
    M := sub<simp|a^((ab*ababb*ab)^2), ((ab^3*ababb^2*abb)^2)^((ab^2*ababb)^5)>;
    M`Order := 2520;
    Append(~maximals, M);

    return homom, aSuz, maximals, F, phi;

end function;
