freeze;
 
/* Code for maximal subgroups of Sz(32), Sz(32).5 */

function Sz32Identify(group: max:= true, Print:=0)
// group should be already knwon to be isomorphic to Sz(32) or Sz(32).5

  if Print gt 1 then print "Making standard group"; end if;
  //use generators of Sz(32).5 from Rob Wilson's online ATLAS
c:=Sym(1025)!
[234,518,385,853,102,725,912,695,586,262,433,377,378,549,983,185,587,249,
408,115,317,556,403,680,203,477,314,576,780,545,411,79,938,318,701,107,
62,236,681,955,90,59,493,822,798,899,349,271,514,630,864,664,308,861,
134,803,980,492,42,905,260,37,400,990,684,1009,946,766,802,214,762,190,651,
670,166,745,672,396,32,490,554,151,168,220,807,137,458,917,409,41,736,534,
288,991,1018,573,117,557,129,516,563,5,863,177,517,830,36,239,213,267,688,
1024,752,438,20,906,97,612,834,144,353,713,179,240,866,914,673,744,99,346,
136,195,435,55,650,131,86,416,250,165,646,395,1000,120,256,929,718,153,582,
298,82,599,148,812,384,885,198,1019,890,482,886,1014,454,524,140,75,541,83,
858,390,768,970,510,746,850,959,104,347,123,823,558,995,714,503,16,443,525,
387,663,72,827,694,515,622,132,677,568,157,475,773,845,730,25,997,819,579,
716,998,805,659,1003,640,109,70,463,272,748,511,461,84,561,602,338,776,555,
1011,1023,939,985,841,777,362,763,1,756,38,696,273,108,124,782,536,635,792,
693,915,969,926,18,139,675,398,268,702,466,145,441,520,908,61,795,10,375,565,
334,473,110,253,878,307,48,216,238,345,989,685,533,610,769,348,623,440,439,
950,293,593,683,93,382,856,370,704,285,303,633,478,469,150,616,774,794,521,
294,931,448,530,270,53,952,814,636,410,724,27,483,639,21,34,821,896,342,964,
352,883,979,570,944,737,723,537,949,857,500,265,1005,594,1008,223,607,629,
797,321,932,825,274,130,178,280,47,583,462,323,121,728,778,852,786,876,960,
481,480,232,559,374,498,1001,574,662,656,291,465,648,1016,364,263,421,12,13,
779,601,661,289,884,155,3,894,188,417,994,170,425,575,1006,907,142,78,620,
252,1015,63,619,799,23,948,717,877,508,19,89,312,31,942,811,519,476,138,388,
585,882,671,376,512,562,668,391,571,526,788,445,921,506,432,11,913,133,869,
552,114,283,282,257,976,186,953,429,626,874,305,1020,875,954,928,547,163,789,
923,543,87,920,658,219,351,215,618,371,255,729,1002,297,867,851,895,266,757,199,
415,26,296,880,361,360,160,315,844,838,839,996,700,933,80,502,58,43,749,1022,
588,653,365,808,333,709,491,184,755,540,431,733,407,810,173,218,422,596,49,193,
100,105,2,414,258,302,764,613,164,187,427,783,531,958,306,528,924,277,92,
800,242,330,569,904,505,167,580,457,644,30,720,453,849,14,945,900,437,722,81,
225,22,98,181,363,919,221,423,101,842,264,710,837,197,538,326,426,947,96,367,
392,28,578,577,206,542,891,149,350,761,418,9,17,496,759,647,697,999,286,336,
846,513,897,741,152,615,380,222,824,835,963,941,339,872,669,278,940,118,523,
667,600,299,918,464,401,397,634,194,281,992,968,446,965,689,340,50,806,901,
295,621,243,311,787,873,316,212,678,986,818,544,961,141,590,372,848,135,73,
721,497,951,715,369,699,460,210,739,381,368,189,52,975,967,614,424,609,74,
420,77,127,902,251,817,196,641,1007,24,39,893,287,65,276,1012,1013,111,628,
889,972,854,245,192,8,237,591,775,657,488,35,254,747,292,765,796,836,1021,
501,566,966,740,122,183,655,207,405,147,816,546,652,553,329,313,6,916,936,
354,467,202,815,790,507,735,734,91,328,754,660,712,598,743,742,128,76,174,
703,217,494,974,781,113,820,738,504,235,474,988,589,791,584,71,233,522,705,
68,804,171,279,813,793,987,200,300,698,224,231,355,379,29,751,241,527,870,
934,357,637,428,455,732,760,244,771,301,261,706,341,45,402,535,879,69,56,
767,209,631,85,499,903,509,413,154,770,310,731,719,676,643,205,753,319,44,
180,603,344,910,191,982,871,106,993,984,956,119,604,707,567,485,486,1010,230,
564,962,484,201,595,925,649,548,175,471,356,4,692,887,290,332,169,977,909,
54,971,103,51,957,125,470,911,436,784,829,608,638,447,450,358,406,269,801,
479,981,419,324,383,156,161,855,1017,690,159,581,930,682,386,472,320,597,1025,
46,551,632,674,809,539,60,116,394,259,860,826,868,7,434,126,246,726,88,617,
560,459,430,943,456,532,847,248,1004,452,146,892,304,343,489,785,973,727,978,
33,228,611,606,412,922,327,550,67,572,404,331,284,654,309,444,451,40,833,
865,529,176,359,645,843,605,322,627,711,666,625,247,172,862,691,935,750,665,
442,859,937,325,57,881,828,15,832,229,642,772,758,275,64,94,624,831,389,182,
487,204,208,592,143,366,468,211,927,335,393,679,337,66,840,226,686,687,162,
399,373,888,95,158,449,708,495,227,112,898];

d:=Sym(1025)!
[108,464,30,467,363,352,720,107,1010,985,378,984,550,218,909,517,260,280,737,
18,349,207,339,777,906,251,93,31,755,440,799,495,126,981,702,528,463,67,279,
514,269,327,222,941,429,706,610,461,931,677,188,472,294,165,470,147,317,273,
473,661,676,304,934,641,129,762,1008,118,391,646,634,408,274,293,887,206,938,
726,185,407,497,1004,864,332,35,37,713,3,578,424,840,383,957,298,780,636,
69,270,919,606,12,603,174,575,888,141,234,997,361,662,342,545,412,992,694,
540,558,865,836,632,208,588,1025,547,587,872,8,56,691,1024,554,723,841,168,
505,954,786,237,835,359,639,401,373,319,838,101,55,927,519,149,224,736,171,
144,241,281,930,159,454,571,673,313,626,779,377,75,81,219,512,1007,908,115,
958,426,567,580,217,157,658,105,770,995,892,1001,238,771,384,820,221,768,216,
879,480,814,104,766,418,703,390,535,368,886,945,142,956,791,228,385,579,837,
364,943,156,195,585,871,347,951,1014,61,210,427,380,64,291,624,722,455,689,
428,590,831,968,1017,976,400,200,834,34,459,556,503,131,527,561,751,471,462,
116,869,538,45,362,572,826,1012,114,730,483,609,230,330,337,543,562,246,878,
667,664,890,278,765,925,211,817,625,978,1006,325,50,366,904,484,929,868,392,
476,16,28,136,965,318,498,850,264,916,82,797,187,856,515,27,960,939,844,72,
474,686,99,375,827,58,947,249,530,539,345,882,630,96,151,741,85,213,262,902,
422,819,616,39,884,665,605,748,316,1018,481,91,49,987,23,889,584,183,715,
769,773,51,276,988,942,669,350,794,38,816,340,177,788,233,608,500,615,604,
745,324,760,125,935,907,533,663,406,548,743,10,937,586,344,815,302,824,135,
541,915,21,718,727,617,1003,979,405,980,71,933,74,805,139,808,688,849,749,
24,447,333,15,971,47,338,295,173,258,227,914,504,189,120,297,36,153,560,169,
714,809,581,145,894,900,247,1015,122,309,896,9,396,967,695,460,619,746,633,
442,94,657,502,26,137,787,757,275,154,486,155,389,699,256,719,138,243,813,
1023,687,231,150,421,97,1009,343,284,128,252,111,778,301,854,781,307,859,414,
76,860,33,640,123,845,14,446,789,911,732,468,577,244,795,654,614,792,435,403,
705,439,877,637,40,867,642,758,631,437,493,413,42,846,655,477,180,356,312,
2,790,593,621,972,65,70,668,783,226,653,236,68,41,582,656,458,948,804,487,
346,847,693,25,862,79,775,678,479,434,989,638,308,311,682,240,140,761,557,
876,409,215,940,492,643,225,531,798,478,54,570,709,776,1019,253,59,905,1,
747,508,881,974,670,803,367,897,465,496,729,444,875,86,357,589,893,611,323,
620,953,261,806,13,117,576,901,73,286,268,921,277,522,306,488,821,310,11,
1016,623,158,650,186,553,17,255,489,419,386,112,698,425,870,451,802,485,880,
963,351,296,996,932,87,701,321,525,712,84,382,506,436,192,753,336,785,404,
774,161,415,160,431,290,591,148,990,923,1005,704,975,851,800,199,119,759,80,
248,32,355,574,44,20,612,432,618,885,764,420,499,546,354,920,315,716,912,742,
924,299,756,520,303,167,450,22,648,964,595,102,532,573,536,423,395,182,445,
711,681,106,202,918,832,181,991,696,456,43,725,891,922,511,772,360,482,201,
983,823,926,283,365,555,132,110,855,250,172,1020,524,966,203,66,88,265,223,
53,982,651,597,542,394,322,740,833,430,628,513,453,734,46,596,184,552,371,
449,335,448,501,549,358,433,163,534,684,675,635,739,977,801,510,647,266,652,
717,735,955,509,193,697,242,551,807,4,874,490,863,100,191,89,767,708,494,
398,397,752,170,287,629,379,194,438,334,288,627,592,724,898,685,839,178,1022,
263,326,196,387,146,830,166,842,190,544,599,6,416,103,666,559,411,229,272,
910,417,583,314,970,903,402,993,601,811,692,969,176,645,1011,917,825,671,410,
289,521,565,564,92,239,95,936,782,728,959,443,998,852,1002,376,986,873,690,
523,796,469,563,707,232,961,52,205,152,812,83,721,328,529,491,348,946,598,
198,622,204,60,214,649,369,683,143,130,329,209,507,124,944,320,175,57,679,
672,254,895,19,952,518,566,63,5,331,731,341,600,537,660,994,853,568,738,
999,949,220,164,271,121,750,48,393,763,962,62,452,475,399,179,594,98,381,
133,441,457,516,245,754,259,866,613,1000,388,77,353,861,292,134,300,644,372,
810,109,466,162,285,744,113,829,267,700,659,848,78,282,1021,858,822,370,569,
793,602,818,950,784,843,710,526,197,235,212,90,674,883,374,257,7,1013,973,
913,928,127,680,607,29,828,857,899,305,733];

  sz5:=sub<Sym(1025)|c,d>;
  //get standard generators a,b of Sz(32).
  a := c;
  repeat b := c*(c*c^d)^Random(sz5); until Order(b) eq 4 and
   Order(a*b*a*b*b) eq 25 and Order(a*b*a*b*a*b^2*a*b*a*b^2*a*b^2) eq 25;

  sz:=sub<sz5|a,b>;
  // we want generators of sz to come first in generators of sz5
  sz5:=sub<sz5|a,b,d>;

  if Print gt 1 then print "Calling FPGroupStrong"; end if;
  F, phi := FPGroupStrong(sz);

  if Print gt 1 then print "Setting up isomorphism"; end if;
  soc := Socle(group);
  //Find standard generators of soc - first ag of order 2.
  repeat ag:=Random(soc); until Order(ag) mod 2 eq 0;
  ag := ag^(Order(ag) div 2);
  //now xg of order 5
  repeat xg:=Random(soc); until Order(xg) mod 5 eq 0;
  xg := xg^(Order(xg) div 5);
  //now find standard gen bg
  repeat bg := ag*xg^Random(soc); until Order(bg) eq 4 and
   Order(ag*bg*ag*bg*bg) eq 25 and
   Order(ag*bg*ag*bg*ag*bg^2*ag*bg*ag*bg^2*ag*bg^2) eq 25;
  
  soc := sub<soc|ag,bg>;
  homom := hom<soc->sz|[a,b]>;

  //change generators of group to get those of soc coming first
  newgens := [group | ag,bg];
  for g in Generators(group) do
   if not g in sub< group | newgens > then Append(~newgens,g); end if;
  end for;
  group := sub< group | newgens >;

  //Now identify images of all generators of group in sz5.
  ims := [a,b];
  for i in [Ngens(soc)+1..Ngens(group)] do
      g := group.i;
      CG := sz5; ce := Id(sz5);
      for j in [1..Ngens(sz)] do
        isc, h := IsConjugate(CG,(sz.j)^ce,((soc.j)^g)@homom);
        if not isc then error "Conjugation error in Aut(Sz(32))"; end if;
        CG := Centraliser(CG,((soc.j)^g)@homom);
        ce := ce*h;
      end for;
      Append(~ims,ce);
  end for;
  //and extend homomorphism from group -> sz5
  homom := hom< group -> sz5 | ims >;


  maximals:= [];
  if not max then
    return homom, sz5, maximals, F, phi;
  end if;

  if Print gt 1 then print "getting maximals"; end if;
  //very easy in this example!
  Append(~maximals,Stabiliser(sz,1));
  Append(~maximals,Normaliser(sz,Sylow(sz,41)));
  Append(~maximals,Normaliser(sz,Sylow(sz,5)));
  Append(~maximals,Normaliser(sz,Sylow(sz,31)));

  return homom, sz5, maximals, F, phi;
end function;

