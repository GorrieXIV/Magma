freeze;

intrinsic KappaLattice(n::RngIntElt) -> Lat
{The Kappa lattice K_n}
    case n:
    when 1, 2, 3, 4, 5, 6:
	return Lattice("Lambda", n);
    when 7:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	];
	min := 4;
    when 8:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0
	];
	min := 4;
    when 9:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0
	];
	min := 4;
    when 10:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,
	    -3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	];
	min := 4;
    when 11:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,
	    -3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	    2,0,0,0,2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0
	];
	min := 4;
    when 12:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,
	    -3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	    2,0,0,0,2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0
	];
	min := 4;
    when 13:
	n := 24;
	Q := \[
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,-4,0,0,0,0,0,0,0,
	    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,
	    0,0,0,0,0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,
	    0,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	    2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,2,0,0,0,
	    -3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	    2,0,0,0,2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,2,0,0,0,
	    2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,0,2,2,2,2,0,0,0,
	    0,0,0,0,0,0,0,0,0,2,2,0,0,2,2,0,0,2,2,0,0,2,2,0
	];
	min := 4;
    else:
	require false: "Argument 1 should be in the range [1 .. 13]";
    end case;

    if true then
	d := GCD(Q);
	if d ne 1 then
	    Q := [x div d: x in Q];
	end if;
    end if;
    B := RMatrixSpace(IntegerRing(), #Q div n, n) ! Q;
    g := GCD(Eltseq(B * Transpose(B)));
    return LatticeWithBasis(
	RMatrixSpace(RationalField(), Nrows(B), Ncols(B)) ! B,
	MatrixRing(RationalField(), n)!1 / g
    );
end intrinsic;
