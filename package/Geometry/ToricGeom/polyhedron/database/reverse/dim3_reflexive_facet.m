freeze;

/////////////////////////////////////////////////////////////////////////
// dim3_reflexive_facet.m
/////////////////////////////////////////////////////////////////////////
// $Revision: 38017 $
// $Date: 2012-03-30 05:06:51 +1100 (Fri, 30 Mar 2012) $
// $LastChangedBy: kasprzyk $
/////////////////////////////////////////////////////////////////////////
// Author: Alexander Kasprzyk
/////////////////////////////////////////////////////////////////////////
// Reverse look-up tables for obtaining a (by construction, unique)
// normal form for the facets of a three-dimensional reflexive polytope.
/////////////////////////////////////////////////////////////////////////
// For details on how this data was constructed, see the file:
//  nonexport/package/ToricGeom/reverse/dim3_reflexive_README.txt
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Data store
/////////////////////////////////////////////////////////////////////////

// The store for the facets. Do not use directly! Use the access function below.
dim3_lookup_store:=NewStore();

// Returns the normal forms for the given facets id.
function reflexive_dim3_facet(id)
    // Has the store been initialised?
    bool,facets:=StoreIsDefined(dim3_lookup_store,"facets");
    if bool then return facets[id]; end if;
    // No... We need to initialize the data
    // Create the table of 344 normal forms
    facets := [ PowerSequence(PowerSequence(Integers())) |
        [ [0,0], [1,0], [0,1] ],
        [ [0,0], [1,0], [0,1], [-18,10] ],
        [ [0,0], [1,0], [0,1], [-10,8], [-12,10] ],
        [ [0,0], [1,0], [0,1], [-6,2], [-4,3], [-8,3] ],
        [ [0,0], [1,0], [0,1], [-6,3], [-6,2], [-8,3] ],
        [ [0,0], [1,0], [0,1], [-6,4], [-9,7] ],
        [ [0,0], [1,0], [0,1], [-4,1], [-12,5] ],
        [ [0,0], [1,0], [0,1], [-4,1], [-8,5] ],
        [ [0,0], [1,0], [0,1], [-4,3], [-5,4], [-4,4] ],
        [ [0,0], [1,0], [0,1], [-3,1] ],
        [ [0,0], [1,0], [0,1], [-3,1], [-6,4] ],
        [ [0,0], [1,0], [0,1], [1,1] ],
        [ [0,0], [1,0], [0,1], [2,1], [1,2], [2,2] ],
        [ [0,0], [1,0], [0,1], [2,1], [1,3], [5,7] ],
        [ [0,0], [1,0], [0,1], [4,1], [5,2], [2,2] ],
        [ [0,0], [1,0], [0,1], [4,1], [8,3], [2,3] ],
        [ [0,0], [1,0], [0,2], [-2,2], [-2,1] ],
        [ [0,0], [1,0], [0,2], [1,2] ],
        [ [0,0], [1,0], [0,2], [1,3], [7,3] ],
        [ [0,0], [1,0], [0,3], [-2,3] ],
        [ [0,0], [1,0], [0,3], [1,3] ],
        [ [0,0], [1,0], [0,4], [1,4] ],
        [ [0,0], [1,0], [1,2], [-4,2] ],
        [ [0,0], [1,0], [1,2], [2,2] ],
        [ [0,0], [1,0], [1,2], [2,2], [0,-1] ],
        [ [0,0], [1,0], [1,2], [2,3], [7,3] ],
        [ [0,0], [1,0], [1,2], [3,2] ],
        [ [0,0], [1,0], [1,2], [3,2], [3,4], [4,4] ],
        [ [0,0], [1,0], [1,3], [-6,3] ],
        [ [0,0], [1,0], [1,3], [-3,3] ],
        [ [0,0], [1,0], [1,3], [2,3], [0,-1] ],
        [ [0,0], [1,0], [1,4], [0,-1], [3,4] ],
        [ [0,0], [1,0], [1,4], [2,4] ],
        [ [0,0], [1,0], [1,4], [3,6], [3,2] ],
        [ [0,0], [1,0], [1,4], [5,4] ],
        [ [0,0], [1,0], [1,5] ],
        [ [0,0], [1,0], [1,8] ],
        [ [0,0], [1,0], [2,3] ],
        [ [0,0], [1,0], [2,3], [2,1] ],
        [ [0,0], [1,0], [2,3], [3,3] ],
        [ [0,0], [1,0], [2,3], [3,4], [3,1] ],
        [ [0,0], [1,0], [2,3], [5,6] ],
        [ [0,0], [1,0], [2,3], [7,3] ],
        [ [0,0], [1,0], [2,4], [3,4] ],
        [ [0,0], [1,0], [2,5] ],
        [ [0,0], [1,0], [3,4], [2,1], [4,5] ],
        [ [0,0], [1,0], [3,6], [3,12] ],
        [ [0,0], [1,0], [4,5], [2,1] ],
        [ [0,0], [1,0], [5,12] ],
        [ [0,0], [1,0], [6,7], [2,1] ],
        [ [0,0], [1,0], [7,8] ],
        [ [0,0], [1,0], [15,21] ],
        [ [0,0], [1,0], [16,20] ],
        [ [0,0], [2,0], [0,1], [-6,2], [-12,5] ],
        [ [0,0], [2,0], [0,1], [-3,1], [-9,4] ],
        [ [0,0], [2,0], [0,1], [1,-1] ],
        [ [0,0], [2,0], [0,1], [3,1], [2,3], [3,3] ],
        [ [0,0], [2,0], [0,1], [4,-2], [2,-2] ],
        [ [0,0], [2,0], [0,1], [4,1], [2,3], [6,3] ],
        [ [0,0], [2,0], [0,2] ],
        [ [0,0], [2,0], [0,2], [-6,2] ],
        [ [0,0], [2,0], [0,2], [2,2] ],
        [ [0,0], [2,0], [0,2], [4,2], [2,4], [4,4] ],
        [ [0,0], [2,0], [0,3], [2,3] ],
        [ [0,0], [2,0], [0,4], [2,4] ],
        [ [0,0], [2,0], [2,3], [-6,3] ],
        [ [0,0], [2,0], [2,4] ],
        [ [0,0], [2,0], [2,4], [4,4] ],
        [ [0,0], [2,0], [2,4], [4,4], [0,-2] ],
        [ [0,0], [2,0], [4,6] ],
        [ [0,0], [3,0], [0,1], [-5,1] ],
        [ [0,0], [3,0], [0,1], [-4,1] ],
        [ [0,0], [3,0], [0,1], [-4,1], [-16,5] ],
        [ [0,0], [3,0], [0,3] ],
        [ [0,0], [3,0], [0,3], [-6,3] ],
        [ [0,0], [3,0], [0,3], [3,3] ],
        [ [0,0], [3,0], [0,4], [3,4] ],
        [ [0,0], [3,0], [1,2], [-4,2] ],
        [ [0,0], [3,0], [1,2], [7,2] ],
        [ [0,0], [3,0], [3,9] ],
        [ [0,0], [4,0], [0,1], [-6,1] ],
        [ [0,0], [4,0], [0,1], [-5,1] ],
        [ [0,0], [4,0], [0,1], [1,-1] ],
        [ [0,0], [4,0], [0,1], [2,-1], [-1,1] ],
        [ [0,0], [4,0], [0,1], [3,-1] ],
        [ [0,0], [4,0], [0,2], [-6,2] ],
        [ [0,0], [4,0], [0,4] ],
        [ [0,0], [4,0], [0,4], [4,4] ],
        [ [0,0], [5,0], [0,1], [-6,1] ],
        [ [0,0], [5,0], [0,5] ],
        [ [0,0], [6,0], [0,1], [-8,1] ],
        [ [0,0], [6,0], [0,6] ],
        [ [1,0], [0,0], [0,1], [-6,3], [-6,4], [-7,4] ],
        [ [1,0], [0,0], [0,1], [-4,2], [-4,3], [-5,3] ],
        [ [1,0], [0,0], [0,1], [-3,1], [-5,3], [-4,3] ],
        [ [1,0], [0,0], [0,1], [3,2], [3,4] ],
        [ [1,0], [0,0], [0,1], [5,16] ],
        [ [1,0], [0,0], [0,1], [7,4], [8,5] ],
        [ [1,0], [0,0], [0,2] ],
        [ [1,0], [0,0], [0,2], [-2,3], [-1,3], [-2,1] ],
        [ [1,0], [0,0], [0,2], [-1,1], [-1,3] ],
        [ [1,0], [0,0], [0,2], [3,4], [2,4] ],
        [ [1,0], [0,0], [0,3] ],
        [ [1,0], [0,0], [0,3], [-3,3] ],
        [ [1,0], [0,0], [0,3], [-2,3], [-2,2] ],
        [ [1,0], [0,0], [0,3], [-1,1], [-4,7] ],
        [ [1,0], [0,0], [0,3], [-1,2], [-1,4] ],
        [ [1,0], [0,0], [0,4] ],
        [ [1,0], [0,0], [0,4], [-2,6] ],
        [ [1,0], [0,0], [0,4], [-2,8], [-2,4] ],
        [ [1,0], [0,0], [0,4], [-1,2], [-1,6] ],
        [ [1,0], [0,0], [0,4], [-1,4], [1,-1] ],
        [ [1,0], [0,0], [0,4], [-1,4], [1,-1], [-1,2] ],
        [ [1,0], [0,0], [0,4], [-1,4], [1,-1], [-1,3] ],
        [ [1,0], [0,0], [0,4], [-1,5], [-1,3] ],
        [ [1,0], [0,0], [0,6] ],
        [ [1,0], [0,0], [0,7] ],
        [ [1,0], [0,0], [1,2], [-4,12] ],
        [ [1,0], [0,0], [1,2], [-2,6], [-2,8] ],
        [ [1,0], [0,0], [1,3], [2,3], [-1,1] ],
        [ [1,0], [0,0], [2,3], [-1,-4], [-3,-6] ],
        [ [1,0], [0,0], [2,4] ],
        [ [1,0], [0,0], [2,4], [0,2] ],
        [ [1,0], [0,0], [2,4], [0,2], [2,6] ],
        [ [1,0], [0,0], [2,4], [2,8] ],
        [ [1,0], [0,0], [2,4], [4,3], [4,6] ],
        [ [1,0], [0,0], [2,5], [2,8] ],
        [ [1,0], [0,0], [2,6] ],
        [ [1,0], [0,0], [3,5], [1,3], [3,7] ],
        [ [1,0], [0,0], [3,6], [3,9] ],
        [ [1,0], [0,0], [3,8], [1,4], [0,-3] ],
        [ [1,0], [0,0], [3,9] ],
        [ [1,0], [0,0], [3,12] ],
        [ [1,0], [0,0], [4,6], [4,3] ],
        [ [1,0], [0,0], [4,8] ],
        [ [1,0], [0,0], [4,12] ],
        [ [1,0], [0,0], [5,6], [0,2], [6,8] ],
        [ [1,0], [0,0], [5,7], [0,2] ],
        [ [1,0], [0,0], [5,10] ],
        [ [1,0], [0,0], [6,7], [0,1] ],
        [ [1,0], [0,0], [6,8] ],
        [ [1,0], [0,0], [6,8], [0,2] ],
        [ [1,0], [0,0], [6,12] ],
        [ [1,0], [0,0], [9,18] ],
        [ [1,0], [0,0], [16,24] ],
        [ [1,0], [0,1], [-8,6], [0,0] ],
        [ [1,0], [0,1], [-6,6], [0,0] ],
        [ [1,0], [0,1], [-5,3], [0,0], [-3,1] ],
        [ [1,0], [0,1], [-5,4], [0,0], [-2,1] ],
        [ [1,0], [0,1], [-5,5], [0,0] ],
        [ [1,0], [0,1], [-4,4], [0,0] ],
        [ [1,0], [0,1], [-2,2], [0,0] ],
        [ [1,0], [0,1], [-2,2], [0,0], [-4,2] ],
        [ [1,0], [0,1], [0,0], [-4,4], [-6,4], [-8,6] ],
        [ [1,0], [0,1], [0,0], [-4,4], [-2,1], [-7,6] ],
        [ [1,0], [0,1], [0,0], [-2,2], [-5,3], [-3,1], [-7,3] ],
        [ [1,0], [0,1], [0,0], [3,-6] ],
        [ [1,0], [0,1], [0,0], [3,-3], [3,-4], [1,-2] ],
        [ [1,0], [0,1], [0,0], [4,-4], [4,-6] ],
        [ [1,0], [0,1], [0,0], [16,-24] ],
        [ [1,0], [0,1], [2,-7], [0,0], [2,-8] ],
        [ [1,0], [0,1], [2,-6], [0,0], [2,-8] ],
        [ [1,0], [0,1], [2,-5], [0,0], [2,-8] ],
        [ [1,0], [0,1], [3,-5], [0,0], [4,-8] ],
        [ [1,0], [0,1], [3,-5], [3,-6], [0,0] ],
        [ [1,0], [0,1], [3,-3], [0,0], [6,-8], [2,-4] ],
        [ [1,0], [0,1], [3,1], [2,2], [0,0], [1,2] ],
        [ [1,0], [0,1], [4,-7], [0,0], [6,-12] ],
        [ [1,0], [0,1], [4,-5], [0,0], [5,-7], [2,-4] ],
        [ [1,0], [0,1], [4,-5], [8,-12], [0,0] ],
        [ [1,0], [0,1], [4,-4], [0,0], [4,-6], [8,-10] ],
        [ [1,0], [0,1], [6,-9], [0,0] ],
        [ [1,0], [0,1], [6,-8], [0,0], [8,-12] ],
        [ [1,0], [0,1], [8,-12], [0,0] ],
        [ [1,0], [0,2], [-3,6], [0,0] ],
        [ [1,0], [0,2], [-1,3], [0,0], [-1,1], [-2,3] ],
        [ [1,0], [0,2], [-1,3], [3,-5], [2,-4], [0,0] ],
        [ [1,0], [0,2], [0,0], [-6,12] ],
        [ [1,0], [0,2], [0,0], [3,-12] ],
        [ [1,0], [0,2], [0,0], [3,-6] ],
        [ [1,0], [0,2], [0,0], [3,-6], [3,-9] ],
        [ [1,0], [0,2], [0,0], [7,-14] ],
        [ [1,0], [0,2], [0,0], [9,-18] ],
        [ [1,0], [0,2], [1,-1], [-2,5], [0,0], [-3,6] ],
        [ [1,0], [0,2], [1,-1], [0,0], [-4,8] ],
        [ [1,0], [0,2], [3,-7], [0,0], [5,-15] ],
        [ [1,0], [0,2], [4,-11], [5,-15], [0,0] ],
        [ [1,0], [0,2], [4,-10], [0,0], [8,-24] ],
        [ [1,0], [0,2], [4,-8], [0,0] ],
        [ [1,0], [0,2], [4,-7], [5,-10], [0,0] ],
        [ [1,0], [0,2], [4,-7], [6,-12], [0,0] ],
        [ [1,0], [0,3], [-2,4], [-2,6], [0,0] ],
        [ [1,0], [0,3], [0,0], [-6,12] ],
        [ [1,0], [0,3], [0,0], [-6,18] ],
        [ [1,0], [0,3], [0,0], [-2,4], [-2,7] ],
        [ [1,0], [0,3], [0,0], [-2,8], [-4,12] ],
        [ [1,0], [0,3], [0,0], [-2,8], [-2,2] ],
        [ [1,0], [0,3], [0,0], [-1,5], [-2,6], [-2,2] ],
        [ [1,0], [0,3], [0,0], [10,-30] ],
        [ [1,0], [0,3], [1,-1], [-2,6], [0,0], [-2,8] ],
        [ [1,0], [0,3], [1,-1], [-1,5], [-2,6], [0,0] ],
        [ [1,0], [0,3], [1,-1], [0,0], [-6,12] ],
        [ [1,0], [0,3], [1,1], [-2,6], [0,0] ],
        [ [1,0], [0,3], [3,-7], [5,-15], [0,0] ],
        [ [1,0], [0,3], [4,-10], [6,-18], [0,0] ],
        [ [1,0], [0,3], [4,-10], [8,-24], [0,0] ],
        [ [1,0], [0,4], [0,0], [-2,4], [-2,10] ],
        [ [1,0], [0,4], [0,0], [-2,8] ],
        [ [1,0], [0,4], [0,0], [-1,2], [-1,7] ],
        [ [1,0], [0,4], [0,0], [-1,3], [-1,7] ],
        [ [1,0], [0,4], [0,0], [5,-20] ],
        [ [1,0], [0,4], [3,-12], [0,0] ],
        [ [1,0], [1,2], [-3,-10], [0,0], [-4,-12] ],
        [ [1,0], [1,2], [0,-4], [0,0], [-1,-7], [-1,-3] ],
        [ [1,0], [1,2], [0,0], [0,-4] ],
        [ [1,0], [1,2], [0,0], [0,-4], [-1,-6], [-1,-3] ],
        [ [1,0], [1,2], [0,0], [0,-3] ],
        [ [1,0], [1,2], [0,4], [0,0], [-4,8] ],
        [ [1,0], [1,3], [0,0], [2,1] ],
        [ [1,0], [1,3], [0,0], [2,2] ],
        [ [1,0], [1,3], [0,1], [2,1], [0,0] ],
        [ [1,0], [1,4], [0,1], [2,2], [0,0] ],
        [ [1,0], [1,4], [0,1], [2,2], [0,0], [2,1] ],
        [ [1,0], [1,4], [2,3], [0,0], [0,-2] ],
        [ [1,0], [1,5], [0,0], [0,-7] ],
        [ [1,0], [2,3], [-3,-9], [2,4], [0,0] ],
        [ [1,0], [2,3], [-1,-5], [2,4], [0,0], [-3,-9] ],
        [ [1,0], [2,3], [-1,-3], [0,0], [2,4] ],
        [ [1,0], [2,3], [0,-2], [0,0], [-4,-8] ],
        [ [1,0], [2,3], [0,0], [2,4], [0,2] ],
        [ [1,0], [2,3], [2,1], [3,4], [0,0] ],
        [ [1,0], [2,4], [-4,-12], [0,0] ],
        [ [1,0], [2,4], [-3,-9], [0,0] ],
        [ [1,0], [2,4], [-2,-8], [0,0], [2,6] ],
        [ [1,0], [2,4], [-1,-5], [-1,-3], [0,0] ],
        [ [1,0], [2,4], [-1,-3], [3,5], [-1,-4], [0,0] ],
        [ [1,0], [2,4], [0,0], [-3,-10], [-4,-12] ],
        [ [1,0], [2,4], [0,0], [-1,-4], [-1,-3] ],
        [ [1,0], [2,4], [3,5], [0,0] ],
        [ [1,0], [2,6], [0,0], [2,8] ],
        [ [1,0], [3,4], [0,0], [-4,-8] ],
        [ [1,0], [3,4], [0,0], [4,7], [4,8] ],
        [ [1,0], [3,4], [2,1], [0,0] ],
        [ [1,0], [3,5], [-3,-9], [4,8], [0,0] ],
        [ [1,0], [3,5], [0,-2], [3,6], [0,0] ],
        [ [1,0], [3,5], [0,0], [4,8] ],
        [ [1,0], [3,6], [-2,-8], [-6,-18], [0,0] ],
        [ [1,0], [3,6], [0,0], [-5,-15] ],
        [ [1,0], [3,6], [3,5], [0,0], [-2,-6] ],
        [ [1,0], [3,7], [0,-3], [6,18], [0,0] ],
        [ [1,0], [4,5], [0,0], [4,6] ],
        [ [1,0], [4,5], [0,0], [4,6], [5,7] ],
        [ [1,0], [4,5], [0,0], [4,8] ],
        [ [1,0], [4,5], [0,0], [6,9] ],
        [ [1,0], [4,5], [4,6], [-1,-3], [0,0], [-2,-4] ],
        [ [1,0], [4,5], [8,12], [-3,-6], [0,0] ],
        [ [1,0], [4,6], [-3,-7], [-6,-12], [0,0] ],
        [ [1,0], [4,6], [-1,-2], [0,0], [5,6], [6,8] ],
        [ [1,0], [4,6], [0,0], [-7,-14] ],
        [ [1,0], [4,6], [0,0], [6,8] ],
        [ [1,0], [4,8], [-5,-15], [0,0] ],
        [ [1,0], [4,8], [-4,-12], [0,0] ],
        [ [1,0], [4,10], [0,-3], [4,12], [0,0] ],
        [ [1,0], [4,11], [0,-2], [4,12], [0,0] ],
        [ [1,0], [5,6], [-2,-4], [6,8], [0,0] ],
        [ [1,0], [5,6], [6,8], [-2,-4], [0,0], [4,6] ],
        [ [1,0], [5,7], [-2,-4], [6,9], [0,0] ],
        [ [1,0], [5,7], [0,0], [6,9] ],
        [ [1,0], [6,8], [-1,-2], [0,0] ],
        [ [1,0], [8,12], [-3,-6], [0,0] ],
        [ [2,0], [0,0], [0,1], [-6,2], [-9,4], [-10,4] ],
        [ [2,0], [0,0], [0,1], [8,9] ],
        [ [2,0], [0,0], [0,4], [-2,2], [-2,6] ],
        [ [2,0], [0,0], [0,6] ],
        [ [2,0], [0,0], [0,8] ],
        [ [2,0], [0,0], [0,10] ],
        [ [2,0], [0,0], [0,12] ],
        [ [2,0], [0,0], [4,8] ],
        [ [2,0], [0,0], [6,12] ],
        [ [2,0], [0,1], [-1,1], [7,-3], [6,-3], [0,0] ],
        [ [2,0], [0,1], [-1,1], [7,-3], [8,-4], [0,0] ],
        [ [2,0], [0,1], [0,0], [-12,4] ],
        [ [2,0], [0,1], [0,0], [-8,3], [-12,3] ],
        [ [2,0], [0,1], [3,-3], [0,0] ],
        [ [2,0], [0,1], [4,-3], [2,-2], [0,0] ],
        [ [2,0], [0,1], [4,-3], [3,-3], [0,0] ],
        [ [2,0], [0,1], [4,1], [0,0], [2,3] ],
        [ [2,0], [0,2], [-4,4], [0,0] ],
        [ [2,0], [0,2], [4,-3], [5,-5], [0,0] ],
        [ [2,0], [0,2], [5,-5], [0,0] ],
        [ [2,0], [0,3], [-1,4], [0,0], [-1,1] ],
        [ [2,0], [0,3], [0,0] ],
        [ [2,0], [0,3], [2,-2], [0,0] ],
        [ [2,0], [0,3], [3,-3], [0,0] ],
        [ [2,0], [0,3], [5,-5], [0,0] ],
        [ [2,0], [0,4], [0,0], [-4,8] ],
        [ [2,0], [0,4], [0,0], [6,-12] ],
        [ [2,0], [0,7], [0,0] ],
        [ [2,0], [1,2], [0,0], [-1,4], [-1,1] ],
        [ [2,0], [1,2], [0,2], [3,-3], [0,0] ],
        [ [2,0], [1,2], [1,-2], [0,0], [0,3] ],
        [ [2,0], [1,3], [0,4], [0,0] ],
        [ [2,0], [1,3], [0,4], [2,-2], [0,0] ],
        [ [2,0], [1,3], [0,5], [0,0] ],
        [ [2,0], [1,4], [0,5], [0,0] ],
        [ [2,0], [1,4], [0,6], [0,0] ],
        [ [2,0], [1,4], [0,7], [0,0] ],
        [ [2,0], [2,4], [0,0], [0,-8] ],
        [ [2,0], [2,4], [0,0], [4,2] ],
        [ [2,0], [2,4], [3,1], [0,0] ],
        [ [2,0], [3,4], [0,0], [0,1] ],
        [ [2,0], [3,5], [0,0], [0,2] ],
        [ [2,0], [3,5], [3,6], [0,0] ],
        [ [2,0], [3,6], [0,-4], [0,0] ],
        [ [2,0], [4,5], [0,0], [0,1] ],
        [ [2,0], [4,6], [0,0], [4,8] ],
        [ [2,0], [4,6], [4,8], [0,-4], [0,0] ],
        [ [3,0], [0,0], [0,1], [2,-2] ],
        [ [3,0], [0,0], [0,6] ],
        [ [3,0], [0,0], [0,12] ],
        [ [3,0], [0,1], [-4,2], [0,0], [-8,2] ],
        [ [3,0], [0,1], [-4,2], [8,-2], [0,0], [-6,2] ],
        [ [3,0], [0,1], [4,-1], [0,0], [-4,2] ],
        [ [3,0], [0,1], [4,-1], [0,0], [-4,2], [-6,2] ],
        [ [3,0], [0,1], [4,-1], [0,0], [4,-4] ],
        [ [3,0], [0,1], [6,-2], [0,0], [-4,2] ],
        [ [3,0], [0,1], [6,-2], [0,0], [8,-4] ],
        [ [3,0], [0,1], [8,-2], [-2,1], [0,0] ],
        [ [3,0], [0,2], [-4,4], [6,-3], [0,0] ],
        [ [3,0], [0,2], [0,0], [-4,2] ],
        [ [3,0], [0,2], [3,-2], [0,0], [2,-2] ],
        [ [3,0], [0,2], [4,-2], [0,0], [-2,2] ],
        [ [3,0], [0,5], [0,0] ],
        [ [3,0], [1,3], [0,4], [0,0] ],
        [ [3,0], [1,4], [0,5], [0,0] ],
        [ [3,0], [1,5], [0,6], [0,0] ],
        [ [3,0], [1,5], [0,7], [0,0] ],
        [ [3,0], [2,3], [0,5], [0,0] ],
        [ [3,0], [2,3], [0,7], [0,0] ],
        [ [3,0], [2,4], [0,8], [0,0] ],
        [ [3,0], [2,4], [0,10], [0,0] ],
        [ [4,0], [0,0], [0,1], [6,-1] ],
        [ [4,0], [0,0], [0,8] ],
        [ [4,0], [2,4], [0,6], [0,0] ]
    ];
    StoreSet(dim3_lookup_store,"facets",facets);
    return facets[id];
end function;

/////////////////////////////////////////////////////////////////////////
// Look-up tables
/////////////////////////////////////////////////////////////////////////

// Returns true followed by the ID if the given data lies in the first
// look-up table. The argument is the sequence:
//      [#vertices,#boundary,#interior].
function reflexive_dim3_lookup_1(data)
    // Convert the data into an integer key
    if Maximum(data) ge 18 then
        return false,_;
    end if;
    key := SequenceToInteger(data,18) mod 440;
    // Consult the appropriate key bucket
    keys := case <key mod 5 |
        0: [ Integers() | 15, 75, 145, 165, 185, 215, 220, 265, 275, 290, 325,
             340, 355, 385, 435 ],
        1: [ Integers() | 31, 76, 141, 146, 151, 231, 256, 306, 341, 381, 391,
             406, 436 ],
        2: [ Integers() | 7, 17, 57, 62, 127, 147, 152, 202, 227, 292, 307, 342,
             367, 437 ],
        3: [ Integers() | 93, 98, 178, 183, 238, 283, 308, 388, 418, 438 ],
        4: [ Integers() | 14, 49, 94, 129, 179, 214, 244, 319, 324, 374, 399,
             419 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 5 |
        0: [ Integers() | 153, 99, 156, 117, 132, 257, 81, 45, 298, 63, 247,
             158, 139, 52, 292 ],
        1: [ Integers() | 67, 12, 333, 199, 277, 276, 225, 160, 80, 38, 274,
             59, 27 ],
        2: [ Integers() | 278, 90, 1, 338, 343, 116, 308, 82, 206, 91, 205, 75,
             53, 101 ],
        3: [ Integers() | 103, 248, 335, 37, 89, 128, 16, 171, 39, 13 ],
        4: [ Integers() | 157, 74, 152, 36, 181, 2, 66, 135, 272, 304, 122,
             25 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the second
// look-up table. The argument is the sequence:
//      [#vertices,#boundary,#interior] cat Sort([#pts in each edge]).
function reflexive_dim3_lookup_2(data)
    // Convert the data into an integer key
    if Maximum(data) ge 19 then
        return false,_;
    end if;
    key := SequenceToInteger(data,19) mod 1790;
    // Consult the appropriate key bucket
    keys := case <key mod 7 |
        0: [ Integers() | 126, 210, 238, 252, 273, 686, 700, 756, 826, 952, 973,
            1050, 1141, 1393, 1400, 1736, 1785 ],
        1: [ Integers() | 71, 232, 351, 456, 813, 820, 904, 988, 995, 1072,
            1198, 1282, 1380, 1387, 1499, 1667, 1674, 1695 ],
        2: [ Integers() | 9, 16, 30, 86, 128, 226, 233, 450, 471, 506, 688, 709,
            933, 996, 1101, 1150, 1248, 1297, 1318, 1514, 1521, 1549, 1563,
            1640, 1696, 1738 ],
        3: [ Integers() | 38, 171, 325, 521, 633, 661, 752, 927, 1004, 1025,
            1116, 1172, 1207, 1319, 1452 ],
        4: [ Integers() | 25, 95, 116, 151, 193, 431, 480, 564, 571, 578, 634,
            900, 991, 1166, 1404, 1474, 1537, 1544 ],
        5: [ Integers() | 61, 110, 180, 355, 390, 432, 453, 537, 572, 593, 1111,
            1279, 1552, 1573, 1643, 1713 ],
        6: [ Integers() | 6, 34, 132, 223, 272, 300, 342, 356, 419, 454, 545,
            622, 671, 713, 720, 811, 1091, 1105, 1126, 1154, 1392, 1441, 1462,
            1700 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 7 |
        0: [ Integers() | 317, 258, 133, 184, 303, 263, 10, 170, 77, 339, 190,
             118, 253, 321, 94, 144, 54 ],
        1: [ Integers() | 216, 315, 14, 71, 155, 344, 329, 319, 237, 320, 70,
             337, 97, 11, 61, 62, 22, 187 ],
        2: [ Integers() | 296, 218, 151, 98, 18, 76, 279, 212, 43, 6, 288, 87,
             312, 58, 168, 150, 217, 88, 92, 197, 289, 30, 140, 293, 245, 259 ],
        3: [ Integers() | 69, 214, 256, 297, 207, 290, 246, 78, 340, 26, 49,
             314, 119, 93, 5 ],
        4: [ Integers() | 341, 136, 64, 145, 47, 191, 147, 73, 266, 215, 213,
             79, 305, 86, 142, 174, 3, 60 ],
        5: [ Integers() | 143, 295, 42, 65, 211, 169, 186, 126, 179, 232, 182,
             180, 227, 204, 209, 138 ],
        6: [ Integers() | 21, 164, 183, 4, 137, 23, 316, 283, 334, 96, 275, 29,
             271, 281, 261, 270, 57, 273, 72, 185, 19, 307, 108, 188 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the third
// look-up table. The argument is the sequence:
//      [#vertices, #boundary, #interior] cat Sort([#pts in each edge])
//                  cat #points(D) cat [Numerator(vol_D), Denominator(vol_D)]
// where D = Dual(P - barycentre).
function reflexive_dim3_lookup_3(data)
    // Convert the data into an integer key
    if Maximum(data) ge 159876 then
        return false,_;
    end if;
    key := SequenceToInteger(data,159876) mod 1267;
    // Consult the appropriate key bucket
    keys := case <key mod 7 |
        0: [ Integers() | 56, 182, 266, 287, 322, 329, 371, 399, 504, 518, 546,
             560, 672,728, 756, 791, 812, 882, 917, 1162, 1176, 1190 ],
        1: [ Integers() | 71, 99, 113, 134, 162, 197, 232, 323, 344, 428, 449,
             519, 526, 554, 575, 596, 603, 694, 771, 848, 925, 1002, 1072,
             1247 ],
        2: [ Integers() | 23, 93, 121, 191, 212, 373, 394, 415, 443, 464, 660,
             758, 856, 982, 1010, 1101, 1157, 1178 ],
        3: [ Integers() | 59, 87, 276, 339, 381, 395, 430, 479, 570, 696, 899,
             920, 941, 955, 997, 1018, 1074, 1123 ],
        4: [ Integers() | 200, 424, 487, 746, 767, 823, 879, 914, 1019, 1054,
             1131, 1138, 1222 ],
        5: [ Integers() | 54, 152, 215, 320, 334, 439, 495, 537, 691, 698, 754,
             775, 845, 873, 950, 964, 1104, 1111, 1160, 1258 ],
        6: [ Integers() | 34, 76, 167, 174, 202, 258, 300, 377, 440, 475, 517,
             545, 580, 601, 629, 713, 769, 818, 825, 874, 951, 958, 1000, 1084,
             1154, 1182, 1196 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 7 |
        0: [ Integers() | 265, 252, 244, 208, 203, 33, 113, 17, 141, 146, 7,
             195, 95, 254, 331, 105, 306, 280, 154, 162, 121, 219 ],
        1: [ Integers() | 107, 56, 268, 294, 311, 242, 124, 223, 48, 286, 224,
             120, 31, 301, 68, 149, 112, 148, 228, 323, 336, 236, 24, 114 ],
        2: [ Integers() | 198, 9, 165, 125, 106, 230, 200, 234, 127, 177, 284,
             328, 226, 302, 173, 194, 115, 51 ],
        3: [ Integers() | 192, 324, 100, 299, 189, 34, 83, 332, 222, 193, 250,
             44, 202, 235, 159, 300, 249, 287 ],
        4: [ Integers() | 20, 309, 178, 330, 282, 251, 172, 134, 239, 264, 102,
             325, 233 ],
        5: [ Integers() | 231, 229, 167, 50, 129, 262, 241, 243, 255, 221, 55,
             196, 291, 326, 313, 15, 322, 161, 201, 35 ],
        6: [ Integers() | 327, 130, 131, 123, 41, 111, 220, 46, 176, 163, 8, 84,
             210, 310, 238, 318, 166, 267, 110, 32, 40, 285, 85, 28, 342, 104,
             175 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the final
// look-up table. The argument is a delta-vector of P shifted to its barycentre.
function reflexive_dim3_lookup_4(data)
    // Convert the data into an integer key
    if Maximum(data) ge 145 then
        return false,_;
    end if;
    key := SequenceToInteger(data,145) mod 7;
    // Does the key exist?
    keys := [ Integers() | 0, 2, 5, 6 ];
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Return the ID
    vals := [ Integers() | 240, 260, 109, 269 ];
    return true,vals[idx];
end function;

// Returns the lattice Minkowski decomposition for the given ID.
function reflexive_dim3_lattice_minkowski(id)
    // Compute the block and the number within the block
    block:=Floor((id - 1) / 25);
    num:=id - block * 25;
    // Create the block
    block := case <block |
        0: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[1,0],[0,1]]]],
           [[[[0,0],[-9,5],[1,0]],[[0,0],[-9,5],[-1,1]]]],
           [[[[-10,8]],[[0,0],[5,-4],[4,-3]],[[0,0],[-2,2],[6,-4],[5,-4]]],
            [[[-10,8]],[[0,0],[-1,1]],[[0,0],[-1,1],[11,-8],[10,-8]]]],
           [[[[-6,2]],[[0,0],[3,-1],[1,0]],[[0,0],[3,-1],[1,0]],[[0,0],[-2,1],
              [-1,1]],[[0,0],[1,0]]],
            [[[-6,2]],[[0,0],[3,-1],[2,0]],[[0,0],[3,-1],[1,0]],[[0,0],[-2,1]],
             [[0,0],[1,0]]]],
           [[[[-6,2]],[[0,0],[3,-1]],[[0,0],[3,-1]],[[0,0],[1,0]],[[0,0],[-2,1],
              [-1,1]]],
            [[[0,0],[1,0]],[[0,0],[-3,1]],[[0,0],[-3,1]],[[0,0],[-2,1],[-1,1]]],
            [[[-6,2]],[[0,0],[3,-1]],[[0,0],[3,-1],[2,0]],[[0,0],[-2,1],
              [1,0]]]],
           [[[[-6,4]],[[0,0],[-2,2],[1,0]],[[0,0],[3,-2]],[[0,0],[3,-2]],[[0,0],
              [-1,1]]],
            [[[0,0],[-2,2],[1,0]],[[0,0],[-1,1]],[[0,0],[-3,2]],[[0,0],
              [-3,2]]]],
           [[[[-4,1]],[[0,0],[-4,2],[-1,1]],[[0,0],[-2,1],[4,-1]],[[0,0],[-2,1],
              [1,0]]]],
           [[[[-4,1]],[[0,0],[-2,2],[4,-1]],[[0,0],[-1,1],[1,0]],[[0,0],
              [-1,1]]]],
           [[[[-4,3]],[[0,0],[1,0],[4,-3],[5,-3]],[[0,0],[-1,1]]]],
           [[[[0,0],[-3,1],[-1,1]],[[0,0],[1,0]]]],
           [[[[-3,1]],[[0,0],[-1,1],[3,-1]],[[0,0],[-1,1],[1,0]],[[0,0],
              [-1,1]]]],
           [[[[0,0],[1,0]],[[0,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[1,1]]],
            [[[0,0],[1,1],[0,1]],[[0,0],[1,0],[1,1]]]],
           [[[[0,0],[1,0],[2,2]],[[0,0],[1,2],[0,1]],[[0,0],[1,1]],[[0,0],
              [1,2]]]],
           [[[[0,0],[3,1],[0,1]],[[0,0],[1,0],[2,1]]],
            [[[0,0],[3,1],[2,1]],[[0,0],[1,1],[0,1]],[[0,0],[1,0]]]],
           [[[[0,0],[1,0]],[[0,0],[2,1],[1,1]],[[0,0],[3,1],[1,1]],[[0,0],[2,1],
              [0,1]]],
            [[[0,0],[1,0]],[[0,0],[3,1],[0,1]],[[0,0],[2,1],[1,1]],[[0,0],[2,1],
              [1,1]]]],
           [[[[0,0],[1,0]],[[0,0],[-2,1],[-2,2],[-1,2]]]],
           [[[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[2,1],[1,1]],[[0,0],[2,1],[0,1]],[[0,0],[2,1],[0,1]],[[0,0],
              [1,0]]]],
           [[[[0,0],[-2,3],[1,0],[0,3]]]],
           [[[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],
              [0,1]]]],
           [[[[0,0],[-2,1],[0,1]],[[0,0],[-2,1],[0,1]],[[0,0],[1,0]]]],
           [[[[0,0],[1,0],[1,2],[2,2]]]],
           [[[[0,0],[-1,-1],[-1,0]],[[1,0]],[[0,0],[1,2]]]]],
        1: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[2,1],[1,1]],[[0,0],[1,0]],[[0,0],[4,2],[1,2]]]],
           [[[[0,0],[1,0]],[[0,0],[2,2],[1,2]]]],
           [[[[0,0],[2,2],[1,2]],[[0,0],[1,0],[2,2]]],
            [[[0,0],[1,2]],[[0,0],[1,1]],[[0,0],[1,1]],[[0,0],[1,0]]],
            [[[0,0],[1,0],[1,2],[2,2]],[[0,0],[1,1]],[[0,0],[1,1]]]],
           [[[[0,0],[-2,1],[0,1]],[[0,0],[-2,1],[0,1]],[[0,0],[-2,1],[0,1]],
             [[0,0],[1,0]]]],
           [[[[0,0],[-1,1],[0,1]],[[0,0],[-1,1],[0,1]],[[0,0],[-1,1],[0,1]],
             [[0,0],[1,0]]]],
           [[[[1,0]],[[0,0],[-1,-1],[-1,0],[1,3],[0,3]]]],
           [[[[0,0],[-1,-1],[-1,0]],[[1,0]],[[0,0],[2,4],[1,4]]]],
           [[[[0,0],[1,0],[1,4],[2,4]]]],
           [[[[0,0],[1,1],[1,4]],[[0,0],[1,0],[1,1]],[[0,0],[1,1]]],
            [[[0,0],[1,0],[1,4]],[[0,0],[1,1]],[[0,0],[1,1]]]],
           [[[[0,0],[4,4],[1,4]],[[0,0],[1,0]]]],
           [[[[0,0],[1,0],[1,5]]]],
           [[[[0,0],[1,0],[1,8]]]],
           [[[[0,0],[1,0],[2,3]]]],
           [[[[0,0],[1,0],[2,1],[2,3]]]],
           [[[[0,0],[1,0],[2,3],[3,3]]]],
           [[[[0,0],[1,0],[1,1]],[[0,0],[2,1],[2,3]]]],
           [[[[0,0],[2,3]],[[0,0],[1,0],[3,3]]]],
           [[[[0,0],[6,3],[2,3]],[[0,0],[1,0]]]],
           [[[[0,0],[1,2]],[[0,0],[1,0],[1,2],[2,2]]]],
           [[[[0,0],[1,0],[2,5]]]],
           [[[[0,0],[1,1]],[[0,0],[1,0],[3,4]]]],
           [[[[0,0],[1,3],[1,4]],[[0,0],[1,3],[1,4]],[[0,0],[1,0],[1,4]]]],
           [[[[0,0],[1,0],[2,1],[4,5]]]],
           [[[[0,0],[1,0],[5,12]]]],
           [[[[0,0],[1,0],[2,1],[6,7]]]]],
        2: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[1,0],[7,8]]]],
           [[[[0,0],[1,0],[15,21]]]],
           [[[[0,0],[1,0],[16,20]]]],
           [[[[0,0],[-2,1],[1,0]],[[0,0],[-2,1],[1,0]],[[0,0],[-2,1]],[[0,0],
              [-3,1]],[[0,0],[-3,1]]],
            [[[-6,2]],[[0,0],[-2,1],[1,0]],[[0,0],[-2,1],[1,0]],[[0,0],[3,-1]],
             [[0,0],[3,-1]],[[0,0],[-2,1]]]],
           [[[[0,0],[-2,1]],[[-3,1],[0,0]],[[0,0],[-2,1],[1,0]],[[0,0],[-2,1],
              [1,0]]],
            [[[-3,1]],[[0,0],[-2,1]],[[0,0],[3,-1]],[[0,0],[-2,1],[1,0]],[[0,0],
              [-2,1],[1,0]]]],
           [[[[0,0],[1,-1],[2,0],[0,1]]]],
           [[[[0,0],[1,0],[1,1]],[[0,0],[1,0],[1,1]],[[0,0],[1,1],[0,1]]],
            [[[0,0],[1,1]],[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[1,0],[1,1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[1,-1],[2,-1]],[[0,0],[1,-1]]],
            [[[0,0],[2,0],[0,1]],[[0,0],[1,-1]],[[0,0],[1,-1]]]],
           [[[[0,0],[2,1],[0,1]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,1]],
             [[0,0],[1,1]]],
            [[[0,0],[2,1],[1,1]],[[0,0],[1,1],[0,1]],[[0,0],[1,0]],[[0,0],
              [1,0]],[[0,0],[1,1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]]]],
           [[[[0,0],[-3,1],[-1,1]],[[0,0],[-3,1],[-1,1]],[[0,0],[1,0]],[[0,0],
              [1,0]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[0,1]],[[0,0],[1,1]],[[0,0],[1,0]],[[0,0],[1,0],[1,1]],
             [[0,0],[1,1],[0,1]]],
            [[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[1,1]],[[0,0],[1,1]],[[0,0],
              [1,0]],[[0,0],[1,0]]],
            [[[0,0],[1,0],[1,1]],[[0,0],[1,0],[1,1]],[[0,0],[1,1],[0,1]],[[0,0],
              [1,1],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],
              [0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],
              [0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[-2,1],[0,1]],[[0,0],[-2,1],[0,1]],[[0,0],[-2,1],[0,1]],
             [[0,0],[1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[1,0],[1,2]],[[0,0],[1,0],[1,2]]]],
           [[[[0,0],[1,2]],[[0,0],[1,0]],[[0,0],[1,0],[1,2],[2,2]]],
            [[[0,0],[1,0],[1,2],[2,2]],[[0,0],[1,0],[1,2],[2,2]]]],
           [[[[2,0]],[[0,0],[-1,-1],[-1,0]],[[0,0],[-1,-1],[-1,0]],[[0,0],
              [1,2]],[[0,0],[1,2]]],
            [[[2,0]],[[0,0],[-2,-2],[-1,0]],[[0,0],[1,2],[0,2]],[[0,0],[1,2]]]],
           [[[[0,0],[1,0],[2,3]],[[0,0],[1,0],[2,3]]]],
           [[[[0,0],[-5,1],[-3,1]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[-4,1],[-3,1]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[-3,1]],[[-4,1],[0,0]],[[0,0],[-3,1],[1,0]],[[0,0],[-3,1],
              [1,0]],[[0,0],[-3,1],[1,0]]],
            [[[-4,1]],[[0,0],[-3,1]],[[0,0],[4,-1]],[[0,0],[-3,1],[1,0]],[[0,0],
              [-3,1],[1,0]],[[0,0],[-3,1],[1,0]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[-2,1],[-1,1]],
             [[0,0],[-2,1],[-1,1]],[[0,0],[-2,1],[-1,1]]]]],
        3: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[0,1]],[[0,0],
              [0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],
              [1,0]],[[0,0],[1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[-2,1],[-1,1]],[[0,0],[-2,1],[-1,1]],[[0,0],[1,0]],[[0,0],
              [1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[4,2],[1,2]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[1,0],[1,3]],[[0,0],[1,0],[1,3]],[[0,0],[1,0],[1,3]]]],
           [[[[0,0],[-6,1],[-4,1]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],
             [[0,0],[1,0]]]],
           [[[[0,0],[-5,1],[-4,1]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],
             [[0,0],[1,0]]]],
           [[[[0,0],[1,-1],[4,0],[0,1]]]],
           [[[[0,0],[-1,1],[0,1],[4,0],[2,-1]]]],
           [[[[0,0],[3,-1],[4,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],
              [-3,1],[-2,1]],[[0,0],[-3,1],[-2,1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],
              [1,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],
              [0,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],
              [1,0]],[[0,0],[-6,1],[-5,1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],
              [1,0],[0,1]],[[0,0],[1,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],
              [1,0]],[[0,0],[1,0]],[[0,0],[-8,1],[-6,1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],
              [1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]]]],
           [[[[-6,3]],[[0,0],[-1,1],[1,0]],[[0,0],[2,-1],[1,0]],[[0,0],[2,-1]],
             [[0,0],[2,-1]]],
            [[[0,0],[1,0]],[[0,0],[-1,1]],[[0,0],[-2,1]],[[0,0],[-2,1]],[[0,0],
              [-2,1]]],
            [[[-6,3]],[[0,0],[2,-1]],[[0,0],[2,-1]],[[0,0],[2,-1]],[[0,0],
              [1,0]],[[0,0],[-1,1]]]],
           [[[[-4,2]],[[0,0],[-1,1]],[[0,0],[2,-1]],[[0,0],[2,-1]],[[0,0],
              [1,0]]],
            [[[-4,2]],[[0,0],[2,-1]],[[0,0],[2,-1],[1,0]],[[0,0],[-1,1],[1,0]]],
            [[[0,0],[-1,1]],[[0,0],[1,0]],[[0,0],[-2,1]],[[0,0],[-2,1]]]],
           [[[[-3,1]],[[0,0],[-1,1]],[[0,0],[1,0]],[[0,0],[-1,1],[3,-1]]],
            [[[-3,1]],[[0,0],[-1,1]],[[0,0],[3,-1],[1,0]],[[0,0],[-1,1],
              [1,0]]]],
           [[[[1,0]],[[0,0],[0,1]],[[0,0],[1,1]],[[0,0],[1,1]],[[0,0],[-1,0],
              [0,1]]]],
           [[[[0,0],[1,4],[0,1]],[[1,0]],[[0,0],[-1,0],[3,12]]]],
           [[[[1,0]],[[0,0],[3,2],[4,3],[0,1]],[[0,0],[-1,0],[3,2]]],
            [[[1,0]],[[0,0],[6,4],[0,1]],[[0,0],[-1,0],[1,1]]]],
           [[[[0,0],[-1,0],[-1,2]],[[1,0]]]],
           [[[[0,0],[-2,1],[-2,3],[-1,2]],[[0,0],[1,0]]],
            [[[0,0],[1,0],[0,1]],[[0,0],[-2,1],[-2,2],[-1,2]]],
            [[[0,0],[-2,1],[-1,1]],[[0,0],[1,0],[0,2]]]]],
        4: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[1,0],[0,1]],[[0,0],[-1,1],[-1,2]]],
            [[[0,0],[-1,1]],[[0,0],[1,0],[0,2]]]],
           [[[[0,0],[1,2],[0,1]],[[0,0],[1,2],[0,1]],[[1,0],[0,0]]],
            [[[1,0]],[[0,0],[1,2],[0,2]],[[0,0],[-1,0],[1,2]]],
            [[[1,0]],[[0,0],[1,2],[0,1]],[[0,0],[1,2],[0,1]],[[0,0],[-1,0]]]],
           [[[[0,0],[-1,0],[-1,3]],[[1,0]]]],
           [[[[0,0],[1,0]],[[0,0],[-3,3],[-1,3]]]],
           [[[[0,0],[1,0]],[[0,0],[-2,2],[-2,3],[-1,3]]]],
           [[[[0,0],[-2,4],[-1,3]],[[0,0],[-1,2],[1,0]],[[-1,1],[0,0]]],
            [[[-1,1]],[[0,0],[-2,4],[-1,3]],[[0,0],[-1,2],[1,0]],[[0,0],
              [1,-1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[-1,2],[-1,3]]]],
           [[[[0,0],[-1,0],[-1,4]],[[1,0]]]],
           [[[[0,0],[-2,6],[0,4],[1,0]]]],
           [[[[0,0],[1,0],[0,2]],[[0,0],[-1,2],[-1,4]],[[0,0],[-1,2]]],
            [[[0,0],[-1,2]],[[0,0],[-1,2]],[[0,0],[1,0],[0,4]]]],
           [[[[0,0],[-1,2],[-1,4]],[[0,0],[1,0],[0,2]]],
            [[[0,0],[1,0],[0,4]],[[0,0],[-1,2]]]],
           [[[[0,0],[1,0],[1,-1],[-1,4],[0,4]]]],
           [[[[0,0],[1,-1],[1,0]],[[0,0],[-1,2],[-1,4]]],
            [[[0,0],[-1,2],[-1,3],[0,3],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[-1,3],[0,3],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[-1,3],[-1,5],[1,0],[0,4]]]],
           [[[[0,0],[-1,0],[-1,6]],[[1,0]]]],
           [[[[0,0],[-1,0],[-1,7]],[[1,0]]]],
           [[[[0,0],[-1,3],[0,1]],[[0,0],[-1,3],[0,1]],[[0,0],[-2,6],[1,0]]]],
           [[[[0,0],[-1,3],[0,1]],[[0,0],[0,1]],[[0,0],[-1,3],[-1,4],[1,0]]],
            [[[0,0],[1,0],[0,2]],[[0,0],[-1,3],[0,1]],[[0,0],[-1,3],[0,1]]],
            [[[0,0],[-2,6],[1,0]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[1,0]],[[0,0],[-1,1],[1,3]]]],
           [[[[-1,-4]],[[0,0],[1,2]],[[0,0],[1,2]],[[0,0],[-2,-2],[-1,0],
              [1,3]]],
            [[[-1,-4]],[[0,0],[1,2]],[[0,0],[-1,-1],[1,3]],[[0,0],[-1,-1],
              [1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[1,4]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,2],[1,4]]]],
           [[[[1,0]],[[0,0],[-1,0],[0,2]],[[0,0],[1,4],[0,2]]],
            [[[1,0]],[[0,0],[-1,0],[1,4]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[1,0]],[[0,0],[-1,0],[0,4]],[[0,0],[1,4]]]]],
        5: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[1,0]],[[0,0],[1,1],[1,2]],[[0,0],[1,1],[1,2]],[[0,0],[-1,0],
              [0,1]],[[0,0],[1,1]]],
            [[[1,0]],[[0,0],[-1,0],[0,2]],[[0,0],[1,1],[1,2]],[[0,0],[1,1]],
             [[0,0],[1,1]]]],
           [[[[1,0]],[[0,0],[-1,0],[1,8],[1,5]]]],
           [[[[1,0]],[[0,0],[-1,0],[1,6]]]],
           [[[[0,0],[2,5],[1,3]],[[1,0]],[[0,0],[-1,0],[0,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[0,3]],[[0,0],[1,3]],[[0,0],[1,3]]]],
           [[[[1,0]],[[0,0],[1,4],[0,2]],[[0,0],[-1,-3],[-1,-2]],[[0,0],
              [1,4]]]],
           [[[[1,0]],[[0,0],[-1,0],[2,9]]]],
           [[[[1,0]],[[0,0],[-1,0],[2,12]]]],
           [[[[1,0]],[[0,0],[-1,0],[1,3],[1,1]],[[0,0],[2,2],[2,3]]]],
           [[[[1,0]],[[0,0],[-1,0],[3,8]]]],
           [[[[1,0]],[[0,0],[-1,0],[3,12]]]],
           [[[[1,0]],[[0,0],[2,3],[0,1]],[[0,0],[2,3],[0,1]],[[0,0],[-1,0],
              [1,2]]],
            [[[1,0]],[[0,0],[-1,0],[2,3]],[[0,0],[2,3],[0,1]],[[0,0],[1,2],
              [0,1]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,2],[4,7]]]],
           [[[[1,0]],[[0,0],[-1,0],[4,10]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,1],[5,7]]]],
           [[[[1,0]],[[0,0],[-1,0],[5,8]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,2],[5,8]]]],
           [[[[1,0]],[[0,0],[-1,0],[5,12]]]],
           [[[[1,0]],[[0,0],[-1,0],[8,18]]]],
           [[[[1,0]],[[0,0],[-1,0],[15,24]]]],
           [[[[-8,6]],[[0,0],[8,-6],[9,-6],[8,-5]]]],
           [[[[-6,6]],[[0,0],[5,-5],[6,-5]],[[0,0],[1,-1]]]],
           [[[[-5,3]],[[0,0],[1,-1]],[[0,0],[1,-1],[4,-2],[5,-2]]]],
           [[[[-5,4]],[[0,0],[2,-2],[4,-3],[5,-3]],[[0,0],[1,-1]]]],
           [[[[-5,5]],[[0,0],[4,-4],[5,-4]],[[0,0],[1,-1]]]]],
        6: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[-4,4]],[[0,0],[3,-3],[4,-3]],[[0,0],[1,-1]]]],
           [[[[0,0],[1,-1],[2,-1]],[[-2,2]],[[0,0],[1,-1]]]],
           [[[[0,0],[-2,1],[-1,1]],[[0,0],[1,0]],[[0,0],[-2,1]]]],
           [[[[-6,4]],[[0,0],[-1,1],[3,-2]],[[0,0],[-1,1],[1,0]],[[0,0],[3,-2],
              [2,-1]]],
            [[[-6,4]],[[0,0],[-1,1]],[[0,0],[6,-4],[2,-1]],[[0,0],[-1,1],
              [1,0]]],
            [[[-6,4]],[[0,0],[-1,1]],[[0,0],[3,-2],[4,-2]],[[0,0],[-1,1],
              [3,-2]]]],
           [[[[-2,1]],[[0,0],[-1,1]],[[0,0],[-3,3],[1,0]],[[0,0],[-1,1],
              [2,-1]]],
            [[[-2,1]],[[0,0],[-1,1]],[[0,0],[-2,2],[1,0]],[[0,0],[-2,2],
              [2,-1]]]],
           [[[[-3,1]],[[0,0],[-2,1],[1,0]],[[0,0],[-2,1],[-1,1]],[[0,0],[3,-1],
              [1,0]]],
            [[[0,0],[-2,1],[-1,1]],[[0,0],[1,0]],[[-3,1],[0,0]],[[0,0],[-2,1]]],
            [[[-3,1]],[[0,0],[-4,2],[-1,1]],[[0,0],[3,-1],[1,0]],[[0,0],[1,0]]],
            [[[-3,1]],[[0,0],[-2,1],[-1,1]],[[0,0],[1,0]],[[0,0],[-2,1]],[[0,0],
              [3,-1]]],
            [[[-3,1]],[[0,0],[3,-1],[2,0]],[[0,0],[-2,1],[1,0]],[[0,0],
              [-2,1]]]],
           [[[[0,0],[1,-2],[0,1]],[[0,0],[2,-4],[1,-1]]]],
           [[[[0,0],[1,-2],[1,-1]],[[0,0],[2,-2],[0,1]]],
            [[[0,0],[1,-2],[2,-3]],[[0,0],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[4,-6],[4,-5],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[10,-15],[0,1]],[[0,0],[6,-9],[1,-1]]]],
           [[[[0,0],[2,-8],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[2,-8],[2,-7],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[1,-4],[1,-1]],[[0,0],[1,-4],[0,1]]],
            [[[0,0],[2,-8],[2,-6],[1,-1]],[[0,0],[0,1]]]],
           [[[[0,0],[1,-2],[0,1]],[[0,0],[3,-6],[1,-1]]],
            [[[0,0],[2,-4],[1,-1]],[[0,0],[2,-4],[0,1]]]],
           [[[[3,-6]],[[0,0],[-3,6],[-2,5]],[[0,0],[0,1]]],
            [[[3,-6]],[[0,0],[-2,4],[-2,5]],[[0,0],[-1,2],[0,1]]]],
           [[[[0,0],[1,-2],[2,-3]],[[0,0],[1,-1]],[[0,0],[1,-2],[3,-4],[0,1]]],
            [[[0,0],[2,-2],[0,1]],[[0,0],[2,-4],[3,-5]],[[0,0],[1,-1]]]],
           [[[[1,0]],[[0,0],[2,1],[1,2],[0,1]],[[0,0],[-1,0]]],
            [[[0,0],[2,1],[1,2],[0,1]],[[1,0],[0,0]]],
            [[[0,0],[2,1],[1,1]],[[0,0],[-1,0],[-1,1]],[[1,0]]]],
           [[[[0,0],[4,-8],[1,-1]],[[0,0],[2,-4],[0,1]]],
            [[[0,0],[3,-6],[1,-1]],[[0,0],[3,-6],[0,1]]]],
           [[[[0,0],[1,-1]],[[0,0],[1,-2],[3,-4],[0,1]],[[0,0],[1,-2]]],
            [[[0,0],[2,-4],[3,-5]],[[0,0],[1,-1],[0,1]],[[0,0],[1,-1]]]],
           [[[[8,-12]],[[0,0],[-4,6],[-4,7]],[[0,0],[-4,6],[-3,5]]]],
           [[[[0,0],[2,-3]],[[0,0],[1,-1]],[[0,0],[2,-2],[0,1]],[[0,0],[2,-3],
              [3,-4]]],
            [[[0,0],[2,-3]],[[0,0],[2,-3]],[[0,0],[1,-1]],[[0,0],[3,-3],
              [0,1]]]],
           [[[[6,-9]],[[0,0],[-6,9],[-6,10],[-5,9]]]],
           [[[[0,0],[2,-3],[1,-1]],[[0,0],[6,-9],[5,-7],[0,1]]],
            [[[0,0],[2,-3],[0,1]],[[0,0],[6,-9],[1,-1]]]],
           [[[[8,-12]],[[0,0],[-8,12],[-8,13],[-7,12]]]],
           [[[[-3,6]],[[0,0],[2,-4],[3,-4]],[[0,0],[1,-2]]]]],
        7: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[-1,2]],[[0,0],[1,0]],[[-1,1],[0,0]]],
            [[[-1,1]],[[0,0],[1,-1]],[[0,0],[-1,2]],[[0,0],[1,0]]],
            [[[0,0],[-1,2],[1,0],[0,2]],[[-1,1],[0,0]]],
            [[[-1,1]],[[0,0],[-1,2],[1,0],[0,2]],[[0,0],[1,-1]]]],
           [[[[-1,3]],[[0,0],[1,-2]],[[0,0],[1,-3],[2,-5],[1,-1],[3,-6]]],
            [[[-1,3]],[[0,0],[1,-3],[2,-5]],[[0,0],[1,-2]],[[0,0],[1,-1]]]],
           [[[[0,0],[-5,10],[1,0]],[[0,0],[-1,2]]]],
           [[[[0,0],[2,-8],[1,-2]],[[0,0],[1,-4],[0,2]]]],
           [[[[0,0],[1,-2],[0,1]],[[0,0],[1,-2],[0,1]],[[0,0],[1,-2]]]],
           [[[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[1,-3]],[[0,0],[1,-3]],[[0,0],
              [1,-3],[1,-2]]]],
           [[[[0,0],[3,-6],[0,1]],[[0,0],[3,-6],[0,1]],[[0,0],[1,-2]]]],
           [[[[0,0],[4,-8],[0,1]],[[0,0],[4,-8],[0,1]],[[0,0],[1,-2]]]],
           [[[[0,0],[-1,2],[0,1]],[[0,0],[-1,2],[1,-1]],[[0,0],[-1,2]]],
            [[[0,0],[-2,4],[0,1]],[[0,0],[1,-1]],[[0,0],[-1,2]]]],
           [[[[0,0],[-1,2],[1,-1]],[[0,0],[-1,2]],[[0,0],[-2,4],[0,1]]]],
           [[[[0,0],[2,-6],[1,-2]],[[0,0],[2,-6],[0,1]],[[0,0],[1,-3],[0,1]]],
            [[[0,0],[3,-9],[1,-2]],[[0,0],[1,-3],[0,1]],[[0,0],[1,-3],[0,1]]]],
           [[[[5,-15]],[[0,0],[-1,3],[-1,4]],[[0,0],[-4,12],[-4,13],[-3,11]]],
            [[[5,-15]],[[0,0],[-3,9],[-3,11]],[[0,0],[-2,6],[-1,4]]]],
           [[[[0,0],[2,-6],[0,1]],[[0,0],[2,-6],[0,1]],[[0,0],[4,-12],[1,-2]]],
            [[[0,0],[3,-9],[1,-2]],[[0,0],[3,-9],[0,1]],[[0,0],[2,-6],[0,1]]]],
           [[[[4,-8]],[[0,0],[-1,2]],[[0,0],[-3,6],[-3,8]]]],
           [[[[5,-10]],[[0,0],[-3,6],[-3,7]],[[0,0],[-1,2],[-1,3]],[[0,0],
              [-1,2]]]],
           [[[[6,-12]],[[0,0],[-3,6],[-3,7]],[[0,0],[-2,4],[-2,5]],[[0,0],
              [-1,2]]]],
           [[[[0,0],[1,-2],[0,1]],[[-2,4]],[[0,0],[1,-2],[2,-2],[0,1]]]],
           [[[[0,0],[-3,6],[1,0]],[[0,0],[-3,6],[-1,3]]]],
           [[[[0,0],[-5,15],[1,0]],[[0,0],[-1,3]]]],
           [[[[0,0],[1,0],[0,2]],[[0,0],[-1,2],[-1,3]],[[0,0],[-1,2]]],
            [[[0,0],[1,0],[0,3]],[[0,0],[-1,2]],[[0,0],[-1,2]]]],
           [[[[0,0],[-3,9],[-1,5],[1,0]],[[0,0],[-1,3]]]],
           [[[[0,0],[-1,1],[-1,3]],[[0,0],[-1,1],[-1,5],[1,0]]],
            [[[0,0],[1,0],[0,3]],[[0,0],[-2,2],[-2,5]]]],
           [[[[0,0],[-1,1],[-1,3]],[[0,0],[-1,1],[-1,2]],[[0,0],[1,0],[0,1]]],
            [[[0,0],[1,0],[0,3]],[[0,0],[-1,1],[-1,2]],[[0,0],[-1,1]]],
            [[[0,0],[1,0],[0,2]],[[0,0],[-1,1],[-1,3]],[[0,0],[-1,1]]]],
           [[[[0,0],[3,-9],[0,1]],[[0,0],[3,-9],[0,1]],[[0,0],[3,-9],[0,1]],
             [[0,0],[1,-3]]]],
           [[[[-2,6]],[[0,0],[1,-3],[2,-4],[0,1]],[[0,0],[1,-3]],[[0,0],[0,1]]],
            [[[-2,6]],[[0,0],[1,-1],[0,2]],[[0,0],[2,-6],[2,-5]]]]],
        8: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[-2,6]],[[0,0],[1,-3],[1,-2]],[[0,0],[1,-3]],[[0,0],[1,-1]]],
            [[[-2,6]],[[0,0],[1,-3],[1,-1],[2,-4]],[[0,0],[1,-3],[1,-2]]]],
           [[[[0,0],[-1,2],[1,-1]],[[0,0],[-3,6],[-1,3]],[[0,0],[-2,4],[0,1]]]],
           [[[[0,0],[1,-3],[1,-2]],[[-2,6]],[[0,0],[1,-3],[2,-3]]]],
           [[[[5,-15]],[[0,0],[-1,3]],[[0,0],[-2,6],[-2,7]],[[0,0],[-1,3],
              [-1,4]],[[0,0],[-1,3],[-1,4]]]],
           [[[[6,-18]],[[0,0],[-1,3]],[[0,0],[-3,9],[-3,10]],[[0,0],[-1,3],
              [-1,4]],[[0,0],[-1,3],[-1,4]]]],
           [[[[8,-24]],[[0,0],[-1,3]],[[0,0],[-3,9],[-3,10]],[[0,0],[-2,6],
              [-2,7]],[[0,0],[-2,6],[-2,7]]]],
           [[[[0,0],[-1,2],[-1,3]],[[0,0],[-1,2],[-1,3]],[[0,0],[1,0],[0,4]]],
            [[[0,0],[1,0],[0,3]],[[0,0],[-1,2],[-1,3]],[[0,0],[-1,2],[-1,4]]]],
           [[[[0,0],[-2,8],[1,0],[0,4]]]],
           [[[[0,0],[-1,2],[-1,3]],[[0,0],[1,0],[0,4]]],
            [[[0,0],[-1,2],[-1,4]],[[0,0],[1,0],[0,3]]]],
           [[[[0,0],[-1,3],[-1,4]],[[0,0],[1,0],[0,3]]],
            [[[0,0],[1,0],[0,4]],[[0,0],[-1,3]]]],
           [[[[0,0],[1,-4],[0,1]],[[0,0],[1,-4],[0,1]],[[0,0],[1,-4],[0,1]],
             [[0,0],[1,-4],[0,1]],[[0,0],[1,-4]]]],
           [[[[3,-12]],[[0,0],[-1,4],[-1,6]],[[0,0],[-1,4],[-1,6]],[[0,0],
              [-1,4]]]],
           [[[[-3,-10]],[[0,0],[2,5],[2,6]],[[0,0],[-1,-2],[0,1]],[[0,0],[2,5],
              [1,3]]],
            [[[-3,-10]],[[0,0],[-1,-2]],[[0,0],[2,5],[2,6]],[[0,0],[2,5],
              [2,6]]]],
           [[[[0,-4]],[[0,0],[1,4],[0,2]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],
              [-1,-3]]],
            [[[0,-4]],[[0,0],[1,4],[0,1]],[[0,0],[-1,-3],[-1,-2]],[[0,0],[0,1]],
             [[0,0],[0,1]]]],
           [[[[1,0]],[[0,0],[-1,-4],[-1,-2]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,-4]],[[0,0],[0,1]],[[0,0],[1,4],[0,2]],[[0,0],[-1,-2],[0,1]]],
            [[[0,-4]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[-1,-2]],[[0,0],[1,4],
              [0,1]]]],
           [[[[1,0]],[[0,0],[-1,-3],[-1,-2]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[-1,2],[1,0]],[[0,0],[-1,2],[0,1]],[[0,0],[-1,2],[0,1]],
             [[0,0],[-1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[0,3],[1,1]]]],
           [[[[1,0]],[[0,0],[-1,0],[0,3],[1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,1],[0,3],[1,1]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,1],[0,4],[1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[0,3],[1,1]],[[0,0],[0,1]]]],
           [[[[1,0]],[[0,0],[-1,-2],[-1,0],[0,4],[1,3]]]],
           [[[[1,0]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]],
             [[0,0],[0,1]],[[0,0],[-1,-7],[-1,-5]]]]],
        9: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[1,0]],[[0,0],[-4,-9],[-2,-3],[0,1]],[[0,0],[1,3]]]],
           [[[[-1,-5]],[[0,0],[2,5],[2,6]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],
             [[0,0],[1,3]]],
            [[[-1,-5]],[[0,0],[2,5],[1,3]],[[0,0],[-1,-2],[0,1]],[[0,0],
              [-1,-2]],[[0,0],[1,3]]]],
           [[[[0,0],[-2,-3],[0,1]],[[1,0]],[[0,0],[1,3]]]],
           [[[[0,-2]],[[0,0],[-2,-3],[1,3]],[[0,0],[-2,-3]],[[0,0],[1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[-1,1],[1,3]],[[0,0],[0,1]]],
            [[[1,0]],[[0,0],[1,3],[0,2]],[[0,0],[-1,0],[0,1]]]],
           [[[[1,0]],[[0,0],[1,1]],[[0,0],[-1,0],[1,3]]]],
           [[[[1,0]],[[0,0],[-5,-12],[-1,0],[1,4]]]],
           [[[[1,0]],[[0,0],[-4,-9],[-1,0],[1,4]]]],
           [[[[1,0]],[[0,0],[-3,-8],[-2,-4],[0,2]],[[0,0],[1,4]]]],
           [[[[1,0]],[[0,0],[-2,-5],[-2,-4]],[[0,0],[1,4],[0,1]]],
            [[[1,0]],[[0,0],[1,4],[0,2]],[[0,0],[-2,-5],[-1,-2]]]],
           [[[[1,0]],[[0,0],[-1,-2]],[[0,0],[2,5],[1,3]],[[0,0],[-1,-2],
              [-1,-1]]],
            [[[1,0]],[[0,0],[-2,-4],[-1,-1]],[[0,0],[2,5],[0,1]]],
            [[[1,0]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],[[0,0],[2,5],[1,4],
              [0,1]]]],
           [[[[-3,-10]],[[0,0],[-1,-2]],[[0,0],[2,5],[3,9]],[[0,0],[2,5],
              [1,3]]],
            [[[-3,-10]],[[0,0],[2,5],[1,3]],[[0,0],[2,5],[1,3]],[[0,0],[-1,-2],
              [1,4]]]],
           [[[[1,0]],[[0,0],[1,4],[0,1]],[[0,0],[-1,-2]],[[0,0],[-1,-2]]]],
           [[[[1,0]],[[0,0],[-1,0],[1,4],[2,5]]]],
           [[[[1,0]],[[0,0],[-1,0],[1,8],[1,6]]]],
           [[[[1,0]],[[0,0],[-5,-8],[-3,-4]],[[0,0],[1,2]],[[0,0],[1,2]]]],
           [[[[0,0],[-1,0],[1,4],[1,3]],[[1,0]],[[0,0],[1,2]],[[0,0],[1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[2,4],[1,1]]]],
           [[[[1,0]],[[0,0],[-4,-9],[-3,-6]],[[0,0],[2,5],[1,3]],[[0,0],
              [1,3]]]],
           [[[[1,0]],[[0,0],[2,5],[0,1]],[[0,0],[-1,-2]],[[0,0],[0,1]]]],
           [[[[1,0]],[[0,0],[-1,0],[3,8],[2,5]]]],
           [[[[-2,-8]],[[0,0],[3,8],[2,6]],[[0,0],[-2,-5],[-1,-2]],[[0,0],
              [-2,-5],[-1,-2]],[[0,0],[1,3]],[[0,0],[1,3]]]],
           [[[[1,0]],[[0,0],[-2,-5],[-1,-2]],[[0,0],[-2,-5],[-1,-2]],[[0,0],
              [-2,-5],[-1,-2]],[[0,0],[1,3]],[[0,0],[1,3]]]],
           [[[[1,0]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],[[0,0],
              [2,5],[2,6]]],
            [[[1,0]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],[[0,0],[-1,-2],[0,1]],
             [[0,0],[2,5],[1,3]]]],
           [[[[1,0]],[[0,0],[3,11],[0,2]],[[0,0],[2,7],[0,1]],[[0,0],
              [-1,-3]]]]],
       10: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[1,0]],[[0,0],[-1,0],[3,6],[3,5]]]],
           [[[[1,0]],[[0,0],[-1,0],[3,6],[4,7],[3,5]]]],
           [[[[1,0]],[[0,0],[3,5],[3,6]],[[0,0],[-1,0],[0,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[5,9],[3,5]]]],
           [[[[-1,-3]],[[0,0],[2,3]],[[0,0],[3,5],[1,2]],[[0,0],[-1,-1],[0,1]]],
            [[[-1,-3]],[[0,0],[2,3],[2,4]],[[0,0],[-1,-1],[3,5]]]],
           [[[[1,0]],[[0,0],[-2,-3]],[[0,0],[-2,-3]],[[0,0],[4,7],[2,4]],[[0,0],
              [3,5],[1,2]]]],
           [[[[-3,-7]],[[0,0],[1,2]],[[0,0],[1,2]],[[0,0],[1,2]],[[0,0],[4,7],
              [2,4]],[[0,0],[-3,-5],[-2,-3]]]],
           [[[[1,0]],[[0,0],[1,2]],[[0,0],[-1,-1]],[[0,0],[-1,-1]],[[0,0],
              [2,3]],[[0,0],[2,3]]],
            [[[1,0]],[[0,0],[-1,-1]],[[0,0],[2,3]],[[0,0],[2,3],[1,2]],[[0,0],
              [-1,-1],[1,2]]]],
           [[[[1,0]],[[0,0],[-4,-7],[-2,-3]],[[0,0],[-4,-7],[-2,-3]],[[0,0],
              [1,2]],[[0,0],[1,2]],[[0,0],[1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[3,6],[5,8]]]],
           [[[[1,0]],[[0,0],[3,8],[2,6]],[[0,0],[-2,-5],[-1,-2]],[[0,0],[-2,-5],
              [-1,-2]],[[0,0],[-2,-5],[-1,-2]]]],
           [[[[1,0]],[[0,0],[-5,-12],[-3,-6]],[[0,0],[3,8],[2,6]]]],
           [[[[1,0]],[[0,0],[-1,-3]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[3,10],
              [0,1]]]],
           [[[[1,0]],[[0,0],[-1,-2],[-1,-1],[3,11]],[[0,0],[0,1]]],
            [[[1,0]],[[0,0],[3,11],[0,2]],[[0,0],[-1,-2],[0,1]]]],
           [[[[1,0]],[[0,0],[4,6],[1,2]],[[0,0],[-3,-4]],[[0,0],[1,2]]],
            [[[1,0]],[[0,0],[-3,-4],[1,2],[-2,-2]],[[0,0],[4,6],[1,2]]]],
           [[[[1,0]],[[0,0],[2,3],[1,2]],[[0,0],[2,3],[1,2]],[[0,0],[-3,-4],
              [1,2]]],
            [[[1,0]],[[0,0],[2,3],[1,2]],[[0,0],[-3,-4],[-1,-1]],[[0,0],[2,3]],
             [[0,0],[1,2]]],
            [[[1,0]],[[0,0],[-3,-4],[-2,-2]],[[0,0],[2,3]],[[0,0],[2,3]],[[0,0],
              [1,2]]]],
           [[[[1,0]],[[0,0],[-3,-4],[-2,-2],[4,7]],[[0,0],[1,2]]],
            [[[1,0]],[[0,0],[4,7],[2,4]],[[0,0],[-3,-4],[1,2]]]],
           [[[[1,0]],[[0,0],[-1,0],[5,9],[4,7]]]],
           [[[[1,0]],[[0,0],[-2,-2],[-1,0],[5,8]]]],
           [[[[1,0]],[[0,0],[7,12],[3,6]],[[0,0],[-2,-3]],[[0,0],[-2,-3]]]],
           [[[[-6,2]],[[0,0],[3,-1]],[[0,0],[3,-1]],[[0,0],[-2,1]],[[0,0],
              [1,0]],[[0,0],[-2,1],[1,0]]],
            [[[0,0],[-2,1]],[[0,0],[1,0]],[[0,0],[-3,1]],[[0,0],[-3,1]],[[0,0],
              [-2,1],[1,0]]],
            [[[-6,2]],[[0,0],[3,-1]],[[0,0],[3,-1],[1,0]],[[0,0],[-2,1],[1,0]],
             [[0,0],[-2,1],[1,0]]]],
           [[[[2,0]],[[0,0],[2,3],[0,1]],[[0,0],[-1,0],[2,3]],[[0,0],[-1,0],
              [2,3]]]],
           [[[[0,0],[1,0],[0,2]],[[0,0],[1,0],[0,2]],[[0,0],[-1,1]],[[0,0],
              [-1,1]]],
            [[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[-1,1],[-1,2]],
             [[0,0],[-1,1],[-1,2]]],
            [[[0,0],[1,0],[0,2]],[[0,0],[1,0],[0,1]],[[0,0],[-1,1],[-1,2]],
             [[0,0],[-1,1]]]],
           [[[[0,0],[-1,0],[-1,3]],[[0,0],[-1,0],[-1,3]],[[2,0]]]],
           [[[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,4]],[[2,0]]]]],
       11: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[-1,0],[-1,5]],[[0,0],[-1,0],[-1,5]],[[2,0]]]],
           [[[[0,0],[-1,0],[-1,6]],[[0,0],[-1,0],[-1,6]],[[2,0]]]],
           [[[[2,0]],[[0,0],[-1,0],[1,4]],[[0,0],[-1,0],[1,4]]]],
           [[[[2,0]],[[0,0],[-1,0],[2,6]],[[0,0],[-1,0],[2,6]]]],
           [[[[-1,1]],[[0,0],[6,-3],[1,0]],[[0,0],[1,-1],[2,-1]]],
            [[[-1,1]],[[0,0],[2,-1]],[[0,0],[1,0]],[[0,0],[1,-1],[5,-3]]]],
           [[[[-1,1]],[[0,0],[2,-1]],[[0,0],[2,-1],[1,0]],[[0,0],[1,-1],
              [5,-3]]],
            [[[0,0],[2,-1]],[[-1,1],[0,0]],[[0,0],[6,-3],[1,0]]],
            [[[-1,1]],[[0,0],[2,-1]],[[0,0],[1,-1]],[[0,0],[6,-3],[1,0]]]],
           [[[[0,0],[-3,1],[1,0]],[[0,0],[-3,1],[1,0]],[[0,0],[-6,2],[-2,1]]]],
           [[[[0,0],[-4,1]],[[0,0],[-4,1]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],
              [-4,1],[-2,1]]]],
           [[[[3,-3]],[[0,0],[-3,3],[-3,4],[-1,3]]]],
           [[[[2,-2]],[[0,0],[2,-1],[-2,2],[-2,3],[0,2]]]],
           [[[[0,0],[-1,1],[1,0]],[[3,-3]],[[0,0],[-2,2],[-2,3]]]],
           [[[[0,0],[-1,0],[1,2],[2,1]],[[2,0]],[[0,0],[-1,0],[-1,1]]],
            [[[0,0],[2,1],[1,2],[0,1]],[[2,0]],[[0,0],[-2,0],[-1,1]]]],
           [[[[-4,4]],[[0,0],[1,-1]],[[0,0],[1,-1]],[[0,0],[1,-1],[2,-1]],
             [[0,0],[1,-1],[2,-1]]]],
           [[[[5,-5]],[[0,0],[-1,1]],[[0,0],[-1,1]],[[0,0],[-2,2],[-2,3]],
             [[0,0],[-1,1],[-1,2]]]],
           [[[[5,-5]],[[0,0],[-3,3],[-3,5]],[[0,0],[-1,1]],[[0,0],[-1,1]]]],
           [[[[0,0],[1,0],[0,1]],[[0,0],[-1,1],[-1,3],[1,0]]],
            [[[0,0],[2,0],[0,3]],[[0,0],[-1,1]]]],
           [[[[2,0]],[[0,0],[-2,0],[-2,3]]]],
           [[[[2,-2]],[[0,0],[-2,2],[-2,3]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[0,0],[-1,1],[-1,3]],[[3,-3]],[[0,0],[-2,2],[-2,3]]]],
           [[[[5,-5]],[[0,0],[-3,3],[-3,5]],[[0,0],[-2,2],[-2,3]]]],
           [[[[0,0],[-1,2],[1,0]],[[0,0],[-1,2],[1,0]],[[0,0],[-1,2]],[[0,0],
              [-1,2]]]],
           [[[[0,0],[1,-2]],[[0,0],[1,-2]],[[0,0],[1,-2],[0,1]],[[0,0],[1,-2],
              [0,1]],[[0,0],[1,-2],[0,1]],[[0,0],[1,-2],[0,1]]]],
           [[[[2,0]],[[0,0],[-2,0],[-2,7]]]],
           [[[[0,0],[1,0],[0,2]],[[0,0],[1,0],[0,1]],[[0,0],[-1,1]]],
            [[[0,0],[1,0],[0,1]],[[0,0],[1,0],[0,1]],[[0,0],[-1,1],[-1,2]]]],
           [[[[3,-3]],[[0,0],[-2,2],[-1,2]],[[0,0],[-1,1],[-1,3]]],
            [[[3,-3]],[[0,0],[-1,1],[-1,2]],[[0,0],[-2,2],[-2,3],[-1,3]]]]],
       12: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[1,-2]],[[0,0],[1,2],[0,3]],[[0,0],[-1,2]]],
            [[[0,0],[1,2],[0,3]],[[1,-2],[0,0]]]],
           [[[[0,0],[-1,0],[-1,3]],[[0,0],[-1,0],[-1,1]],[[2,0]]]],
           [[[[2,-2]],[[0,0],[-1,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[-1,1],
              [-1,3]]]],
           [[[[0,0],[-1,0],[-1,3]],[[0,0],[-1,0],[-1,2]],[[2,0]]]],
           [[[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,1]],[[2,0]]]],
           [[[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,2]],[[2,0]]]],
           [[[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,3]],[[2,0]]]],
           [[[[2,0]],[[0,0],[-1,-4],[-1,-2]],[[0,0],[-1,-4],[-1,-2]],[[0,0],
              [0,1]],[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[0,1]]]],
           [[[[2,0]],[[0,0],[-1,0],[0,2],[1,1]],[[0,0],[-1,0],[0,2],[1,1]]]],
           [[[[0,0],[-2,0],[0,4],[1,1]],[[2,0]]]],
           [[[[2,0]],[[0,0],[-2,0],[-2,1],[1,4]]]],
           [[[[2,0]],[[0,0],[-2,0],[-2,2],[1,5]]]],
           [[[[2,0]],[[0,0],[-2,0],[1,6],[1,5]]]],
           [[[[2,0]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],[[0,0],[1,6],[0,4]]]],
           [[[[2,0]],[[0,0],[-2,0],[-2,1],[2,5]]]],
           [[[[2,0]],[[0,0],[-1,0],[2,6]],[[0,0],[-1,0],[0,2]]]],
           [[[[2,0]],[[0,0],[-1,-2]],[[0,0],[-1,-2]],[[0,0],[0,1]],[[0,0],
              [0,1]],[[0,0],[1,3],[0,1]],[[0,0],[1,3],[0,1]]]],
           [[[[0,0],[2,-2],[3,0],[0,1]]]],
           [[[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],[-1,2]],
             [[3,0]]]],
           [[[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,4]],
             [[3,0]]]],
           [[[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[-4,1]],[[0,0],
              [-4,1],[-3,1]]]],
           [[[[0,0],[-3,1]],[[0,0],[-3,1],[-1,1],[4,-1]],[[0,0],[4,-1]]],
            [[[0,0],[-6,2],[-5,2]],[[0,0],[4,-1],[1,0]],[[0,0],[4,-1]]]],
           [[[[0,0],[4,-1],[-4,2],[0,1],[3,0]]]],
           [[[[0,0],[4,-1],[1,0]],[[0,0],[-6,2],[-5,2],[-1,1]]],
            [[[0,0],[-3,1],[-1,1]],[[0,0],[4,-1]],[[0,0],[-3,1]]]],
           [[[[0,0],[3,-3],[3,-1]],[[0,0],[1,-1]],[[0,0],[0,1]]]]],
       13: [PowerSequence(PowerSequence(PowerSequence(
                                                  PowerSequence(Integers())))) |
           [[[[0,0],[-4,2],[0,1],[3,-1]],[[0,0],[3,-1]]]],
           [[[[0,0],[2,-1],[0,1]],[[0,0],[6,-3],[3,-1]]],
            [[[0,0],[4,-2],[3,-1],[0,1]],[[0,0],[4,-2],[3,-1]]]],
           [[[[0,0],[4,-1],[1,0]],[[-2,1]],[[0,0],[2,-1],[6,-2],[1,0]]]],
           [[[[-4,4]],[[0,0],[1,-1],[3,-2]],[[0,0],[2,-1]],[[0,0],[2,-1]],
             [[0,0],[1,-1]],[[0,0],[1,-1]],[[0,0],[1,-1]]]],
           [[[[0,0],[-4,2],[-3,2]],[[0,0],[1,0]],[[0,0],[1,0]],[[0,0],[1,0]]]],
           [[[[0,0],[0,1]],[[0,0],[0,1]],[[0,0],[2,-2],[3,-2]]]],
           [[[[0,0],[-1,1],[2,-1]],[[0,0],[-1,1],[1,1],[2,-1]]],
            [[[0,0],[4,-2],[1,0]],[[0,0],[-2,2],[-1,2]]]],
           [[[[3,0]],[[0,0],[-3,0],[-3,5]]]],
           [[[[0,0],[-1,0],[-1,1]],[[3,0]],[[0,0],[-2,0],[-2,3]]]],
           [[[[3,0]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],
              [-1,1]]]],
           [[[[0,0],[-1,0],[-1,1]],[[3,0]],[[0,0],[-2,0],[-2,5]]]],
           [[[[0,0],[-1,0],[-1,2]],[[3,0]],[[0,0],[-2,0],[-2,5]]]],
           [[[[3,0]],[[0,0],[-1,0],[-1,3]],[[0,0],[-1,0],[-1,1]],[[0,0],[-1,0],
              [-1,1]]]],
           [[[[3,0]],[[0,0],[-1,0],[-1,3]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],
              [-1,2]]]],
           [[[[3,0]],[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],
              [-1,2]]]],
           [[[[3,0]],[[0,0],[-1,0],[-1,4]],[[0,0],[-1,0],[-1,3]],[[0,0],[-1,0],
              [-1,3]]]],
           [[[[0,0],[6,-1],[4,0],[0,1]]]],
           [[[[4,0]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],
              [-1,2]],[[0,0],[-1,0],[-1,2]]]],
           [[[[4,0]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],[-1,2]],[[0,0],[-1,0],
              [-1,1]],[[0,0],[-1,0],[-1,1]]]]],
        default : 0 >;
    // Return the decomposition
    return block[num];
end function;

/////////////////////////////////////////////////////////////////////////
// Local functions
/////////////////////////////////////////////////////////////////////////

// The following function will take an integral lattice polygon and returns
// true followed by the ID for the facet. This assumes that the polygon is a
// facet of a reflexive 3-tope.
function reflexive_dim3_facet_to_id(P)
    // Sanity check
    if not (IsPolytope(P) and IsIntegral(P) and Dimension(P) eq 2) then
        return false,_;
    end if;
    // Calculate the first set of invariants
    data:=[Integers() | NumberOfVertices(P), NumberOfBoundaryPoints(P),
            NumberOfInteriorPoints(P)];
    bool,id:=reflexive_dim3_lookup_1(data);
    if bool then
        return true,id;
    end if;
    // If we're here then that wasn't enough -- calculate the next set of invars
    data cat:= Sort([Integers() | NumberOfPoints(E) : E in Edges(P)]);
    bool,id:=reflexive_dim3_lookup_2(data);
    if bool then
        return true,id;
    end if;
    // Still no luck -- try the (expensive) third set...
    PP:=P - &+Vertices(P) / NumberOfVertices(P);
    D:=Dual(PolyhedronInSublattice(PP));
    Append(~data,NumberOfPoints(D));
    vol:=Volume(D);
    Append(~data,Numerator(vol));
    Append(~data,Denominator(vol));
    bool,id:=reflexive_dim3_lookup_3(data);
    if bool then
        return true,id;
    end if;
    // It must be in the final set
    data:=EhrhartDeltaVector(PP);
    bool,id:=reflexive_dim3_lookup_4(data);
    if bool then
        return true,id;
    end if;
    // If we're here then the polygon wasn't valid
    return false,_;
end function;
