freeze;

/////////////////////////////////////////////////////////////////////////
// dim3_terminal.m
/////////////////////////////////////////////////////////////////////////
// $Revision: 38043 $
// $Date: 2012-04-01 01:05:07 +1100 (Sun, 01 Apr 2012) $
// $LastChangedBy: kasprzyk $
/////////////////////////////////////////////////////////////////////////
// Author: Alexander Kasprzyk
/////////////////////////////////////////////////////////////////////////
// Reverse look-up tables for obtaining the database ID of a
// three-dimensional terminal Fano polytope.
/////////////////////////////////////////////////////////////////////////
// For details on how this data was constructed, see the file:
//  nonexport/package/ToricGeom/reverse/dim3_terminal_README.txt
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
// Look-up tables
/////////////////////////////////////////////////////////////////////////

// Returns true followed by the ID if the given data lies in the first
// look-up table. The argument is the sequence:
//      [ #vertices, #facets, Gorenstein idx ].
function terminal_dim3_ref_list_1(data)
    // Convert the data into an integer key
    if Max(data) ge 421 then
        return false,_;
    end if;
    key := SequenceToInteger(data,421) mod 580;
    // Consult the appropriate key bucket
    keys := case <key mod 7 |
        0: [ Integers() |
           203, 210, 301, 350, 420 ],
        1: [ Integers() |
           43, 50, 71, 141, 148, 162, 218, 351 ],
        2: [ Integers() |
           44, 156, 254, 289, 296, 520, 555 ],
        3: [ Integers() |
           17, 52, 108, 164, 185, 262, 318, 402, 409, 493, 528, 570 ],
        4: [ Integers() |
           368, 473, 564, 578 ],
        5: [ Integers() |
           26, 96, 131, 180, 187, 243, 348, 425, 488, 502 ],
        6: [ Integers() |
           27, 125, 237, 307, 391, 447, 468, 559 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 7 |
        0: [ Integers() |
           323, 286, 11, 311, 492 ],
        1: [ Integers() |
           320, 7, 25, 31, 558, 50, 2, 441 ],
        2: [ Integers() |
           315, 172, 8, 4, 54, 190, 297 ],
        3: [ Integers() |
           151, 177, 5, 60, 630, 597, 6, 19, 481, 1, 314, 607 ],
        4: [ Integers() |
           633, 92, 52, 404 ],
        5: [ Integers() |
           626, 33, 32, 390, 634, 26, 191, 142, 3, 611 ],
        6: [ Integers() |
           632, 461, 335, 450, 15, 625, 552, 147 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the second
// look-up table. The argument is the sequence:
//      [ #vertices, #facets, Gorenstein idx, bary, vol_P ],
// where bary = 2 if &+Vertices(P) / NumberOfVertices(P) is integral,
//              1 otherwise.
function terminal_dim3_ref_list_2(data)
    // Convert the data into an integer key
    if Max(data) ge 106 then
        return false,_;
    end if;
    key := SequenceToInteger(data,106) mod 1793;
    // Consult the appropriate key bucket
    keys := case <key mod 7 |
        0: [ Integers() |
           70, 392, 406, 420, 574, 651, 665, 805, 854, 945, 1015, 1057, 1134,
           1155, 1190, 1197, 1204, 1218, 1393, 1414, 1463, 1533 ],
        1: [ Integers() |
           141, 225, 414, 477, 491, 652, 673, 792, 848, 883, 918, 1023, 1219,
           1324, 1331, 1380, 1604, 1723, 1730 ],
        2: [ Integers() |
           30, 107, 275, 324, 373, 478, 597, 653, 667, 1010, 1297, 1381, 1465,
           1556 ],
        3: [ Integers() |
           10, 164, 199, 444, 472, 521, 563, 584, 661, 710, 724, 780, 941, 955,
           990, 1060, 1130, 1165, 1284, 1410, 1438, 1578 ],
        4: [ Integers() |
           319, 599, 914, 1089, 1096, 1306, 1369, 1376, 1404, 1453, 1551 ],
        5: [ Integers() |
           19, 103, 327, 390, 404, 418, 502, 600, 663, 691, 712, 719, 740, 852,
           908, 943, 957, 1097, 1132, 1167, 1174, 1223, 1230, 1237, 1286, 1426,
           1503, 1671, 1685, 1706, 1769 ],
        6: [ Integers() |
           160, 216, 244, 321, 384, 524, 664, 762, 783, 846, 881, 937, 1133,
           1343, 1357, 1392, 1406 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 7 |
        0: [ Integers() |
           362, 21, 388, 17, 58, 292, 200, 99, 48, 40, 612, 30, 13, 572, 82,
           10, 324, 619, 583, 29, 490, 485 ],
        1: [ Integers() |
           27, 55, 16, 339, 451, 255, 444, 110, 337, 161, 20, 102, 631, 610,
           66, 76, 516, 501, 88 ],
        2: [ Integers() |
           164, 65, 524, 165, 565, 477, 454, 391, 14, 212, 229, 18, 616, 90 ],
        3: [ Integers() |
           91, 514, 628, 585, 73, 603, 545, 456, 12, 63, 332, 9, 295, 293, 345,
           301, 222, 28, 176, 61, 230, 104 ],
        4: [ Integers() |
           288, 143, 22, 549, 378, 24, 299, 146, 321, 157, 39 ],
        5: [ Integers() |
           133, 449, 56, 49, 287, 185, 169, 163, 627, 584, 553, 70, 369, 468,
           546, 81, 567, 166, 233, 23, 550, 370, 544, 379, 497, 392, 94, 318,
           243, 100, 188 ],
        6: [ Integers() |
           117, 59, 447, 197, 360, 182, 111, 47, 80, 148, 71, 528, 86, 384,
           460, 491, 51 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the third
// look-up table. The argument is the sequence:
//      [ #vertices, #facets, Gorenstein idx, bary, vol_P,
//                      Numerator(vol_D), Denominator(vol_D) ] cat
//                      Sort([#I : I in FacetIndices(Dual(P))])
// where vol_D is the volume of the dual.
function terminal_dim3_ref_list_3(data)
    // Convert the data into an integer key
    if Max(data) ge 1394 then
        return false,_;
    end if;
    key := SequenceToInteger(data,1394) mod 8482;
    // Consult the appropriate key bucket
    keys := case <key mod 11 |
         0: [ Integers() |
            154, 561, 616, 671, 737, 968, 1760, 2255, 2343, 2629, 2673, 2893,
            3190, 3377, 3938, 4961, 5269, 5764, 5918, 6061, 6171, 6567, 7711,
            8239 ],
         1: [ Integers() |
            595, 892, 969, 1266, 1354, 1563, 1849, 2212, 2608, 3378, 3631, 3664,
            3818, 3950, 4225, 4357, 4445, 4676, 4995, 5072, 5941, 6095, 6150,
            6502, 6788, 6876, 7382, 7800, 8031 ],
         2: [ Integers() |
            409, 519, 717, 772, 893, 970, 1080, 1993, 2477, 2488, 3225, 3313,
            4083, 4314, 4446, 4622, 4853, 5370, 5777, 6261, 6349, 6976, 7273,
            7878, 8197, 8417 ],
         3: [ Integers() |
            69, 333, 839, 982, 993, 1202, 1862, 1873, 1972, 2082, 2434, 3127,
            3787, 3820, 4183, 4359, 4645, 5437, 5679, 5932, 6141, 6174, 6262,
            6372, 6504, 6746, 7054, 7142, 7340, 7351, 7428, 7582, 8011, 8077 ],
         4: [ Integers() |
            4, 158, 180, 807, 1104, 1467, 1544, 1797, 1995, 2435, 2468, 2534,
            2688, 2908, 4283, 4316, 4349, 4371, 4393, 4558, 4745, 5086, 5317,
            5537, 6164, 6263, 7154, 7209, 7264, 8320 ],
         5: [ Integers() |
            830, 874, 1347, 1446, 1743, 2282, 2524, 2953, 2986, 3151, 3228,
            3349, 3569, 3613, 4196, 4262, 4295, 4691, 4735, 4845, 5109, 5175,
            5406, 5505, 5648, 5846, 6011, 6066, 6374, 6693, 7034, 7133, 7320,
            7474, 7826, 7969, 8035, 8068, 8464 ],
         6: [ Integers() |
            28, 567, 974, 1337, 1590, 1898, 2151, 2327, 2338, 2404, 2415, 3196,
            5022, 5264, 5330, 5660, 5847, 6309, 6650, 7145, 7167, 7211, 7651,
            7915, 8025 ],
         7: [ Integers() |
            491, 1162, 1525, 1580, 1701, 1745, 1987, 2603, 2636, 3736, 4011,
            4110, 4539, 4572, 4726, 4968, 5133, 5155, 5551, 6200, 6365, 6585,
            6651, 7212, 7355, 8180 ],
         8: [ Integers() |
            85, 217, 415, 514, 734, 756, 1867, 1977, 2934, 3110, 3396, 3484,
            3583, 3726, 4001, 4067, 4353, 4738, 5112, 5343, 5563, 6047, 6322,
            6509, 6597, 6850, 7565, 8401 ],
         9: [ Integers() |
            724, 1681, 2000, 3111, 3232, 3452, 3738, 3980, 3991, 4420, 4442,
            4585, 4948, 5080, 5278, 5509, 6136, 6235, 6290, 6796, 6873, 7170,
            7192, 7236, 7412, 7467, 7478, 7588, 7643, 7687, 7731, 8039, 8094,
            8138, 8226 ],
        10: [ Integers() |
            351, 582, 604, 714, 736, 1055, 1165, 1825, 2760, 3794, 4245, 4982,
            5873, 6005, 6412, 6731, 7116, 7127, 7237, 7281, 7292, 7611 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 11 |
         0: [ Integers() |
            121, 260, 556, 242, 605, 137, 115, 263, 520, 247, 202, 510, 595,
            158, 310, 227, 42, 126, 396, 526, 167, 452, 446, 150 ],
         1: [ Integers() |
            45, 417, 36, 398, 588, 153, 462, 406, 352, 376, 499, 382, 119, 415,
            192, 214, 175, 95, 210, 62, 211, 618, 579, 357, 298, 436, 366, 303,
            206 ],
         2: [ Integers() |
            257, 268, 159, 75, 218, 69, 325, 280, 194, 103, 244, 231, 271, 307,
            568, 578, 178, 129, 503, 35, 504, 349, 261, 341, 170, 606 ],
         3: [ Integers() |
            209, 160, 493, 575, 498, 312, 418, 442, 385, 433, 57, 525, 208, 598,
            204, 270, 234, 44, 199, 136, 259, 334, 554, 140, 587, 131, 594, 581,
            557, 615, 347, 355, 471, 201 ],
         4: [ Integers() |
            564, 422, 386, 203, 322, 272, 68, 505, 443, 496, 294, 593, 602, 590,
            186, 599, 476, 539, 277, 343, 487, 416, 448, 509, 83, 213, 430, 278,
            106, 365 ],
         5: [ Integers() |
            122, 74, 149, 333, 466, 329, 410, 494, 85, 486, 373, 523, 273, 463,
            319, 381, 249, 445, 519, 264, 517, 152, 138, 459, 317, 434, 262, 64,
            421, 38, 401, 241, 395, 120, 414, 237, 267, 305, 364 ],
         6: [ Integers() |
            105, 283, 77, 248, 377, 328, 502, 622, 561, 139, 34, 130, 351, 419,
            405, 591, 266, 246, 601, 193, 265, 279, 43, 472, 458 ],
         7: [ Integers() |
            282, 577, 225, 132, 467, 522, 534, 484, 67, 412, 46, 423, 284, 296,
            96, 570, 168, 495, 226, 560, 541, 518, 144, 426, 535, 402 ],
         8: [ Integers() |
            543, 198, 281, 383, 429, 302, 521, 608, 344, 53, 428, 371, 538, 127,
            238, 489, 515, 89, 424, 41, 155, 187, 354, 488, 269, 393, 156,
            533 ],
         9: [ Integers() |
            98, 464, 304, 145, 368, 363, 116, 135, 614, 350, 403, 253, 348, 356,
            331, 221, 394, 240, 327, 141, 529, 124, 359, 353, 313, 174, 399,
            125, 455, 37, 475, 506, 389, 308, 358 ],
        10: [ Integers() |
            511, 431, 289, 409, 109, 478, 189, 483, 411, 118, 180, 123, 613,
            223, 291, 482, 101, 207, 236, 453, 548, 275 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the fourth
// look-up table. The argument is the sequence:
//      [ #vertices, #facets, Gorenstein idx, bary, vol_P,
//                      Numerator(vol_D), Denominator(vol_D) ] cat
//                      Sort([#I : I in FacetIndices(Dual(P))]) cat
//                      [ #point_B, #interiorpoints_B],
// where B = P - barycentre.
function terminal_dim3_ref_list_4(data)
    // Convert the data into an integer key
    if Max(data) ge 702 then
        return false,_;
    end if;
    key := SequenceToInteger(data,702) mod 1119;
    // Consult the appropriate key bucket
    keys := case <key mod 7 |
        0: [ Integers() |
           7, 182, 245, 301, 336, 350, 406, 448, 518, 532, 588, 602, 644, 651,
           721, 861, 889, 910, 973 ],
        1: [ Integers() |
           169, 197, 267, 351, 379, 386, 519, 603, 750, 764, 806, 848, 869,
           890, 918, 967, 995, 1100 ],
        2: [ Integers() |
           9, 219, 268, 289, 352, 394, 401, 562, 583, 793, 807, 954, 968, 1031,
           1059 ],
        3: [ Integers() |
           80, 318, 346, 752, 794, 829, 843, 941, 1025 ],
        4: [ Integers() |
           60, 81, 88, 95, 165, 375, 389, 466, 494, 739, 795, 858, 928 ],
        5: [ Integers() |
           124, 243, 376, 383, 418, 453, 488, 579, 698, 733, 782, 901, 992 ],
        6: [ Integers() |
           48, 153, 237, 251, 286, 629 ],
        default : 0 >;
    // Does the key exist?
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Get the corresponding ID bucket
    vals := case <key mod 7 |
        0: [ Integers() |
           245, 336, 300, 600, 480, 326, 573, 559, 432, 566, 629, 367, 420,
           440, 219, 128, 179, 589, 582 ],
        1: [ Integers() |
           596, 623, 474, 532, 220, 604, 465, 84, 437, 620, 387, 435, 621, 306,
           79, 183, 346, 361 ],
        2: [ Integers() |
           530, 112, 252, 555, 276, 576, 413, 254, 235, 592, 473, 457, 375,
           380, 479 ],
        3: [ Integers() |
           374, 134, 586, 609, 407, 162, 512, 617, 427 ],
        4: [ Integers() |
           72, 507, 547, 342, 542, 113, 372, 562, 290, 181, 87, 469, 285 ],
        5: [ Integers() |
           232, 438, 569, 309, 239, 624, 330, 439, 408, 171, 397, 574, 316 ],
        6: [ Integers() |
           540, 536, 513, 400, 184, 425 ],
        default : 0 >;
    // Return the ID
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the fifth
// look-up table. The argument is the sequence:
//      [ #vertices, #facets, Gorenstein idx, bary, vol_P,
//                      Numerator(vol_D), Denominator(vol_D) ] cat
//                      Sort([#I : I in FacetIndices(Dual(P))]) cat
//                      [ #point_B, #interiorpoints_B] cat
//                      [ #point_2B, #point_3B ].
function terminal_dim3_ref_list_5(data)
    // Convert the data into an integer key
    if Max(data) ge 912 then
        return false,_;
    end if;
    key := SequenceToInteger(data,912) mod 103;
    // Does the key exist?
    keys := [ Integers() | 8, 22, 23, 24, 29, 31, 32, 37, 40, 41, 43, 46, 49,
              54, 55, 57, 58, 60, 61, 62, 63, 78, 82, 85, 88, 89, 91, 92, 94,
              96, 99 ];
    idx := Index(keys,key);
    if idx eq 0 then
        return false,_;
    end if;
    // Return the ID
    vals := [ Integers() | 93, 500, 551, 527, 274, 107, 78, 217, 196, 258, 563,
              537, 216, 508, 580, 340, 154, 195, 531, 224, 250, 470, 114, 205,
              338, 251, 173, 571, 97, 228, 108 ];
    return true,vals[idx];
end function;

// Returns true followed by the ID if the given data lies in the sixth
// look-up table. The argument is the sequence:
//      [ #vertices, #facets, Gorenstein idx, bary, vol_P,
//                      Numerator(vol_D), Denominator(vol_D) ] cat
//                      Sort([#I : I in FacetIndices(Dual(P))]) cat
//                      [ #point_B, #interiorpoints_B] cat
//                      [ #point_2B, #point_3B ] cat delta-vector_of_B.
function terminal_dim3_ref_list_6(data)
    // Convert the data into an integer key
    if Max(data) ge 2713 then
        return false,_;
    end if;
    key := SequenceToInteger(data,2713) mod 5;
    // Return the result
    if key eq 0 then
        return true,215;
    elif key eq 2 then
        return true,256;
    else
        return false,_;
    end if;
end function;

/////////////////////////////////////////////////////////////////////////
// Local functions
/////////////////////////////////////////////////////////////////////////

// Assuming P is a terminal 3-tope, returns true followed by the corresponding
// ID in the database. May also return false followed by an error message.
function terminal_dim3_to_id(P)
    // Calculate the first set of invariants
    data:=[Integers() | NumberOfVertices(P), NumberOfFacets(P),
            GorensteinIndex(P)];
    bool,id:=terminal_dim3_ref_list_1(data);
    if bool then return true,id; end if;
    // If we're here then that wasn't enough -- calculate the next set of invars
    barypt:=&+Vertices(P) / NumberOfVertices(P);
    bary:=IsIntegral(barypt) select 2 else 1;
    Append(~data,bary);
    Append(~data,Volume(P));
    bool,id:=terminal_dim3_ref_list_2(data);
    if bool then return true,id; end if;
    // Still no luck -- things start to get a little expensive now
    D:=Dual(P);
    vol:=Volume(D);
    Append(~data,Numerator(vol));
    Append(~data,Denominator(vol));
    data cat:= Sort([#I : I in FacetIndices(D)]);
    bool,id:=terminal_dim3_ref_list_3(data);
    if bool then return true,id; end if;
    // Carry on...
    B:=P - barypt;
    Append(~data,NumberOfPoints(B));
    Append(~data,NumberOfInteriorPoints(B));
    bool,id:=terminal_dim3_ref_list_4(data);
    if bool then return true,id; end if;
    // ...this kills off all but 2 cases
    Append(~data,EhrhartCoefficient(B,2));
    Append(~data,EhrhartCoefficient(B,3));
    bool,id:=terminal_dim3_ref_list_5(data);
    if bool then return true,id; end if;
    // The final test -- this can't fail if the input is valid
    data cat:= EhrhartDeltaVector(B);
    bool,id:=terminal_dim3_ref_list_6(data);
    if not bool then
        return false,"Argument must be a three-dimensional terminal Fano polytope";
    else
        return true,id;
    end if;
end function;

// Given the id of a terminal Fano 3-tope,returns a sequence [<db_name,id>] of
// the other database ids.
function terminal_dim3_id_to_ids(id)
    // Sanity check
    error if id le 0 or id gt 634,
        "Invalid database id (should be in the range 1..634)";
    // Compute the block and offset
    block:=id mod 23;
    i:=block eq 0 select ((id div 23) - 1) * 3 + 1
                    else ((id - block) div 23) * 3 + 1;
    // Recover the ids
    case block:
        when 0:
            ids:=[0,0,544368,0,0,544388,0,0,520101,0,0,520160,0,0,520109,0,21,
                  520159,0,0,430385,0,0,430377,0,0,430473,0,0,430430,0,0,430497,
                  0,77,430423,0,0,255751,0,0,255785,0,0,255843,0,0,255845,0,0,
                  255733,0,0,255815,0,0,61995,0,0,62009,0,0,62028,0,0,62013,0,
                  425,62056,0,0,674631,0,0,674670,0,0,674656,0,0,61958];
        when 1:
            ids:=[0,0,547383,17,5,544392,0,0,520134,0,0,520089,0,0,520114,0,0,
                  520150,11,26,520137,0,0,430375,0,0,430427,0,0,430489,0,0,
                  430407,0,0,430481,0,73,430418,0,0,255830,0,0,255792,0,0,
                  255821,4,220,255778,0,0,255735,0,0,255822,0,0,61994,0,0,62002,
                  0,410,61986,0,0,62043,0,0,62046,0,735,674679,0,0,674657,0,741,
                  674662,0,1113,61961];
        when 2:
            ids:=[0,0,547380,0,0,544367,0,0,520096,0,0,520105,0,0,520126,0,0,
                  520156,0,0,520125,0,0,430500,0,0,430383,0,0,430510,0,68,
                  430442,0,0,430397,0,0,430413,0,0,255762,10,219,255779,0,0,
                  255760,0,0,255863,0,0,255829,0,0,255807,0,0,62016,0,417,62073,
                  0,0,62090,0,0,62072,0,0,62081,0,0,674646,0,737,674673,0,0,
                  674643,0,0,61957];
        when 3:
            ids:=[0,0,547379,0,0,544374,0,0,520092,0,0,520079,0,0,520103,0,0,
                  520120,0,0,520155,0,0,430391,0,0,430373,0,0,430419,0,80,
                  430424,0,0,430432,0,0,430412,0,0,255787,0,0,255748,0,201,
                  255739,0,0,255808,0,0,255775,0,214,255880,0,0,62017,0,415,
                  62075,0,0,62029,0,0,62031,0,414,62091,0,0,674635,0,0,674639,0,
                  0,674660,0,0,12646];
        when 4:
            ids:=[18,1,547386,0,0,544370,0,0,520073,0,0,520100,0,0,520097,0,0,
                  520147,0,0,430448,0,0,430454,0,0,430458,0,0,430486,0,0,430416,
                  0,70,430433,0,0,430511,0,200,255736,0,0,255809,0,0,255740,0,0,
                  255767,0,0,255796,0,202,255741,0,0,62015,0,0,62033,0,0,62067,
                  0,0,62064,0,0,62086,0,740,674658,0,734,674683,0,0,674654,0,
                  1530,12645];
        when 5:
            ids:=[0,0,547382,0,0,544376,0,0,520068,0,0,520081,0,0,520093,0,0,
                  520111,0,0,430446,0,0,430460,0,0,430455,0,0,430436,0,0,430494,
                  0,0,430491,0,72,430439,0,0,255819,0,0,255855,0,205,255870,0,0,
                  255810,0,0,255844,0,0,255773,0,0,61996,0,0,62005,0,0,62066,0,
                  0,62062,0,0,62014,0,0,674667,0,730,674687,0,0,61947,0,1529,
                  12648];
        when 6:
            ids:=[0,0,547381,0,0,544375,0,0,520070,0,0,520088,0,0,520098,0,0,
                  520131,0,0,430449,0,0,430459,0,0,430386,0,0,430466,0,0,430506,
                  0,0,430399,0,0,430414,0,0,255817,0,0,255854,0,0,255867,0,0,
                  255799,0,0,255769,0,0,255828,0,0,61993,0,0,62021,0,0,62052,0,
                  0,62048,0,0,62047,0,0,674663,0,0,674665,0,1110,61964,0,0,
                  12644];
        when 7:
            ids:=[0,0,547385,0,0,544380,0,0,520072,0,0,520082,0,0,520148,0,0,
                  520118,0,0,430444,0,0,430382,0,0,430387,0,0,430393,0,0,430478,
                  0,0,430398,0,0,430508,0,0,255839,0,0,255857,0,0,255772,0,0,
                  255850,0,0,255813,0,0,255827,0,0,62006,0,0,62026,0,0,61991,0,
                  0,62080,0,422,62070,0,0,674652,0,0,674666,0,0,61954,0,0,
                  12642];
        when 8:
            ids:=[0,0,547384,0,0,544371,0,0,520066,0,0,520083,0,0,520149,12,30,
                  520138,0,0,430469,0,0,430462,0,0,430492,0,0,430428,0,0,430490,
                  0,76,430417,0,0,430435,0,0,255783,0,0,255794,0,0,255866,0,0,
                  255758,0,0,255823,0,215,255838,0,0,62001,0,421,62083,0,0,
                  62069,0,0,61990,0,426,62054,0,0,674647,0,0,674682,0,0,61962,0,
                  0,12647];
        when 9:
            ids:=[0,0,544385,0,4,544395,0,0,520067,0,0,520094,0,0,520122,0,22,
                  520158,0,0,430447,0,0,430505,0,0,430456,0,0,430390,0,0,430488,
                  0,0,430512,0,79,430425,0,203,255738,0,0,255756,0,206,255862,0,
                  0,255856,0,0,255833,0,207,255875,0,0,62018,0,412,62089,0,0,
                  61985,0,0,62011,0,0,62010,0,0,674649,0,0,674638,0,0,61956,0,
                  1528,1521];
        when 10:
            ids:=[0,0,544369,0,0,544394,0,0,520071,0,0,520141,0,0,520115,0,23,
                  520157,0,0,430445,0,69,430441,0,0,430464,0,0,430401,0,0,
                  430400,0,0,430403,0,0,255745,0,0,255841,0,0,255757,0,0,255803,
                  0,0,255806,0,0,255825,0,216,255837,0,0,62057,0,0,62078,0,411,
                  61987,0,0,62000,0,0,62082,0,0,674661,0,0,674637,0,0,61950,0,0,
                  12643];
        when 11:
            ids:=[0,0,544365,0,0,544377,0,0,520069,0,0,520078,0,0,520086,0,0,
                  520107,0,0,430450,0,0,430440,0,0,430388,3,84,430516,0,71,
                  430438,0,81,430411,0,0,255746,0,0,255788,0,0,255770,0,0,
                  255802,0,0,255846,0,0,255771,0,0,255873,0,0,62007,0,0,62050,0,
                  0,62087,0,424,62055,0,420,62084,0,0,674664,0,0,674641,0,0,
                  61955,0,1943,125];
        when 12:
            ids:=[0,0,544364,2,8,544387,0,0,520077,0,0,520113,0,0,520151,0,0,
                  520124,0,0,430443,0,0,430378,0,0,430389,0,0,430396,0,0,430410,
                  0,0,430402,0,0,255752,0,0,255750,0,0,255765,0,0,255826,0,0,
                  255800,0,0,255874,0,0,255774,0,0,62039,0,0,61998,0,0,62025,0,
                  0,62045,0,413,62088,0,0,674633,0,739,674678,0,0,61948,0,0,
                  124];
        when 13:
            ids:=[0,0,544362,15,6,544391,0,0,520074,0,0,520099,6,28,520139,0,0,
                  520130,0,0,430461,0,0,430379,0,0,430474,0,0,430480,0,0,430431,
                  9,85,430514,0,0,255747,0,0,255793,0,199,255743,0,0,255849,0,0,
                  255795,0,0,255742,0,212,255878,0,0,61988,0,0,62041,0,0,62034,
                  0,0,62044,0,0,62071,0,0,674681,0,738,674680,0,1109,12649,0,
                  2356,10];
        when 14:
            ids:=[0,0,544363,14,7,544390,0,0,520076,0,0,520145,0,0,520153,0,0,
                  520152,0,0,430465,0,0,430457,0,0,430475,0,75,430426,0,0,
                  430434,0,78,430420,0,0,255780,0,0,255784,0,0,255858,0,0,
                  255761,0,0,255801,0,0,255818,0,0,255868,0,0,62058,0,0,62019,0,
                  0,62085,0,416,62076,0,423,62074,0,0,674659,0,733,674685,0,0,
                  61949];
        when 15:
            ids:=[0,0,544358,0,0,544382,0,0,520075,0,0,520085,0,0,520117,0,0,
                  520112,0,0,430501,0,0,430502,0,0,430484,0,0,430395,0,0,430498,
                  0,0,430507,0,0,255781,0,0,255840,0,0,255851,0,0,255852,0,0,
                  255848,0,0,255861,0,0,255834,0,0,62032,0,0,62035,0,0,62038,0,
                  418,62079,0,0,674644,0,0,674669,0,736,674677,0,1114,61959];
        when 16:
            ids:=[0,0,544360,0,0,544379,16,31,520140,0,0,520143,0,0,520104,7,29,
                  520136,0,0,430376,0,0,430453,0,0,430429,0,0,430509,0,0,430437,
                  0,0,430496,0,0,255749,0,0,255754,0,0,255798,0,0,255764,0,0,
                  255805,0,0,255816,0,204,255737,0,0,62036,0,0,62065,0,419,
                  62077,0,0,62049,0,0,674632,0,0,674645,0,729,674686,0,0,61951];
        when 17:
            ids:=[0,0,544359,0,0,544378,0,0,520095,0,0,520084,0,0,520108,0,0,
                  520129,0,0,430463,0,0,430451,0,0,430479,0,0,430404,0,74,
                  430422,0,0,430485,0,0,255755,0,0,255782,0,0,255777,0,0,255759,
                  0,0,255853,0,0,255811,0,208,255869,0,0,62037,0,0,62020,0,0,
                  62068,0,0,62042,0,0,674640,0,0,674651,0,0,674655,0,1111,
                  61963];
        when 18:
            ids:=[0,0,544361,0,0,544384,0,0,520102,0,0,520142,0,0,520133,0,0,
                  520119,0,0,430472,0,0,430374,0,0,430468,0,0,430476,0,0,430487,
                  8,82,430515,0,0,255768,0,0,255790,0,0,255820,0,0,255814,0,0,
                  255847,0,0,255766,0,210,255871,0,0,62023,0,0,62027,0,0,61997,
                  0,0,62012,0,0,674653,0,0,674648,0,0,674675,0,0,61953];
        when 19:
            ids:=[0,0,544393,0,0,544383,0,0,520091,0,0,520087,0,0,520123,0,0,
                  520132,0,0,430483,0,0,430471,0,0,430409,0,0,430499,0,0,430392,
                  0,0,430421,0,0,255776,0,0,255753,0,0,255860,0,0,255812,0,0,
                  255797,0,0,255831,0,0,255832,0,0,62008,0,0,62004,0,0,62022,0,
                  0,62051,0,0,674650,0,732,674684,0,0,674674,0,0,61960];
        when 20:
            ids:=[0,0,544373,0,0,544381,0,0,520146,0,0,520106,0,0,520121,0,24,
                  520154,0,0,430452,0,0,430384,0,0,430477,0,0,430408,0,0,430394,
                  0,0,430415,0,0,255791,0,0,255789,0,0,255763,0,0,255872,0,0,
                  255734,0,211,255876,0,213,255879,0,0,61999,0,0,62030,0,0,
                  62061,0,0,62040,0,0,674636,0,0,674642,0,0,674672,0,0,61965];
        when 21:
            ids:=[0,0,544372,0,0,544389,0,0,520144,0,0,520080,0,0,520116,1,27,
                  520127,0,0,430470,0,0,430381,0,0,430493,0,0,430405,0,0,430503,
                  0,0,430504,0,198,255744,0,0,255730,0,209,255877,0,0,255859,0,
                  0,255732,0,0,255865,0,0,255864,0,0,62059,0,0,61989,0,0,62024,
                  0,427,62053,0,0,674671,0,0,674634,0,731,674688,0,0,61952];
        when 22:
            ids:=[0,0,544366,0,0,544386,13,25,520135,0,0,520090,0,0,520110,0,0,
                  520128,0,0,430467,0,0,430380,0,0,430495,0,0,430406,0,0,430482,
                  5,83,430513,0,0,255786,0,0,255842,0,218,255835,0,0,255804,0,0,
                  255731,0,0,255824,0,217,255836,0,0,62003,0,0,62060,0,0,62063,
                  0,0,61992,0,0,674676,0,0,674668,0,0,547529,0,1112,61966];
    end case;
    // Return the sequence of ids
    S:=[];
    if ids[i] ne 0 then     Append(~S,<"smooth3",ids[i]>);        end if;
    if ids[i + 1] ne 0 then Append(~S,<"reflexive3",ids[i + 1]>); end if;
    Append(~S,<"terminal3",id>);
    Append(~S,<"canonical3",ids[i + 2]>);
    return S;
end function;
