freeze;
import "isogenies2.m" : c4c6Model,allisogs;

function kernel11a(z)
 return z^5+429*z^4+53658*z^3-134838*z^2-424530315*z-20349931239; end function;
function kernel11b(x)
 return x^5-264*x^4+7920*x^3+1463616*x^2-92835072*x+1294672896; end function;
function kernel11c(z)
 return z^5+429*z^4+10890*z^3-2829222*z^2-56169531*z+1480352841; end function;
function kernel17a(z)
return z^8-8160*z^7 + 23981220*z^6 - 25802960400*z^5 - 15140380554450*z^4 + 
 68342601718080000*z^3-72461450055340471500*z^2 + 34699336325466068070000*z
 - 6458213126940667330314375; end function;
function kernel17b(z)
 return (z^4+1020*z^3+4590*z^2-150138900*z-19251527175)*
        (z^4+7140*z^3+5898150*z^2-7945335900*z-5385936902175); end function;
function kernel19(x) return
(x^9-1368*x^8+566352*x^7-67371264*x^6-13339510272*x^5+
 4976850014208*x^4-597222001704960*x^3+30637488687464448*x^2-
 367649864249573376*x-13235395112984641536); end function;
function kernel37a(x) return
(x^6-3150*x^5+796635*x^4-75770100*x^3+3111596775*x^2-44606598750*x-85333003875)
*(x^6-630*x^5-72765*x^4+3383100*x^3+344409975*x^2-3920379750*x-298051558875)*
(x^6-630*x^5+108675*x^4+661500*x^3-1541658825*x^2+104957228250*x-1506850198875)
; end function;
function kernel37b(x) return
 x^18+163170*x^17+12182993865*x^16+549939627039600*x^15+
 16633063574896677300*x^14+350135768194635636171000*x^13+
 5054350766002463251474186500*x^12+43602171843758666292581116410000*x^11+
 22343907270397352965399097794968750*x^10-
 5911406027236569746089675554748135312500*x^9-
 105684015609077608033913080859605951322531250*x^8-
 1124815211213953261752081095348112305023653750000*x^7-
 8472233937388712980597845725196873697064639957437500*x^6-
 47085563820928456130325308223963045033502182349693125000*x^5-
 193516922725803688001809624711400287605136013195315374687500*x^4-
 574934780393177024547076427530739751753985644656221274606250000*x^3-
 1171741935131505774747142644126089902595908234671576131857702734375*x^2-
 1469048260972089939455942042937882262144594798448952781325533511718750*x-
 31653754873248632711650187487655160190139073510876609346911928661154296875/37;
end function;
function kernel43(x) return
 x^21-18576*x^20+134304480*x^19-532525845312*x^18+1307999073791232*x^17-
 2041921247598729216*x^16+1815155330529233166336*x^15-
 156796534734764574228480*x^14-2079139633077756723705151488*x^13+
 3342467793701911478430892032000*x^12-
 2948989245672889194749214760894464*x^11+
 1599773098240128586319800000736919552*x^10-
 405077761130443455872983332412748464128*x^9-
 139784977638452169747895362657865087057920*x^8+
 202929074896578350715582174982914714718175232*x^7-
 112134584397276919806103540385275186994032410624*x^6+
 39398903624743297966612806164811465763489579008000*x^5-
 9479753200408534435284485626811852794186725190533120*x^4+
 1551322036887178610985856640150065825803519505679253504*x^3-
 162815601352919959422771360519269563653781118627893739520*x^2+
 9534897709379458364234815098879487275098008029026473476096*x-
 214665237191570699702537707709155111294378947523535462989824; end function;
function kernel67(x) return
 x^33 - 91656*x^32 + 3433424112*x^31 - 74429936180352*x^30 + 
 1075540252209249024*x^29 - 11141111327226477871104*x^28 + 
 86005176855855416162869248*x^27 - 502382299034432339996738568192*x^26 + 
 2194512310896458667911825264934912*x^25 - 
 6677934517265844980913624699504427008*x^24 + 
 9745039753716480877525511606432994164736*x^23 + 
 29565482333540417565405583084877786294255616*x^22 - 
 272456142743049921605343014505322846498766979072*x^21 + 
 1108498068216361298807899055342265169922332444065792*x^20 - 
 3037459204802301906526072554647447789931992203388780544*x^19 + 
 5738463686815470397148087101087635345684096013686949281792*x^18 - 
 5867928254815930943240551714630520371459720430301954277638144*x^17 - 
 5350168344960659025481557317216926255198077203730441794589032448*x^16 + 
 41074373255561686402059308015609497860953460908639221911672751915008*x^15 - 
 110371377198842247122253221012900031414089740617906484285840852770619392*x^14+
 2045547230941530572967533184751902576\
 03023933218042657709460171960839307264*x^13-
 29057708496032770280486674072954861958229\
 4906516464488407365554905896254963712*x^12+
 324769796805526618330362974916375640863557278\
 623221916307456965208763173322096640*x^11-
 28317859337778835397504099456970830450483523455\
 8751907492924319942865779060459438080*x^10+
 18318572285727548097909061969727263997397097\
 4301832801855247536402915519174781008084992*x^9-\
 73164104032926082446651128122211433635092072691\
 463834198457452546195733832553493973434368*x^8 - 
 257817298887984485211411107691907782423212641\
 2662066908642283094937796368461899985504436224*x^7+
 3094210981423816743542774555132689914136141485301283\
 5268794249092862265917107807867855307800576*x^6 - 
 2749879457047655252261957630628302781546487232780\
 7745071694902564762424818720677774719797065416704*x^5 +
 147019248927495592062106739519000551353274824\
 68900495686593797418956281587577066766376769742444691456*x^4 - 
 53298049948860684747524512435590227578915246032467740\
 66482524079312982385501423786423854695621045780480*x^3 +
 12946116216733124613208971638490753846662803700303448885391\
 75079938024173506234870548205739067598614560768*x^2 - 
 1918624270361704963917811315733915206461318017797761472853948\
 50003426537543906004838947227121520356773330944*x +
 13181816165029388807676530383643427800964168539634126871\
 072034700693378771740007400411596320802354972699131904; end function;
function kernel163(x) return
x^81 - 4248432*x^80 + 7738711780896*x^79 - 8506380661696150272*x^78 + 
 6512271477010307125896960*x^77 - 3757188382995047114905889955840*x^76 + 
 1716602518428756487087134206399053824*x^75 - 
 642477379623012927998555865123628978569216*x^74 + 
 201852389850934282117371497454596536834479292416*x^73 - 
 54218112187768735460580740892853835781496138909089792*x^72 + 
 12627023466519471989684279411336591318796630721142848487424*x^71 - 
 2578001259743200952464954500598292496099864716440887254304423936*x^70 + 
 465431372882680271125732385965123933876240921261732864992427439554560*x^69 -
 74812033040784557651296958577859079646426479877229169711846695402393829376*\
 x^68 + 10762059812744316847821541745827389329733587790971566397248762026397\
 853225582592*x^67 - 1390806088461782700181254581566386865909762014524382090\
 060662783348949781660406120448*x^66 + 1618458440203162081456831045295056964\
 82166400197505657066139397200641466705667123423739904*x^65 - 
 169717042483273407133916174822550657129367843627539016346240701495315366283\
 52689455063256530944*x^64 + 16017395724638814672784647304027382502780262351\
 77532818803032124910182016956824778300125887143608320*x^63 - 
 135486222899883387227983761562023063382947601434022965785934714671478415221\
 829195626502555441728684294144*x^62 + 1017951075730206391698112185046686787\
 7546250922979253571980918216237966019932850250301583640590143067124662272*x\
 ^61 - 666886223900859706613252586412563306991015057218918756444741455214903\
 329515337588428357334461040714288354618769408*x^60 + 
 365459701079037718556383817587528196194180167459189977610757356900454577781\
 71523356935636702256513491771784632052219904*x^59 - 
 148598725386530908281869083263192749353394843650841926937201380233029972634\
 1197088938448433323074459760500578939655671513088*x^58 + 
 202604989094096762540034303475889654405322772401812742576498362795612774241\
 80753098519824296067267955922817340050252561018519552*x^57 + 
 372268134789384580595190447398444831413096447352112127930414521830765610261\
 1202223871603643214006985273481940268167849743291133198336*x^56 - 
 498090709691204860288274000724091803077284350624637144646295324454270530244\
 590993127435044287589041294807176998162612347432144566518546432*x^55 + 
 409528957319376652615579581156272052533531535403662302574949550131562266224\
 83577172764094425844028129142035353836881629794673866464187471888384*x^54 - 
 264379691195718553034077493763645131498831496499946206362419342508677690324\
 7765425851626443771139472679591110992259180466821525073989730017713586176*x\
 ^53 + 140902885956226759784609397857559800678667349211430498991621277936641\
 260420389321331289349843250308452031057527981264186301332238220562120296422\
 166233088*x^52 - 6139596024062433561837785962947467079639660726999387171062\
 429093689779156572190704652783460025839831955901578361836086022457323995465\
 177567084702138481246208*x^51 + 2001044940817297576392442073841922185351873\
 991157284518604216462812163790491956798880739991553460511793471737154062195\
 74504674203216661959775489727343069990223872*x^50 - 
 281476745211021826884911910916010962591078946736992705286186522964963237847\
 430706119555042228197592489390687482763566022618934542774582304856097538038\
 3477903950610432*x^49 - 222715200985270011159256605991762812427344116756054\
 480575431894434262822916963006951655400296794962125652729549617742311082445\
 875535088813829337278577644974168979995099136*x^48 + 
 253221362192283994134816675277328327347147249003505773526083171142295061934\
 470062939468541411334599335656131031335729215973215847647934895891177194223\
 13933237456499419346108416*x^47 - 16473036866241953999920569155895501916174\
 733012850145173421427886620453212532942471613213279952974693496165233966985\
 57202097861858950774252954913245099685725462044147082619518976000*x^46 + 
 840973771954010153640593860579926122420822022190113209600241656879445245531\
 174475880115407871360132982696953723507347728213821972020246213480077505179\
 38113154426892469677134231239655424*x^45 - 
 361686324525641057015230140305323571093116465993172320973561985008983080150\
 520802663069303372478662110703036841090938746654139905633137920496749022539\
 1205162677104697208396283510702462730240*x^44 + 
 133469116606609434944774072619333050109025167716456827034819012197066271594\
 660352202443404941434494358711712588101069275118096298171436763686914335800\
 947948084216575910408568353285678620991291392*x^43 - 
 418179721887749073245333395872311684217973135872696830824250863201014843951\
 347158694182400193755422760537895803045088786201410856623299100001922151874\
 5029998277162215339573961558942403325111841062912*x^42 + 
 105401594441675654671607394829972245207754641641179375347939930144396302781\
 766835203284730967885295609125627651862949775551779199976463237527284376447\
 241987460749062959842595467549130043790063269622841344*x^41 - 
 171600619886939155104060270162252329385136240426680303825639677328441580011\
 503297260398688400110288368485743615497820440920993093746890930880668703181\
 8746474059780509862531138320232391551340822928362691362816*x^40 - 
 127265747705432163496419876417333304907447925227054678552697157869354499318\
 293064167060218382025133259253178978467173605850146640739738141363821201986\
 27031922807011880247303237399213901106923725613162720298795008*x^39 + 
 259920431545975143998754506890519372855841662236961999321758160341203127139\
 193477994369404848528096973309937802034062473181354023873278462273637451469\
 3857494405908904887487483456758061796684039661068250475686510198784*x^38 - 
 139991394539586443645289192756065893008736385185853682699822779898303442009\
 900234345128699327384525373383758041218684744173699557532879038874137230389\
 677806513985953283801599887184113942584546995857566301965933350758645760*x^\
 37 + 5553656150190477697599537495049879818275090074682463542060532896083397\
 495174526487701235945987766521994528368553903994679773723871866289343392426\
 276270726411734318223491907139896819019000969328517949395719347265634162987\
 499520*x^36 - 1850967650947544977259020786870632961668236786249159252362871\
 010650396646814368077006939750776882279080995156123318619330064509298687815\
 825973042829807947557351130675800420185427364703343687891012582806768589785\
 00850621590154510336*x^35 + 54150168720590705047040522656506653626426184424\
 787405838274237588053522630670667341543886696622828272511696802976832427766\
 324017821029471490901353297685310357975812866640662261145958205945431313395\
 33198032413578589155158210225559830528*x^34 - 
 141656758328215306652723083810802226337090381373614270448941975152585657842\
 176304217869748571454592257731125057332748491457795554591541787413399606290\
 637346833440904709883220951472229798081814475606510210694336774541481596814\
 557746137399296*x^33 + 3338789649179889144577411023212196883033281124236867\
 862311284353111819048369080279792247208536387500157768172514831365004379637\
 708864565684815238228346378755793836824510517329461505953111138172805928071\
 968247670962459364909226022596996939907072*x^32 - 
 709516812612164896711886010345834639133230138991534273456025359290468782622\
 991482396379392217286118410267688347525975781257484385027026925300680235322\
 710677940333412453906350528160892113337990732419276952671996509617796416775\
 62292379451684393320448*x^31 + 13515916953954262800029564141737072488631231\
 094617495612258350940042188338977601019441732090651044226293874017984100313\
 176188546885367255965756686772038156111996818576370788084376709639319883633\
 03924192026309719085017338239025412624739868802467114254336*x^30 - 
 227286499031697765548094258048386423199371037991327676907786672384267841525\
 241569762528972340913452040757359904215017392421235968916092545943355971781\
 084270536794899567214496730844452184348981615195122613117647078565561158438\
 14154746382292420560735084478464*x^29 + 
 325554408348833190377711846382362941364683059025789754776919804296112305984\
 355243749231155002335542361506057344788197111884900375295829132045686820593\
 055029153916143972676875097621422066518939155055345246798856227283580714084\
 535119642121048277554938265204686848*x^28 - 
 359570904947814022232975788122228146127701357639687379571014183976509244832\
 573700614372844071796394527540202459666479114513886804036347796726830540061\
 189457821500468940175964545048537242047027891440914587906744744544586789476\
 0482485192990918685476086199605102903296*x^27 + 
 180932819217326578979184995028890594579046612706294993026181269017637451154\
 668403100911587501849450257205676319194225470416197331167606758181351682272\
 784118929555042547951823889717928665396145245828062513430075585242510303968\
 58583932100502262873589076852315816370110464*x^26 + 
 453860783012862215192301475296143366291682052592363823263372803043140268993\
 292499922312488310746461348499748435654902577088367272344466202666798299926\
 975842367213051447294274154689815286217856476422285258379938968911770678629\
 082345573316756494361196959141157695453365534720*x^25 - 
 186286262624667312116331838904148010901011929543597551571438628901698420656\
 844822151190906306880855124345235184872184436298476172572144452906516405289\
 764564405714401064117853516967478681102187847751377523591694521267082278963\
 08710406207057184024587367322825487208872352482852864*x^24 + 
 435712794305872539649825634343708430073678775733292240445009977754147580983\
 503814687424962354518553902699880790730822607188223619997538834739261110047\
 396427625484932630666805295977478215595816405072790571697154426172041333606\
 234216847197781702027540703061064013136683498799770894336*x^23 - 
 809722982508923767066069649238250393361814008522757212852382196153208344215\
 908257590877772189666649483424113275311081883094064381540565716600552976668\
 163358971112476701811242922921423416928040851100770544398646638982669934748\
 5800553300174704167764019641746160310670803935306106674348032*x^22 + 
 129287302640132804459947079389711911627074357189243497603557564839701546913\
 011767403193786838540249898484966394963612135338038058142872242284717493265\
 854465906063956164906260533060653883895616866276080163693085777292490544803\
 709436719277452536543679565470931660377512211235675778401517436928*x^21 - 
 182789778937526318990642758382627982855265731779048382680047190337298907486\
 896441069124909770204973563546310902531039982416810375045180039569389342178\
 481834728799006492147567825121927612838394210883836720819230606147607337482\
 3298728603051470771027392658237535184741348078220457048170571568775168*x^20 
 + 2320497714074290990462478336963154475991435873779872418603128162505326926\
 021550489262956136506567419982477680663644084517238487851445876337091150481\
 867365145433533288518210086085521111171350777703107001088686413422941387007\
 805519089908336851309804126507912101962356506824515150299418083804538365542\
 4*x^19 - 266298628729765163387969328362460580845611606687238746460873806705\
 533167215785557465919257383424874070412281480294086251730133199240679706906\
 167243421241597068967442584003830980886596263246140188387698612595907919960\
 809738320327334035437648378307854346824793869845413393805196216760009868913\
 096246951936*x^18 + 2770489908288600716711052274958326527310409612169880595\
 218299657904611777926556041419922533332947295334801830320345543109424258183\
 264760453317685436811950466740381410360421632613324738779028957763795987609\
 670111946719913432169564377554203283418002387889787018715507572154323789541\
 735989739740667084210700288*x^17 - 2614100072487241818183724398218565377032\
 976537641772512210751400093781329701162519486087226377281291163574288431347\
 463279474082340577273928397572779067704952681085334586068056204426627039599\
 611206931290649925248794778541721965573541974069125911495684857346231019841\
 5445920769486534204744971983150616405147123712*x^16 + 
 223388292981721224642740608363480986827226614331101890088208070175916115592\
 234837890794736902338601447427981181879761409980864227831961737196425937402\
 235832244270790795196570441260814865864050924804129313005628368553402491820\
 894069838125469564044030449047538742478370662261562198048879367364662388859\
 176275937329152*x^15 - 1723820543510285267574093993049624614146653432023025\
 235178875519838582338177466131700597492834827434705118547980252645653728608\
 277245515614801879249158525730210381823646654405082446740463759913850038117\
 685231335649187930725944783314861508653673589379279893581413177869249800366\
 795206692645467432214915169971039169937408*x^14 + 
 119582529607561577939722226070176764566857678343857386896694439557741161345\
 327776048816544664176963333170312265345153312705125692021500906865590482923\
 470461606217850990858464344355301648292574563364059073139788631109896868639\
 424814872121812666399561322124161330949549921658184153931925528466460592421\
 26197742850978445524992*x^13 - 74110420746742495727167097809863933008049485\
 649833746005282591396422718300517104419881452394421562416167334843549120534\
 696498526723466391961120462887532116612384352836198326378280297948919758110\
 640799501684144924628996623521951055705069454175014538598653477243355325445\
 364193844450814759360447531341814052600376968312113856512*x^12 + 
 406872760893306949522611978035060046700200210447276723184052132370065453852\
 309472627082742311867797049820092965040755984227401569803750409060422840909\
 491553527262044865301859680110896155702640461346052047089580767256382420251\
 377764686684446803863770492431509881705325481912337438799798468299487879082\
 344850913821457846547639173120*x^11 - 1956116154434310787123941919130114655\
 928842891564829303581195937412422926475277408474917211690623601053531247084\
 665701107073855588888577188019877170497969117461837031797033000521380619418\
 990943714555855718014396151776471861948668848881118351888612451507669708925\
 268601918560312307949430149490385742157296687724528894603000937296429056*x^\
 10 + 8101989286970782749429572361246501288663125114259527006651063963758984\
 927077262704220035017658722505123313123148916045915159468395222031580354486\
 554072265182845136770311636607221157461325181936757576055510636734865797741\
 912141199124660316777268927003456305976814592372959188494312877378219483379\
 543364528087902691738214474186274587541504*x^9 - 
 282026778788782666366430153306281175959609204469877659629869930166202317781\
 084062587154545956358577850636205530854156918739155776910651465918716791940\
 547851743598998152256441271501601159158083574761409085218207061799040215125\
 051277660208936047648627178770766198877674395246178781792481321006825880184\
 81372760693307684970669469577512069627904*x^8 + 
 790842021927266855857258942971678668565181233505532233744337769469770886053\
 503132180746971872763096465120774699191308985700834059546213570389179025271\
 639684929479250478514658524511900024038257256531191533603754839053698168471\
 245115932404053946570187973762754878615335050862777359088297479870408973869\
 69812277250786948639166196582066238619910144*x^7 - 
 163174024269628790223383522414210984325109137773251768809528064399540819478\
 096263771282722900732357900992040217904316955767125330798762878211031845141\
 506801354232189511720588955020402581492997673796357194136539904221123743232\
 556733787387904714203193208454942257316513790691229656597622968650568119416\
 639661582286476027563514678911016418352111288320*x^6 + 
 179324133935487393672696195914257252930925666062390522686177197692772779780\
 910502789505155259609754836267897291422294426094553151665834861056227518960\
 749836126746321913721269564271698405734421571772325634201935071204826300347\
 494848540493069187370884968035786237689640344817682042421934146112990380718\
 152228406465122655264693583141678743172989000351744*x^5 + 
 218033638875692130275367885831882676258445819898206709006706817644076265107\
 442542280663961285098284730571629851801367845604954576074132261487723423270\
 228588678123564284675738784505152635087833884808225537707642932408378854541\
 197111601032984383170337244838810768941184431549613981486302708369822416658\
 112006059569140666889426060592745413250451581354115072*x^4 - 
 151022721882397299656583592328436737596934433059965963208524699253756121109\
 651848049534525829728891887812044552361269498154035517560692181069056424659\
 938322856065600411294884734253464329702455281027357419703598355000007312006\
 823700393422719171803034946367247880188835630563322862593953049909661029749\
 8026030130736709633019006700063395723319494264798465490944*x^3 + 
 346525496644042935211609289508829203046638093010130912857769498192176536014\
 712277672814921131082548652750847547182085226485794563640716604689547028080\
 895099887199299600047378454283505745734882070131011426140325211958308186950\
 000149024899540433283930427653809925673687946193927065054280574337121360398\
 9375475263146600027502740635128485484456165305986297683247104*x^2 - 
 426309448975197912034112014538782166290078911155744878828035957808801070006\
 562119682196126703594139008022350165325671601343228993801457716004652190923\
 064780139478249902984167016957712141704900715153514899840022916948882628501\
 300301145612804492963246236187085483322633804069681307919542460636461991067\
 4071946263516998481752473353585748890898209300059848353926610944*x + 
 234714371010320184418402429563473428480744323820525409780888217009304906901\
 405802026066518595905136516340176085402403124034427201414775270520795933998\
 039522336332962499135744943047782641862846290981247256385478282307303544019\
 125486600178247426603398013716239953709377476440244719316205635806210969984\
 7565565116858855751534337643052956013018642467506337044013938376704
 ; end function;

function allisogs_mm(E,l) K:=allisogs(E,l);
 return [k*m where _,m:=MinimalModel(Codomain(k)) : k in K]; end function;

function cbrt(x) return Round(x^(1/3)); end function;

function exotic_isog(E,F,I) x:=PolynomialRing(BaseRing(E)).1;
 Em,me:=c4c6Model(E); Fm,mf:=c4c6Model(F); c6:=cInvariants(Em)[2];
 if I eq 11 then
  if jInvariant(E) eq -24729001 then
   tw:=cbrt(c6/2552223168); K:=kernel11a(x/tw); end if;
  if jInvariant(E) eq -32768 then
   tw:=cbrt(c6/-316141056); K:=kernel11b(x/tw); end if;
  if jInvariant(E) eq -121 then
   tw:=cbrt(c6/242751168); K:=kernel11c(x/tw); end if; end if;
 if I eq 17 then
  if jInvariant(E) eq -297756989/2 then
   tw:=cbrt(c6/-2601320443200); K:=kernel17a(x/tw); end if;
  if jInvariant(E) eq -882216989/131072 then
   tw:=cbrt(c6/295270660800); K:=kernel17b(x/tw); end if; end if;
 if I eq 19 then tw:=cbrt(c6/-3638048256); K:=kernel19(x/tw); end if;
 if I eq 37 then
  if jInvariant(E) eq -9317 then
   tw:=cbrt(c6/-383745600); K:=kernel37a(x/tw); end if;
  if jInvariant(E) eq -162677523113838677 then
   tw:=cbrt(c6/1472734038283200); K:=kernel37b(x/tw); end if; end if;
 if I eq 43 then tw:=cbrt(c6/-391306857984); K:=kernel43(x/tw); end if;
 if I eq 67 then tw:=cbrt(c6/-9816814683648); K:=kernel67(x/tw); end if;
 if I eq 163 then tw:=cbrt(c6/-49749017627764224); K:=kernel163(x/tw); end if;
 _,m:=IsogenyFromKernel(Em,K : Check:=false);
 a,b:=IsIsomorphic(Codomain(m),Fm); assert a;
 return me*m*b*Inverse(mf); end function;

function isisog(E,F)
 Em,me:=MinimalModel(E); Fm,mf:=MinimalModel(F); L,I:=IsogenousCurves(Em);
 a,b:=IsIsomorphic(Em,Fm); if a then return true,me*b*Inverse(mf); end if;
 f:=0; for i in [1..#L] do
  if Em eq L[i] then e:=i; end if; if Fm eq L[i] then f:=i; end if; end for;
 if f eq 0 then return false,_; end if;
 if I in {11,17,19,37,43,67,163} then K:=exotic_isog(Em,Fm,I);
  a,b:=IsIsomorphic(Codomain(K),Fm); assert a;
  return true,me*K*b*Inverse(mf); end if;
 if I in {2,3,5,7,13} then K:=allisogs_mm(Em,I); assert #K eq 1;
  a,b:=IsIsomorphic(Codomain(K[1]),Fm); assert a;
  return true,me*K[1]*b*Inverse(mf); end if;
 if I in {4,9,25} then _,i:=IsSquare(I); K:=allisogs_mm(Em,i);
  if #K eq 1 then a,b:=IsIsomorphic(Codomain(K[1]),Fm);
   if a then return true,me*K[1]*b*Inverse(mf); end if;
   K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K2[1]),Fm); assert a;
   return true,me*K[1]*K2[1]*b*Inverse(mf); end if;
  K:=[x: x in allisogs_mm(Em,i) | Codomain(x) eq Fm];
  a,b:=IsIsomorphic(Codomain(K[1]),Fm); assert a;
  return true,me*K[1]*b*Inverse(mf); end if;
 if I in {8} then i:=2;
  if {e,f} in {{1,2},{2,3},{2,4},{4,5},{4,6}} then
   K:=[x: x in allisogs_mm(Em,i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K[1]),Fm); assert a;
   return true,me*K[1]*b*Inverse(mf); end if;
  if e eq 2 or e eq 4 then
   K:=[x: x in allisogs_mm(Em,i) | Codomain(x) eq L[6-e]];
   K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K2[1]),Fm); assert a;
   return true,me*K[1]*K2[1]*b*Inverse(mf); end if;
  if f eq 2 or f eq 4 or {e,f} in {{1,3},{5,6}} then
   K:=[x: x in allisogs_mm(Em,i)]; assert #K eq 1;
   K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K2[1]),Fm); assert a;
   return true,me*K[1]*K2[1]*b*Inverse(mf); end if;
  if e in {1,3} then
   K:=[x: x in allisogs_mm(Em,i)]; assert #K eq 1;
   K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) eq L[4]];
   K3:=[x: x in allisogs_mm(Codomain(K2[1]),i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K3[1]),Fm); assert a;
   return true,me*K[1]*K2[1]*K3[1]*b*Inverse(mf); end if;
  if e in {5,6} then
   K:=[x: x in allisogs_mm(Em,i)]; assert #K eq 1;
   K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) eq L[2]];
   K3:=[x: x in allisogs_mm(Codomain(K2[1]),i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K3[1]),Fm); assert a;
   return true,me*K[1]*K2[1]*K3[1]*b*Inverse(mf); end if;
  error "8-isogeny type not considered!"; end if;
 if I in {16} then i:=2;
  if {e,f} in {{1,2},{2,3},{2,4},{4,5},{4,6},{6,7},{6,8}} then
   K:=[x: x in allisogs_mm(Em,i) | Codomain(x) eq Fm];
   a,b:=IsIsomorphic(Codomain(K[1]),Fm); assert a;
   return true,me*K[1]*b*Inverse(mf); end if;
  if e gt f then s:=2*Ceiling(e/2)-2; else if e in {1,3} then s:=2;
      elif e in {2,5} then s:=4; else s:=6; end if; end if;
  K:=[x: x in allisogs_mm(Em,i) | Codomain(x) eq L[s]];
  K2:=[x: x in allisogs_mm(Codomain(K[1]),i)];
  for u in K2 do a,b:=IsIsomorphic(Codomain(u),Fm);
   if a then return true,me*K[1]*u*b*Inverse(mf); end if; end for;
  if s gt f then s:=s-2; else s:=s+2; end if;
  K2:=[x : x in K2 | Codomain(x) eq L[s]];
  K3:=[x: x in allisogs_mm(Codomain(K2[1]),i)];
  for u in K3 do a,b:=IsIsomorphic(Codomain(u),Fm);
   if a then return true,me*K[1]*K2[1]*u*b*Inverse(mf); end if; end for;
  if s gt f then s:=s-2; else s:=s+2; end if;
  K3:=[x : x in K3 | Codomain(x) eq L[s]];
  K4:=[x: x in allisogs_mm(Codomain(K3[1]),i) | Codomain(x) eq Fm];
  a,b:=IsIsomorphic(Codomain(K4[1]),Fm); assert a;
  return true,me*K[1]*K2[1]*K3[1]*K4[1]*b*Inverse(mf); end if;
 if I in {27} then i:=3;
  K:=[x: x in allisogs_mm(Em,i)]; a,b:=IsIsomorphic(Codomain(K[1]),Fm);
  if a then return true,me*K[1]*b*Inverse(mf); end if;
  if #K eq 2 then a,b:=IsIsomorphic(Codomain(K[2]),Fm);
   if a then return true,me*K[2]*b*Inverse(mf); end if;
   K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) eq Fm]; t:=1;
   if #K2 eq 0 then t:=2;
    K2:=[x: x in allisogs_mm(Codomain(K[2]),i) | Codomain(x) eq Fm]; end if;
   a,b:=IsIsomorphic(Codomain(K2[1]),Fm); assert a;
   return true,me*K[t]*K2[1]*b*Inverse(mf); end if;
  K2:=[x: x in allisogs_mm(Codomain(K[1]),i) | Codomain(x) ne Em];
  a,b:=IsIsomorphic(Codomain(K2[1]),Fm);
  if a then return true,me*K[1]*K2[1]*b*Inverse(mf); end if;
  K3:=[x: x in allisogs_mm(Codomain(K2[1]),i) | Codomain(x) eq F];
  a,b:=IsIsomorphic(Codomain(K3[1]),Fm); assert a;
  if a then return true,me*K[1]*K2[1]*K3[1]*b*Inverse(mf); end if; end if;  
 if I in {6,10,14,15,21} then t:=Factorization(I); p:=t[1][1]; q:=t[2][1];
  if {e,f} in {{1,4},{2,3}} then Kp:=allisogs_mm(Em,p); assert #Kp eq 1;
   Kq:=allisogs_mm(Codomain(Kp[1]),q); assert #Kq eq 1;
   a,b:=IsIsomorphic(Codomain(Kq[1]),Fm); assert a;
   return true,me*Kp[1]*Kq[1]*b*Inverse(mf); end if;
  if {e,f} in {{1,3},{2,4}} then Kq:=allisogs_mm(Em,q); assert #Kq eq 1;
   a,b:=IsIsomorphic(Codomain(Kq[1]),Fm); assert a;
   return true,me*Kq[1]*b*Inverse(mf); end if;
  if {e,f} in {{1,2},{3,4}} then Kp:=allisogs_mm(Em,p); assert #Kp eq 1;
   a,b:=IsIsomorphic(Codomain(Kp[1]),Fm); assert a;
   return true,me*Kp[1]*b*Inverse(mf); end if; end if;
 if I in {12} then
  if (e le 4 and f ge 5) or (e ge 5 and f le 4) then
   K:=allisogs_mm(Em,3); a,b:=IsIsomorphic(Codomain(K[1]),Fm);
   if a then return true,me*K[1]*b*Inverse(mf); end if;
  else K:=[w where _,w:=IsIsomorphic(Em,Em)]; end if;
  K2:=allisogs_mm(Codomain(K[1]),2);
  for u in K2 do a,b:=IsIsomorphic(Codomain(u),Fm);
   if a then return true,me*K[1]*u*b*Inverse(mf); end if; end for;
  if f ge 5 then s:=6; else s:=2; end if;
  K2:=[x: x in K2 | Codomain(K2[1]) eq L[s]];
  K3:=[x: x in allisogs_mm(Codomain(K2[1]),2) | Codomain(x) eq Fm];
  a,b:=IsIsomorphic(Codomain(K3[1]),Fm); assert a;
  return true,me*K[1]*K2[1]*K3[1]*b*Inverse(mf); end if;
 if I in {18} then
  if IsOdd(e) ne IsOdd(f) then
   K:=allisogs_mm(Em,2); a,b:=IsIsomorphic(Codomain(K[1]),Fm);
   if a then return true,me*K[1]*b*Inverse(mf); end if;
  else K:=[w where _,w:=IsIsomorphic(Em,Em)]; end if;
  K2:=allisogs_mm(Codomain(K[1]),3);
  for u in K2 do a,b:=IsIsomorphic(Codomain(u),Fm);
   if a then return true,me*K[1]*u*b*Inverse(mf); end if; end for;
  if IsOdd(f) then s:=3; else s:=4; end if;
  K2:=[x: x in K2 | Codomain(K2[1]) eq L[s]];
  K3:=[x: x in allisogs_mm(Codomain(K2[1]),3) | Codomain(x) eq Fm];
  a,b:=IsIsomorphic(Codomain(K3[1]),Fm); assert a;
  return true,me*K[1]*K2[1]*K3[1]*b*Inverse(mf); end if;
 error "isogeny type unknown!"; end function;

intrinsic IsIsogenous(E::CrvEll[FldRat],F::CrvEll[FldRat]) -> BoolElt,Map
{Determine if two rational elliptic curves are isogenous,
 and (perhaps expensively) determine a map between them}
 return isisog(E,F); end intrinsic;

intrinsic BSDHeightRatios(C::SeqEnum[CrvEll]) -> SeqEnum
{Given a sequence of isogenous curves, return the BSD-ratios relative to
 the first curve. Note: the curves are not checked to actually be isogenous,
 and the inputs should be related by *cyclic* isogenies}
 // see LSeries/bsdnf.m
 require #C ne 0: "Sequence of isogenous elliptic curves must be non-empty";
 if FldRat in [Type(BaseRing(c)) : c in C] then Q:=QNF();
  return BSDHeightRatios
  ([Type(BaseRing(c)) eq FldRat select BaseChange(c,Q) else c : c in C]);
  end if;
 require Set([Type(BaseRing(c)) : c in C]) eq {FldNum}:
 "Curves must be defined over a number field (or Q)";
 require #Set([BaseRing(c) : c in C]) eq 1: "Curves must be over same field";
 
 function finite_terms(E) Q:=Rationals(); Z:=Integers();
  tors:=#TorsionSubgroup(E); loc:=LocalInformation(E);
  tam:=&*[Z| l[4]: l in loc]; disc:=Discriminant(E);
  om:=&*[Q| Norm(l[1])^((Valuation(disc,l[1])-l[2]) div 12): l in loc];
  return tam*om/tors^2; end function;
 function infinite_terms(E)
  function cross(z1,z2) a:=Real(z1); b:=Imaginary(z1); c:=Real(z2);
                        d:=Imaginary(z2); return a*d-b*c; end function;
  IsCloseToReal:=func<x,prec|Abs(Imaginary(x)) lt 10^(2-prec)>;
  function RP(p1,p2) prec:=Precision(p1);
   if IsCloseToReal(p1,prec) then return p1; end if;
   if IsCloseToReal(p2,prec) then return p2; end if;
   q:=BestApproximation(Imaginary(p1)/Imaginary(p2),10^((prec-2) div 2));
   num:=Numerator(q); den:=Denominator(q);
   assert IsCloseToReal(p1*den-p2*num,prec);
   return p1*den-p2*num; end function;
  K:=BaseField(E); r1,r2:=Signature(K); inf:=InfinitePlaces(K);
  P:=Periods(E); dsc:=Discriminant(E); C:=ComplexField(); Z:=Integers();
  Rps:=&*[C| RP(P[i][1],P[i][2]): i in [1..r1+r2] | IsReal(inf[i])];
  Rcorr:=&*[Z| d lt 0 select 1 else 2: d in RealEmbeddings(dsc)];
  Cps:=&*[C| cross(P[i][1],P[i][2]): i in [1..r1+r2] | not IsReal(inf[i])];
  Ccorr:=2^r2; omegas:=Abs(Rps*Rcorr*Cps*Ccorr);
  return omegas; end function;
 INF:=[infinite_terms(c) : c in C];
 BA:=[BestApproximation(i/INF[1],10^4) : i in INF];
 return [1/(BA[i]*finite_terms(C[i])/finite_terms(C[1])) : i in [1..#C]];
 end intrinsic;

/*
E:=EllipticCurve([1,1,1,-82750,-9446440]);
I:=IsogenousCurves(E);
BSDHeightRatios(I);
[ConjecturalRegulator(i : Precision:=5) : i in I];
*/
