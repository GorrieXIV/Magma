freeze;
 
///////////////////////////////////////////////////////////////////////
// AFR.m
// This file only contains the function get_AFR.
// To use it, you must 'import' it into a file with other intrinsics.
// It takes as argument a sequence of weights W and a basket B (in K3
// format [ [r,a],... ]) and compares these with the list of K3 weights
// of Altinok, Fletcher, Reid.  The basket B is only there to decide
// between cases that share weights.
///////////////////////////////////////////////////////////////////////

/*
Notes:
    In the usual lists, the following pairs share common weights:
    Codim 2:
	Numbers 21 and 22 are different: [1,2,3,4,5].
	Numbers 38 and 39 are different: [2,3,4,5,7].
    Codim 3:
	Numbers 29 and 34 are different: [1,3,4,5,6,7].
	Numbers 37 and 41 are different: [1,2,3,3,4,5].
    Codim 4:
	Numbers 45 and 78 are different: [1,2,3,3,4,4,5];
	Numbers 74 and 75 are different: [1,2,2,3,3,4,5];
	Numbers 60 and 76 are equal: [1,2,2,3,3,5,7];
	Numbers 105 and 107 are equal: [3,4,5,5,6,7,9];
	Number 81 is actually codim 5.
    When two are actually equal, I set the second to be [0,0,0,0,0,0,0].
*/

function get_AFR(W,B)
    // return the index of W in any of the sequences below.
    // the basket B is included to distinguish between the common ones.
    Reid1 := [
	[1,1,1,1],  [1,1,1,2],  [1,1,1,3],  [1,1,2,2],  [1,1,2,3],  [1,1,2,4],
	[1,2,2,3],  [1,1,3,4],  [1,2,3,3],  [1,1,3,5],  [1,2,2,5],  [1,2,3,4],
	[1,2,3,5],  [1,1,4,6],  [1,2,3,6],  [1,2,4,5],  [1,3,4,4],  [2,2,3,5],
	[2,3,3,4],  [1,3,4,5],  [1,2,4,7],  [2,2,3,7],  [2,3,4,5],  [1,2,5,7],
	[1,3,4,7],  [1,3,5,6],  [2,3,5,5],  [3,3,4,5],  [1,2,5,8],  [1,3,4,8],
									// 30
	[1,4,5,6],  [2,3,4,7],  [2,3,5,7],  [1,2,6,9],  [1,3,5,9],  [1,4,6,7],
	[2,3,4,9],  [2,3,5,8],  [3,4,5,6],  [3,4,5,7],  [1,4,5,10], [2,3,5,10],
	[2,4,5,9],  [2,5,6,7],  [3,4,5,8],  [1,3,7,10], [1,5,7,8],  [2,3,7,9],
	[3,5,6,7],  [1,3,7,11], [1,4,6,11], [2,4,5,11], [1,3,8,12], [1,6,8,9],
	[2,3,7,12], [2,3,8,11], [3,4,5,12], [3,4,7,10], [3,6,7,8],  [4,5,6,9],
									// 60
	[4,5,7,9],  [1,5,7,13], [2,3,8,13], [2,5,6,13], [2,5,9,11], [5,6,7,9],
	[1,4,9,14], [3,4,7,14], [4,6,7,11], [1,4,10,15],[1,6,8,15], [2,3,10,15],
	[2,6,7,15], [3,4,10,13],[4,5,6,15], [5,6,8,11], [2,5,9,16], [4,5,7,16],
	[3,5,11,14],[3,4,10,17],[4,6,7,17], [1,5,12,18],[3,4,11,18],[7,8,9,12],
	[3,5,11,19],[5,6,8,19], [5,7,8,20], [1,6,14,21],[2,5,14,21],[3,4,14,21],
	[4,5,13,22],[3,5,16,24],[7,8,10,25],[4,5,18,27],[5,6,22,33]	// 95
    ];
    Fletcher2 := [
	[1,1,1,1,1],  [1,1,1,1,2],  [1,1,1,2,2],  [1,1,1,2,3],  [1,1,2,2,2],
	[1,1,2,2,3],  [1,1,2,3,3],  [1,2,2,2,3],  [1,1,2,3,4],  [1,2,2,3,3],
	[1,1,2,3,5],  [1,2,2,3,4],  [1,2,3,3,3],  [2,2,2,3,3],  [1,2,2,3,5],
	[1,2,3,3,4],  [1,1,3,4,5],  [1,2,3,3,5],  [1,2,3,4,4],  [2,2,3,3,4],
									// 20
	[1,2,3,4,5],  [1,2,3,4,5],  [1,2,3,5,5],  [2,2,3,4,5],  [1,2,3,4,7],
	[1,3,4,4,5],  [2,3,3,4,5],  [1,2,3,5,7],  [1,2,4,5,6],  [1,3,4,5,5],
	[2,3,4,4,5],  [1,2,3,5,8],  [1,3,4,5,6],  [2,2,3,5,7],  [2,3,4,5,5],
	[1,3,4,5,7],  [2,3,4,5,6],  [2,3,4,5,7],  [2,3,4,5,7],  [1,3,4,5,9],
									// 40
	[1,3,5,6,7],  [1,4,5,6,6],  [2,3,4,5,8],  [2,3,5,5,7],  [2,4,5,5,6],
	[3,3,4,5,7],  [3,4,4,5,6],  [1,4,5,6,7],  [1,2,5,7,9],  [2,3,5,7,7],
	[2,4,5,6,7],  [2,3,5,7,8],  [3,4,5,6,7],  [1,3,4,7,11], [1,4,6,7,8],
	[2,3,4,7,10], [2,3,5,7,9],  [3,4,5,7,7],  [4,4,5,6,7],  [1,4,5,6,11],
									// 60
	[3,4,5,6,9],  [3,4,5,7,8],  [2,5,6,7,8],  [2,3,5,7,12], [2,5,6,7,9],
	[3,4,5,7,10], [3,5,6,7,8],  [1,5,7,8,9],  [3,4,5,7,11], [4,5,6,7,8],
	[2,3,5,8,13], [3,4,5,8,11], [2,3,7,9,11], [2,6,7,8,9],  [4,5,6,7,10],
	[1,6,8,9,10], [4,6,7,8,9],  [4,5,6,9,14], [4,5,7,9,13], [5,6,7,9,11],
	[2,5,9,11,13],[3,4,7,10,17],[6,8,9,10,15],[8,9,10,12,15]	// 84
    ];
    Altinok3 := [
	[1,1,1,1,1,1],  [1,1,1,1,1,2],  [1,1,1,1,2,3],  [1,1,1,1,2,2],
	[1,1,1,2,2,2],  [1,1,1,2,3,4],  [1,1,1,2,2,3],  [1,1,2,2,2,2],
	[1,1,3,4,5,6],  [1,1,2,2,2,3],  [1,1,2,2,3,3],  [1,1,2,2,3,5],
	[1,1,2,2,3,4],  [1,1,2,3,4,5],  [1,1,2,3,3,4],  [1,2,2,2,3,3],
	[1,2,2,3,4,5],  [1,2,2,3,3,3],  [1,2,2,3,5,7],  [1,2,4,5,6,7],
									// 20
	[1,2,3,3,3,4],  [1,2,3,3,5,8],  [1,2,3,4,5,7],  [1,3,5,6,7,8],
	[1,3,4,4,5,6],  [1,3,4,4,5,5],  [1,5,7,8,9,10], [1,3,4,4,5,9],
	[1,3,4,5,6,7],  [1,6,8,9,10,11],[1,4,6,7,8,9],  [1,4,5,6,7,8],
	[1,4,5,6,6,7],  [1,3,4,5,6,7],  [1,3,4,5,5,6],  [1,2,3,3,4,4],
	[1,2,3,3,4,5],  [1,2,3,4,5,6],  [1,2,3,4,4,5],  [1,2,3,4,5,5],
									// 40
	[1,2,3,3,4,5],  [1,2,3,3,4,7],  [1,2,2,3,3,4],  [1,2,2,3,3,5],
	[3,3,4,5,7,10], [3,4,5,7,8,11], [2,3,5,7,8,9],  [2,3,5,5,7,12],
	[2,2,3,5,7,9],  [2,2,3,3,4,5],  [2,5,6,7,9,11], [2,3,4,5,7,7],
	[2,5,6,7,7,8],  [2,3,3,4,5,8],  [2,3,3,4,5,7],  [2,3,4,4,5,5],
	[2,3,3,4,5,5],  [2,3,4,4,5,7],  [2,3,3,4,4,5],  [3,5,6,7,8,11],
									// 60
	[5,5,6,7,8,9],  [4,4,5,6,7,9],  [3,4,5,6,7,10], [3,4,5,5,6,7],
	[4,5,5,6,7,8],  [3,4,4,5,6,7],  [2,3,4,5,7,9],  [2,3,4,5,5,7],
	[2,3,4,5,5,6],  [5,6,7,8,9,10]					// 70
    ];
    Altinok4 := [
	[1,1,1,1,1,1,2],  [1,1,1,1,1,2,2],  [1,1,1,1,2,2,2],  [1,1,1,1,2,3,4],
	[1,1,1,1,2,2,3],  [1,1,1,2,2,2,2],  [1,1,1,2,2,3,3],  [1,1,1,2,3,4,5],
	[1,1,1,2,2,2,3],  [1,1,1,2,2,3,4],  [1,1,2,2,2,2,2],  [1,1,2,3,3,4,4],
	[1,1,3,4,5,6,7],  [1,1,2,2,3,3,3],  [1,1,2,2,3,5,7],  [1,1,2,3,3,4,7],
	[1,1,2,2,2,3,4],  [1,1,2,2,3,4,5],  [1,1,2,2,3,3,5],  [1,1,2,2,2,3,5],
									//20
	[1,1,2,2,2,2,3],  [1,1,2,3,4,5,6],  [1,1,2,3,3,4,5],  [1,1,2,2,3,3,4],
	[1,2,2,2,2,3,3],  [1,2,3,3,5,8,11], [1,3,4,4,5,5,5],  [1,3,4,4,5,9,13],
	[1,2,2,2,3,3,3],  [1,2,2,2,3,3,4],  [1,2,2,2,3,3,5],  [1,2,2,3,4,5,6],
	[1,2,2,3,3,4,4],  [1,2,2,3,3,3,3],  [1,2,2,3,3,4,7],  [1,2,2,3,3,5,8],
	[1,2,2,3,5,7,9],  [1,2,4,5,6,7,8],  [1,2,3,3,3,4,5],  [1,2,3,4,4,5,5],
									//40
 	[1,2,3,3,3,4,4],  [1,2,3,3,4,4,4],  [1,2,3,3,4,5,7],  [1,2,3,4,4,5,9],
 	[1,2,3,3,4,4,5],  [1,2,3,3,3,4,7],  [1,2,3,4,5,5,7],  [1,2,3,3,4,5,8],
 	[1,3,5,6,7,8,9],  [1,3,4,4,5,6,7],  [1,4,5,6,6,7,7],  [1,3,4,5,5,6,6],
	[1,5,7,8,9,10,11],[1,4,5,6,6,7,13], [1,3,4,5,5,6,11], [1,3,4,4,5,5,9],
	[1,3,4,5,6,7,7],  [1,2,2,3,3,5,5],  [1,2,3,3,4,7,10], [1,2,2,3,3,5,7],
									//60
	[1,6,8,9,10,11,12],[1,4,6,7,8,9,10],[1,4,5,6,6,7,8],  [1,4,5,6,7,8,9],
	[1,3,4,5,6,7,8],  [1,3,4,5,5,6,7],  [1,2,3,3,4,5,6],  [1,2,3,4,5,6,7],
	[1,2,3,4,4,5,6],  [1,2,3,4,5,5,6],  [1,2,3,3,4,5,5],  [1,2,3,3,4,4,7],
	[1,2,2,3,3,3,4],  [1,2,2,3,3,4,5],  [1,2,2,3,3,4,5],  [0,0,0,0,0,0,0],
	[1,2,2,3,3,3,5],  [1,2,3,3,4,4,5],  [2,3,5,5,7,12,17],[2,2,3,5,7,9,11],
									// 80
	[2,3,4,5,7,7,11], [3,3,4,5,7,10,13],[3,5,6,7,8,11,14],[5,5,6,7,8,9,11],
	[2,3,4,4,5,7,11], [2,3,3,4,5,7,9],  [2,3,3,4,5,5,5],  [2,3,4,5,5,7,7],
	[2,5,6,7,9,11,13],[2,2,3,3,4,5,5],  [2,2,3,3,4,5,7],  [2,3,3,4,4,5,7],
	[2,3,3,4,5,8,11], [2,3,4,5,5,7,12], [2,3,4,5,5,5,6],  [2,3,4,5,5,6,8],
	[2,3,4,5,5,7,9],  [3,4,4,5,6,7,10], [2,3,4,4,5,5,7],  [2,5,6,7,7,8,9],
									// 100
	[2,3,4,5,7,7,9],  [2,3,4,5,7,9,11], [2,3,3,4,5,5,7],  [3,4,5,6,7,10,13],
	[3,4,5,5,6,7,9],  [4,4,5,6,7,9,13], [0,0,0,0,0,0,0],  [3,4,4,5,6,7,7],
	[3,4,4,5,6,7,11], [3,4,5,5,6,7,8],  [4,5,5,6,7,8,9],  [3,4,5,5,6,7,7],
	[2,3,3,4,5,5,8],  [2,3,4,5,5,6,7],  [2,3,3,4,4,5,5],		// 115
	[2,2,3,3,4,5,8],  [1,3,4,4,5,5,6],  [1,1,2,2,2,3,3],  [1,1,1,2,2,3,5],
	[1,1,1,1,1,2,3],  [1,1,1,1,1,1,1]				// 121
    ];
    Altinok4_excl := [
	[2,2,3,4,5,5,6],  [3,3,4,4,5,5,6],  [3,3,4,5,5,6,7],  [2,3,3,3,4,4,5],
	[2,2,3,3,3,4,4],  [2,2,2,3,3,3,4],  [2,3,4,4,4,5,5],  [2,5,6,7,8,8,9],
	[2,2,3,3,4,4,5],  [2,6,7,8,9,9,10], [2,4,5,6,7,7,8],  [2,4,5,5,6,6,7],
	[4,5,6,7,7,8,9],  [3,5,6,7,7,8,9],  [3,4,4,5,5,6,7],  [3,6,7,8,8,9,10],
	[2,3,4,5,6,6,7],  [4,6,7,7,8,9,10], [6,6,7,8,9,10,11],[3,4,5,6,6,7,8],
	[2,3,4,4,5,5,6],  [5,6,6,7,8,9,10], [4,5,6,6,7,8,9],  [3,4,5,5,6,6,7]
	// 24
    ];

    if #W eq 4 then
	afr := Index(Reid1,W);
    elif #W eq 5 then
	if W eq [1,2,3,4,5] and B eq [[2,1],[4,1],[5,2]] then
	    afr := 21;
	elif W eq [1,2,3,4,5] and B eq [[2,1],[2,1],[3,1],[5,1]] then
	    afr := 22;
        elif W eq [2,3,4,5,7] and B eq [[2,1],[2,1],[2,1],[5,2],[7,3]] then
	    afr := 38;
        elif W eq [2,3,4,5,7] and B eq [[2,1],[2,1],[3,1],[4,1],[7,2]] then
	    afr := 39;
	else
	    afr := Index(Fletcher2,W);
	end if;
    elif #W eq 6 then
	if W eq [1,3,4,5,6,7] and B eq [[6,1],[7,3]] then
	    afr := 29;
	elif W eq [1,3,4,5,6,7] and B eq [[3,1],[4,1],[7,1]] then
	    afr := 34;
	elif W eq [1,2,3,3,4,5] and B eq [[2,1],[3,1],[3,1],[5,1]] then
	    afr := 37;
	elif W eq [1,2,3,3,4,5] and B eq [[3,1],[4,1],[5,2]] then
	    afr := 41;
	else
	    afr := Index(Altinok3,W);
	end if;
    elif #W eq 7 then
	if W eq [1,2,3,3,4,4,5] and B eq [[4,1],[4,1],[5,2]] then
	    afr := 45;
	elif W eq [1,2,3,3,4,4,5] and B eq [[2,1],[3,1],[4,1],[5,1]] then
	    afr := 78;
	elif W eq [1,2,2,3,3,4,5] and B eq [[2,1],[2,1],[2,1],[3,1],[5,1]] then
	    afr := 74;
	elif W eq [1,2,2,3,3,4,5] and B eq [[2,1],[2,1],[4,1],[5,2]] then
	    afr := 75;
	else
	    afr1 := Index(Altinok4,W);
	    afr2 := Index(Altinok4_excl,W);
	    if afr1 ne 0 then
		afr := afr1;
	    else
		afr := -afr2;
	    end if;
	end if;
    else
	afr := 0;
    end if;

    return afr;
end function;

