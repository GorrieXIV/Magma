/* 
defining equations
 N = the level
 code_int = 0 genus 0, 1 elliptic, 2 hyperelliptic, 3...number of projective variables
 code_int2 = g if code_int<=2, # of equations if code_int >= 3
  following format = 
 elliptic:
  coeff,coeff,coeff,coeff,coeff
  (for a1,a2,a3,a4,a6)
 hyperelliptic: y^2+(a_(g+1)x^(g+1)+..a_0)y=b_(2g+2)x^(2g+2)+..b_0
  coeff,coeff,...,coeff
  (g+2 *coeff for a0,..a_(g+1))
  coeff,coeff,...,coeff
  (2g+3 *coeff for b0,..b_(2g+2))
 non-hyper: as below, the equations are defined by lines of comma separated data for the terms:
  a*x_1^i_1*..*x_n^i_n becomes a,i_1,..,i_n. There is a space between data for each equation.
*/
N,code_int,code_int2
coeff,mon_ind1,..,mon_indn
coeff,mon_ind1,..,mon_indn
...
coeff,mon_ind1,..,mon_indn
(space)
coeff,mon_ind1,..,mon_indn
coeff,mon_ind1,..,mon_indn
...
coeff,mon_ind1,..,mon_indn
(space)
...
/*
cuspidal points/clusters + place data
  d1,d2,..,dr are the ordered positive divisors of N
  code_int = 0 for point, 1 for cluster
  sing = 0 for non-sing, 1 for sing
  point: coord,coord,..,coord
  cluster: same form as for defining equations (except that elliptic and hyperelliptic curves
   are considered to live in their unweighted or weighted 3-var ambient spaces)
  numpairs: pairs of cusps that map to the same (sing) point/cluster on the (plane) model
  pairdata: d1,d2 - the pair
            numdata - numerator of a separator (poly in format of def eqns)
            dendata - denominator of a separator (poly in format of def eqns)
  (separator = num/den is a rat fn that vanishes on the place over d1 but not the one over d2)
*/
d1,code_int,sing
point/cluster data
d2,code_int,sing
point/cluster data
...
dr,code_int,sing
point/cluster data
numpairs
d1,d2
numdata
(space)
dendata
(space)
d1,d2
...
/*
other rat pts -
  num: number of extra rat pts
  point: coord,coord,coord,..coord
*/
num
coord,coord,..coord
...
coord,coord,..coord
/*
atkin-lehner invs - list of
  d: eqns for w_d. runs through increasing d with (d,N/d)=1 up to N
  eqns: r polys (where r = # vars of the ambient) in the ambient vars in the same form as the
   data for defining eqns
*/
d1
wd1_data
d2
wd2_data
...
dr
wdr_data
/*
S2ns - list of S2,S4,S8 up to the max (maybe empty)
  d:2,4 or 8
  eqns: r polys (where r = # vars of the ambient) in the ambient vars. coeffs are in Z for d=2
   or in Z[mu_d] for d=4,8 - coeffs are represented for d=4 by a pair of coeffs in Z [a,b -> a+bi]
   and for d=8 by a quadruple [a,b,c,d -> a+bu+c^u^2+du^3, where u = e(pi*i/4)]
*/
//2
coeff,mon_ind1,..,mon_indr
...
coeff,mon_ind1,..,mon_indr
(space)
coeff,mon_ind1,..,mon_indr
...
coeff,mon_ind1,..,mon_indr
(space)
...
coeff,mon_ind1,..,mon_indr
...
coeff,mon_ind1,..,mon_indr
(space)
//4
coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
...
coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
8
coeff,coeff,coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
coeff,coeff,coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,coeff,coeff,mon_ind1,..,mon_indr
(space)
...
coeff,coeff,coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,coeff,coeff,mon_ind1,..,mon_indr
(space)
/*
S3n - if 9|N, eqns for S3 over Z[mu_3]
  eqns: r polys (where r = # vars of the ambient) in the ambient vars. coeffs are in Z[mu_3]
   - coeffs are represented by a pair of coeffs in Z [a,b -> a+bu where u = e(2*pi*i/3)]
*/
coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
...
coeff,coeff,mon_ind1,..,mon_indr
...
coeff,coeff,mon_ind1,..,mon_indr
(space)
/*
extra aut: if N = 37,63,108
  eqns of the extra involution
   - given as r polys (r = # vars of the ambient) in coeff,mon_ind format
*/
coeff,mon_ind1,..,mon_indr
...
coeff,mon_ind1,..,mon_indr
(space)
coeff,mon_ind1,..,mon_indr
...
coeff,mon_ind1,..,mon_indr
(space)
...
coeff,mon_ind1,..,mon_indr
...
coeff,mon_ind1,..,mon_indr
(space)
/*
max_aut_degs
*/
num
d1,n1,
d2,n2,
...
dr,nr
/*
Sndegs - if 36|N
  min degs of the def eqns for S6,S12,S24 up to max poss S_{3*2^r}
*/
num,
deg,deg,deg
/*
projection data - different form depending on whether N is prime or not
is_p: 0 if N prime or 1, 1 otherwise
  N prime: data for a meromorphic differential dif if type >= 3, followed by
   rat. fns as num/den with num, den polys in the usual form (but on the
   ambient of the affine patch on which dif is defined - usually the FF patch)for
   (E2*)/dif, E4/dif^2, E6/dif^3. [For type 0, dif is implicitly taken as
   -dt (t the rational parameter) and for type 1,2 -dx/(2y+h) where
   y^2+hy=f is the Weierstrass model. FF patch is always the first].
p_diff: index of the patch on which dif is given
i_diff: index of the variable i in patch p_diff for which dif := (d_num/d_den)d(x_i)
d_num:  numerator of the dif rational expression
d_den:  denominator of the dif rational expression
E2num
E2den
E4num
E4den
E6num,
E6den
 N not prime: set of tuple data <p,pol,pol,pol,..pol> where p|N and the data is for
  the projection X0(N)->X0(N/p). There are np polys pol, homog in the ambient vars
  of X0(N) and np is rank of the ambient of X0(N/p)
p1,np1
pol
pol
...
p2,np2
pol
...
*/
is_p
[either]
[p_diff,i_diff
d_num_pol
<space>
d_den_pol
<space>] - bracketted bit only for type >=3
E2num_pol
<space>
E2den_pol
<space>
E4num_pol
<space>
E4den_pol
<space>
E6num_pol
<space>
E6den_pol
<space>
[or]
num (number of prj tuples)
p1,np1
pol1
<space>
pol2
<space>
...
poln
<space>
p2,np2
...
/*
q-Expansion data: a single line character string of comma separated statements that are used to
generate q-expansions for the coordinate functions
*/
string
