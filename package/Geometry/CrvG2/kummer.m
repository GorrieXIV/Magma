freeze;
// ALWAYS DOCUMENT YOUR CHANGES (what/when/how)
// in the header of this file
// these package files are updated concurrently by
// ourselves (magma) AND M. Stoll
// Thank you!
/*************************************
 * Hyperelliptic/kummer.m            *
 *                                   *
 * Functions for Kummer surfaces     *
 *                                   *
 * Michael Stoll                     *
 *                                   *
 * started 23-Jun-1998               *
 *************************************/

/*-----------------------------------------------------------------
  CHANGES

   Michael Stoll, 2000-08-11

     Removed obsolete code (was already commented out)

     Correction in IsPoint (there were three return values instead of two)

     Improvement in Points(K::SrfKum, s::SeqEnum) (no more call to Roots)

   2000-08-18:

     Corrected a bug in NormalizepAdic (occurred when precision was
       infinite and some coordinates zero)

   2000-08-25:

     In BaseExtend/BaseChange -- allow Rng type (instead of Fld)
       (reason: Laurent series fields are NOT of type Fld!)

     Improved handling of points over local and Laurent series fields

   2001-07: Paulette
   Scheme merge: new types now (CrvHyp, SetPtHyp & PtHyp)
                 Curve fix

   Michael Stoll, 2001-09-20

     Introduced new Normalize/Select functions for Kummer surfaces
     over rational function fields in one variable.

   2001-10-10

     generalised to rational function fields in several variables

   2003-02-23

     Add support for new p-adics -- Damien Fisher

   2003-12-01

     Remove support for old p-adics -- Damien Fisher

   2011-02-10: Jan Steffen Mueller

     Added functionality for general models in any characteristic.

     Added Evaluate.

     Now uses MakeIsZero throughout.

   2011-03: SRD

     Store KummerSurface on J (see comment at KummerSurface below)

   2016-04-12: Michael Stoll

     Re-introduced generic expressions for various Kummer data
     for the case when h = 0.

 ------------------------------------------------------------------*/


////////////////////////////
//                        //
//      declarations      //
//                        //
////////////////////////////

import "../CrvHyp/transform.m" : IsomorphismData;

declare attributes SrfKum:
    // These attributes are filled in by FillInData. This is
    // done upon creation of the SrfKum object.
    Equation,   // The polynomial defining the Kummer surface in P^3,
                //  a homogeneous polynomial of degree 4 in 4 vars.
    DEquation,  // The sequence of partial deriviatives of the defining eqn.
    Delta,      // The duplication map, given as a sequence of four
                //  homogeneous polynomials of degree 4 in 4 vars.
    BBMatrix,   // The matrix of biquadratic forms used for
                //  pseudo-addition; given as a sequence of sequences
                //  of homogeneous polynomials in 8 variables.
    AuxPolynomials,   // A list of some auxiliary polynomials.
    NormalizePoint,   // A function that takes K and the four coordinates
                      //  and creates a normalized SrfKumPt. Depends on
                      //  the base field.
    SelectCoordinate; // A function that selects a non-zero coordinate
                      //  of the given SrfKumPt. Needed for pseudo-addition.
                      //  Depends on the base field.

////////////////////
//                //
//    formulas    //
//                //
////////////////////

// This gives the duplication map and the Kummer surface equation
deltas := func<f, h, x | h eq 0 select
[
    (-16*f0^2*f6 - 16*f0*f2*f4 + 4*f0*f3^2 + 4*f1^2*f4)*x1^4 + (-16*f0*f1*f6 -
        32*f0*f2*f5 + 8*f1^2*f5)*x1^3*x2 + (32*f0*f2*f6 - 16*f0*f3*f5 -
        16*f1^2*f6)*x1^3*x3 + (-16*f0*f4 + 4*f1*f3)*x1^3*x4 + (-64*f0*f2*f6 -
        8*f0*f3*f5 + 12*f1^2*f6)*x1^2*x2^2 + (-16*f0*f4*f5 - 16*f1*f2*f6 -
        4*f1*f3*f5)*x1^2*x2*x3 - 32*f0*f5*x1^2*x2*x4 + (-48*f0*f4*f6 +
        16*f0*f5^2 + 24*f1*f3*f6 - 8*f1*f4*f5 - 16*f2^2*f6)*x1^2*x3^2 -
        8*f1*f5*x1^2*x3*x4 + 4*f2*x1^2*x4^2 - 32*f0*f3*f6*x1*x2^3 + (-16*f0*f5^2
        - 24*f1*f3*f6)*x1*x2^2*x3 + (-48*f0*f6 - 4*f1*f5)*x1*x2^2*x4 +
        (-16*f0*f5*f6 - 8*f1*f5^2 - 16*f2*f3*f6)*x1*x2*x3^2 + (-24*f1*f6 -
        8*f2*f5)*x1*x2*x3*x4 + (32*f0*f6^2 - 16*f1*f5*f6 - 8*f3^2*f6)*x1*x3^3 +
        (-16*f2*f6 - 4*f3*f5)*x1*x3^2*x4 + 4*x1*x4^3 + (-16*f0*f4*f6 +
        4*f0*f5^2)*x2^4 + (-16*f0*f5*f6 - 16*f1*f4*f6 + 4*f1*f5^2)*x2^3*x3 -
        8*f1*f6*x2^3*x4 + (-48*f0*f6^2 - 8*f1*f5*f6 - 16*f2*f4*f6 +
        4*f2*f5^2)*x2^2*x3^2 - 16*f2*f6*x2^2*x3*x4 + (-32*f1*f6^2 - 16*f3*f4*f6
        + 4*f3*f5^2)*x2*x3^3 - 24*f3*f6*x2*x3^2*x4 - 4*f5*x2*x3*x4^2 +
        (-16*f2*f6^2 + 8*f3*f5*f6 - 16*f4^2*f6 + 4*f4*f5^2)*x3^4 + (-32*f4*f6 +
        8*f5^2)*x3^3*x4 - 12*f6*x3^2*x4^2,
    (16*f0^2*f5 - 4*f0*f2*f3 + f1^2*f3)*x1^4 + (32*f0^2*f6 + 16*f0*f1*f5 -
        4*f0*f3^2)*x1^3*x2 + (-32*f0*f2*f5 + 16*f0*f3*f4 + 16*f1^2*f5 -
        6*f1*f3^2)*x1^3*x3 + 4*f0*f3*x1^3*x4 + (32*f0*f1*f6 - 4*f0*f3*f4 +
        4*f1^2*f5)*x1^2*x2^2 + (-64*f0*f2*f6 - 20*f0*f3*f5 + 32*f0*f4^2 +
        32*f1^2*f6 + 16*f1*f2*f5 - 12*f1*f3*f4)*x1^2*x2*x3 + (16*f0*f4 +
        2*f1*f3)*x1^2*x2*x4 + (-20*f0*f3*f6 - 14*f1*f3*f5 + 16*f1*f4^2 +
        16*f2^2*f5 - 20*f2*f3*f4 + 5*f3^3)*x1^2*x3^2 + (-16*f0*f5 + 16*f1*f4 -
        12*f2*f3)*x1^2*x3*x4 + 4*f1*x1^2*x4^2 + (-4*f0*f3*f5 +
        8*f1^2*f6)*x1*x2^3 + (-56*f0*f3*f6 + 32*f0*f4*f5 + 32*f1*f2*f6 -
        8*f1*f3*f5)*x1*x2^2*x3 + (8*f0*f5 + 8*f1*f4)*x1*x2^2*x4 + (-64*f0*f4*f6
        + 32*f0*f5^2 - 20*f1*f3*f6 + 16*f1*f4*f5 + 32*f2^2*f6 -
        12*f2*f3*f5)*x1*x2*x3^2 + (-48*f0*f6 + 16*f1*f5 + 16*f2*f4 -
        10*f3^2)*x1*x2*x3*x4 + 8*f2*x1*x2*x4^2 + (-32*f1*f4*f6 + 16*f1*f5^2 +
        16*f2*f3*f6 - 6*f3^2*f5)*x1*x3^3 + (-16*f1*f6 + 16*f2*f5 -
        12*f3*f4)*x1*x3^2*x4 - 8*f3*x1*x3*x4^2 - 4*f0*f3*f6*x2^4 + (8*f0*f5^2 -
        4*f1*f3*f6)*x2^3*x3 + 4*f1*f5*x2^3*x4 + (32*f0*f5*f6 + 4*f1*f5^2 -
        4*f2*f3*f6)*x2^2*x3^2 + (8*f1*f6 + 8*f2*f5)*x2^2*x3*x4 + 5*f3*x2^2*x4^2
        + (32*f0*f6^2 + 16*f1*f5*f6 - 4*f3^2*f6)*x2*x3^3 + (16*f2*f6 +
        2*f3*f5)*x2*x3^2*x4 + 8*f4*x2*x3*x4^2 + 4*x2*x4^3 + (16*f1*f6^2 -
        4*f3*f4*f6 + f3*f5^2)*x3^4 + 4*f3*f6*x3^3*x4 + 4*f5*x3^2*x4^2,
    (-16*f0^2*f4 + 8*f0*f1*f3 - 16*f0*f2^2 + 4*f1^2*f2)*x1^4 + (-32*f0^2*f5 -
        16*f0*f2*f3 + 4*f1^2*f3)*x1^3*x2 + (32*f0^2*f6 - 16*f0*f1*f5 -
        8*f0*f3^2)*x1^3*x3 + (-32*f0*f2 + 8*f1^2)*x1^3*x4 + (-48*f0^2*f6 -
        8*f0*f1*f5 - 16*f0*f2*f4 + 4*f1^2*f4)*x1^2*x2^2 + (-16*f0*f1*f6 -
        16*f0*f3*f4 - 8*f1^2*f5)*x1^2*x2*x3 - 24*f0*f3*x1^2*x2*x4 +
        (-48*f0*f2*f6 + 24*f0*f3*f5 - 16*f0*f4^2 + 16*f1^2*f6 -
        8*f1*f2*f5)*x1^2*x3^2 + (-16*f0*f4 - 4*f1*f3)*x1^2*x3*x4 -
        12*f0*x1^2*x4^2 + (-16*f0*f1*f6 - 16*f0*f2*f5 + 4*f1^2*f5)*x1*x2^3 +
        (-24*f0*f3*f5 - 16*f1^2*f6)*x1*x2^2*x3 - 16*f0*f4*x1*x2^2*x4 +
        (-16*f0*f4*f5 - 16*f1*f2*f6 - 4*f1*f3*f5)*x1*x2*x3^2 + (-24*f0*f5 -
        8*f1*f4)*x1*x2*x3*x4 - 4*f1*x1*x2*x4^2 + (32*f0*f4*f6 - 16*f0*f5^2 -
        16*f1*f3*f6)*x1*x3^3 - 8*f1*f5*x1*x3^2*x4 + (-16*f0*f2*f6 +
        4*f1^2*f6)*x2^4 - 32*f0*f3*f6*x2^3*x3 - 8*f0*f5*x2^3*x4 + (-64*f0*f4*f6
        + 12*f0*f5^2 - 8*f1*f3*f6)*x2^2*x3^2 + (-48*f0*f6 - 4*f1*f5)*x2^2*x3*x4
        + (-16*f0*f5*f6 - 32*f1*f4*f6 + 8*f1*f5^2)*x2*x3^3 - 32*f1*f6*x2*x3^2*x4
        + (-16*f0*f6^2 - 16*f2*f4*f6 + 4*f2*f5^2 + 4*f3^2*f6)*x3^4 + (-16*f2*f6
        + 4*f3*f5)*x3^3*x4 + 4*f4*x3^2*x4^2 + 4*x3*x4^3,
    (16*f0^2*f2*f6 - 16*f0^2*f3*f5 + 16*f0^2*f4^2 - 4*f0*f1^2*f6 + 8*f0*f1*f2*f5
        - 8*f0*f1*f3*f4 + 16*f0*f2^2*f4 - 4*f0*f2*f3^2 - 2*f1^3*f5 -
        4*f1^2*f2*f4 + f1^2*f3^2)*x1^4 + (-32*f0^2*f3*f6 + 32*f0^2*f4*f5 +
        32*f0*f1*f2*f6 - 16*f0*f1*f3*f5 + 32*f0*f2^2*f5 - 8*f1^3*f6 -
        8*f1^2*f2*f5)*x1^3*x2 + (-64*f0^2*f4*f6 + 32*f0^2*f5^2 + 16*f0*f1*f3*f6
        + 16*f0*f2*f3*f5 - 4*f1^2*f3*f5)*x1^3*x3 + (32*f0*f2*f4 - 8*f0*f3^2 -
        8*f1^2*f4)*x1^3*x4 + (32*f0^2*f4*f6 + 16*f0^2*f5^2 - 24*f0*f1*f3*f6 +
        64*f0*f2^2*f6 + 8*f0*f2*f3*f5 - 16*f1^2*f2*f6 - 2*f1^2*f3*f5)*x1^2*x2^2
        + (64*f0^2*f5*f6 - 32*f0*f1*f4*f6 + 16*f0*f1*f5^2 + 64*f0*f2*f3*f6 +
        8*f0*f3^2*f5 - 8*f1^2*f3*f6)*x1^2*x2*x3 + (48*f0*f2*f5 -
        12*f1^2*f5)*x1^2*x2*x4 + (64*f0^2*f6^2 + 96*f0*f2*f4*f6 - 32*f0*f2*f5^2
        - 16*f0*f3^2*f6 + 8*f0*f3*f4*f5 - 32*f1^2*f4*f6 + 12*f1^2*f5^2 +
        8*f1*f2*f3*f6)*x1^2*x3^2 + (32*f0*f2*f6 + 16*f0*f3*f5 -
        8*f1^2*f6)*x1^2*x3*x4 + (8*f0*f4 - 2*f1*f3)*x1^2*x4^2 + (32*f0^2*f5*f6 +
        32*f0*f2*f3*f6 - 8*f1^2*f3*f6)*x1*x2^3 + (64*f0^2*f6^2 + 32*f0*f1*f5*f6
        + 48*f0*f3^2*f6)*x1*x2^2*x3 + (64*f0*f2*f6 + 8*f0*f3*f5 -
        16*f1^2*f6)*x1*x2^2*x4 + (64*f0*f1*f6^2 - 32*f0*f2*f5*f6 +
        64*f0*f3*f4*f6 - 8*f0*f3*f5^2 + 16*f1^2*f5*f6 + 8*f1*f3^2*f6)*x1*x2*x3^2
        + (80*f0*f3*f6 + 4*f1*f3*f5)*x1*x2*x3*x4 + 8*f0*f5*x1*x2*x4^2 +
        (-64*f0*f2*f6^2 + 16*f0*f3*f5*f6 + 32*f1^2*f6^2 + 16*f1*f3*f4*f6 -
        4*f1*f3*f5^2)*x1*x3^3 + (32*f0*f4*f6 - 8*f0*f5^2 +
        16*f1*f3*f6)*x1*x3^2*x4 + 16*f0*f6*x1*x3*x4^2 + (16*f0^2*f6^2 +
        16*f0*f2*f4*f6 - 4*f0*f2*f5^2 - 4*f1^2*f4*f6 + f1^2*f5^2)*x2^4 +
        (32*f0*f1*f6^2 + 32*f0*f3*f4*f6 - 8*f0*f3*f5^2)*x2^3*x3 +
        16*f0*f3*f6*x2^3*x4 + (32*f0*f2*f6^2 - 24*f0*f3*f5*f6 + 64*f0*f4^2*f6 -
        16*f0*f4*f5^2 + 16*f1^2*f6^2 + 8*f1*f3*f4*f6 - 2*f1*f3*f5^2)*x2^2*x3^2 +
        (64*f0*f4*f6 - 16*f0*f5^2 + 8*f1*f3*f6)*x2^2*x3*x4 + 8*f0*f6*x2^2*x4^2 +
        (-32*f0*f3*f6^2 + 32*f0*f4*f5*f6 - 8*f0*f5^3 + 32*f1*f2*f6^2 -
        16*f1*f3*f5*f6 + 32*f1*f4^2*f6 - 8*f1*f4*f5^2)*x2*x3^3 + (48*f1*f4*f6 -
        12*f1*f5^2)*x2*x3^2*x4 + 8*f1*f6*x2*x3*x4^2 + (16*f0*f4*f6^2 -
        4*f0*f5^2*f6 - 16*f1*f3*f6^2 + 8*f1*f4*f5*f6 - 2*f1*f5^3 + 16*f2^2*f6^2
        - 8*f2*f3*f5*f6 + 16*f2*f4^2*f6 - 4*f2*f4*f5^2 - 4*f3^2*f4*f6 +
        f3^2*f5^2)*x3^4 + (32*f2*f4*f6 - 8*f2*f5^2 - 8*f3^2*f6)*x3^3*x4 +
        (8*f2*f6 - 2*f3*f5)*x3^2*x4^2 + x4^4,
(-4*f0*f2 + f1^2)*x1^4 - 4*f0*f3*x1^3*x2 - 2*f1*f3*x1^3*x3 - 4*f0*x1^3*x4 -
    4*f0*f4*x1^2*x2^2 + (4*f0*f5 - 4*f1*f4)*x1^2*x2*x3 - 2*f1*x1^2*x2*x4 +
    (-4*f0*f6 + 2*f1*f5 - 4*f2*f4 + f3^2)*x1^2*x3^2 - 4*f2*x1^2*x3*x4 -
    4*f0*f5*x1*x2^3 + (8*f0*f6 - 4*f1*f5)*x1*x2^2*x3 + (4*f1*f6 -
    4*f2*f5)*x1*x2*x3^2 - 2*f3*x1*x2*x3*x4 - 2*f3*f5*x1*x3^3 - 4*f4*x1*x3^2*x4 -
    4*x1*x3*x4^2 - 4*f0*f6*x2^4 - 4*f1*f6*x2^3*x3 - 4*f2*f6*x2^2*x3^2 +
    x2^2*x4^2 - 4*f3*f6*x2*x3^3 - 2*f5*x2*x3^2*x4 + (-4*f4*f6 + f5^2)*x3^4 -
    4*f6*x3^3*x4
]
        else
[ (-16*f0^2*f6 - 4*f0^2*h3^2 - 16*f0*f2*f4 - 8*f0*f2*h1*h3 - 4*f0*f2*h2^2 +
    4*f0*f3^2 + 4*f0*f3*h0*h3 + 4*f0*f3*h1*h2 - 4*f0*f4*h1^2 - 8*f0*f6*h0^2 -
    f0*h0^2*h3^2 + 2*f0*h0*h1*h2*h3 - 2*f0*h1^3*h3 + 4*f1^2*f4 + 2*f1^2*h1*h3 +
    f1^2*h2^2 - 2*f1*f3*h0*h2 + 4*f1*f4*h0*h1 - f1*h0^2*h2*h3 + 2*f1*h0*h1^2*h3
    - 4*f2*f4*h0^2 - 2*f2*h0^2*h1*h3 + f3^2*h0^2 + f3*h0^3*h3 - f6*h0^4)*x1^4 +
    (-16*f0*f1*f6 - 4*f0*f1*h3^2 - 32*f0*f2*f5 - 16*f0*f2*h2*h3 + 8*f0*f4*h0*h3
    - 8*f0*f5*h1^2 - 8*f0*f6*h0*h1 + 2*f0*h0*h1*h3^2 + 2*f0*h0*h2^2*h3 -
    4*f0*h1^2*h2*h3 + 8*f1^2*f5 + 4*f1^2*h2*h3 - 2*f1*f3*h0*h3 + 8*f1*f5*h0*h1 -
    4*f1*f6*h0^2 - 2*f1*h0^2*h3^2 + 3*f1*h0*h1*h2*h3 - 8*f2*f5*h0^2 -
    2*f2*h0^2*h2*h3 - f3*h0^2*h1*h3 + 2*f4*h0^3*h3 - 2*f6*h0^3*h1)*x1^3*x2 +
    (32*f0*f2*f6 + 8*f0*f2*h3^2 - 16*f0*f3*f5 - 8*f0*f3*h2*h3 + 8*f0*f4*h1*h3 -
    8*f0*f5*h0*h3 - 8*f0*f5*h1*h2 + 16*f0*f6*h0*h2 + 8*f0*f6*h1^2 +
    6*f0*h1^2*h3^2 - 2*f0*h1*h2^2*h3 - 16*f1^2*f6 - 4*f1^2*h3^2 - 2*f1*f3*h1*h3
    + 4*f1*f5*h0*h2 - 16*f1*f6*h0*h1 - 5*f1*h0*h1*h3^2 + 2*f1*h0*h2^2*h3 -
    f1*h1^2*h2*h3 + 8*f2*f6*h0^2 + 2*f2*h0^2*h3^2 + 2*f2*h0*h1*h2*h3 -
    4*f3*f5*h0^2 - 2*f3*h0^2*h2*h3 - f3*h0*h1^2*h3 + 2*f4*h0^2*h1*h3 -
    2*f5*h0^3*h3 + 4*f6*h0^3*h2 - 2*f6*h0^2*h1^2)*x1^3*x3 + (-16*f0*f4 -
    8*f0*h1*h3 - 4*f0*h2^2 + 4*f1*f3 + 2*f1*h0*h3 + 2*f1*h1*h2 - 4*f2*h0*h2 +
    2*f3*h0*h1 - 4*f4*h0^2 - h0^2*h1*h3)*x1^3*x4 + (-64*f0*f2*f6 - 16*f0*f2*h3^2
    - 8*f0*f3*f5 - 4*f0*f3*h2*h3 + 12*f0*f5*h0*h3 - 4*f0*f5*h1*h2 -
    8*f0*f6*h0*h2 - 16*f0*f6*h1^2 + 4*f0*h0*h2*h3^2 - 4*f0*h1^2*h3^2 -
    2*f0*h1*h2^2*h3 + 12*f1^2*f6 + 3*f1^2*h3^2 + 2*f1*f5*h0*h2 + 12*f1*f6*h0*h1
    + 3*f1*h0*h1*h3^2 + f1*h0*h2^2*h3 - 16*f2*f6*h0^2 - 3*f2*h0^2*h3^2 -
    2*f3*f5*h0^2 - f3*h0^2*h2*h3 + 3*f5*h0^3*h3 - 2*f6*h0^3*h2 -
    f6*h0^2*h1^2)*x1^2*x2^2 + (-16*f0*f4*f5 - 8*f0*f4*h2*h3 + 8*f0*f5*h1*h3 -
    4*f0*f5*h2^2 + 4*f0*h1*h2*h3^2 - 2*f0*h2^3*h3 - 16*f1*f2*f6 - 4*f1*f2*h3^2 -
    4*f1*f3*f5 - 2*f1*f3*h2*h3 + 2*f1*f5*h0*h3 - 2*f1*f5*h1*h2 + 4*f1*f6*h0*h2 -
    4*f1*f6*h1^2 + 2*f1*h0*h2*h3^2 - f1*h1^2*h3^2 - f1*h1*h2^2*h3 +
    4*f2*f5*h0*h2 - 8*f2*f6*h0*h1 + 2*f2*h0*h2^2*h3 - 2*f3*f5*h0*h1 -
    f3*h0*h1*h2*h3 - 4*f4*f5*h0^2 - 2*f4*h0^2*h2*h3 + 3*f5*h0^2*h1*h3 +
    2*f6*h0^2*h1*h2 - 2*f6*h0*h1^3)*x1^2*x2*x3 + (-32*f0*f5 - 16*f0*h2*h3 -
    4*f2*h0*h3 - 8*f5*h0^2 - h0*h1^2*h3)*x1^2*x2*x4 + (-48*f0*f4*f6 -
    12*f0*f4*h3^2 + 16*f0*f5^2 + 16*f0*f5*h2*h3 - 24*f0*f6*h1*h3 - 12*f0*f6*h2^2
    - 6*f0*h1*h3^3 + f0*h2^2*h3^2 + 24*f1*f3*f6 + 6*f1*f3*h3^2 - 8*f1*f4*f5 -
    4*f1*f4*h2*h3 - 2*f1*f5*h2^2 + 12*f1*f6*h0*h3 + 12*f1*f6*h1*h2 +
    3*f1*h0*h3^3 + 3*f1*h1*h2*h3^2 - f1*h2^3*h3 - 16*f2^2*f6 - 4*f2^2*h3^2 -
    8*f2*f6*h0*h2 - 8*f2*f6*h1^2 - 2*f2*h0*h2*h3^2 - f2*h1^2*h3^2 +
    2*f3*f5*h0*h2 + 12*f3*f6*h0*h1 + 3*f3*h0*h1*h3^2 + f3*h0*h2^2*h3 -
    4*f4*f5*h0*h1 - 12*f4*f6*h0^2 - 3*f4*h0^2*h3^2 - 2*f4*h0*h1*h2*h3 +
    4*f5^2*h0^2 + 5*f5*h0^2*h2*h3 - 6*f6*h0^2*h2^2 + 4*f6*h0*h1^2*h2 -
    f6*h1^4)*x1^2*x3^2 + (-8*f1*f5 - 4*f1*h2*h3 - 4*f2*h1*h3 - 4*f5*h0*h1 +
    2*h0*h1*h2*h3 - h1^3*h3)*x1^2*x3*x4 + (4*f2 - 4*h0*h2 + h1^2)*x1^2*x4^2 +
    (-32*f0*f3*f6 - 8*f0*f3*h3^2 + 8*f0*f6*h0*h3 - 16*f0*f6*h1*h2 + 2*f0*h0*h3^3
    - 4*f0*h1*h2*h3^2 + 2*f1*f5*h0*h3 + 4*f1*f6*h0*h2 + 2*f1*h0*h2*h3^2 -
    8*f3*f6*h0^2 - 2*f3*h0^2*h3^2 + f5*h0^2*h1*h3 + 2*f6*h0^3*h3 -
    2*f6*h0^2*h1*h2)*x1*x2^3 + (-16*f0*f5^2 - 16*f0*f5*h2*h3 + 24*f0*f6*h1*h3 +
    6*f0*h1*h3^3 - 4*f0*h2^2*h3^2 - 24*f1*f3*f6 - 6*f1*f3*h3^2 + 2*f1*f5*h1*h3 -
    12*f1*f6*h1*h2 - 2*f1*h1*h2*h3^2 + 4*f2*f5*h0*h3 + 8*f2*f6*h0*h2 +
    4*f2*h0*h2*h3^2 - 12*f3*f6*h0*h1 - 3*f3*h0*h1*h3^2 - 4*f5^2*h0^2 -
    4*f5*h0^2*h2*h3 + 2*f5*h0*h1^2*h3 + 6*f6*h0^2*h1*h3 + 4*f6*h0^2*h2^2 -
    4*f6*h0*h1^2*h2)*x1*x2^2*x3 + (-48*f0*f6 - 12*f0*h3^2 - 4*f1*f5 - 2*f1*h2*h3
    - 2*f5*h0*h1 - 12*f6*h0^2 - h0*h1*h2*h3)*x1*x2^2*x4 + (-16*f0*f5*f6 -
    4*f0*f5*h3^2 - 8*f0*f6*h2*h3 - 2*f0*h2*h3^3 - 8*f1*f5^2 - 8*f1*f5*h2*h3 +
    12*f1*f6*h1*h3 + 3*f1*h1*h3^3 - 2*f1*h2^2*h3^2 - 16*f2*f3*f6 - 4*f2*f3*h3^2
    + 4*f2*f5*h1*h3 - 8*f2*f6*h1*h2 + 2*f3*f5*h0*h3 + 4*f3*f6*h0*h2 -
    4*f3*f6*h1^2 + 2*f3*h0*h2*h3^2 - f3*h1^2*h3^2 - 4*f5^2*h0*h1 - 4*f5*f6*h0^2
    - 3*f5*h0*h1*h2*h3 + f5*h1^3*h3 - 2*f6*h0^2*h2*h3 + 6*f6*h0*h1^2*h3 +
    2*f6*h0*h1*h2^2 - 2*f6*h1^3*h2)*x1*x2*x3^2 + (-24*f1*f6 - 6*f1*h3^2 -
    8*f2*f5 - 4*f2*h2*h3 - 2*f5*h1^2 - 12*f6*h0*h1 + 3*h0*h1*h3^2 -
    h1^2*h2*h3)*x1*x2*x3*x4 - 6*h0*h3*x1*x2*x4^2 + (32*f0*f6^2 + 16*f0*f6*h3^2 +
    2*f0*h3^4 - 16*f1*f5*f6 - 4*f1*f5*h3^2 - 8*f1*f6*h2*h3 - 2*f1*h2*h3^3 +
    8*f2*f6*h1*h3 + 2*f2*h1*h3^3 - 8*f3^2*f6 - 2*f3^2*h3^2 + 2*f3*f5*h1*h3 -
    8*f3*f6*h0*h3 - 8*f3*f6*h1*h2 - 2*f3*h0*h3^3 - f3*h1*h2*h3^2 +
    16*f4*f6*h0*h2 + 4*f4*h0*h2*h3^2 - 4*f5^2*h0*h2 - 8*f5*f6*h0*h1 -
    f5*h0*h1*h3^2 - 4*f5*h0*h2^2*h3 + f5*h1^2*h2*h3 + 8*f6^2*h0^2 +
    2*f6*h0^2*h3^2 - 2*f6*h0*h1*h2*h3 + 4*f6*h0*h2^3 + 2*f6*h1^3*h3 -
    2*f6*h1^2*h2^2)*x1*x3^3 + (-16*f2*f6 - 4*f2*h3^2 - 4*f3*f5 - 2*f3*h2*h3 -
    2*f5*h0*h3 - 2*f5*h1*h2 + 4*f6*h0*h2 - 4*f6*h1^2 + 2*h1^2*h3^2 -
    h1*h2^2*h3)*x1*x3^2*x4 - 6*h1*h3*x1*x3*x4^2 + 4*x1*x4^3 + (-16*f0*f4*f6 -
    4*f0*f4*h3^2 + 4*f0*f5^2 + 4*f0*f5*h2*h3 - 8*f0*f6*h1*h3 - 4*f0*f6*h2^2 -
    2*f0*h1*h3^3 + 4*f1*f6*h0*h3 + f1*h0*h3^3 - 4*f4*f6*h0^2 - f4*h0^2*h3^2 +
    f5^2*h0^2 + f5*h0^2*h2*h3 - f6*h0^2*h2^2)*x2^4 + (-16*f0*f5*f6 -
    4*f0*f5*h3^2 - 8*f0*f6*h2*h3 - 2*f0*h2*h3^3 - 16*f1*f4*f6 - 4*f1*f4*h3^2 +
    4*f1*f5^2 + 4*f1*f5*h2*h3 - 4*f1*f6*h1*h3 - 4*f1*f6*h2^2 - f1*h1*h3^3 +
    8*f2*f6*h0*h3 + 2*f2*h0*h3^3 - 8*f4*f6*h0*h1 - 2*f4*h0*h1*h3^2 +
    2*f5^2*h0*h1 - 4*f5*f6*h0^2 - 2*f5*h0^2*h3^2 + 2*f5*h0*h1*h2*h3 +
    2*f6*h0^2*h2*h3 - 2*f6*h0*h1*h2^2)*x2^3*x3 + (-8*f1*f6 - 2*f1*h3^2 -
    4*f6*h0*h1 - h0*h1*h3^2)*x2^3*x4 + (-48*f0*f6^2 - 24*f0*f6*h3^2 - 3*f0*h3^4
    - 8*f1*f5*f6 - 2*f1*f5*h3^2 - 4*f1*f6*h2*h3 - f1*h2*h3^3 - 16*f2*f4*f6 -
    4*f2*f4*h3^2 + 4*f2*f5^2 + 4*f2*f5*h2*h3 - 4*f2*f6*h2^2 + 12*f3*f6*h0*h3 +
    3*f3*h0*h3^3 - 8*f4*f6*h0*h2 - 4*f4*f6*h1^2 - 2*f4*h0*h2*h3^2 - f4*h1^2*h3^2
    + 2*f5^2*h0*h2 + f5^2*h1^2 - 4*f5*f6*h0*h1 - 3*f5*h0*h1*h3^2 +
    2*f5*h0*h2^2*h3 + f5*h1^2*h2*h3 - 12*f6^2*h0^2 - 3*f6*h0^2*h3^2 +
    4*f6*h0*h1*h2*h3 - 2*f6*h0*h2^3 - f6*h1^2*h2^2)*x2^2*x3^2 + (-16*f2*f6 -
    4*f2*h3^2 + 4*f5*h0*h3 - 8*f6*h0*h2 - 4*f6*h1^2 - h1^2*h3^2)*x2^2*x3*x4 +
    (-32*f1*f6^2 - 16*f1*f6*h3^2 - 2*f1*h3^4 - 16*f3*f4*f6 - 4*f3*f4*h3^2 +
    4*f3*f5^2 + 4*f3*f5*h2*h3 + 4*f3*f6*h1*h3 - 4*f3*f6*h2^2 + f3*h1*h3^3 +
    8*f4*f6*h0*h3 - 8*f4*f6*h1*h2 + 2*f4*h0*h3^3 - 2*f4*h1*h2*h3^2 -
    2*f5^2*h0*h3 + 2*f5^2*h1*h2 - 2*f5*h0*h2*h3^2 - f5*h1^2*h3^2 +
    2*f5*h1*h2^2*h3 - 16*f6^2*h0*h1 - 4*f6*h0*h1*h3^2 + 2*f6*h0*h2^2*h3 +
    2*f6*h1^2*h2*h3 - 2*f6*h1*h2^3)*x2*x3^3 + (-24*f3*f6 - 6*f3*h3^2 +
    4*f5*h1*h3 - 12*f6*h1*h2 - h1*h2*h3^2)*x2*x3^2*x4 + (-4*f5 -
    2*h2*h3)*x2*x3*x4^2 + (-16*f2*f6^2 - 8*f2*f6*h3^2 - f2*h3^4 + 8*f3*f5*f6 +
    2*f3*f5*h3^2 + 4*f3*f6*h2*h3 + f3*h2*h3^3 - 16*f4^2*f6 - 4*f4^2*h3^2 +
    4*f4*f5^2 + 4*f4*f5*h2*h3 - 8*f4*f6*h2^2 - f4*h2^2*h3^2 - 2*f5^2*h1*h3 +
    f5^2*h2^2 + 4*f5*f6*h0*h3 + 4*f5*f6*h1*h2 + f5*h0*h3^3 - f5*h1*h2*h3^2 +
    f5*h2^3*h3 - 8*f6^2*h0*h2 - 4*f6^2*h1^2 - 2*f6*h0*h2*h3^2 - f6*h1^2*h3^2 +
    2*f6*h1*h2^2*h3 - f6*h2^4)*x3^4 + (-32*f4*f6 - 8*f4*h3^2 + 8*f5^2 +
    8*f5*h2*h3 - 4*f6*h1*h3 - 8*f6*h2^2 - h1*h3^3)*x3^3*x4 + (-12*f6 -
    3*h3^2)*x3^2*x4^2,
 (16*f0^2*f5 + 8*f0^2*h2*h3 - 4*f0*f2*f3 - 4*f0*f3*h0*h2 - f0*f3*h1^2 +
    8*f0*f5*h0^2 + 2*f0*h0^2*h2*h3 - 2*f0*h0*h1*h2^2 + f1^2*f3 + f1*f3*h0*h1 +
    f1*h0^2*h2^2 - f2*f3*h0^2 - f3*h0^3*h2 + f5*h0^4)*x1^4 + (32*f0^2*f6 +
    8*f0^2*h3^2 + 16*f0*f1*f5 + 8*f0*f1*h2*h3 - 4*f0*f3^2 - 4*f0*f3*h0*h3 -
    2*f0*f3*h1*h2 - 8*f0*f4*h0*h2 + 8*f0*f5*h0*h1 + 16*f0*f6*h0^2 +
    2*f0*h0^2*h3^2 - 2*f0*h0*h1*h2*h3 - 2*f0*h0*h2^3 - f1*f3*h0*h2 +
    4*f1*f5*h0^2 + 3*f1*h0^2*h2*h3 - f1*h0*h1*h2^2 + 2*f2*h0^2*h2^2 - f3^2*h0^2
    - f3*h0^3*h3 - f3*h0^2*h1*h2 - 2*f4*h0^3*h2 + 2*f5*h0^3*h1 +
    2*f6*h0^4)*x1^3*x2 + (-32*f0*f2*f5 - 16*f0*f2*h2*h3 + 16*f0*f3*f4 +
    6*f0*f3*h1*h3 + 4*f0*f3*h2^2 + 8*f0*f4*h0*h3 + 8*f0*f4*h1*h2 - 8*f0*f5*h0*h2
    - 8*f0*f5*h1^2 + 2*f0*h0*h1*h3^2 - 2*f0*h0*h2^2*h3 - 2*f0*h1^2*h2*h3 +
    2*f0*h1*h2^3 + 16*f1^2*f5 + 8*f1^2*h2*h3 - 6*f1*f3^2 - 5*f1*f3*h0*h3 -
    5*f1*f3*h1*h2 - 8*f1*f4*h0*h2 + 16*f1*f5*h0*h1 - f1*h0^2*h3^2 +
    4*f1*h0*h1*h2*h3 - 2*f1*h0*h2^3 - f1*h1^2*h2^2 + 6*f2*f3*h0*h2 -
    8*f2*f5*h0^2 - 2*f2*h0^2*h2*h3 + 2*f2*h0*h1*h2^2 - 3*f3^2*h0*h1 +
    4*f3*f4*h0^2 - f3*h0^2*h1*h3 + 2*f3*h0^2*h2^2 - f3*h0*h1^2*h2 + 2*f4*h0^3*h3
    - 2*f4*h0^2*h1*h2 - 2*f5*h0^3*h2 + 2*f5*h0^2*h1^2)*x1^3*x3 + (4*f0*f3 +
    4*f0*h0*h3 + 4*f0*h1*h2 - 4*f1*h0*h2 + f3*h0^2 + h0^3*h3 -
    h0^2*h1*h2)*x1^3*x4 + (32*f0*f1*f6 + 8*f0*f1*h3^2 - 4*f0*f3*f4 -
    2*f0*f3*h1*h3 - f0*f3*h2^2 - 8*f0*f4*h0*h3 - 4*f0*f5*h0*h2 + 16*f0*f6*h0*h1
    - 4*f0*h0*h2^2*h3 + 4*f1^2*f5 + 2*f1^2*h2*h3 - f1*f3*h0*h3 - 4*f1*f4*h0*h2 +
    4*f1*f5*h0*h1 + 8*f1*f6*h0^2 + 2*f1*h0^2*h3^2 - f1*h0*h1*h2*h3 - f1*h0*h2^3
    + 4*f2*h0^2*h2*h3 - f3*f4*h0^2 - f3*h0^2*h1*h3 + f3*h0^2*h2^2 - 2*f4*h0^3*h3
    - 2*f4*h0^2*h1*h2 - f5*h0^3*h2 + f5*h0^2*h1^2 + 4*f6*h0^3*h1)*x1^2*x2^2 +
    (-64*f0*f2*f6 - 16*f0*f2*h3^2 - 20*f0*f3*f5 - 10*f0*f3*h2*h3 + 32*f0*f4^2 +
    24*f0*f4*h1*h3 + 16*f0*f4*h2^2 - 4*f0*f5*h0*h3 - 12*f0*f5*h1*h2 -
    8*f0*f6*h0*h2 - 16*f0*f6*h1^2 - 4*f0*h0*h2*h3^2 + 2*f0*h2^4 + 32*f1^2*f6 +
    8*f1^2*h3^2 + 16*f1*f2*f5 + 8*f1*f2*h2*h3 - 12*f1*f3*f4 - 7*f1*f3*h1*h3 -
    3*f1*f3*h2^2 - 12*f1*f4*h0*h3 - 4*f1*f4*h1*h2 + 4*f1*f5*h1^2 +
    32*f1*f6*h0*h1 + 3*f1*h0*h1*h3^2 - 3*f1*h0*h2^2*h3 - f1*h1^2*h2*h3 -
    f1*h1*h2^3 + 6*f2*f3*h0*h3 - 8*f2*f4*h0*h2 + 8*f2*f5*h0*h1 - 16*f2*f6*h0^2 -
    2*f2*h0^2*h3^2 + 6*f2*h0*h1*h2*h3 - 2*f2*h0*h2^3 + 5*f3^2*h0*h2 -
    6*f3*f4*h0*h1 - 5*f3*f5*h0^2 + f3*h0^2*h2*h3 - 2*f3*h0*h1^2*h3 +
    3*f3*h0*h1*h2^2 + 8*f4^2*h0^2 + 2*f4*h0^2*h2^2 - 4*f4*h0*h1^2*h2 -
    f5*h0^3*h3 - 3*f5*h0^2*h1*h2 + 2*f5*h0*h1^3 - 2*f6*h0^3*h2 +
    4*f6*h0^2*h1^2)*x1^2*x2*x3 + (16*f0*f4 + 8*f0*h1*h3 + 4*f0*h2^2 + 2*f1*f3 -
    2*f1*h0*h3 + 2*f1*h1*h2 - 8*f2*h0*h2 + f3*h0*h1 + 4*f4*h0^2 + h0^2*h1*h3 -
    h0*h1^2*h2)*x1^2*x2*x4 + (-20*f0*f3*f6 - 5*f0*f3*h3^2 + 8*f0*f5*h1*h3 -
    8*f0*f6*h0*h3 - 8*f0*f6*h1*h2 - 2*f0*h0*h3^3 + 2*f0*h1*h2*h3^2 - 14*f1*f3*f5
    - 7*f1*f3*h2*h3 + 16*f1*f4^2 + 8*f1*f4*h1*h3 + 8*f1*f4*h2^2 - 8*f1*f5*h0*h3
    - 8*f1*f5*h1*h2 + 8*f1*f6*h0*h2 - 2*f1*h0*h2*h3^2 + f1*h1^2*h3^2 -
    2*f1*h1*h2^2*h3 + f1*h2^4 + 16*f2^2*f5 + 8*f2^2*h2*h3 - 20*f2*f3*f4 -
    4*f2*f3*h1*h3 - 5*f2*f3*h2^2 - 8*f2*f4*h0*h3 - 8*f2*f4*h1*h2 + 8*f2*f5*h0*h2
    + 8*f2*f5*h1^2 - 2*f2*h0*h1*h3^2 + 2*f2*h0*h2^2*h3 + 2*f2*h1^2*h2*h3 -
    2*f2*h1*h2^3 + 5*f3^3 + 7*f3^2*h0*h3 + 7*f3^2*h1*h2 - 4*f3*f4*h0*h2 -
    5*f3*f4*h1^2 - 7*f3*f5*h0*h1 - 5*f3*f6*h0^2 + 2*f3*h0^2*h3^2 - f3*h0*h2^3 -
    f3*h1^3*h3 + 2*f3*h1^2*h2^2 + 8*f4^2*h0*h1 - 2*f4*h0^2*h2*h3 +
    2*f4*h0*h1^2*h3 + 2*f4*h0*h1*h2^2 - 2*f4*h1^3*h2 - 2*f5*h0^2*h1*h3 +
    f5*h0^2*h2^2 - 2*f5*h0*h1^2*h2 + f5*h1^4 - 2*f6*h0^3*h3 +
    2*f6*h0^2*h1*h2)*x1^2*x3^2 + (-16*f0*f5 - 8*f0*h2*h3 + 16*f1*f4 + 4*f1*h1*h3
    + 4*f1*h2^2 - 12*f2*f3 - 4*f2*h0*h3 - 4*f2*h1*h2 + 2*f3*h0*h2 - 3*f3*h1^2 +
    8*f4*h0*h1 - 4*f5*h0^2 - 2*h0^2*h2*h3 + h0*h1^2*h3 + 2*h0*h1*h2^2 -
    h1^3*h2)*x1^2*x3*x4 + (4*f1 + 2*h0*h1)*x1^2*x4^2 + (-4*f0*f3*f5 -
    2*f0*f3*h2*h3 - 4*f0*f5*h0*h3 - 2*f0*h0*h2*h3^2 + 8*f1^2*f6 + 2*f1^2*h3^2 -
    4*f1*f4*h0*h3 - 2*f1*f5*h0*h2 + 8*f1*f6*h0*h1 - 2*f1*h0*h2^2*h3 +
    2*f2*h0^2*h3^2 - f3*f5*h0^2 + 2*f3*h0^2*h2*h3 - 2*f4*h0^2*h1*h3 - f5*h0^3*h3
    - f5*h0^2*h1*h2 + 2*f6*h0^2*h1^2)*x1*x2^3 + (-56*f0*f3*f6 - 14*f0*f3*h3^2 +
    32*f0*f4*f5 + 16*f0*f4*h2*h3 + 12*f0*f5*h1*h3 + 8*f0*f5*h2^2 - 8*f0*f6*h0*h3
    - 32*f0*f6*h1*h2 - 2*f0*h0*h3^3 - 2*f0*h1*h2*h3^2 + 4*f0*h2^3*h3 +
    32*f1*f2*f6 + 8*f1*f2*h3^2 - 8*f1*f3*f5 - 4*f1*f3*h2*h3 - 4*f1*f4*h1*h3 -
    10*f1*f5*h0*h3 - 2*f1*f5*h1*h2 + 12*f1*f6*h0*h2 + 8*f1*f6*h1^2 -
    2*f1*h0*h2*h3^2 - 2*f1*h1*h2^2*h3 - 8*f2*f4*h0*h3 - 4*f2*f5*h0*h2 +
    16*f2*f6*h0*h1 + 4*f2*h0*h1*h3^2 - 4*f2*h0*h2^2*h3 + 5*f3^2*h0*h3 -
    4*f3*f5*h0*h1 - 14*f3*f6*h0^2 - f3*h0^2*h3^2 + 5*f3*h0*h1*h2*h3 +
    8*f4*f5*h0^2 + 4*f4*h0^2*h2*h3 - 4*f4*h0*h1^2*h3 - 2*f5*h0^2*h1*h3 -
    2*f5*h0*h1^2*h2 - 2*f6*h0^3*h3 - 2*f6*h0^2*h1*h2 + 4*f6*h0*h1^3)*x1*x2^2*x3
    + (8*f0*f5 + 4*f0*h2*h3 + 8*f1*f4 + 4*f1*h1*h3 + 2*f1*h2^2 - 8*f2*h0*h3 -
    5*f3*h0*h2 + 4*f4*h0*h1 + 2*f5*h0^2 + h0^2*h2*h3 - h0*h1*h2^2)*x1*x2^2*x4 +
    (-64*f0*f4*f6 - 16*f0*f4*h3^2 + 32*f0*f5^2 + 32*f0*f5*h2*h3 - 8*f0*f6*h1*h3
    - 16*f0*f6*h2^2 - 2*f0*h1*h3^3 + 4*f0*h2^2*h3^2 - 20*f1*f3*f6 - 5*f1*f3*h3^2
    + 16*f1*f4*f5 + 8*f1*f4*h2*h3 + 4*f1*f5*h2^2 - 4*f1*f6*h0*h3 -
    12*f1*f6*h1*h2 - f1*h0*h3^3 - 3*f1*h1*h2*h3^2 + 2*f1*h2^3*h3 + 32*f2^2*f6 +
    8*f2^2*h3^2 - 12*f2*f3*f5 - 6*f2*f3*h2*h3 - 8*f2*f4*h1*h3 - 12*f2*f5*h0*h3 -
    4*f2*f5*h1*h2 + 24*f2*f6*h0*h2 + 16*f2*f6*h1^2 + 2*f2*h1^2*h3^2 -
    4*f2*h1*h2^2*h3 + 5*f3^2*h1*h3 + 6*f3*f4*h0*h3 - 7*f3*f5*h0*h2 -
    3*f3*f5*h1^2 - 10*f3*f6*h0*h1 + f3*h0*h1*h3^2 - 2*f3*h0*h2^2*h3 +
    3*f3*h1^2*h2*h3 + 8*f4*f5*h0*h1 - 16*f4*f6*h0^2 - 2*f4*h0^2*h3^2 +
    6*f4*h0*h1*h2*h3 - 2*f4*h1^3*h3 + 8*f5^2*h0^2 + 3*f5*h0^2*h2*h3 -
    3*f5*h0*h1^2*h3 - f5*h0*h1*h2^2 - f5*h1^3*h2 - 4*f6*h0^2*h1*h3 +
    2*f6*h1^4)*x1*x2*x3^2 + (-48*f0*f6 - 12*f0*h3^2 + 16*f1*f5 + 8*f1*h2*h3 +
    16*f2*f4 + 4*f2*h2^2 - 10*f3^2 - f3*h0*h3 - 9*f3*h1*h2 + 4*f4*h1^2 +
    8*f5*h0*h1 - 12*f6*h0^2 - 3*h0^2*h3^2 + 4*h0*h1*h2*h3 -
    h1^2*h2^2)*x1*x2*x3*x4 + (8*f2 - 2*h0*h2 + 2*h1^2)*x1*x2*x4^2 +
    (-32*f1*f4*f6 - 8*f1*f4*h3^2 + 16*f1*f5^2 + 16*f1*f5*h2*h3 - 8*f1*f6*h1*h3 -
    8*f1*f6*h2^2 - 2*f1*h1*h3^3 + 2*f1*h2^2*h3^2 + 16*f2*f3*f6 + 4*f2*f3*h3^2 -
    8*f2*f5*h1*h3 + 8*f2*f6*h0*h3 + 8*f2*f6*h1*h2 + 2*f2*h0*h3^3 -
    2*f2*h1*h2*h3^2 - 6*f3^2*f5 - 3*f3^2*h2*h3 + 6*f3*f4*h1*h3 - 5*f3*f5*h0*h3 -
    5*f3*f5*h1*h2 + 6*f3*f6*h0*h2 + 4*f3*f6*h1^2 - f3*h0*h2*h3^2 +
    2*f3*h1^2*h3^2 - f3*h1*h2^2*h3 - 16*f4*f6*h0*h1 - 2*f4*h0*h1*h3^2 +
    2*f4*h1^2*h2*h3 + 8*f5^2*h0*h1 - f5*h0^2*h3^2 + 4*f5*h0*h1*h2*h3 -
    2*f5*h1^3*h3 - f5*h1^2*h2^2 + 2*f6*h0^2*h2*h3 - 2*f6*h0*h1^2*h3 -
    2*f6*h0*h1*h2^2 + 2*f6*h1^3*h2)*x1*x3^3 + (-16*f1*f6 - 4*f1*h3^2 + 16*f2*f5
    + 8*f2*h2*h3 - 12*f3*f4 + 2*f3*h1*h3 - 3*f3*h2^2 - 4*f4*h0*h3 - 4*f4*h1*h2 +
    4*f5*h0*h2 + 4*f5*h1^2 - 8*f6*h0*h1 - 2*h0*h1*h3^2 + h0*h2^2*h3 +
    2*h1^2*h2*h3 - h1*h2^3)*x1*x3^2*x4 + (-8*f3 - 2*h0*h3 - 2*h1*h2)*x1*x3*x4^2
    + (-4*f0*f3*f6 - f0*f3*h3^2 - 2*f1*f5*h0*h3 - f1*h0*h2*h3^2 - f3*f6*h0^2 +
    f3*h0^2*h3^2 - f5*h0^2*h1*h3)*x2^4 + (8*f0*f5^2 + 8*f0*f5*h2*h3 +
    2*f0*h2^2*h3^2 - 4*f1*f3*f6 - f1*f3*h3^2 - 2*f1*f5*h1*h3 - 4*f1*f6*h0*h3 -
    f1*h0*h3^3 - f1*h1*h2*h3^2 - 4*f2*f5*h0*h3 - 2*f2*h0*h2*h3^2 - 2*f3*f6*h0*h1
    + 2*f3*h0*h1*h3^2 + 2*f4*h0^2*h3^2 + 2*f5^2*h0^2 - 2*f5*h0*h1^2*h3 -
    2*f6*h0^2*h1*h3)*x2^3*x3 + (4*f1*f5 + 2*f1*h2*h3 - 5*f3*h0*h3 + 2*f5*h0*h1 +
    h0^2*h3^2 - h0*h1*h2*h3)*x2^3*x4 + (32*f0*f5*f6 + 8*f0*f5*h3^2 +
    16*f0*f6*h2*h3 + 4*f0*h2*h3^3 + 4*f1*f5^2 + 4*f1*f5*h2*h3 - 4*f1*f6*h1*h3 -
    f1*h1*h3^3 + f1*h2^2*h3^2 - 4*f2*f3*f6 - f2*f3*h3^2 - 4*f2*f5*h1*h3 -
    8*f2*f6*h0*h3 - 2*f2*h0*h3^3 - 2*f2*h1*h2*h3^2 - f3*f5*h0*h3 - 2*f3*f6*h0*h2
    - f3*f6*h1^2 - f3*h0*h2*h3^2 + f3*h1^2*h3^2 + 4*f4*h0*h1*h3^2 + 2*f5^2*h0*h1
    + 8*f5*f6*h0^2 + 2*f5*h0^2*h3^2 - f5*h0*h1*h2*h3 - f5*h1^3*h3 -
    4*f6*h0*h1^2*h3)*x2^2*x3^2 + (8*f1*f6 + 2*f1*h3^2 + 8*f2*f5 + 4*f2*h2*h3 -
    5*f3*h1*h3 - 8*f4*h0*h3 + 4*f5*h0*h2 + 2*f5*h1^2 + 4*f6*h0*h1 + h0*h1*h3^2 -
    h1^2*h2*h3)*x2^2*x3*x4 + (5*f3 - 4*h0*h3 + 2*h1*h2)*x2^2*x4^2 + (32*f0*f6^2
    + 16*f0*f6*h3^2 + 2*f0*h3^4 + 16*f1*f5*f6 + 4*f1*f5*h3^2 + 8*f1*f6*h2*h3 +
    2*f1*h2*h3^3 - 8*f2*f6*h1*h3 - 2*f2*h1*h3^3 - 4*f3^2*f6 - f3^2*h3^2 -
    f3*f5*h1*h3 - 4*f3*f6*h0*h3 - 2*f3*f6*h1*h2 - f3*h0*h3^3 - f3*h1*h2*h3^2 +
    2*f4*h1^2*h3^2 + 8*f5*f6*h0*h1 + 3*f5*h0*h1*h3^2 - f5*h1^2*h2*h3 +
    8*f6^2*h0^2 + 2*f6*h0^2*h3^2 - 2*f6*h0*h1*h2*h3 - 2*f6*h1^3*h3)*x2*x3^3 +
    (16*f2*f6 + 4*f2*h3^2 + 2*f3*f5 + f3*h2*h3 - 8*f4*h1*h3 - 2*f5*h0*h3 +
    2*f5*h1*h2 + 8*f6*h0*h2 + 4*f6*h1^2 + h0*h2*h3^2 - h1*h2^2*h3)*x2*x3^2*x4 +
    (8*f4 - 2*h1*h3 + 2*h2^2)*x2*x3*x4^2 + 4*x2*x4^3 + (16*f1*f6^2 +
    8*f1*f6*h3^2 + f1*h3^4 - 4*f3*f4*f6 - f3*f4*h3^2 + f3*f5^2 + f3*f5*h2*h3 -
    4*f3*f6*h1*h3 - f3*f6*h2^2 - f3*h1*h3^3 + f5*h1^2*h3^2 + 8*f6^2*h0*h1 +
    2*f6*h0*h1*h3^2 - 2*f6*h1^2*h2*h3)*x3^4 + (4*f3*f6 + f3*h3^2 - 4*f5*h1*h3 +
    4*f6*h0*h3 + 4*f6*h1*h2 + h0*h3^3 - h1*h2*h3^2)*x3^3*x4 + (4*f5 +
    2*h2*h3)*x3^2*x4^2,
 (-16*f0^2*f4 - 8*f0^2*h1*h3 - 4*f0^2*h2^2 + 8*f0*f1*f3 + 4*f0*f1*h0*h3 +
    4*f0*f1*h1*h2 - 16*f0*f2^2 - 8*f0*f2*h1^2 + 4*f0*f3*h0*h1 - 8*f0*f4*h0^2 -
    2*f0*h0^2*h1*h3 - f0*h0^2*h2^2 + 2*f0*h0*h1^2*h2 - f0*h1^4 + 4*f1^2*f2 -
    2*f1^2*h0*h2 + f1^2*h1^2 + 4*f1*f2*h0*h1 + 2*f1*f3*h0^2 + f1*h0^3*h3 -
    f1*h0^2*h1*h2 + f1*h0*h1^3 - 4*f2^2*h0^2 - f2*h0^2*h1^2 + f3*h0^3*h1 -
    f4*h0^4)*x1^4 + (-32*f0^2*f5 - 16*f0^2*h2*h3 - 16*f0*f2*f3 + 8*f0*f2*h0*h3 -
    8*f0*f2*h1*h2 + 4*f0*f3*h0*h2 - 4*f0*f3*h1^2 - 16*f0*f5*h0^2 -
    4*f0*h0^2*h2*h3 + 2*f0*h0*h1^2*h3 + 2*f0*h0*h1*h2^2 - 2*f0*h1^3*h2 +
    4*f1^2*f3 - 2*f1^2*h0*h3 + 2*f1^2*h1*h2 + 4*f1*f3*h0*h1 - 2*f1*h0^2*h1*h3 -
    f1*h0^2*h2^2 + 2*f1*h0*h1^2*h2 - 4*f2*f3*h0^2 + 2*f2*h0^3*h3 -
    2*f2*h0^2*h1*h2 + f3*h0^3*h2 - 2*f5*h0^4)*x1^3*x2 + (32*f0^2*f6 +
    8*f0^2*h3^2 - 16*f0*f1*f5 - 8*f0*f1*h2*h3 + 16*f0*f2*h1*h3 - 8*f0*f3^2 -
    8*f0*f3*h0*h3 - 8*f0*f3*h1*h2 + 8*f0*f4*h0*h2 - 8*f0*f5*h0*h1 +
    16*f0*f6*h0^2 + 2*f0*h0^2*h3^2 - 2*f0*h0*h1*h2*h3 + 2*f0*h0*h2^3 +
    4*f0*h1^3*h3 - 2*f0*h1^2*h2^2 - 4*f1^2*h1*h3 + 2*f1*f3*h0*h2 - 4*f1*f5*h0^2
    - f1*h0^2*h2*h3 - 4*f1*h0*h1^2*h3 + f1*h0*h1*h2^2 + 4*f2*h0^2*h1*h3 -
    2*f3^2*h0^2 - 2*f3*h0^3*h3 - f3*h0^2*h1*h2 + 2*f4*h0^3*h2 - 2*f5*h0^3*h1 +
    2*f6*h0^4)*x1^3*x3 + (-32*f0*f2 - 4*f0*h0*h2 - 8*f0*h1^2 + 8*f1^2 +
    8*f1*h0*h1 - 8*f2*h0^2 - h0^3*h2)*x1^3*x4 + (-48*f0^2*f6 - 12*f0^2*h3^2 -
    8*f0*f1*f5 - 4*f0*f1*h2*h3 - 16*f0*f2*f4 - 8*f0*f2*h1*h3 - 4*f0*f2*h2^2 +
    12*f0*f3*h0*h3 - 4*f0*f4*h1^2 - 4*f0*f5*h0*h1 - 24*f0*f6*h0^2 -
    3*f0*h0^2*h3^2 + 4*f0*h0*h1*h2*h3 - 2*f0*h1^3*h3 - f0*h1^2*h2^2 + 4*f1^2*f4
    + 2*f1^2*h1*h3 + f1^2*h2^2 + 4*f1*f4*h0*h1 - 2*f1*f5*h0^2 - 3*f1*h0^2*h2*h3
    + 2*f1*h0*h1^2*h3 + f1*h0*h1*h2^2 - 4*f2*f4*h0^2 - 2*f2*h0^2*h1*h3 -
    f2*h0^2*h2^2 + 3*f3*h0^3*h3 - f5*h0^3*h1 - 3*f6*h0^4)*x1^2*x2^2 +
    (-16*f0*f1*f6 - 4*f0*f1*h3^2 - 16*f0*f3*f4 + 4*f0*f3*h1*h3 - 4*f0*f3*h2^2 -
    8*f0*f4*h1*h2 + 12*f0*f5*h0*h2 - 8*f0*f6*h0*h1 - 2*f0*h0*h1*h3^2 +
    6*f0*h0*h2^2*h3 + 2*f0*h1^2*h2*h3 - 2*f0*h1*h2^3 - 8*f1^2*f5 - 4*f1^2*h2*h3
    + 2*f1*f3*h0*h3 + 4*f1*f4*h0*h2 - 8*f1*f5*h0*h1 - 4*f1*f6*h0^2 -
    3*f1*h0*h1*h2*h3 + f1*h0*h2^3 - 4*f3*f4*h0^2 + 2*f3*h0^2*h1*h3 -
    f3*h0^2*h2^2 + 3*f5*h0^3*h2 - 2*f5*h0^2*h1^2 - 2*f6*h0^3*h1)*x1^2*x2*x3 +
    (-24*f0*f3 - 12*f0*h1*h2 + 4*f1*h0*h2 - 6*f3*h0^2 - h0^2*h1*h2)*x1^2*x2*x4 +
    (-48*f0*f2*f6 - 12*f0*f2*h3^2 + 24*f0*f3*f5 + 12*f0*f3*h2*h3 - 16*f0*f4^2 -
    8*f0*f4*h1*h3 - 8*f0*f4*h2^2 + 12*f0*f5*h0*h3 + 12*f0*f5*h1*h2 -
    24*f0*f6*h0*h2 - 12*f0*f6*h1^2 - 6*f0*h1^2*h3^2 + 4*f0*h1*h2^2*h3 - f0*h2^4
    + 16*f1^2*f6 + 4*f1^2*h3^2 - 8*f1*f2*f5 - 4*f1*f2*h2*h3 + 2*f1*f3*h1*h3 -
    2*f1*f5*h1^2 + 16*f1*f6*h0*h1 + 5*f1*h0*h1*h3^2 - 4*f2*f5*h0*h1 -
    12*f2*f6*h0^2 - 3*f2*h0^2*h3^2 - 2*f2*h0*h1*h2*h3 + 6*f3*f5*h0^2 +
    3*f3*h0^2*h2*h3 + f3*h0*h1^2*h3 - 4*f4^2*h0^2 - 2*f4*h0^2*h1*h3 -
    f4*h0^2*h2^2 + 3*f5*h0^3*h3 + 3*f5*h0^2*h1*h2 - f5*h0*h1^3 - 6*f6*h0^3*h2 +
    f6*h0^2*h1^2)*x1^2*x3^2 + (-16*f0*f4 + 4*f0*h1*h3 - 4*f0*h2^2 - 4*f1*f3 -
    2*f1*h0*h3 - 2*f1*h1*h2 - 2*f3*h0*h1 - 4*f4*h0^2 + 2*h0^2*h2^2 -
    h0*h1^2*h2)*x1^2*x3*x4 + (-12*f0 - 3*h0^2)*x1^2*x4^2 + (-16*f0*f1*f6 -
    4*f0*f1*h3^2 - 16*f0*f2*f5 - 8*f0*f2*h2*h3 + 8*f0*f4*h0*h3 - 4*f0*f5*h0*h2 -
    4*f0*f5*h1^2 - 8*f0*f6*h0*h1 + 2*f0*h0*h1*h3^2 - 2*f0*h1^2*h2*h3 + 4*f1^2*f5
    + 2*f1^2*h2*h3 + 4*f1*f5*h0*h1 - 4*f1*f6*h0^2 - 2*f1*h0^2*h3^2 +
    2*f1*h0*h1*h2*h3 - 4*f2*f5*h0^2 - 2*f2*h0^2*h2*h3 + 2*f4*h0^3*h3 -
    f5*h0^3*h2 - 2*f6*h0^3*h1)*x1*x2^3 + (-24*f0*f3*f5 - 12*f0*f3*h2*h3 +
    8*f0*f4*h1*h3 - 12*f0*f5*h1*h2 + 24*f0*f6*h0*h2 + 6*f0*h0*h2*h3^2 +
    4*f0*h1^2*h3^2 - 4*f0*h1*h2^2*h3 - 16*f1^2*f6 - 4*f1^2*h3^2 + 4*f1*f4*h0*h3
    + 2*f1*f5*h0*h2 - 16*f1*f6*h0*h1 - 4*f1*h0*h1*h3^2 + 2*f1*h0*h2^2*h3 -
    6*f3*f5*h0^2 - 3*f3*h0^2*h2*h3 + 4*f4*h0^2*h1*h3 - 2*f5*h0^2*h1*h2 +
    6*f6*h0^3*h2 - 4*f6*h0^2*h1^2)*x1*x2^2*x3 + (-16*f0*f4 - 8*f0*h1*h3 -
    4*f0*h2^2 + 4*f1*h0*h3 - 4*f4*h0^2 - h0^2*h2^2)*x1*x2^2*x4 + (-16*f0*f4*f5 -
    8*f0*f4*h2*h3 + 4*f0*f5*h1*h3 - 4*f0*f5*h2^2 + 2*f0*h1*h2*h3^2 -
    2*f0*h2^3*h3 - 16*f1*f2*f6 - 4*f1*f2*h3^2 - 4*f1*f3*f5 - 2*f1*f3*h2*h3 +
    4*f1*f4*h1*h3 + 2*f1*f5*h0*h3 - 2*f1*f5*h1*h2 + 8*f1*f6*h0*h2 - 4*f1*f6*h1^2
    + 3*f1*h0*h2*h3^2 - 8*f2*f6*h0*h1 - 2*f2*h0*h1*h3^2 - 2*f3*f5*h0*h1 -
    f3*h0*h1*h2*h3 - 4*f4*f5*h0^2 + 2*f4*h0*h1^2*h3 + 2*f5*h0^2*h1*h3 -
    f5*h0^2*h2^2 - f5*h0*h1^2*h2 + 4*f6*h0^2*h1*h2 - 2*f6*h0*h1^3)*x1*x2*x3^2 +
    (-24*f0*f5 - 12*f0*h2*h3 - 8*f1*f4 - 2*f1*h2^2 - 4*f4*h0*h1 - 6*f5*h0^2 +
    3*h0^2*h2*h3 - h0*h1*h2^2)*x1*x2*x3*x4 + (-4*f1 - 2*h0*h1)*x1*x2*x4^2 +
    (32*f0*f4*f6 + 8*f0*f4*h3^2 - 16*f0*f5^2 - 16*f0*f5*h2*h3 + 16*f0*f6*h1*h3 +
    8*f0*f6*h2^2 + 4*f0*h1*h3^3 - 2*f0*h2^2*h3^2 - 16*f1*f3*f6 - 4*f1*f3*h3^2 +
    4*f1*f5*h1*h3 - 8*f1*f6*h0*h3 - 8*f1*f6*h1*h2 - 2*f1*h0*h3^3 + 8*f2*f6*h0*h2
    + 2*f2*h0*h2*h3^2 - 2*f3*f5*h0*h2 - 8*f3*f6*h0*h1 - 2*f3*h0*h1*h3^2 -
    f3*h0*h2^2*h3 + 8*f4*f6*h0^2 + 2*f4*h0^2*h3^2 + 2*f4*h0*h1*h2*h3 -
    4*f5^2*h0^2 - 5*f5*h0^2*h2*h3 + 2*f5*h0*h1^2*h3 - f5*h0*h1*h2^2 +
    6*f6*h0^2*h2^2 - 2*f6*h0*h1^2*h2)*x1*x3^3 + (-8*f1*f5 - 4*f1*h2*h3 -
    4*f4*h0*h2 - 4*f5*h0*h1 + 2*h0*h1*h2*h3 - h0*h2^3)*x1*x3^2*x4 -
    6*h0*h2*x1*x3*x4^2 + (-16*f0*f2*f6 - 4*f0*f2*h3^2 + 4*f0*f5*h0*h3 -
    8*f0*f6*h0*h2 - 4*f0*f6*h1^2 - f0*h1^2*h3^2 + 4*f1^2*f6 + f1^2*h3^2 +
    4*f1*f6*h0*h1 + f1*h0*h1*h3^2 - 4*f2*f6*h0^2 - f2*h0^2*h3^2 + f5*h0^3*h3 -
    2*f6*h0^3*h2)*x2^4 + (-32*f0*f3*f6 - 8*f0*f3*h3^2 + 4*f0*f5*h1*h3 +
    8*f0*f6*h0*h3 - 16*f0*f6*h1*h2 + 2*f0*h0*h3^3 - 2*f0*h1*h2*h3^2 +
    2*f1*f5*h0*h3 + f1*h0*h2*h3^2 - 8*f3*f6*h0^2 - 2*f3*h0^2*h3^2 +
    2*f5*h0^2*h1*h3 + 2*f6*h0^3*h3 - 4*f6*h0^2*h1*h2)*x2^3*x3 + (-8*f0*f5 -
    4*f0*h2*h3 - 2*f5*h0^2 - h0^2*h2*h3)*x2^3*x4 + (-64*f0*f4*f6 - 16*f0*f4*h3^2
    + 12*f0*f5^2 + 12*f0*f5*h2*h3 - 8*f0*f6*h1*h3 - 16*f0*f6*h2^2 - 2*f0*h1*h3^3
    - f0*h2^2*h3^2 - 8*f1*f3*f6 - 2*f1*f3*h3^2 + 2*f1*f5*h1*h3 + 12*f1*f6*h0*h3
    - 4*f1*f6*h1*h2 + 3*f1*h0*h3^3 - 4*f3*f6*h0*h1 - f3*h0*h1*h3^2 -
    16*f4*f6*h0^2 - 3*f4*h0^2*h3^2 + 3*f5^2*h0^2 + 3*f5*h0^2*h2*h3 +
    f5*h0*h1^2*h3 + 4*f6*h0^2*h1*h3 - 4*f6*h0^2*h2^2 -
    2*f6*h0*h1^2*h2)*x2^2*x3^2 + (-48*f0*f6 - 12*f0*h3^2 - 4*f1*f5 - 2*f1*h2*h3
    - 2*f5*h0*h1 - 12*f6*h0^2 - h0*h1*h2*h3)*x2^2*x3*x4 + (-16*f0*f5*f6 -
    4*f0*f5*h3^2 - 8*f0*f6*h2*h3 - 2*f0*h2*h3^3 - 32*f1*f4*f6 - 8*f1*f4*h3^2 +
    8*f1*f5^2 + 8*f1*f5*h2*h3 - 8*f1*f6*h2^2 + 8*f2*f6*h0*h3 + 2*f2*h0*h3^3 -
    2*f3*f5*h0*h3 - f3*h0*h2*h3^2 - 16*f4*f6*h0*h1 - 2*f4*h0*h1*h3^2 +
    4*f5^2*h0*h1 - 4*f5*f6*h0^2 - 2*f5*h0^2*h3^2 + 3*f5*h0*h1*h2*h3 +
    2*f6*h0^2*h2*h3 + 2*f6*h0*h1^2*h3 - 4*f6*h0*h1*h2^2)*x2*x3^3 + (-32*f1*f6 -
    8*f1*h3^2 - 4*f4*h0*h3 - 16*f6*h0*h1 - h0*h2^2*h3)*x2*x3^2*x4 -
    6*h0*h3*x2*x3*x4^2 + (-16*f0*f6^2 - 8*f0*f6*h3^2 - f0*h3^4 - 16*f2*f4*f6 -
    4*f2*f4*h3^2 + 4*f2*f5^2 + 4*f2*f5*h2*h3 - 4*f2*f6*h2^2 + 4*f3^2*f6 +
    f3^2*h3^2 - 2*f3*f5*h1*h3 + 4*f3*f6*h0*h3 + 4*f3*f6*h1*h2 + f3*h0*h3^3 -
    8*f4*f6*h0*h2 - 4*f4*f6*h1^2 - 2*f4*h0*h2*h3^2 + 2*f5^2*h0*h2 + f5^2*h1^2 -
    f5*h0*h1*h3^2 + 2*f5*h0*h2^2*h3 - 4*f6^2*h0^2 - f6*h0^2*h3^2 +
    2*f6*h0*h1*h2*h3 - 2*f6*h0*h2^3)*x3^4 + (-16*f2*f6 - 4*f2*h3^2 + 4*f3*f5 +
    2*f3*h2*h3 - 4*f4*h1*h3 + 2*f5*h0*h3 + 2*f5*h1*h2 - 8*f6*h0*h2 - 4*f6*h1^2 -
    h0*h2*h3^2)*x3^3*x4 + (4*f4 - 4*h1*h3 + h2^2)*x3^2*x4^2 + 4*x3*x4^3,
 (16*f0^2*f2*f6 + 4*f0^2*f2*h3^2 - 16*f0^2*f3*f5 - 8*f0^2*f3*h2*h3 + 16*f0^2*f4^2
    + 8*f0^2*f4*h1*h3 + 8*f0^2*f4*h2^2 - 8*f0^2*f5*h1*h2 + 4*f0^2*f6*h1^2 +
    f0^2*h1^2*h3^2 - 2*f0^2*h1*h2^2*h3 + f0^2*h2^4 - 4*f0*f1^2*f6 - f0*f1^2*h3^2
    + 8*f0*f1*f2*f5 + 4*f0*f1*f2*h2*h3 - 8*f0*f1*f3*f4 - 2*f0*f1*f3*h2^2 -
    4*f0*f1*f4*h0*h3 - 4*f0*f1*f4*h1*h2 + 4*f0*f1*f5*h0*h2 + 2*f0*f1*f5*h1^2 -
    4*f0*f1*f6*h0*h1 - f0*f1*h0*h1*h3^2 + f0*f1*h0*h2^2*h3 + f0*f1*h1^2*h2*h3 -
    f0*f1*h1*h2^3 + 16*f0*f2^2*f4 + 4*f0*f2^2*h2^2 - 4*f0*f2*f3^2 -
    8*f0*f2*f3*h0*h3 - 4*f0*f2*f3*h1*h2 - 8*f0*f2*f4*h0*h2 + 8*f0*f2*f4*h1^2 +
    4*f0*f2*f5*h0*h1 + 8*f0*f2*f6*h0^2 - 3*f0*f2*h0^2*h3^2 - 8*f0*f2*h0*h1*h2*h3
    - 2*f0*f2*h0*h2^3 + f0*f2*h1^2*h2^2 + 4*f0*f3^2*h0*h2 - f0*f3^2*h1^2 -
    4*f0*f3*f4*h0*h1 - 8*f0*f3*f5*h0^2 - 2*f0*f3*h0^2*h2*h3 - 2*f0*f3*h0*h1^2*h3
    + 3*f0*f3*h0*h1*h2^2 - f0*f3*h1^3*h2 + 8*f0*f4^2*h0^2 + 2*f0*f4*h0^2*h1*h3 +
    2*f0*f4*h0^2*h2^2 - 4*f0*f4*h0*h1^2*h2 + f0*f4*h1^4 - 2*f0*f5*h0^2*h1*h2 +
    f0*f5*h0*h1^3 + f0*f6*h0^2*h1^2 - f0*h0^2*h1^2*h3^2 - 2*f0*h0*h1^3*h2*h3 -
    2*f1^3*f5 - f1^3*h2*h3 - 4*f1^2*f2*f4 - f1^2*f2*h2^2 + f1^2*f3^2 +
    2*f1^2*f3*h0*h3 + f1^2*f3*h1*h2 + 4*f1^2*f4*h0*h2 - f1^2*f4*h1^2 -
    3*f1^2*f5*h0*h1 - f1^2*f6*h0^2 + f1^2*h0^2*h3^2 + f1^2*h0*h1*h2*h3 +
    f1^2*h0*h2^3 - 4*f1*f2*f4*h0*h1 + 2*f1*f2*f5*h0^2 + f1*f2*h0^2*h2*h3 -
    f1*f2*h0*h1*h2^2 + f1*f3^2*h0*h1 - 2*f1*f3*f4*h0^2 + 2*f1*f3*h0^2*h1*h3 -
    2*f1*f3*h0^2*h2^2 + f1*f3*h0*h1^2*h2 - f1*f4*h0^3*h3 + 3*f1*f4*h0^2*h1*h2 -
    f1*f4*h0*h1^3 + f1*f5*h0^3*h2 - f1*f5*h0^2*h1^2 - f1*f6*h0^3*h1 +
    f1*h0^3*h1*h3^2 + 2*f1*h0^2*h1^2*h2*h3 + 4*f2^2*f4*h0^2 + f2^2*h0^2*h2^2 -
    f2*f3^2*h0^2 - 2*f2*f3*h0^3*h3 - f2*f3*h0^2*h1*h2 - 2*f2*f4*h0^3*h2 +
    f2*f4*h0^2*h1^2 + f2*f5*h0^3*h1 + f2*f6*h0^4 - f2*h0^4*h3^2 -
    2*f2*h0^3*h1*h2*h3 + f3^2*h0^3*h2 - f3*f4*h0^3*h1 - f3*f5*h0^4 +
    f4^2*h0^4)*x1^4 + (-32*f0^2*f3*f6 - 8*f0^2*f3*h3^2 + 32*f0^2*f4*f5 +
    16*f0^2*f4*h2*h3 + 8*f0^2*f5*h2^2 - 16*f0^2*f6*h1*h2 - 4*f0^2*h1*h2*h3^2 +
    4*f0^2*h2^3*h3 + 32*f0*f1*f2*f6 + 8*f0*f1*f2*h3^2 - 16*f0*f1*f3*f5 -
    8*f0*f1*f3*h2*h3 - 8*f0*f1*f5*h1*h2 + 8*f0*f1*f6*h0*h2 + 8*f0*f1*f6*h1^2 +
    2*f0*f1*h0*h2*h3^2 + 2*f0*f1*h1^2*h3^2 - 4*f0*f1*h1*h2^2*h3 + 32*f0*f2^2*f5
    + 16*f0*f2^2*h2*h3 - 8*f0*f2*f3*h1*h3 - 16*f0*f2*f4*h0*h3 - 8*f0*f2*f5*h0*h2
    + 16*f0*f2*f5*h1^2 + 16*f0*f2*f6*h0*h1 - 8*f0*f2*h0*h2^2*h3 +
    4*f0*f2*h1^2*h2*h3 - 8*f0*f3*f5*h0*h1 - 16*f0*f3*f6*h0^2 - 6*f0*f3*h0^2*h3^2
    - 4*f0*f3*h0*h1*h2*h3 - 2*f0*f3*h1^3*h3 + 16*f0*f4*f5*h0^2 +
    4*f0*f4*h0^2*h2*h3 - 4*f0*f4*h0*h1^2*h3 + 2*f0*f5*h0^2*h2^2 -
    6*f0*f5*h0*h1^2*h2 + 2*f0*f5*h1^4 - 4*f0*f6*h0^2*h1*h2 + 4*f0*f6*h0*h1^3 -
    2*f0*h0^2*h1*h2*h3^2 - 4*f0*h0*h1^2*h2^2*h3 - 8*f1^3*f6 - 2*f1^3*h3^2 -
    8*f1^2*f2*f5 - 4*f1^2*f2*h2*h3 + 2*f1^2*f3*h1*h3 + 4*f1^2*f4*h0*h3 +
    6*f1^2*f5*h0*h2 - 2*f1^2*f5*h1^2 - 12*f1^2*f6*h0*h1 - 2*f1^2*h0*h1*h3^2 +
    4*f1^2*h0*h2^2*h3 - 8*f1*f2*f5*h0*h1 + 8*f1*f2*f6*h0^2 + 2*f1*f2*h0^2*h3^2 -
    4*f1*f2*h0*h1*h2*h3 - 4*f1*f3*f5*h0^2 - 4*f1*f3*h0^2*h2*h3 +
    2*f1*f3*h0*h1^2*h3 + 4*f1*f4*h0^2*h1*h3 + 4*f1*f5*h0^2*h1*h2 -
    2*f1*f5*h0*h1^3 + 2*f1*f6*h0^3*h2 - 4*f1*f6*h0^2*h1^2 + f1*h0^3*h2*h3^2 +
    2*f1*h0^2*h1*h2^2*h3 + 8*f2^2*f5*h0^2 + 4*f2^2*h0^2*h2*h3 -
    2*f2*f3*h0^2*h1*h3 - 4*f2*f4*h0^3*h3 - 2*f2*f5*h0^3*h2 + 2*f2*f5*h0^2*h1^2 +
    4*f2*f6*h0^3*h1 - 2*f3*f5*h0^3*h1 - 2*f3*f6*h0^4 - f3*h0^4*h3^2 -
    2*f3*h0^3*h1*h2*h3 + 2*f4*f5*h0^4)*x1^3*x2 + (-64*f0^2*f4*f6 -
    16*f0^2*f4*h3^2 + 32*f0^2*f5^2 + 32*f0^2*f5*h2*h3 - 16*f0^2*f6*h1*h3 -
    16*f0^2*f6*h2^2 - 4*f0^2*h1*h3^3 + 4*f0^2*h2^2*h3^2 + 16*f0*f1*f3*f6 +
    4*f0*f1*f3*h3^2 - 8*f0*f1*f5*h1*h3 + 8*f0*f1*f6*h0*h3 + 8*f0*f1*f6*h1*h2 +
    2*f0*f1*h0*h3^3 - 2*f0*f1*h1*h2*h3^2 + 16*f0*f2*f3*f5 + 8*f0*f2*f3*h2*h3 -
    16*f0*f2*f4*h1*h3 - 8*f0*f2*f5*h0*h3 + 8*f0*f2*f5*h1*h2 - 4*f0*f2*h0*h2*h3^2
    + 8*f0*f3*f4*h0*h3 - 8*f0*f3*f5*h0*h2 + 4*f0*f3*f5*h1^2 + 8*f0*f3*f6*h0*h1 +
    6*f0*f3*h0*h1*h3^2 - 2*f0*f3*h0*h2^2*h3 + 2*f0*f3*h1^2*h2*h3 -
    32*f0*f4*f6*h0^2 - 4*f0*f4*h0^2*h3^2 + 8*f0*f4*h0*h1*h2*h3 - 4*f0*f4*h1^3*h3
    + 16*f0*f5^2*h0^2 + 8*f0*f5*h0^2*h2*h3 - 6*f0*f5*h0*h1^2*h3 -
    4*f0*f5*h0*h1*h2^2 + 2*f0*f5*h1^3*h2 - 4*f0*f6*h0^2*h1*h3 -
    4*f0*f6*h0^2*h2^2 + 4*f0*f6*h0*h1^2*h2 + 2*f0*h0^2*h1*h3^3 +
    4*f0*h0*h1^2*h2*h3^2 - 4*f1^2*f3*f5 - 2*f1^2*f3*h2*h3 + 4*f1^2*f4*h1*h3 +
    6*f1^2*f5*h0*h3 - 2*f1^2*f5*h1*h2 - 4*f1^2*f6*h0*h2 + 2*f1^2*h0*h2*h3^2 -
    4*f1*f3^2*h0*h3 - 4*f1*f3*f5*h0*h1 + 4*f1*f3*f6*h0^2 - 4*f1*f3*h0^2*h3^2 -
    8*f1*f3*h0*h1*h2*h3 - 4*f1*f4*h0^2*h2*h3 + 4*f1*f4*h0*h1^2*h3 +
    4*f1*f5*h0^2*h1*h3 + 2*f1*f5*h0^2*h2^2 - 2*f1*f5*h0*h1^2*h2 +
    2*f1*f6*h0^3*h3 - 2*f1*f6*h0^2*h1*h2 - f1*h0^3*h3^3 - 3*f1*h0^2*h1*h2*h3^2 -
    2*f1*h0*h1^2*h2^2*h3 + 4*f2*f3*f5*h0^2 + 6*f2*f3*h0^2*h2*h3 -
    4*f2*f4*h0^2*h1*h3 - 2*f2*f5*h0^3*h3 + 2*f2*f5*h0^2*h1*h2 +
    2*f2*h0^3*h2*h3^2 + 4*f2*h0^2*h1*h2^2*h3 - 2*f3^2*h0^2*h1*h3 +
    2*f3*f4*h0^3*h3 - 2*f3*f5*h0^3*h2 + 2*f3*f6*h0^3*h1 - f3*h0^3*h1*h3^2 -
    2*f3*h0^2*h1^2*h2*h3 - 4*f4*f6*h0^4 + 2*f5^2*h0^4)*x1^3*x3 + (32*f0*f2*f4 +
    8*f0*f2*h2^2 - 8*f0*f3^2 - 8*f0*f3*h0*h3 - 8*f0*f3*h1*h2 + 8*f0*f4*h1^2 -
    4*f0*h0^2*h3^2 - 8*f0*h0*h1*h2*h3 - 8*f1^2*f4 - 2*f1^2*h2^2 + 4*f1*f3*h0*h2
    - 8*f1*f4*h0*h1 + 8*f2*f4*h0^2 - 2*f3^2*h0^2 - 2*f3*h0^3*h3 - h0^4*h3^2 -
    2*h0^3*h1*h2*h3)*x1^3*x4 + (32*f0^2*f4*f6 + 8*f0^2*f4*h3^2 + 16*f0^2*f5^2 +
    16*f0^2*f5*h2*h3 - 8*f0^2*f6*h1*h3 + 8*f0^2*f6*h2^2 - 2*f0^2*h1*h3^3 +
    6*f0^2*h2^2*h3^2 - 24*f0*f1*f3*f6 - 6*f0*f1*f3*h3^2 - 4*f0*f1*f5*h1*h3 +
    4*f0*f1*f6*h0*h3 - 12*f0*f1*f6*h1*h2 + f0*f1*h0*h3^3 - 5*f0*f1*h1*h2*h3^2 +
    64*f0*f2^2*f6 + 16*f0*f2^2*h3^2 + 8*f0*f2*f3*f5 + 4*f0*f2*f3*h2*h3 -
    8*f0*f2*f4*h1*h3 - 20*f0*f2*f5*h0*h3 + 4*f0*f2*f5*h1*h2 + 32*f0*f2*f6*h1^2 -
    10*f0*f2*h0*h2*h3^2 + 4*f0*f2*h1^2*h3^2 - 4*f0*f3*f4*h0*h3 -
    4*f0*f3*f5*h0*h2 + 2*f0*f3*f5*h1^2 - 12*f0*f3*f6*h0*h1 + f0*f3*h0*h1*h3^2 -
    3*f0*f3*h0*h2^2*h3 + f0*f3*h1^2*h2*h3 + 16*f0*f4*f6*h0^2 - 2*f0*f4*h0^2*h3^2
    - 4*f0*f4*h0*h1*h2*h3 - 2*f0*f4*h1^3*h3 + 8*f0*f5^2*h0^2 +
    4*f0*f5*h0^2*h2*h3 - 7*f0*f5*h0*h1^2*h3 - 2*f0*f5*h0*h1*h2^2 + f0*f5*h1^3*h2
    - 2*f0*f6*h0^2*h1*h3 + 2*f0*f6*h0^2*h2^2 - 6*f0*f6*h0*h1^2*h2 + 4*f0*f6*h1^4
    - 2*f0*h0^2*h1*h3^3 - f0*h0^2*h2^2*h3^2 - 4*f0*h0*h1^2*h2*h3^2 -
    2*f0*h0*h1*h2^3*h3 - 16*f1^2*f2*f6 - 4*f1^2*f2*h3^2 - 2*f1^2*f3*f5 -
    f1^2*f3*h2*h3 + 2*f1^2*f4*h1*h3 + 7*f1^2*f5*h0*h3 - f1^2*f5*h1*h2 +
    6*f1^2*f6*h0*h2 - 4*f1^2*f6*h1^2 + 5*f1^2*h0*h2*h3^2 - 16*f1*f2*f6*h0*h1 -
    4*f1*f2*h0*h1*h3^2 - 2*f1*f3*f5*h0*h1 - 6*f1*f3*f6*h0^2 - 2*f1*f3*h0^2*h3^2
    - f1*f3*h0*h1*h2*h3 - 2*f1*f4*h0^2*h2*h3 + 2*f1*f4*h0*h1^2*h3 +
    6*f1*f5*h0^2*h1*h3 + f1*f5*h0^2*h2^2 - f1*f5*h0*h1^2*h2 + f1*f6*h0^3*h3 +
    3*f1*f6*h0^2*h1*h2 - 4*f1*f6*h0*h1^3 + f1*h0^3*h3^3 + 2*f1*h0^2*h1*h2*h3^2 +
    16*f2^2*f6*h0^2 + 4*f2^2*h0^2*h3^2 + 2*f2*f3*f5*h0^2 + f2*f3*h0^2*h2*h3 -
    2*f2*f4*h0^2*h1*h3 - 5*f2*f5*h0^3*h3 + f2*f5*h0^2*h1*h2 + 4*f2*f6*h0^2*h1^2
    - f3*f4*h0^3*h3 - f3*f5*h0^3*h2 - 3*f3*f6*h0^3*h1 + 2*f4*f6*h0^4 -
    f4*h0^4*h3^2 - 2*f4*h0^3*h1*h2*h3 + f5^2*h0^4)*x1^2*x2^2 + (64*f0^2*f5*f6 +
    16*f0^2*f5*h3^2 + 32*f0^2*f6*h2*h3 + 8*f0^2*h2*h3^3 - 32*f0*f1*f4*f6 -
    8*f0*f1*f4*h3^2 + 16*f0*f1*f5^2 + 16*f0*f1*f5*h2*h3 - 24*f0*f1*f6*h1*h3 -
    8*f0*f1*f6*h2^2 - 6*f0*f1*h1*h3^3 + 2*f0*f1*h2^2*h3^2 + 64*f0*f2*f3*f6 +
    16*f0*f2*f3*h3^2 - 24*f0*f2*f5*h1*h3 - 16*f0*f2*f6*h0*h3 + 32*f0*f2*f6*h1*h2
    - 4*f0*f2*h0*h3^3 - 4*f0*f2*h1*h2*h3^2 + 8*f0*f3^2*f5 + 4*f0*f3^2*h2*h3 -
    8*f0*f3*f4*h1*h3 - 8*f0*f3*f5*h0*h3 + 8*f0*f3*f5*h1*h2 - 8*f0*f3*f6*h0*h2 +
    16*f0*f3*f6*h1^2 - 6*f0*f3*h0*h2*h3^2 + 6*f0*f3*h1^2*h3^2 +
    2*f0*f3*h1*h2^2*h3 + 16*f0*f4^2*h0*h3 - 8*f0*f4*f5*h0*h2 - 16*f0*f4*f6*h0*h1
    + 12*f0*f4*h0*h1*h3^2 + 4*f0*f4*h0*h2^2*h3 - 4*f0*f4*h1^2*h2*h3 +
    8*f0*f5^2*h0*h1 + 32*f0*f5*f6*h0^2 + 8*f0*f5*h0^2*h3^2 + 8*f0*f5*h0*h1*h2*h3
    - 2*f0*f5*h0*h2^3 - 6*f0*f5*h1^3*h3 + 2*f0*f5*h1^2*h2^2 + 8*f0*f6*h0^2*h2*h3
    - 16*f0*f6*h0*h1^2*h3 - 8*f0*f6*h0*h1*h2^2 + 8*f0*f6*h1^3*h2 +
    2*f0*h0^2*h2*h3^3 + 4*f0*h0*h1*h2^2*h3^2 - 8*f1^2*f3*f6 - 2*f1^2*f3*h3^2 +
    2*f1^2*f5*h1*h3 + 16*f1^2*f6*h0*h3 - 4*f1^2*f6*h1*h2 + 4*f1^2*h0*h3^3 +
    8*f1*f2*f5*h0*h3 - 8*f1*f2*f6*h0*h2 + 2*f1*f2*h0*h2*h3^2 - 8*f1*f3*f4*h0*h3
    - 4*f1*f3*f5*h0*h2 - 8*f1*f3*f6*h0*h1 - 6*f1*f3*h0*h1*h3^2 -
    4*f1*f3*h0*h2^2*h3 - 8*f1*f4*f6*h0^2 - 12*f1*f4*h0^2*h3^2 -
    4*f1*f4*h0*h1*h2*h3 + 4*f1*f5^2*h0^2 + 4*f1*f5*h0^2*h2*h3 +
    4*f1*f5*h0*h1^2*h3 - 2*f1*f5*h0*h1*h2^2 + 10*f1*f6*h0^2*h1*h3 +
    2*f1*f6*h0^2*h2^2 - 6*f1*f6*h0*h1^2*h2 - f1*h0^2*h1*h3^3 - f1*h0^2*h2^2*h3^2
    - 2*f1*h0*h1^2*h2*h3^2 - 2*f1*h0*h1*h2^3*h3 + 16*f2*f3*f6*h0^2 +
    8*f2*f3*h0^2*h3^2 - 4*f2*f4*h0^2*h2*h3 - 2*f2*f5*h0^2*h1*h3 +
    2*f2*f5*h0^2*h2^2 - 4*f2*f6*h0^3*h3 + 4*f2*f6*h0^2*h1*h2 + 2*f2*h0^3*h3^3 +
    4*f2*h0^2*h1*h2*h3^2 + 2*f3^2*f5*h0^2 + 4*f3^2*h0^2*h2*h3 -
    6*f3*f4*h0^2*h1*h3 - 2*f3*f5*h0^3*h3 - 2*f3*f6*h0^3*h2 + 2*f3*f6*h0^2*h1^2 +
    f3*h0^3*h2*h3^2 + 2*f3*h0^2*h1*h2^2*h3 + 4*f4^2*h0^3*h3 - 2*f4*f5*h0^3*h2 -
    4*f4*f6*h0^3*h1 - 2*f4*h0^3*h1*h3^2 - 4*f4*h0^2*h1^2*h2*h3 + 2*f5^2*h0^3*h1
    + 4*f5*f6*h0^4 + f5*h0^4*h3^2 + 2*f5*h0^3*h1*h2*h3)*x1^2*x2*x3 +
    (48*f0*f2*f5 + 24*f0*f2*h2*h3 - 12*f0*f3*h1*h3 + 12*f0*f5*h1^2 - 12*f1^2*f5
    - 6*f1^2*h2*h3 + 2*f1*f3*h0*h3 - 12*f1*f5*h0*h1 - 2*f1*h0^2*h3^2 -
    4*f1*h0*h1*h2*h3 + 12*f2*f5*h0^2 - 2*f3*h0^2*h1*h3 - h0^3*h1*h3^2 -
    2*h0^2*h1^2*h2*h3)*x1^2*x2*x4 + (64*f0^2*f6^2 + 32*f0^2*f6*h3^2 +
    4*f0^2*h3^4 + 96*f0*f2*f4*f6 + 24*f0*f2*f4*h3^2 - 32*f0*f2*f5^2 -
    32*f0*f2*f5*h2*h3 + 8*f0*f2*f6*h1*h3 + 24*f0*f2*f6*h2^2 + 2*f0*f2*h1*h3^3 -
    2*f0*f2*h2^2*h3^2 - 16*f0*f3^2*f6 - 4*f0*f3^2*h3^2 + 8*f0*f3*f4*f5 +
    4*f0*f3*f4*h2*h3 + 8*f0*f3*f5*h1*h3 + 2*f0*f3*f5*h2^2 - 28*f0*f3*f6*h0*h3 -
    16*f0*f3*f6*h1*h2 - 7*f0*f3*h0*h3^3 + f0*f3*h2^3*h3 - 8*f0*f4^2*h1*h3 +
    4*f0*f4*f5*h0*h3 + 4*f0*f4*f5*h1*h2 + 8*f0*f4*f6*h0*h2 + 24*f0*f4*f6*h1^2 +
    4*f0*f4*h0*h2*h3^2 + 4*f0*f4*h1^2*h3^2 - 2*f0*f4*h1*h2^2*h3 -
    4*f0*f5^2*h0*h2 - 8*f0*f5^2*h1^2 + 8*f0*f5*h0*h1*h3^2 - 3*f0*f5*h0*h2^2*h3 -
    4*f0*f5*h1^2*h2*h3 + f0*f5*h1*h2^3 + 32*f0*f6^2*h0^2 + 4*f0*f6*h0^2*h3^2 -
    24*f0*f6*h0*h1*h2*h3 + 2*f0*f6*h0*h2^3 + 2*f0*f6*h1^3*h3 + 2*f0*f6*h1^2*h2^2
    - f0*h0^2*h3^4 - 2*f0*h0*h1*h2*h3^3 - 32*f1^2*f4*f6 - 8*f1^2*f4*h3^2 +
    12*f1^2*f5^2 + 12*f1^2*f5*h2*h3 - 4*f1^2*f6*h1*h3 - 8*f1^2*f6*h2^2 -
    f1^2*h1*h3^3 + f1^2*h2^2*h3^2 + 8*f1*f2*f3*f6 + 2*f1*f2*f3*h3^2 -
    4*f1*f2*f5*h1*h3 + 4*f1*f2*f6*h0*h3 + 4*f1*f2*f6*h1*h2 + f1*f2*h0*h3^3 -
    f1*f2*h1*h2*h3^2 - 6*f1*f3*f5*h0*h3 + 8*f1*f3*f6*h0*h2 + 2*f1*f3*f6*h1^2 -
    f1*f3*h0*h2*h3^2 + f1*f3*h1^2*h3^2 + 8*f1*f4^2*h0*h3 - 4*f1*f4*f5*h0*h2 -
    32*f1*f4*f6*h0*h1 - 4*f1*f4*h0*h1*h3^2 + 2*f1*f4*h0*h2^2*h3 +
    12*f1*f5^2*h0*h1 - 2*f1*f5*h0^2*h3^2 + 10*f1*f5*h0*h1*h2*h3 - f1*f5*h0*h2^3
    - f1*f5*h1^3*h3 + 8*f1*f6*h0^2*h2*h3 - 3*f1*f6*h0*h1^2*h3 -
    4*f1*f6*h0*h1*h2^2 + f1*f6*h1^3*h2 + f1*h0^2*h2*h3^3 + 2*f1*h0*h1*h2^2*h3^2
    + 8*f2^2*f5*h0*h3 - 8*f2^2*f6*h0*h2 + 2*f2^2*h0*h2*h3^2 - 12*f2*f3*f4*h0*h3
    + 4*f2*f3*f6*h0*h1 - f2*f3*h0*h1*h3^2 - 3*f2*f3*h0*h2^2*h3 +
    24*f2*f4*f6*h0^2 - 2*f2*f4*h0^2*h3^2 - 8*f2*f4*h0*h1*h2*h3 - 8*f2*f5^2*h0^2
    - 4*f2*f5*h0^2*h2*h3 + 2*f2*f5*h0*h1^2*h3 + 4*f2*f6*h0^2*h1*h3 +
    4*f2*f6*h0^2*h2^2 - 2*f2*f6*h0*h1^2*h2 - f2*h0^2*h2^2*h3^2 -
    2*f2*h0*h1*h2^3*h3 + 3*f3^3*h0*h3 - 4*f3^2*f6*h0^2 + 4*f3^2*h0^2*h3^2 +
    5*f3^2*h0*h1*h2*h3 + 2*f3*f4*f5*h0^2 - f3*f4*h0^2*h2*h3 - 3*f3*f4*h0*h1^2*h3
    - f3*f5*h0^2*h1*h3 + f3*f5*h0^2*h2^2 - 7*f3*f6*h0^3*h3 + f3*f6*h0*h1^3 +
    f3*h0^3*h3^3 + 3*f3*h0^2*h1*h2*h3^2 + 2*f3*h0*h1^2*h2^2*h3 +
    2*f4^2*h0^2*h1*h3 + f4*f5*h0^3*h3 - f4*f5*h0^2*h1*h2 + 2*f4*f6*h0^3*h2 -
    2*f4*f6*h0^2*h1^2 - f4*h0^2*h1^2*h3^2 - 2*f4*h0*h1^3*h2*h3 - f5^2*h0^3*h2 +
    f5^2*h0^2*h1^2 + f5*h0^3*h1*h3^2 + 2*f5*h0^2*h1^2*h2*h3 + 4*f6^2*h0^4 -
    f6*h0^4*h3^2 - 2*f6*h0^3*h1*h2*h3)*x1^2*x3^2 + (32*f0*f2*f6 + 8*f0*f2*h3^2 +
    16*f0*f3*f5 + 8*f0*f3*h2*h3 - 16*f0*f4*h1*h3 + 8*f0*f5*h1*h2 + 8*f0*f6*h1^2
    - 8*f1^2*f6 - 2*f1^2*h3^2 + 8*f1*f4*h0*h3 - 4*f1*f5*h0*h2 - 8*f1*f6*h0*h1 -
    8*f2*f3*h0*h3 + 8*f2*f6*h0^2 - 4*f2*h0^2*h3^2 - 8*f2*h0*h1*h2*h3 +
    4*f3*f5*h0^2 + 4*f3*h0^2*h2*h3 - 2*f3*h0*h1^2*h3 + 2*h0^3*h2*h3^2 -
    h0^2*h1^2*h3^2 + 4*h0^2*h1*h2^2*h3 - 2*h0*h1^3*h2*h3)*x1^2*x3*x4 + (8*f0*f4
    - 2*f0*h1*h3 + 2*f0*h2^2 - 2*f1*f3 + f1*h0*h3 - f1*h1*h2 + 2*f2*h0*h2 -
    f3*h0*h1 + 2*f4*h0^2)*x1^2*x4^2 + (32*f0^2*f5*f6 + 8*f0^2*f5*h3^2 +
    16*f0^2*f6*h2*h3 + 4*f0^2*h2*h3^3 - 8*f0*f1*f6*h1*h3 - 2*f0*f1*h1*h3^3 +
    32*f0*f2*f3*f6 + 8*f0*f2*f3*h3^2 - 8*f0*f2*f5*h1*h3 - 16*f0*f2*f6*h0*h3 +
    16*f0*f2*f6*h1*h2 - 4*f0*f2*h0*h3^3 - 8*f0*f3*f5*h0*h3 - 8*f0*f3*f6*h0*h2 +
    8*f0*f3*f6*h1^2 - 6*f0*f3*h0*h2*h3^2 + 2*f0*f3*h1^2*h3^2 +
    4*f0*f4*h0*h1*h3^2 + 16*f0*f5*f6*h0^2 - 2*f0*f5*h0^2*h3^2 -
    8*f0*f5*h0*h1*h2*h3 - 2*f0*f5*h1^3*h3 + 4*f0*f6*h0^2*h2*h3 -
    8*f0*f6*h0*h1^2*h3 - 4*f0*f6*h0*h1*h2^2 + 4*f0*f6*h1^3*h2 -
    2*f0*h0^2*h2*h3^3 - 4*f0*h0*h1*h2^2*h3^2 - 8*f1^2*f3*f6 - 2*f1^2*f3*h3^2 +
    2*f1^2*f5*h1*h3 + 8*f1^2*f6*h0*h3 - 4*f1^2*f6*h1*h2 + 2*f1^2*h0*h3^3 -
    8*f1*f3*f6*h0*h1 - 2*f1*f3*h0*h1*h3^2 - 2*f1*f4*h0^2*h3^2 +
    2*f1*f5*h0*h1^2*h3 + 6*f1*f6*h0^2*h1*h3 + 2*f1*f6*h0^2*h2^2 -
    4*f1*f6*h0*h1^2*h2 + 8*f2*f3*f6*h0^2 + 2*f2*f3*h0^2*h3^2 -
    2*f2*f5*h0^2*h1*h3 - 4*f2*f6*h0^3*h3 + 4*f2*f6*h0^2*h1*h2 - 2*f3*f5*h0^3*h3
    - 2*f3*f6*h0^3*h2 + 2*f5*f6*h0^4 - f5*h0^4*h3^2 -
    2*f5*h0^3*h1*h2*h3)*x1*x2^3 + (64*f0^2*f6^2 + 32*f0^2*f6*h3^2 + 4*f0^2*h3^4
    + 32*f0*f1*f5*f6 + 8*f0*f1*f5*h3^2 + 16*f0*f1*f6*h2*h3 + 4*f0*f1*h2*h3^3 -
    32*f0*f2*f6*h1*h3 - 8*f0*f2*h1*h3^3 + 48*f0*f3^2*f6 + 12*f0*f3^2*h3^2 -
    16*f0*f3*f5*h1*h3 - 16*f0*f3*f6*h0*h3 + 48*f0*f3*f6*h1*h2 - 4*f0*f3*h0*h3^3
    + 4*f0*f3*h1*h2*h3^2 + 16*f0*f4*f5*h0*h3 - 32*f0*f4*f6*h0*h2 +
    4*f0*f4*h1^2*h3^2 + 16*f0*f5*f6*h0*h1 + 12*f0*f5*h0*h1*h3^2 +
    4*f0*f5*h0*h2^2*h3 - 8*f0*f5*h1^2*h2*h3 + 32*f0*f6^2*h0^2 +
    16*f0*f6*h0^2*h3^2 - 8*f0*f6*h0*h2^3 - 8*f0*f6*h1^3*h3 + 12*f0*f6*h1^2*h2^2
    + 2*f0*h0^2*h3^4 + 4*f0*h0*h1*h2*h3^3 + 16*f1*f2*f6*h0*h3 + 4*f1*f2*h0*h3^3
    - 8*f1*f3*f5*h0*h3 - 16*f1*f3*f6*h0*h2 - 8*f1*f3*h0*h2*h3^2 +
    8*f1*f5*f6*h0^2 - 8*f1*f5*h0^2*h3^2 - 4*f1*f5*h0*h1*h2*h3 +
    12*f1*f6*h0^2*h2*h3 + 4*f1*f6*h0*h1^2*h3 - 8*f1*f6*h0*h1*h2^2 -
    2*f1*h0^2*h2*h3^3 - 4*f1*h0*h1*h2^2*h3^2 - 4*f2*f4*h0^2*h3^2 +
    4*f2*f6*h0^2*h2^2 + 12*f3^2*f6*h0^2 + 6*f3^2*h0^2*h3^2 - 8*f3*f5*h0^2*h1*h3
    - 4*f3*f6*h0^3*h3 + 4*f3*f6*h0^2*h1*h2 + f3*h0^3*h3^3 + 2*f3*h0^2*h1*h2*h3^2
    + 4*f4*f5*h0^3*h3 - 8*f4*f6*h0^3*h2 + 4*f5*f6*h0^3*h1 - 2*f5*h0^3*h1*h3^2 -
    4*f5*h0^2*h1^2*h2*h3 + 4*f6^2*h0^4 + 2*f6*h0^4*h3^2 +
    4*f6*h0^3*h1*h2*h3)*x1*x2^2*x3 + (64*f0*f2*f6 + 16*f0*f2*h3^2 + 8*f0*f3*f5 +
    4*f0*f3*h2*h3 - 8*f0*f4*h1*h3 + 4*f0*f5*h1*h2 + 16*f0*f6*h1^2 - 16*f1^2*f6 -
    4*f1^2*h3^2 + 4*f1*f4*h0*h3 - 2*f1*f5*h0*h2 - 16*f1*f6*h0*h1 + 16*f2*f6*h0^2
    + 2*f3*f5*h0^2 - 2*f3*h0^2*h2*h3 - h0^3*h2*h3^2 -
    2*h0^2*h1*h2^2*h3)*x1*x2^2*x4 + (64*f0*f1*f6^2 + 32*f0*f1*f6*h3^2 +
    4*f0*f1*h3^4 - 32*f0*f2*f5*f6 - 8*f0*f2*f5*h3^2 - 16*f0*f2*f6*h2*h3 -
    4*f0*f2*h2*h3^3 + 64*f0*f3*f4*f6 + 16*f0*f3*f4*h3^2 - 8*f0*f3*f5^2 -
    8*f0*f3*f5*h2*h3 - 8*f0*f3*f6*h1*h3 + 16*f0*f3*f6*h2^2 - 2*f0*f3*h1*h3^3 +
    2*f0*f3*h2^2*h3^2 - 8*f0*f4*f5*h1*h3 - 16*f0*f4*f6*h0*h3 + 32*f0*f4*f6*h1*h2
    - 4*f0*f4*h0*h3^3 + 4*f0*f4*h1*h2*h3^2 + 16*f0*f5^2*h0*h3 - 4*f0*f5^2*h1*h2
    - 24*f0*f5*f6*h0*h2 - 8*f0*f5*f6*h1^2 + 10*f0*f5*h0*h2*h3^2 +
    2*f0*f5*h1^2*h3^2 - 6*f0*f5*h1*h2^2*h3 + 32*f0*f6^2*h0*h1 +
    8*f0*f6*h0*h1*h3^2 - 16*f0*f6*h0*h2^2*h3 - 8*f0*f6*h1^2*h2*h3 +
    8*f0*f6*h1*h2^3 + 16*f1^2*f5*f6 + 4*f1^2*f5*h3^2 + 8*f1^2*f6*h2*h3 +
    2*f1^2*h2*h3^3 - 8*f1*f2*f6*h1*h3 - 2*f1*f2*h1*h3^3 + 8*f1*f3^2*f6 +
    2*f1*f3^2*h3^2 - 4*f1*f3*f5*h1*h3 - 8*f1*f3*f6*h0*h3 + 8*f1*f3*f6*h1*h2 -
    2*f1*f3*h0*h3^3 + 8*f1*f4*f5*h0*h3 - 24*f1*f4*f6*h0*h2 - 2*f1*f4*h0*h2*h3^2
    + 2*f1*f4*h1^2*h3^2 + 2*f1*f5^2*h0*h2 + 16*f1*f5*f6*h0*h1 +
    4*f1*f5*h0*h1*h3^2 + 4*f1*f5*h0*h2^2*h3 - 2*f1*f5*h1^2*h2*h3 +
    16*f1*f6^2*h0^2 + 8*f1*f6*h0^2*h3^2 + 8*f1*f6*h0*h1*h2*h3 - 6*f1*f6*h0*h2^3
    - 2*f1*f6*h1^3*h3 + 2*f1*f6*h1^2*h2^2 + f1*h0^2*h3^4 + 2*f1*h0*h1*h2*h3^3 +
    16*f2^2*f6*h0*h3 + 4*f2^2*h0*h3^3 - 8*f2*f3*f5*h0*h3 - 8*f2*f3*f6*h0*h2 -
    6*f2*f3*h0*h2*h3^2 - 4*f2*f4*h0*h1*h3^2 - 8*f2*f5*f6*h0^2 -
    12*f2*f5*h0^2*h3^2 - 4*f2*f5*h0*h1*h2*h3 + 12*f2*f6*h0^2*h2*h3 +
    4*f2*f6*h0*h1^2*h3 - 4*f2*f6*h0*h1*h2^2 - 2*f2*h0^2*h2*h3^3 -
    4*f2*h0*h1*h2^2*h3^2 + 4*f3^2*f6*h0*h1 + 4*f3^2*h0*h1*h3^2 +
    16*f3*f4*f6*h0^2 + 8*f3*f4*h0^2*h3^2 - 2*f3*f5^2*h0^2 - 6*f3*f5*h0^2*h2*h3 -
    4*f3*f5*h0*h1^2*h3 - 6*f3*f6*h0^2*h1*h3 + 6*f3*f6*h0^2*h2^2 +
    2*f3*f6*h0*h1^2*h2 + f3*h0^2*h1*h3^3 + 2*f3*h0*h1^2*h2*h3^2 +
    2*f4*f5*h0^2*h1*h3 - 4*f4*f6*h0^3*h3 - 4*f4*f6*h0^2*h1*h2 + 2*f4*h0^3*h3^3 +
    4*f4*h0^2*h1*h2*h3^2 + 4*f5^2*h0^3*h3 - 6*f5*f6*h0^3*h2 + 2*f5*f6*h0^2*h1^2
    - f5*h0^3*h2*h3^2 - f5*h0^2*h1^2*h3^2 - 2*f5*h0^2*h1*h2^2*h3 -
    2*f5*h0*h1^3*h2*h3 + 8*f6^2*h0^3*h1 + 2*f6*h0^3*h1*h3^2 +
    4*f6*h0^2*h1^2*h2*h3)*x1*x2*x3^2 + (80*f0*f3*f6 + 20*f0*f3*h3^2 -
    20*f0*f5*h1*h3 + 40*f0*f6*h1*h2 + 4*f1*f3*f5 + 2*f1*f3*h2*h3 - 4*f1*f4*h1*h3
    + 10*f1*f5*h0*h3 + 2*f1*f5*h1*h2 - 20*f1*f6*h0*h2 + 8*f2*f4*h0*h3 -
    4*f2*f5*h0*h2 - 6*f3^2*h0*h3 + 2*f3*f5*h0*h1 + 20*f3*f6*h0^2 +
    4*f3*h0^2*h3^2 - 6*f3*h0*h1*h2*h3 + 3*h0^3*h3^3 + 5*h0^2*h1*h2*h3^2 -
    2*h0*h1^2*h2^2*h3)*x1*x2*x3*x4 + (8*f0*f5 + 4*f0*h2*h3 - 2*f1*h1*h3 +
    4*f2*h0*h3 + 2*f5*h0^2)*x1*x2*x4^2 + (-64*f0*f2*f6^2 - 32*f0*f2*f6*h3^2 -
    4*f0*f2*h3^4 + 16*f0*f3*f5*f6 + 4*f0*f3*f5*h3^2 + 8*f0*f3*f6*h2*h3 +
    2*f0*f3*h2*h3^3 - 4*f0*f5^2*h1*h3 + 8*f0*f5*f6*h0*h3 + 8*f0*f5*f6*h1*h2 +
    2*f0*f5*h0*h3^3 - 2*f0*f5*h1*h2*h3^2 - 16*f0*f6^2*h0*h2 - 16*f0*f6^2*h1^2 -
    4*f0*f6*h0*h2*h3^2 - 4*f0*f6*h1^2*h3^2 + 4*f0*f6*h1*h2^2*h3 + 32*f1^2*f6^2 +
    16*f1^2*f6*h3^2 + 2*f1^2*h3^4 + 16*f1*f3*f4*f6 + 4*f1*f3*f4*h3^2 -
    4*f1*f3*f5^2 - 4*f1*f3*f5*h2*h3 - 8*f1*f3*f6*h1*h3 + 4*f1*f3*f6*h2^2 -
    2*f1*f3*h1*h3^3 - 8*f1*f4*f6*h0*h3 + 8*f1*f4*f6*h1*h2 - 2*f1*f4*h0*h3^3 +
    2*f1*f4*h1*h2*h3^2 + 6*f1*f5^2*h0*h3 - 2*f1*f5^2*h1*h2 - 8*f1*f5*f6*h0*h2 +
    4*f1*f5*h0*h2*h3^2 + 2*f1*f5*h1^2*h3^2 - 2*f1*f5*h1*h2^2*h3 +
    32*f1*f6^2*h0*h1 + 8*f1*f6*h0*h1*h3^2 - 6*f1*f6*h0*h2^2*h3 -
    4*f1*f6*h1^2*h2*h3 + 2*f1*f6*h1*h2^3 + 8*f2*f3*f6*h0*h3 + 2*f2*f3*h0*h3^3 -
    16*f2*f4*f6*h0*h2 - 4*f2*f4*h0*h2*h3^2 + 4*f2*f5^2*h0*h2 -
    4*f2*f5*h0*h1*h3^2 + 4*f2*f5*h0*h2^2*h3 - 16*f2*f6^2*h0^2 -
    4*f2*f6*h0^2*h3^2 + 8*f2*f6*h0*h1*h2*h3 - 4*f2*f6*h0*h2^3 - 4*f3^2*f5*h0*h3
    - 2*f3^2*h0*h2*h3^2 + 8*f3*f4*f6*h0*h1 + 6*f3*f4*h0*h1*h3^2 -
    2*f3*f5^2*h0*h1 + 4*f3*f5*f6*h0^2 - 4*f3*f5*h0^2*h3^2 - 8*f3*f5*h0*h1*h2*h3
    + 6*f3*f6*h0^2*h2*h3 - 2*f3*f6*h0*h1^2*h3 + 2*f3*f6*h0*h1*h2^2 -
    f3*h0^2*h2*h3^3 - 2*f3*h0*h1*h2^2*h3^2 - 4*f4*f6*h0^2*h1*h3 +
    2*f4*h0^2*h1*h3^3 + 4*f4*h0*h1^2*h2*h3^2 + 2*f5^2*h0^2*h1*h3 +
    2*f5*f6*h0^3*h3 - 2*f5*f6*h0^2*h1*h2 - f5*h0^3*h3^3 - 3*f5*h0^2*h1*h2*h3^2 -
    2*f5*h0*h1^2*h2^2*h3 - 4*f6^2*h0^3*h2 + 4*f6^2*h0^2*h1^2 + 2*f6*h0^3*h2*h3^2
    + 4*f6*h0^2*h1*h2^2*h3)*x1*x3^3 + (32*f0*f4*f6 + 8*f0*f4*h3^2 - 8*f0*f5^2 -
    8*f0*f5*h2*h3 + 8*f0*f6*h2^2 + 16*f1*f3*f6 + 4*f1*f3*h3^2 - 4*f1*f5*h1*h3 +
    8*f1*f6*h1*h2 + 8*f2*f5*h0*h3 - 16*f2*f6*h0*h2 - 8*f3*f4*h0*h3 +
    8*f3*f6*h0*h1 + 4*f3*h0*h1*h3^2 - 2*f3*h0*h2^2*h3 + 8*f4*f6*h0^2 -
    4*f4*h0^2*h3^2 - 8*f4*h0*h1*h2*h3 - 2*f5^2*h0^2 + 2*h0^2*h1*h3^3 -
    h0^2*h2^2*h3^2 + 4*h0*h1^2*h2*h3^2 - 2*h0*h1*h2^3*h3)*x1*x3^2*x4 + (16*f0*f6
    + 4*f0*h3^2 - 6*f3*h0*h3 + 4*f6*h0^2 - 4*h0^2*h3^2 -
    8*h0*h1*h2*h3)*x1*x3*x4^2 + (16*f0^2*f6^2 + 8*f0^2*f6*h3^2 + f0^2*h3^4 +
    16*f0*f2*f4*f6 + 4*f0*f2*f4*h3^2 - 4*f0*f2*f5^2 - 4*f0*f2*f5*h2*h3 +
    4*f0*f2*f6*h2^2 - 12*f0*f3*f6*h0*h3 - 3*f0*f3*h0*h3^3 + 4*f0*f4*f6*h1^2 +
    f0*f4*h1^2*h3^2 - f0*f5^2*h1^2 + 2*f0*f5*h0*h1*h3^2 - f0*f5*h1^2*h2*h3 +
    8*f0*f6^2*h0^2 - 2*f0*f6*h0^2*h3^2 - 12*f0*f6*h0*h1*h2*h3 + f0*f6*h1^2*h2^2
    - f0*h0^2*h3^4 - 2*f0*h0*h1*h2*h3^3 - 4*f1^2*f4*f6 - f1^2*f4*h3^2 +
    f1^2*f5^2 + f1^2*f5*h2*h3 - f1^2*f6*h2^2 - 4*f1*f4*f6*h0*h1 -
    f1*f4*h0*h1*h3^2 + f1*f5^2*h0*h1 - f1*f5*h0^2*h3^2 + f1*f5*h0*h1*h2*h3 +
    2*f1*f6*h0^2*h2*h3 - f1*f6*h0*h1*h2^2 + 4*f2*f4*f6*h0^2 + f2*f4*h0^2*h3^2 -
    f2*f5^2*h0^2 - f2*f5*h0^2*h2*h3 + f2*f6*h0^2*h2^2 - 3*f3*f6*h0^3*h3 +
    f6^2*h0^4 - f6*h0^4*h3^2 - 2*f6*h0^3*h1*h2*h3)*x2^4 + (32*f0*f1*f6^2 +
    16*f0*f1*f6*h3^2 + 2*f0*f1*h3^4 + 32*f0*f3*f4*f6 + 8*f0*f3*f4*h3^2 -
    8*f0*f3*f5^2 - 8*f0*f3*f5*h2*h3 - 8*f0*f3*f6*h1*h3 + 8*f0*f3*f6*h2^2 -
    2*f0*f3*h1*h3^3 - 16*f0*f4*f6*h0*h3 + 16*f0*f4*f6*h1*h2 - 4*f0*f4*h0*h3^3 +
    4*f0*f4*h1*h2*h3^2 + 8*f0*f5^2*h0*h3 - 4*f0*f5^2*h1*h2 - 8*f0*f5*f6*h0*h2 +
    6*f0*f5*h0*h2*h3^2 + 2*f0*f5*h1^2*h3^2 - 4*f0*f5*h1*h2^2*h3 +
    16*f0*f6^2*h0*h1 + 4*f0*f6*h0*h1*h3^2 - 8*f0*f6*h0*h2^2*h3 -
    4*f0*f6*h1^2*h2*h3 + 4*f0*f6*h1*h2^3 - 8*f1*f3*f6*h0*h3 - 2*f1*f3*h0*h3^3 -
    8*f1*f4*f6*h0*h2 - 2*f1*f4*h0*h2*h3^2 + 2*f1*f5^2*h0*h2 + 2*f1*f5*h0*h2^2*h3
    + 8*f1*f6^2*h0^2 - 2*f1*f6*h0^2*h3^2 - 8*f1*f6*h0*h1*h2*h3 - 2*f1*f6*h0*h2^3
    - f1*h0^2*h3^4 - 2*f1*h0*h1*h2*h3^3 - 2*f2*f5*h0^2*h3^2 + 4*f2*f6*h0^2*h2*h3
    + 8*f3*f4*f6*h0^2 + 2*f3*f4*h0^2*h3^2 - 2*f3*f5^2*h0^2 - 2*f3*f5*h0^2*h2*h3
    - 6*f3*f6*h0^2*h1*h3 + 2*f3*f6*h0^2*h2^2 - 4*f4*f6*h0^3*h3 + 2*f5^2*h0^3*h3
    - 2*f5*f6*h0^3*h2 + 4*f6^2*h0^3*h1 - 2*f6*h0^3*h1*h3^2 -
    4*f6*h0^2*h1^2*h2*h3)*x2^3*x3 + (16*f0*f3*f6 + 4*f0*f3*h3^2 - 4*f0*f5*h1*h3
    + 8*f0*f6*h1*h2 + 2*f1*f5*h0*h3 - 4*f1*f6*h0*h2 + 4*f3*f6*h0^2 -
    2*f3*h0^2*h3^2 - h0^3*h3^3 - 2*h0^2*h1*h2*h3^2)*x2^3*x4 + (32*f0*f2*f6^2 +
    16*f0*f2*f6*h3^2 + 2*f0*f2*h3^4 - 24*f0*f3*f5*f6 - 6*f0*f3*f5*h3^2 -
    12*f0*f3*f6*h2*h3 - 3*f0*f3*h2*h3^3 + 64*f0*f4^2*f6 + 16*f0*f4^2*h3^2 -
    16*f0*f4*f5^2 - 16*f0*f4*f5*h2*h3 + 32*f0*f4*f6*h2^2 + 4*f0*f4*h2^2*h3^2 +
    6*f0*f5^2*h1*h3 - 4*f0*f5^2*h2^2 + 4*f0*f5*f6*h0*h3 - 12*f0*f5*f6*h1*h2 +
    f0*f5*h0*h3^3 + 3*f0*f5*h1*h2*h3^2 - 4*f0*f5*h2^3*h3 - 8*f0*f6^2*h0*h2 +
    8*f0*f6^2*h1^2 - 2*f0*f6*h0*h2*h3^2 + 2*f0*f6*h1^2*h3^2 - 6*f0*f6*h1*h2^2*h3
    + 4*f0*f6*h2^4 + 16*f1^2*f6^2 + 8*f1^2*f6*h3^2 + f1^2*h3^4 + 8*f1*f3*f4*f6 +
    2*f1*f3*f4*h3^2 - 2*f1*f3*f5^2 - 2*f1*f3*f5*h2*h3 - 4*f1*f3*f6*h1*h3 +
    2*f1*f3*f6*h2^2 - f1*f3*h1*h3^3 - 20*f1*f4*f6*h0*h3 + 4*f1*f4*f6*h1*h2 -
    5*f1*f4*h0*h3^3 + f1*f4*h1*h2*h3^2 + 7*f1*f5^2*h0*h3 - f1*f5^2*h1*h2 -
    4*f1*f5*f6*h0*h2 + 6*f1*f5*h0*h2*h3^2 + f1*f5*h1^2*h3^2 - f1*f5*h1*h2^2*h3 +
    16*f1*f6^2*h0*h1 + 4*f1*f6*h0*h1*h3^2 - 7*f1*f6*h0*h2^2*h3 -
    2*f1*f6*h1^2*h2*h3 + f1*f6*h1*h2^3 - 4*f2*f3*f6*h0*h3 - f2*f3*h0*h3^3 -
    8*f2*f4*f6*h0*h2 - 2*f2*f4*h0*h2*h3^2 + 2*f2*f5^2*h0*h2 - 2*f2*f5*h0*h1*h3^2
    + 2*f2*f5*h0*h2^2*h3 + 8*f2*f6^2*h0^2 - 2*f2*f6*h0^2*h3^2 -
    4*f2*f6*h0*h1*h2*h3 - 2*f2*f6*h0*h2^3 - f2*h0^2*h3^4 - 2*f2*h0*h1*h2*h3^3 +
    4*f3*f4*f6*h0*h1 + f3*f4*h0*h1*h3^2 - f3*f5^2*h0*h1 - 6*f3*f5*f6*h0^2 -
    2*f3*f5*h0^2*h3^2 - f3*f5*h0*h1*h2*h3 + f3*f6*h0^2*h2*h3 -
    3*f3*f6*h0*h1^2*h3 + f3*f6*h0*h1*h2^2 + 16*f4^2*f6*h0^2 + 4*f4^2*h0^2*h3^2 -
    4*f4*f5^2*h0^2 - 4*f4*f5*h0^2*h2*h3 - 10*f4*f6*h0^2*h1*h3 +
    4*f4*f6*h0^2*h2^2 + 5*f5^2*h0^2*h1*h3 + f5*f6*h0^3*h3 - 5*f5*f6*h0^2*h1*h2 +
    f5*h0^3*h3^3 + 2*f5*h0^2*h1*h2*h3^2 - 2*f6^2*h0^3*h2 + 6*f6^2*h0^2*h1^2 -
    2*f6*h0^3*h2*h3^2 - f6*h0^2*h1^2*h3^2 - 4*f6*h0^2*h1*h2^2*h3 -
    2*f6*h0*h1^3*h2*h3)*x2^2*x3^2 + (64*f0*f4*f6 + 16*f0*f4*h3^2 - 16*f0*f5^2 -
    16*f0*f5*h2*h3 + 16*f0*f6*h2^2 + 8*f1*f3*f6 + 2*f1*f3*h3^2 - 2*f1*f5*h1*h3 +
    4*f1*f6*h1*h2 + 4*f2*f5*h0*h3 - 8*f2*f6*h0*h2 + 4*f3*f6*h0*h1 -
    2*f3*h0*h1*h3^2 + 16*f4*f6*h0^2 - 4*f5^2*h0^2 - h0^2*h1*h3^3 -
    2*h0*h1^2*h2*h3^2)*x2^2*x3*x4 + (8*f0*f6 + 2*f0*h3^2 + 3*f3*h0*h3 +
    2*f6*h0^2 + h0^2*h3^2 + 2*h0*h1*h2*h3)*x2^2*x4^2 + (-32*f0*f3*f6^2 -
    16*f0*f3*f6*h3^2 - 2*f0*f3*h3^4 + 32*f0*f4*f5*f6 + 8*f0*f4*f5*h3^2 +
    16*f0*f4*f6*h2*h3 + 4*f0*f4*h2*h3^3 - 8*f0*f5^3 - 12*f0*f5^2*h2*h3 +
    8*f0*f5*f6*h1*h3 + 8*f0*f5*f6*h2^2 + 2*f0*f5*h1*h3^3 - 4*f0*f5*h2^2*h3^2 -
    16*f0*f6^2*h1*h2 - 4*f0*f6*h1*h2*h3^2 + 4*f0*f6*h2^3*h3 + 32*f1*f2*f6^2 +
    16*f1*f2*f6*h3^2 + 2*f1*f2*h3^4 - 16*f1*f3*f5*f6 - 4*f1*f3*f5*h3^2 -
    8*f1*f3*f6*h2*h3 - 2*f1*f3*h2*h3^3 + 32*f1*f4^2*f6 + 8*f1*f4^2*h3^2 -
    8*f1*f4*f5^2 - 8*f1*f4*f5*h2*h3 - 8*f1*f4*f6*h1*h3 + 16*f1*f4*f6*h2^2 -
    2*f1*f4*h1*h3^3 + 2*f1*f4*h2^2*h3^2 + 6*f1*f5^2*h1*h3 - 2*f1*f5^2*h2^2 -
    8*f1*f5*f6*h1*h2 + 4*f1*f5*h1*h2*h3^2 - 2*f1*f5*h2^3*h3 + 8*f1*f6^2*h1^2 +
    2*f1*f6*h1^2*h3^2 - 6*f1*f6*h1*h2^2*h3 + 2*f1*f6*h2^4 - 16*f2*f4*f6*h0*h3 -
    4*f2*f4*h0*h3^3 + 4*f2*f5^2*h0*h3 + 4*f2*f5*h0*h2*h3^2 + 16*f2*f6^2*h0*h1 +
    4*f2*f6*h0*h1*h3^2 - 4*f2*f6*h0*h2^2*h3 - 8*f3*f4*f6*h0*h2 -
    2*f3*f4*h0*h2*h3^2 + 2*f3*f5^2*h0*h2 - 8*f3*f5*f6*h0*h1 - 4*f3*f5*h0*h1*h3^2
    + 2*f3*f5*h0*h2^2*h3 - 8*f3*f6^2*h0^2 - 6*f3*f6*h0^2*h3^2 -
    4*f3*f6*h0*h1*h2*h3 - 2*f3*f6*h0*h2^3 - f3*h0^2*h3^4 - 2*f3*h0*h1*h2*h3^3 +
    16*f4^2*f6*h0*h1 + 4*f4^2*h0*h1*h3^2 - 4*f4*f5^2*h0*h1 + 8*f4*f5*f6*h0^2 +
    2*f4*f5*h0^2*h3^2 - 4*f4*f5*h0*h1*h2*h3 - 8*f4*f6*h0*h1^2*h3 +
    4*f4*f6*h0*h1*h2^2 - 2*f5^3*h0^2 - 2*f5^2*h0^2*h2*h3 + 4*f5^2*h0*h1^2*h3 +
    2*f5*f6*h0^2*h1*h3 + 2*f5*f6*h0^2*h2^2 - 4*f5*f6*h0*h1^2*h2 +
    f5*h0^2*h1*h3^3 + 2*f5*h0*h1^2*h2*h3^2 - 4*f6^2*h0^2*h1*h2 + 4*f6^2*h0*h1^3
    - 2*f6*h0^2*h1*h2*h3^2 - 4*f6*h0*h1^2*h2^2*h3)*x2*x3^3 + (48*f1*f4*f6 +
    12*f1*f4*h3^2 - 12*f1*f5^2 - 12*f1*f5*h2*h3 + 12*f1*f6*h2^2 + 2*f3*f5*h0*h3
    - 12*f3*f6*h0*h2 - 2*f3*h0*h2*h3^2 + 24*f4*f6*h0*h1 - 6*f5^2*h0*h1 -
    2*f5*h0^2*h3^2 - 4*f5*h0*h1*h2*h3 - h0^2*h2*h3^3 -
    2*h0*h1*h2^2*h3^2)*x2*x3^2*x4 + (8*f1*f6 + 2*f1*h3^2 + 4*f4*h0*h3 -
    2*f5*h0*h2 + 4*f6*h0*h1)*x2*x3*x4^2 + (16*f0*f4*f6^2 + 8*f0*f4*f6*h3^2 +
    f0*f4*h3^4 - 4*f0*f5^2*f6 - f0*f5^2*h3^2 - 4*f0*f5*f6*h2*h3 - f0*f5*h2*h3^3
    + 4*f0*f6^2*h2^2 + f0*f6*h2^2*h3^2 - 16*f1*f3*f6^2 - 8*f1*f3*f6*h3^2 -
    f1*f3*h3^4 + 8*f1*f4*f5*f6 + 2*f1*f4*f5*h3^2 + 4*f1*f4*f6*h2*h3 +
    f1*f4*h2*h3^3 - 2*f1*f5^3 - 3*f1*f5^2*h2*h3 + 4*f1*f5*f6*h1*h3 +
    2*f1*f5*f6*h2^2 + f1*f5*h1*h3^3 - f1*f5*h2^2*h3^2 - 8*f1*f6^2*h1*h2 -
    2*f1*f6*h1*h2*h3^2 + f1*f6*h2^3*h3 + 16*f2^2*f6^2 + 8*f2^2*f6*h3^2 +
    f2^2*h3^4 - 8*f2*f3*f5*f6 - 2*f2*f3*f5*h3^2 - 4*f2*f3*f6*h2*h3 -
    f2*f3*h2*h3^3 + 16*f2*f4^2*f6 + 4*f2*f4^2*h3^2 - 4*f2*f4*f5^2 -
    4*f2*f4*f5*h2*h3 - 8*f2*f4*f6*h1*h3 + 8*f2*f4*f6*h2^2 - 2*f2*f4*h1*h3^3 +
    f2*f4*h2^2*h3^2 + 4*f2*f5^2*h1*h3 - f2*f5^2*h2^2 - 4*f2*f5*f6*h0*h3 -
    4*f2*f5*f6*h1*h2 - f2*f5*h0*h3^3 + 3*f2*f5*h1*h2*h3^2 - f2*f5*h2^3*h3 +
    8*f2*f6^2*h0*h2 + 8*f2*f6^2*h1^2 + 2*f2*f6*h0*h2*h3^2 + 2*f2*f6*h1^2*h3^2 -
    4*f2*f6*h1*h2^2*h3 + f2*f6*h2^4 - 4*f3^2*f4*f6 - f3^2*f4*h3^2 + f3^2*f5^2 +
    f3^2*f5*h2*h3 + 4*f3^2*f6*h1*h3 - f3^2*f6*h2^2 + f3^2*h1*h3^3 -
    8*f3*f4*f6*h0*h3 - 4*f3*f4*f6*h1*h2 - 2*f3*f4*h0*h3^3 - f3*f4*h1*h2*h3^2 +
    2*f3*f5^2*h0*h3 + f3*f5^2*h1*h2 - 2*f3*f5*f6*h1^2 + 2*f3*f5*h0*h2*h3^2 -
    2*f3*f5*h1^2*h3^2 + f3*f5*h1*h2^2*h3 - 8*f3*f6^2*h0*h1 - 2*f3*f6*h0*h1*h3^2
    - 2*f3*f6*h0*h2^2*h3 + 3*f3*f6*h1^2*h2*h3 - f3*f6*h1*h2^3 + 4*f4^2*f6*h1^2 +
    f4^2*h1^2*h3^2 - f4*f5^2*h1^2 + 4*f4*f5*f6*h0*h1 + f4*f5*h0*h1*h3^2 -
    f4*f5*h1^2*h2*h3 + 4*f4*f6^2*h0^2 - 3*f4*f6*h0^2*h3^2 - 8*f4*f6*h0*h1*h2*h3
    - 2*f4*f6*h1^3*h3 + f4*f6*h1^2*h2^2 - f4*h0^2*h3^4 - 2*f4*h0*h1*h2*h3^3 -
    f5^3*h0*h1 - f5^2*f6*h0^2 + f5^2*h0^2*h3^2 + f5^2*h0*h1*h2*h3 + f5^2*h1^3*h3
    - f5*f6*h0^2*h2*h3 + f5*f6*h0*h1^2*h3 + f5*f6*h0*h1*h2^2 - f5*f6*h1^3*h2 +
    f5*h0^2*h2*h3^3 + 2*f5*h0*h1*h2^2*h3^2 + f6^2*h0^2*h2^2 - 2*f6^2*h0*h1^2*h2
    + f6^2*h1^4 - f6*h0^2*h2^2*h3^2 - 2*f6*h0*h1*h2^3*h3)*x3^4 + (32*f2*f4*f6 +
    8*f2*f4*h3^2 - 8*f2*f5^2 - 8*f2*f5*h2*h3 + 8*f2*f6*h2^2 - 8*f3^2*f6 -
    2*f3^2*h3^2 + 4*f3*f5*h1*h3 - 8*f3*f6*h0*h3 - 8*f3*f6*h1*h2 - 2*f3*h0*h3^3 +
    8*f4*f6*h1^2 - 2*f5^2*h1^2 - 4*f6*h0^2*h3^2 - 8*f6*h0*h1*h2*h3 - h0^2*h3^4 -
    2*h0*h1*h2*h3^3)*x3^3*x4 + (8*f2*f6 + 2*f2*h3^2 - 2*f3*f5 - f3*h2*h3 +
    2*f4*h1*h3 + f5*h0*h3 - f5*h1*h2 - 2*f6*h0*h2 + 2*f6*h1^2)*x3^2*x4^2 + x4^4,
    (x2^2-4*x1*x3)*x4^2
        +  (-4*f2*x1^2*x3-4*f6*x3^3-4*f0*x1^3
    -h3*h1*(x2^2*x3-2*x1*x3^2)-x2*x3^2*h2*h3-x1*x2*x3*h1*h2 -x1^2*x3*h1^2-2*x1*x2*x3*f3-h0^2*x1^3-x1*x3^2*h2^2 -2*x2*x3^2*f5-x3^3*h3^2
    -4*f4*x1*x3^2-2*f1*x1^2*x2-h0*h1*x1^2*x2-h0*h2*(x1*x2^2-2*x1^2*x3)-h0*h3*(x2^3-3*x1*x2*x3))*x4
        +  (-4*f0*f2 - f0*h1^2 + f1^2 + f1*h0*h1
    - f2*h0^2)*x1^4 + (-4*f0*f3 - 2*f0*h1*h2 +
    f1*h0*h2 - f3*h0^2)*x1^3*x2 + (2*f0*h1*h3 - 2*f1*f3 - f1*h0*h3 - f1*h1*h2 +
    2*f2*h0*h2 - f3*h0*h1)*x1^3*x3 + (-4*f0*f4 - 2*f0*h1*h3 - f0*h2^2 + f1*h0*h3
    - f4*h0^2)*x1^2*x2^2 + (4*f0*f5 + 2*f0*h2*h3 - 4*f1*f4 - f1*h1*h3 - f1*h2^2
    + 2*f2*h0*h3 + f3*h0*h2 - 2*f4*h0*h1 + f5*h0^2)*x1^2*x2*x3 + (-4*f0*f6 -
    f0*h3^2 + 2*f1*f5 + f1*h2*h3 - 4*f2*f4 - f2*h2^2 + f3^2 + f3*h0*h3 +
    f3*h1*h2 - f4*h1^2 + f5*h0*h1 - f6*h0^2)*x1^2*x3^2 + (-4*f0*f5 - 2*f0*h2*h3
    - f5*h0^2)*x1*x2^3 + (8*f0*f6 + 2*f0*h3^2 - 4*f1*f5 - 2*f1*h2*h3 + f3*h0*h3
    - 2*f5*h0*h1 + 2*f6*h0^2)*x1*x2^2*x3 + (4*f1*f6 + f1*h3^2 - 4*f2*f5 -
    2*f2*h2*h3 + f3*h1*h3 + 2*f4*h0*h3 - f5*h0*h2 - f5*h1^2 +
    2*f6*h0*h1)*x1*x2*x3^2 + (-2*f3*f5 - f3*h2*h3 + 2*f4*h1*h3 - f5*h0*h3 -
    f5*h1*h2 + 2*f6*h0*h2)*x1*x3^3 + (-4*f0*f6 - f0*h3^2 - f6*h0^2)*x2^4 +
    (-4*f1*f6 - f1*h3^2 - 2*f6*h0*h1)*x2^3*x3 + (-4*f2*f6 - f2*h3^2 + f5*h0*h3 -
    2*f6*h0*h2 - f6*h1^2)*x2^2*x3^2 + (-4*f3*f6 - f3*h3^2 + f5*h1*h3 -
    2*f6*h1*h2)*x2*x3^3 + (-4*f4*f6 - f4*h3^2 + f5^2 + f5*h2*h3 - f6*h2^2)*x3^4]

    where f0 := Coefficient(f, 0)
    where f1 := Coefficient(f, 1)
    where f2 := Coefficient(f, 2)
    where f3 := Coefficient(f, 3)
    where f4 := Coefficient(f, 4)
    where f5 := Coefficient(f, 5)
    where f6 := Coefficient(f, 6)
    where h0 := Coefficient(h, 0)
    where h1 := Coefficient(h, 1)
    where h2 := Coefficient(h, 2)
    where h3 := Coefficient(h, 3)
    where x1 := x[1] where x2 := x[2] where x3 := x[3] where x4 := x[4]
   >;


BBM := func< f, h, x, y | [[BBB11, BBB12, BBB13, BBB14],
                        [BBB12, BBB22, BBB23, BBB24],
                        [BBB13, BBB23, BBB33, BBB34],
                        [BBB14, BBB24, BBB34, BBB44]]
        where BBB11 := h eq 0 select
        -4*f0*f6*x1^2*y2^2 - 4*f1*f6*x1^2*y2*y3 - 4*f2*f6*x1^2*y3^2 + x1^2*y4^2 +
    8*f0*f6*x1*x2*y1*y2 + 4*f1*f6*x1*x2*y1*y3 - 4*f3*f6*x1*x2*y3^2 -
    2*f5*x1*x2*y3*y4 + 4*f1*f6*x1*x3*y1*y2 + 8*f2*f6*x1*x3*y1*y3 +
    4*f3*f6*x1*x3*y2*y3 + 2*f5*x1*x3*y2*y4 + 4*f6*x1*x3*y3*y4 - 2*x1*x4*y1*y4 -
    4*f6*x1*x4*y3^2 - 4*f0*f6*x2^2*y1^2 + (-4*f4*f6 + f5^2)*x2^2*y3^2 -
    4*f6*x2^2*y3*y4 - 4*f1*f6*x2*x3*y1^2 + 4*f3*f6*x2*x3*y1*y3 + (8*f4*f6 -
    2*f5^2)*x2*x3*y2*y3 + 4*f6*x2*x3*y2*y4 + 2*f5*x2*x4*y1*y3 + 4*f6*x2*x4*y2*y3
    - 4*f2*f6*x3^2*y1^2 - 4*f3*f6*x3^2*y1*y2 - 4*f6*x3^2*y1*y4 + (-4*f4*f6 +
    f5^2)*x3^2*y2^2 - 2*f5*x3*x4*y1*y2 + 4*f6*x3*x4*y1*y3 - 4*f6*x3*x4*y2^2 +
    x4^2*y1^2
                        else
-4*f0*f6*x1^2*y2^2 + 8*f0*f6*x1*x2*y1*y2 - 4*f0*f6*x2^2*y1^2 - f0*h3^2*x1^2*y2^2 + 2*f0*h3^2*x1*x2*y1*y2 - f0*h3^2*x2^2*y1^2 - 4*f1*f6*x1^2*y2*y3 +
4*f1*f6*x1*x2*y1*y3 + 4*f1*f6*x1*x3*y1*y2 - 4*f1*f6*x2*x3*y1^2 - f1*h3^2*x1^2*y2*y3 + f1*h3^2*x1*x2*y1*y3 + f1*h3^2*x1*x3*y1*y2 - f1*h3^2*x2*x3*y1^2 -
4*f2*f6*x1^2*y3^2 + 8*f2*f6*x1*x3*y1*y3 - 4*f2*f6*x3^2*y1^2 - f2*h3^2*x1^2*y3^2 + 2*f2*h3^2*x1*x3*y1*y3 - f2*h3^2*x3^2*y1^2 - 4*f3*f6*x1*x2*y3^2 +
4*f3*f6*x1*x3*y2*y3 + 4*f3*f6*x2*x3*y1*y3 - 4*f3*f6*x3^2*y1*y2 - f3*h3^2*x1*x2*y3^2 + f3*h3^2*x1*x3*y2*y3 + f3*h3^2*x2*x3*y1*y3 - f3*h3^2*x3^2*y1*y2 -
4*f4*f6*x2^2*y3^2 + 8*f4*f6*x2*x3*y2*y3 - 4*f4*f6*x3^2*y2^2 - f4*h3^2*x2^2*y3^2 + 2*f4*h3^2*x2*x3*y2*y3 - f4*h3^2*x3^2*y2^2 + f5^2*x2^2*y3^2 -
2*f5^2*x2*x3*y2*y3 + f5^2*x3^2*y2^2 + f5*h0*h3*x1*x2*y2*y3 - f5*h0*h3*x1*x3*y2^2 - f5*h0*h3*x2^2*y1*y3 + f5*h0*h3*x2*x3*y1*y2 + f5*h1*h3*x1*x2*y3^2 -
f5*h1*h3*x1*x3*y2*y3 - f5*h1*h3*x2*x3*y1*y3 + f5*h1*h3*x3^2*y1*y2 + f5*h2*h3*x2^2*y3^2 - 2*f5*h2*h3*x2*x3*y2*y3 + f5*h2*h3*x3^2*y2^2 - 2*f5*x1*x2*y3*y4 +
2*f5*x1*x3*y2*y4 + 2*f5*x2*x4*y1*y3 - 2*f5*x3*x4*y1*y2 - f6*h0^2*x1^2*y2^2 + 2*f6*h0^2*x1*x2*y1*y2 - f6*h0^2*x2^2*y1^2 - 2*f6*h0*h1*x1^2*y2*y3 +
2*f6*h0*h1*x1*x2*y1*y3 + 2*f6*h0*h1*x1*x3*y1*y2 - 2*f6*h0*h1*x2*x3*y1^2 - 2*f6*h0*h2*x1*x2*y2*y3 + 2*f6*h0*h2*x1*x3*y2^2 + 2*f6*h0*h2*x2^2*y1*y3 -
2*f6*h0*h2*x2*x3*y1*y2 - f6*h1^2*x1^2*y3^2 + 2*f6*h1^2*x1*x3*y1*y3 - f6*h1^2*x3^2*y1^2 - 2*f6*h1*h2*x1*x2*y3^2 + 2*f6*h1*h2*x1*x3*y2*y3 +
2*f6*h1*h2*x2*x3*y1*y3 - 2*f6*h1*h2*x3^2*y1*y2 - f6*h2^2*x2^2*y3^2 + 2*f6*h2^2*x2*x3*y2*y3 - f6*h2^2*x3^2*y2^2 + 4*f6*x1*x3*y3*y4 - 4*f6*x1*x4*y3^2 -
4*f6*x2^2*y3*y4 + 4*f6*x2*x3*y2*y4 + 4*f6*x2*x4*y2*y3 - 4*f6*x3^2*y1*y4 + 4*f6*x3*x4*y1*y3 - 4*f6*x3*x4*y2^2 - h0*h3*x1^2*y2*y4 + h0*h3*x1*x2*y1*y4 +
h0*h3*x1*x4*y1*y2 - h0*h3*x2*x4*y1^2 - h1*h3*x1^2*y3*y4 + h1*h3*x1*x3*y1*y4 + h1*h3*x1*x4*y1*y3 - h1*h3*x3*x4*y1^2 - h2*h3*x1*x2*y3*y4 +
h2*h3*x1*x3*y2*y4 + h2*h3*x2*x4*y1*y3 - h2*h3*x3*x4*y1*y2 + h3^2*x1*x3*y3*y4 - h3^2*x1*x4*y3^2 - h3^2*x2^2*y3*y4 + h3^2*x2*x3*y2*y4 + h3^2*x2*x4*y2*y3 -
h3^2*x3^2*y1*y4 + h3^2*x3*x4*y1*y3 - h3^2*x3*x4*y2^2 + x1^2*y4^2 - 2*x1*x4*y1*y4 + x4^2*y1^2
        where BBB12 := h eq 0 select
        4*f0*f5*x1^2*y2^2 + (8*f0*f6 + 4*f1*f5)*x1^2*y2*y3 + (4*f1*f6 +
    4*f2*f5)*x1^2*y3^2 + 2*f3*x1^2*y3*y4 - 8*f0*f5*x1*x2*y1*y2 + (-8*f0*f6 -
    4*f1*f5)*x1*x2*y1*y3 + 4*f1*f6*x1*x2*y2*y3 + (8*f2*f6 + 2*f3*f5)*x1*x2*y3^2
    + 4*f4*x1*x2*y3*y4 + 2*x1*x2*y4^2 + (-8*f0*f6 - 4*f1*f5)*x1*x3*y1*y2 +
    (-8*f1*f6 - 8*f2*f5)*x1*x3*y1*y3 - 2*f3*x1*x3*y1*y4 - 4*f1*f6*x1*x3*y2^2 +
    (-8*f2*f6 - 2*f3*f5)*x1*x3*y2*y3 - 4*f4*x1*x3*y2*y4 - 4*f5*x1*x3*y3*y4 -
    2*f3*x1*x4*y1*y3 - 2*x1*x4*y2*y4 + 4*f5*x1*x4*y3^2 + 4*f0*f5*x2^2*y1^2 -
    4*f1*f6*x2^2*y1*y3 + 4*f3*f6*x2^2*y3^2 + 2*f5*x2^2*y3*y4 + (8*f0*f6 +
    4*f1*f5)*x2*x3*y1^2 + 4*f1*f6*x2*x3*y1*y2 + (-8*f2*f6 - 2*f3*f5)*x2*x3*y1*y3
    - 8*f3*f6*x2*x3*y2*y3 - 2*f5*x2*x3*y2*y4 - 4*f6*x2*x3*y3*y4 -
    4*f4*x2*x4*y1*y3 - 2*x2*x4*y1*y4 - 2*f5*x2*x4*y2*y3 + 4*f6*x2*x4*y3^2 +
    (4*f1*f6 + 4*f2*f5)*x3^2*y1^2 + (8*f2*f6 + 2*f3*f5)*x3^2*y1*y2 +
    4*f5*x3^2*y1*y4 + 4*f3*f6*x3^2*y2^2 + 4*f6*x3^2*y2*y4 + 2*f3*x3*x4*y1^2 +
    4*f4*x3*x4*y1*y2 - 4*f5*x3*x4*y1*y3 + 2*f5*x3*x4*y2^2 - 4*f6*x3*x4*y2*y3 +
    2*x4^2*y1*y2
                      else
4*f0*f5*x1^2*y2^2 - 8*f0*f5*x1*x2*y1*y2 + 4*f0*f5*x2^2*y1^2 + 8*f0*f6*x1^2*y2*y3 - 8*f0*f6*x1*x2*y1*y3 - 8*f0*f6*x1*x3*y1*y2 + 8*f0*f6*x2*x3*y1^2 +
2*f0*h2*h3*x1^2*y2^2 - 4*f0*h2*h3*x1*x2*y1*y2 + 2*f0*h2*h3*x2^2*y1^2 + 2*f0*h3^2*x1^2*y2*y3 - 2*f0*h3^2*x1*x2*y1*y3 - 2*f0*h3^2*x1*x3*y1*y2 +
2*f0*h3^2*x2*x3*y1^2 + 4*f1*f5*x1^2*y2*y3 - 4*f1*f5*x1*x2*y1*y3 - 4*f1*f5*x1*x3*y1*y2 + 4*f1*f5*x2*x3*y1^2 + 4*f1*f6*x1^2*y3^2 + 4*f1*f6*x1*x2*y2*y3 -
8*f1*f6*x1*x3*y1*y3 - 4*f1*f6*x1*x3*y2^2 - 4*f1*f6*x2^2*y1*y3 + 4*f1*f6*x2*x3*y1*y2 + 4*f1*f6*x3^2*y1^2 + 2*f1*h2*h3*x1^2*y2*y3 - 2*f1*h2*h3*x1*x2*y1*y3
- 2*f1*h2*h3*x1*x3*y1*y2 + 2*f1*h2*h3*x2*x3*y1^2 + f1*h3^2*x1^2*y3^2 + f1*h3^2*x1*x2*y2*y3 - 2*f1*h3^2*x1*x3*y1*y3 - f1*h3^2*x1*x3*y2^2 -
f1*h3^2*x2^2*y1*y3 + f1*h3^2*x2*x3*y1*y2 + f1*h3^2*x3^2*y1^2 + 4*f2*f5*x1^2*y3^2 - 8*f2*f5*x1*x3*y1*y3 + 4*f2*f5*x3^2*y1^2 + 8*f2*f6*x1*x2*y3^2 -
8*f2*f6*x1*x3*y2*y3 - 8*f2*f6*x2*x3*y1*y3 + 8*f2*f6*x3^2*y1*y2 + 2*f2*h2*h3*x1^2*y3^2 - 4*f2*h2*h3*x1*x3*y1*y3 + 2*f2*h2*h3*x3^2*y1^2 +
2*f2*h3^2*x1*x2*y3^2 - 2*f2*h3^2*x1*x3*y2*y3 - 2*f2*h3^2*x2*x3*y1*y3 + 2*f2*h3^2*x3^2*y1*y2 + 2*f3*f5*x1*x2*y3^2 - 2*f3*f5*x1*x3*y2*y3 -
2*f3*f5*x2*x3*y1*y3 + 2*f3*f5*x3^2*y1*y2 + 4*f3*f6*x2^2*y3^2 - 8*f3*f6*x2*x3*y2*y3 + 4*f3*f6*x3^2*y2^2 - f3*h0*h3*x1^2*y2*y3 + f3*h0*h3*x1*x2*y1*y3 +
f3*h0*h3*x1*x3*y1*y2 - f3*h0*h3*x2*x3*y1^2 - f3*h1*h3*x1^2*y3^2 + 2*f3*h1*h3*x1*x3*y1*y3 - f3*h1*h3*x3^2*y1^2 + f3*h2*h3*x1*x2*y3^2 -
f3*h2*h3*x1*x3*y2*y3 - f3*h2*h3*x2*x3*y1*y3 + f3*h2*h3*x3^2*y1*y2 + f3*h3^2*x2^2*y3^2 - 2*f3*h3^2*x2*x3*y2*y3 + f3*h3^2*x3^2*y2^2 + 2*f3*x1^2*y3*y4 -
2*f3*x1*x3*y1*y4 - 2*f3*x1*x4*y1*y3 + 2*f3*x3*x4*y1^2 - 2*f4*h0*h3*x1*x2*y2*y3 + 2*f4*h0*h3*x1*x3*y2^2 + 2*f4*h0*h3*x2^2*y1*y3 - 2*f4*h0*h3*x2*x3*y1*y2 -
2*f4*h1*h3*x1*x2*y3^2 + 2*f4*h1*h3*x1*x3*y2*y3 + 2*f4*h1*h3*x2*x3*y1*y3 - 2*f4*h1*h3*x3^2*y1*y2 + 4*f4*x1*x2*y3*y4 - 4*f4*x1*x3*y2*y4 - 4*f4*x2*x4*y1*y3
+ 4*f4*x3*x4*y1*y2 + f5*h0^2*x1^2*y2^2 - 2*f5*h0^2*x1*x2*y1*y2 + f5*h0^2*x2^2*y1^2 + 2*f5*h0*h1*x1^2*y2*y3 - 2*f5*h0*h1*x1*x2*y1*y3 -
2*f5*h0*h1*x1*x3*y1*y2 + 2*f5*h0*h1*x2*x3*y1^2 + f5*h0*h2*x1*x2*y2*y3 - f5*h0*h2*x1*x3*y2^2 - f5*h0*h2*x2^2*y1*y3 + f5*h0*h2*x2*x3*y1*y2 -
f5*h0*h3*x1*x2*y3^2 + f5*h0*h3*x1*x3*y2*y3 + f5*h0*h3*x2*x3*y1*y3 - f5*h0*h3*x3^2*y1*y2 + f5*h1^2*x1^2*y3^2 - 2*f5*h1^2*x1*x3*y1*y3 + f5*h1^2*x3^2*y1^2 +
f5*h1*h2*x1*x2*y3^2 - f5*h1*h2*x1*x3*y2*y3 - f5*h1*h2*x2*x3*y1*y3 + f5*h1*h2*x3^2*y1*y2 - f5*h1*h3*x2^2*y3^2 + 2*f5*h1*h3*x2*x3*y2*y3 -
f5*h1*h3*x3^2*y2^2 - 4*f5*x1*x3*y3*y4 + 4*f5*x1*x4*y3^2 + 2*f5*x2^2*y3*y4 - 2*f5*x2*x3*y2*y4 - 2*f5*x2*x4*y2*y3 + 4*f5*x3^2*y1*y4 - 4*f5*x3*x4*y1*y3 +
2*f5*x3*x4*y2^2 + 2*f6*h0^2*x1^2*y2*y3 - 2*f6*h0^2*x1*x2*y1*y3 - 2*f6*h0^2*x1*x3*y1*y2 + 2*f6*h0^2*x2*x3*y1^2 + 2*f6*h0*h1*x1^2*y3^2 +
2*f6*h0*h1*x1*x2*y2*y3 - 4*f6*h0*h1*x1*x3*y1*y3 - 2*f6*h0*h1*x1*x3*y2^2 - 2*f6*h0*h1*x2^2*y1*y3 + 2*f6*h0*h1*x2*x3*y1*y2 + 2*f6*h0*h1*x3^2*y1^2 +
2*f6*h0*h2*x1*x2*y3^2 - 2*f6*h0*h2*x1*x3*y2*y3 - 2*f6*h0*h2*x2*x3*y1*y3 + 2*f6*h0*h2*x3^2*y1*y2 + 2*f6*h1^2*x1*x2*y3^2 - 2*f6*h1^2*x1*x3*y2*y3 -
2*f6*h1^2*x2*x3*y1*y3 + 2*f6*h1^2*x3^2*y1*y2 + 2*f6*h1*h2*x2^2*y3^2 - 4*f6*h1*h2*x2*x3*y2*y3 + 2*f6*h1*h2*x3^2*y2^2 - 4*f6*x2*x3*y3*y4 + 4*f6*x2*x4*y3^2
+ 4*f6*x3^2*y2*y4 - 4*f6*x3*x4*y2*y3 + h0*h2*x1^2*y2*y4 - h0*h2*x1*x2*y1*y4 - h0*h2*x1*x4*y1*y2 + h0*h2*x2*x4*y1^2 + h0*h3*x1^2*y3*y4 - h0*h3*x1*x2*y2*y4
- h0*h3*x1*x3*y1*y4 - h0*h3*x1*x4*y1*y3 + h0*h3*x1*x4*y2^2 + h0*h3*x2^2*y1*y4 - h0*h3*x2*x4*y1*y2 + h0*h3*x3*x4*y1^2 + h1*h2*x1^2*y3*y4 -
h1*h2*x1*x3*y1*y4 - h1*h2*x1*x4*y1*y3 + h1*h2*x3*x4*y1^2 - h1*h3*x1*x3*y2*y4 + h1*h3*x1*x4*y2*y3 + h1*h3*x2*x3*y1*y4 - h1*h3*x2*x4*y1*y3 +
h2^2*x1*x2*y3*y4 - h2^2*x1*x3*y2*y4 - h2^2*x2*x4*y1*y3 + h2^2*x3*x4*y1*y2 - 2*h2*h3*x1*x3*y3*y4 + 2*h2*h3*x1*x4*y3^2 + h2*h3*x2^2*y3*y4 -
h2*h3*x2*x3*y2*y4 - h2*h3*x2*x4*y2*y3 + 2*h2*h3*x3^2*y1*y4 - 2*h2*h3*x3*x4*y1*y3 + h2*h3*x3*x4*y2^2 - h3^2*x2*x3*y3*y4 + h3^2*x2*x4*y3^2 +
h3^2*x3^2*y2*y4 - h3^2*x3*x4*y2*y3 + 2*x1*x2*y4^2 - 2*x1*x4*y2*y4 - 2*x2*x4*y1*y4 + 2*x4^2*y1*y2
        where BBB13 := h eq 0 select
        (8*f0*f2 - 2*f1^2)*x1^2*y1^2 + 4*f0*f3*x1^2*y1*y2 + 2*f1*f3*x1^2*y1*y3 +
    4*f0*x1^2*y1*y4 - 4*f0*f5*x1^2*y2*y3 - 2*f1*f5*x1^2*y3^2 +
    4*f0*f3*x1*x2*y1^2 + 8*f0*f4*x1*x2*y1*y2 + 4*f1*f4*x1*x2*y1*y3 +
    2*f1*x1*x2*y1*y4 + 4*f0*f5*x1*x2*y2^2 + (-8*f0*f6 + 2*f1*f5)*x1*x2*y2*y3 -
    4*f1*f6*x1*x2*y3^2 + 2*f1*f3*x1*x3*y1^2 + 4*f1*f4*x1*x3*y1*y2 + (8*f0*f6 +
    8*f2*f4 - 2*f3^2)*x1*x3*y1*y3 + 4*f2*x1*x3*y1*y4 + 2*f1*f5*x1*x3*y2^2 +
    4*f2*f5*x1*x3*y2*y3 + 2*f3*x1*x3*y2*y4 + 2*f3*f5*x1*x3*y3^2 +
    4*f4*x1*x3*y3*y4 + 2*x1*x3*y4^2 + 4*f0*x1*x4*y1^2 + 2*f1*x1*x4*y1*y2 +
    4*f2*x1*x4*y1*y3 + 2*x1*x4*y3*y4 + 4*f0*f5*x2^2*y1*y2 + 2*f1*f5*x2^2*y1*y3 +
    8*f0*f6*x2^2*y2^2 + 4*f1*f6*x2^2*y2*y3 - 4*f0*f5*x2*x3*y1^2 + (-8*f0*f6 +
    2*f1*f5)*x2*x3*y1*y2 + 4*f2*f5*x2*x3*y1*y3 + 4*f1*f6*x2*x3*y2^2 +
    8*f2*f6*x2*x3*y2*y3 + 4*f3*f6*x2*x3*y3^2 + 2*f5*x2*x3*y3*y4 +
    2*f3*x2*x4*y1*y3 - 2*x2*x4*y2*y4 - 2*f1*f5*x3^2*y1^2 - 4*f1*f6*x3^2*y1*y2 +
    2*f3*f5*x3^2*y1*y3 + 4*f3*f6*x3^2*y2*y3 + (8*f4*f6 - 2*f5^2)*x3^2*y3^2 +
    4*f6*x3^2*y3*y4 + 4*f4*x3*x4*y1*y3 + 2*x3*x4*y1*y4 + 2*f5*x3*x4*y2*y3 +
    4*f6*x3*x4*y3^2 + 2*x4^2*y1*y3
                        else
8*f0*f2*x1^2*y1^2 + 4*f0*f3*x1^2*y1*y2 + 4*f0*f3*x1*x2*y1^2 + 8*f0*f4*x1*x2*y1*y2 - 4*f0*f5*x1^2*y2*y3 + 4*f0*f5*x1*x2*y2^2 + 4*f0*f5*x2^2*y1*y2 -
    4*f0*f5*x2*x3*y1^2 - 8*f0*f6*x1*x2*y2*y3 + 8*f0*f6*x1*x3*y1*y3 + 8*f0*f6*x2^2*y2^2 - 8*f0*f6*x2*x3*y1*y2 + 2*f0*h1^2*x1^2*y1^2 + 2*f0*h1*h2*x1^2*y1*y2 +
    2*f0*h1*h2*x1*x2*y1^2 - 2*f0*h1*h3*x1^2*y1*y3 + 4*f0*h1*h3*x1*x2*y1*y2 - 2*f0*h1*h3*x1*x3*y1^2 + 2*f0*h2^2*x1*x2*y1*y2 - 2*f0*h2*h3*x1^2*y2*y3 +
    2*f0*h2*h3*x1*x2*y2^2 + 2*f0*h2*h3*x2^2*y1*y2 - 2*f0*h2*h3*x2*x3*y1^2 - 2*f0*h3^2*x1*x2*y2*y3 + 2*f0*h3^2*x1*x3*y1*y3 + 2*f0*h3^2*x2^2*y2^2 -
    2*f0*h3^2*x2*x3*y1*y2 + 4*f0*x1^2*y1*y4 + 4*f0*x1*x4*y1^2 - 2*f1^2*x1^2*y1^2 + 2*f1*f3*x1^2*y1*y3 + 2*f1*f3*x1*x3*y1^2 + 4*f1*f4*x1*x2*y1*y3 +
    4*f1*f4*x1*x3*y1*y2 - 2*f1*f5*x1^2*y3^2 + 2*f1*f5*x1*x2*y2*y3 + 2*f1*f5*x1*x3*y2^2 + 2*f1*f5*x2^2*y1*y3 + 2*f1*f5*x2*x3*y1*y2 - 2*f1*f5*x3^2*y1^2 -
    4*f1*f6*x1*x2*y3^2 + 4*f1*f6*x2^2*y2*y3 + 4*f1*f6*x2*x3*y2^2 - 4*f1*f6*x3^2*y1*y2 - 2*f1*h0*h1*x1^2*y1^2 - f1*h0*h2*x1^2*y1*y2 - f1*h0*h2*x1*x2*y1^2 +
    f1*h0*h3*x1^2*y1*y3 - 2*f1*h0*h3*x1*x2*y1*y2 + f1*h0*h3*x1*x3*y1^2 + f1*h1*h2*x1^2*y1*y3 + f1*h1*h2*x1*x3*y1^2 + f1*h1*h3*x1*x2*y1*y3 +
    f1*h1*h3*x1*x3*y1*y2 + f1*h2^2*x1*x2*y1*y3 + f1*h2^2*x1*x3*y1*y2 - f1*h2*h3*x1^2*y3^2 + f1*h2*h3*x1*x2*y2*y3 + f1*h2*h3*x1*x3*y2^2 + f1*h2*h3*x2^2*y1*y3
    + f1*h2*h3*x2*x3*y1*y2 - f1*h2*h3*x3^2*y1^2 - f1*h3^2*x1*x2*y3^2 + f1*h3^2*x2^2*y2*y3 + f1*h3^2*x2*x3*y2^2 - f1*h3^2*x3^2*y1*y2 + 2*f1*x1*x2*y1*y4 +
    2*f1*x1*x4*y1*y2 + 8*f2*f4*x1*x3*y1*y3 + 4*f2*f5*x1*x3*y2*y3 + 4*f2*f5*x2*x3*y1*y3 + 8*f2*f6*x2*x3*y2*y3 + 2*f2*h0^2*x1^2*y1^2 - 2*f2*h0*h2*x1^2*y1*y3 -
    2*f2*h0*h2*x1*x3*y1^2 - 2*f2*h0*h3*x1*x2*y1*y3 - 2*f2*h0*h3*x1*x3*y1*y2 + 2*f2*h2^2*x1*x3*y1*y3 + 2*f2*h2*h3*x1*x3*y2*y3 + 2*f2*h2*h3*x2*x3*y1*y3 +
    2*f2*h3^2*x2*x3*y2*y3 + 4*f2*x1*x3*y1*y4 + 4*f2*x1*x4*y1*y3 - 2*f3^2*x1*x3*y1*y3 + 2*f3*f5*x1*x3*y3^2 + 2*f3*f5*x3^2*y1*y3 + 4*f3*f6*x2*x3*y3^2 +
    4*f3*f6*x3^2*y2*y3 + f3*h0^2*x1^2*y1*y2 + f3*h0^2*x1*x2*y1^2 + f3*h0*h1*x1^2*y1*y3 + f3*h0*h1*x1*x3*y1^2 - f3*h0*h2*x1*x2*y1*y3 - f3*h0*h2*x1*x3*y1*y2 -
    2*f3*h0*h3*x1*x3*y1*y3 - f3*h0*h3*x1*x3*y2^2 - f3*h0*h3*x2^2*y1*y3 - 2*f3*h1*h2*x1*x3*y1*y3 - f3*h1*h3*x1*x3*y2*y3 - f3*h1*h3*x2*x3*y1*y3 +
    f3*h2*h3*x1*x3*y3^2 + f3*h2*h3*x3^2*y1*y3 + f3*h3^2*x2*x3*y3^2 + f3*h3^2*x3^2*y2*y3 + 2*f3*x1*x3*y2*y4 + 2*f3*x2*x4*y1*y3 + 8*f4*f6*x3^2*y3^2 +
    2*f4*h0^2*x1*x2*y1*y2 + 2*f4*h0*h1*x1*x2*y1*y3 + 2*f4*h0*h1*x1*x3*y1*y2 - 2*f4*h0*h3*x1*x3*y2*y3 - 2*f4*h0*h3*x2*x3*y1*y3 + 2*f4*h1^2*x1*x3*y1*y3 -
    2*f4*h1*h3*x1*x3*y3^2 - 2*f4*h1*h3*x3^2*y1*y3 + 2*f4*h3^2*x3^2*y3^2 + 4*f4*x1*x3*y3*y4 + 4*f4*x3*x4*y1*y3 - 2*f5^2*x3^2*y3^2 - f5*h0^2*x1^2*y2*y3 +
    f5*h0^2*x1*x2*y2^2 + f5*h0^2*x2^2*y1*y2 - f5*h0^2*x2*x3*y1^2 - f5*h0*h1*x1^2*y3^2 + f5*h0*h1*x1*x2*y2*y3 + f5*h0*h1*x1*x3*y2^2 + f5*h0*h1*x2^2*y1*y3 +
    f5*h0*h1*x2*x3*y1*y2 - f5*h0*h1*x3^2*y1^2 + f5*h0*h2*x1*x3*y2*y3 + f5*h0*h2*x2*x3*y1*y3 + f5*h0*h3*x1*x3*y3^2 - 2*f5*h0*h3*x2*x3*y2*y3 +
    f5*h0*h3*x3^2*y1*y3 + f5*h1^2*x1*x3*y2*y3 + f5*h1^2*x2*x3*y1*y3 + f5*h1*h2*x1*x3*y3^2 + f5*h1*h2*x3^2*y1*y3 - f5*h1*h3*x2*x3*y3^2 - f5*h1*h3*x3^2*y2*y3 -
    2*f5*h2*h3*x3^2*y3^2 + 2*f5*x2*x3*y3*y4 + 2*f5*x3*x4*y2*y3 - 2*f6*h0^2*x1*x2*y2*y3 + 2*f6*h0^2*x1*x3*y1*y3 + 2*f6*h0^2*x2^2*y2^2 - 2*f6*h0^2*x2*x3*y1*y2
    - 2*f6*h0*h1*x1*x2*y3^2 + 2*f6*h0*h1*x2^2*y2*y3 + 2*f6*h0*h1*x2*x3*y2^2 - 2*f6*h0*h1*x3^2*y1*y2 - 2*f6*h0*h2*x1*x3*y3^2 + 4*f6*h0*h2*x2*x3*y2*y3 -
    2*f6*h0*h2*x3^2*y1*y3 + 2*f6*h1^2*x2*x3*y2*y3 + 2*f6*h1*h2*x2*x3*y3^2 + 2*f6*h1*h2*x3^2*y2*y3 + 2*f6*h2^2*x3^2*y3^2 + 4*f6*x3^2*y3*y4 + 4*f6*x3*x4*y3^2 +
    h0^2*x1^2*y1*y4 + h0^2*x1*x4*y1^2 + h0*h1*x1*x2*y1*y4 + h0*h1*x1*x4*y1*y2 - h0*h2*x1^2*y3*y4 + h0*h2*x1*x2*y2*y4 - h0*h2*x1*x3*y1*y4 - h0*h2*x1*x4*y1*y3
    + h0*h2*x2*x4*y1*y2 - h0*h2*x3*x4*y1^2 - h0*h3*x1*x2*y3*y4 - h0*h3*x1*x3*y2*y4 - h0*h3*x1*x4*y2*y3 + h0*h3*x2^2*y2*y4 - h0*h3*x2*x3*y1*y4 -
    h0*h3*x2*x4*y1*y3 + h0*h3*x2*x4*y2^2 - h0*h3*x3*x4*y1*y2 + h1^2*x1*x3*y1*y4 + h1^2*x1*x4*y1*y3 + h1*h2*x1*x3*y2*y4 + h1*h2*x2*x4*y1*y3 -
    h1*h3*x1*x3*y3*y4 - h1*h3*x1*x4*y3^2 + h1*h3*x2*x3*y2*y4 + h1*h3*x2*x4*y2*y3 - h1*h3*x3^2*y1*y4 - h1*h3*x3*x4*y1*y3 + h2^2*x1*x3*y3*y4 + h2^2*x3*x4*y1*y3
    + h2*h3*x2*x3*y3*y4 + h2*h3*x3*x4*y2*y3 + h3^2*x3^2*y3*y4 + h3^2*x3*x4*y3^2 + 2*x1*x3*y4^2 + 2*x1*x4*y3*y4 - 2*x2*x4*y2*y4 + 2*x3*x4*y1*y4 + 2*x4^2*y1*y3
       where BBB14 := h eq 0 select
       (-16*f0^2*f6 - 16*f0*f2*f4 + 4*f0*f3^2 + 4*f1^2*f4)*x1^2*y1^2 + (-8*f0*f1*f6 -
    16*f0*f2*f5 + 4*f1^2*f5)*x1^2*y1*y2 + (16*f0*f2*f6 - 8*f0*f3*f5 -
    8*f1^2*f6)*x1^2*y1*y3 + (-8*f0*f4 + 2*f1*f3)*x1^2*y1*y4 + (-16*f0*f2*f6 +
    4*f1^2*f6)*x1^2*y2^2 - 8*f0*f3*f6*x1^2*y2*y3 - 4*f0*f5*x1^2*y2*y4 +
    (-16*f0*f4*f6 + 4*f0*f5^2 + 4*f1*f3*f6)*x1^2*y3^2 - 8*f0*f6*x1^2*y3*y4 +
    (-8*f0*f1*f6 - 16*f0*f2*f5 + 4*f1^2*f5)*x1*x2*y1^2 + (-32*f0*f2*f6 -
    8*f0*f3*f5 + 4*f1^2*f6)*x1*x2*y1*y2 + (8*f0*f3*f6 - 8*f0*f4*f5 - 8*f1*f2*f6
    - 2*f1*f3*f5)*x1*x2*y1*y3 - 12*f0*f5*x1*x2*y1*y4 - 16*f0*f3*f6*x1*x2*y2^2 +
    (-4*f0*f5^2 - 8*f1*f3*f6)*x1*x2*y2*y3 + (-8*f0*f6 - 2*f1*f5)*x1*x2*y2*y4 -
    8*f0*f5*f6*x1*x2*y3^2 - 4*f1*f6*x1*x2*y3*y4 + (16*f0*f2*f6 - 8*f0*f3*f5 -
    8*f1^2*f6)*x1*x3*y1^2 + (8*f0*f3*f6 - 8*f0*f4*f5 - 8*f1*f2*f6 -
    2*f1*f3*f5)*x1*x3*y1*y2 + (-16*f0*f4*f6 + 8*f0*f5^2 + 16*f1*f3*f6 -
    8*f1*f4*f5 - 16*f2^2*f6)*x1*x3*y1*y3 + (8*f0*f6 - 4*f1*f5)*x1*x3*y1*y4 +
    (-4*f0*f5^2 - 4*f1*f3*f6)*x1*x3*y2^2 + (-4*f1*f5^2 - 8*f2*f3*f6)*x1*x3*y2*y3
    - 4*f2*f5*x1*x3*y2*y4 + (16*f0*f6^2 - 8*f1*f5*f6 - 4*f3^2*f6)*x1*x3*y3^2 +
    (-8*f2*f6 - 2*f3*f5)*x1*x3*y3*y4 + (-8*f0*f4 + 2*f1*f3)*x1*x4*y1^2 -
    12*f0*f5*x1*x4*y1*y2 + (8*f0*f6 - 4*f1*f5)*x1*x4*y1*y3 + 4*f2*x1*x4*y1*y4 -
    16*f0*f6*x1*x4*y2^2 - 8*f1*f6*x1*x4*y2*y3 + 2*x1*x4*y4^2 + (-16*f0*f2*f6 +
    4*f1^2*f6)*x2^2*y1^2 - 16*f0*f3*f6*x2^2*y1*y2 + (-4*f0*f5^2 -
    4*f1*f3*f6)*x2^2*y1*y3 - 16*f0*f6*x2^2*y1*y4 + (-16*f0*f4*f6 +
    4*f0*f5^2)*x2^2*y2^2 + (-8*f0*f5*f6 - 8*f1*f4*f6 + 2*f1*f5^2)*x2^2*y2*y3 -
    4*f1*f6*x2^2*y2*y4 - 16*f0*f6^2*x2^2*y3^2 - 8*f0*f3*f6*x2*x3*y1^2 +
    (-4*f0*f5^2 - 8*f1*f3*f6)*x2*x3*y1*y2 + (-4*f1*f5^2 -
    8*f2*f3*f6)*x2*x3*y1*y3 - 8*f1*f6*x2*x3*y1*y4 + (-8*f0*f5*f6 - 8*f1*f4*f6 +
    2*f1*f5^2)*x2*x3*y2^2 + (-16*f0*f6^2 - 8*f1*f5*f6 - 16*f2*f4*f6 +
    4*f2*f5^2)*x2*x3*y2*y3 - 8*f2*f6*x2*x3*y2*y4 + (-16*f1*f6^2 - 8*f3*f4*f6 +
    2*f3*f5^2)*x2*x3*y3^2 - 8*f3*f6*x2*x3*y3*y4 - 4*f0*f5*x2*x4*y1^2 + (-8*f0*f6
    - 2*f1*f5)*x2*x4*y1*y2 - 4*f2*f5*x2*x4*y1*y3 - 4*f1*f6*x2*x4*y2^2 -
    8*f2*f6*x2*x4*y2*y3 - 4*f3*f6*x2*x4*y3^2 - 2*f5*x2*x4*y3*y4 + (-16*f0*f4*f6
    + 4*f0*f5^2 + 4*f1*f3*f6)*x3^2*y1^2 - 8*f0*f5*f6*x3^2*y1*y2 + (16*f0*f6^2 -
    8*f1*f5*f6 - 4*f3^2*f6)*x3^2*y1*y3 - 16*f0*f6^2*x3^2*y2^2 + (-16*f1*f6^2 -
    8*f3*f4*f6 + 2*f3*f5^2)*x3^2*y2*y3 - 4*f3*f6*x3^2*y2*y4 + (-16*f2*f6^2 +
    8*f3*f5*f6 - 16*f4^2*f6 + 4*f4*f5^2)*x3^2*y3^2 + (-16*f4*f6 +
    4*f5^2)*x3^2*y3*y4 - 8*f0*f6*x3*x4*y1^2 - 4*f1*f6*x3*x4*y1*y2 + (-8*f2*f6 -
    2*f3*f5)*x3*x4*y1*y3 - 8*f3*f6*x3*x4*y2*y3 - 2*f5*x3*x4*y2*y4 + (-16*f4*f6 +
    4*f5^2)*x3*x4*y3^2 - 12*f6*x3*x4*y3*y4 + 2*x4^2*y1*y4
                      else
-16*f0^2*f6*x1^2*y1^2 - 4*f0^2*h3^2*x1^2*y1^2 - 8*f0*f1*f6*x1^2*y1*y2 - 8*f0*f1*f6*x1*x2*y1^2 - 2*f0*f1*h3^2*x1^2*y1*y2 - 2*f0*f1*h3^2*x1*x2*y1^2 -
    16*f0*f2*f4*x1^2*y1^2 - 16*f0*f2*f5*x1^2*y1*y2 - 16*f0*f2*f5*x1*x2*y1^2 + 16*f0*f2*f6*x1^2*y1*y3 - 16*f0*f2*f6*x1^2*y2^2 - 32*f0*f2*f6*x1*x2*y1*y2 +
    16*f0*f2*f6*x1*x3*y1^2 - 16*f0*f2*f6*x2^2*y1^2 - 4*f0*f2*h1*h3*x1^2*y1^2 - 4*f0*f2*h2^2*x1^2*y1^2 - 8*f0*f2*h2*h3*x1^2*y1*y2 - 8*f0*f2*h2*h3*x1*x2*y1^2 +
    4*f0*f2*h3^2*x1^2*y1*y3 - 4*f0*f2*h3^2*x1^2*y2^2 - 8*f0*f2*h3^2*x1*x2*y1*y2 + 4*f0*f2*h3^2*x1*x3*y1^2 - 4*f0*f2*h3^2*x2^2*y1^2 + 4*f0*f3^2*x1^2*y1^2 -
    8*f0*f3*f5*x1^2*y1*y3 - 8*f0*f3*f5*x1*x2*y1*y2 - 8*f0*f3*f5*x1*x3*y1^2 - 8*f0*f3*f6*x1^2*y2*y3 + 8*f0*f3*f6*x1*x2*y1*y3 - 16*f0*f3*f6*x1*x2*y2^2 +
    8*f0*f3*f6*x1*x3*y1*y2 - 16*f0*f3*f6*x2^2*y1*y2 - 8*f0*f3*f6*x2*x3*y1^2 + 4*f0*f3*h0*h3*x1^2*y1^2 + 4*f0*f3*h1*h2*x1^2*y1^2 + 2*f0*f3*h1*h3*x1^2*y1*y2 +
    2*f0*f3*h1*h3*x1*x2*y1^2 - 4*f0*f3*h2*h3*x1^2*y1*y3 - 4*f0*f3*h2*h3*x1*x2*y1*y2 - 4*f0*f3*h2*h3*x1*x3*y1^2 - 2*f0*f3*h3^2*x1^2*y2*y3 +
    2*f0*f3*h3^2*x1*x2*y1*y3 - 4*f0*f3*h3^2*x1*x2*y2^2 + 2*f0*f3*h3^2*x1*x3*y1*y2 - 4*f0*f3*h3^2*x2^2*y1*y2 - 2*f0*f3*h3^2*x2*x3*y1^2 -
    8*f0*f4*f5*x1*x2*y1*y3 - 8*f0*f4*f5*x1*x3*y1*y2 - 16*f0*f4*f6*x1^2*y3^2 - 16*f0*f4*f6*x1*x3*y1*y3 - 16*f0*f4*f6*x2^2*y2^2 - 16*f0*f4*f6*x3^2*y1^2 +
    4*f0*f4*h0*h3*x1^2*y1*y2 + 4*f0*f4*h0*h3*x1*x2*y1^2 - 4*f0*f4*h1^2*x1^2*y1^2 + 4*f0*f4*h1*h3*x1^2*y1*y3 + 4*f0*f4*h1*h3*x1*x2*y1*y2 +
    4*f0*f4*h1*h3*x1*x3*y1^2 - 4*f0*f4*h2*h3*x1*x2*y1*y3 - 4*f0*f4*h2*h3*x1*x3*y1*y2 - 4*f0*f4*h3^2*x1^2*y3^2 - 4*f0*f4*h3^2*x1*x3*y1*y3 -
    4*f0*f4*h3^2*x2^2*y2^2 - 4*f0*f4*h3^2*x3^2*y1^2 - 8*f0*f4*x1^2*y1*y4 - 8*f0*f4*x1*x4*y1^2 + 4*f0*f5^2*x1^2*y3^2 - 4*f0*f5^2*x1*x2*y2*y3 +
    8*f0*f5^2*x1*x3*y1*y3 - 4*f0*f5^2*x1*x3*y2^2 - 4*f0*f5^2*x2^2*y1*y3 + 4*f0*f5^2*x2^2*y2^2 - 4*f0*f5^2*x2*x3*y1*y2 + 4*f0*f5^2*x3^2*y1^2 -
    8*f0*f5*f6*x1*x2*y3^2 - 8*f0*f5*f6*x2^2*y2*y3 - 8*f0*f5*f6*x2*x3*y2^2 - 8*f0*f5*f6*x3^2*y1*y2 - 4*f0*f5*h0*h3*x1^2*y1*y3 + 4*f0*f5*h0*h3*x1^2*y2^2 +
    4*f0*f5*h0*h3*x1*x2*y1*y2 - 4*f0*f5*h0*h3*x1*x3*y1^2 + 4*f0*f5*h0*h3*x2^2*y1^2 - 4*f0*f5*h1^2*x1^2*y1*y2 - 4*f0*f5*h1^2*x1*x2*y1^2 -
    4*f0*f5*h1*h2*x1^2*y1*y3 - 4*f0*f5*h1*h2*x1*x2*y1*y2 - 4*f0*f5*h1*h2*x1*x3*y1^2 + 2*f0*f5*h1*h3*x1*x2*y1*y3 + 2*f0*f5*h1*h3*x1*x2*y2^2 +
    2*f0*f5*h1*h3*x1*x3*y1*y2 + 2*f0*f5*h1*h3*x2^2*y1*y2 - 2*f0*f5*h2^2*x1*x2*y1*y3 - 2*f0*f5*h2^2*x1*x3*y1*y2 + 4*f0*f5*h2*h3*x1^2*y3^2 -
    4*f0*f5*h2*h3*x1*x2*y2*y3 + 8*f0*f5*h2*h3*x1*x3*y1*y3 - 4*f0*f5*h2*h3*x1*x3*y2^2 - 4*f0*f5*h2*h3*x2^2*y1*y3 + 4*f0*f5*h2*h3*x2^2*y2^2 -
    4*f0*f5*h2*h3*x2*x3*y1*y2 + 4*f0*f5*h2*h3*x3^2*y1^2 - 2*f0*f5*h3^2*x1*x2*y3^2 - 2*f0*f5*h3^2*x2^2*y2*y3 - 2*f0*f5*h3^2*x2*x3*y2^2 -
    2*f0*f5*h3^2*x3^2*y1*y2 - 4*f0*f5*x1^2*y2*y4 - 12*f0*f5*x1*x2*y1*y4 - 12*f0*f5*x1*x4*y1*y2 - 4*f0*f5*x2*x4*y1^2 + 16*f0*f6^2*x1*x3*y3^2 -
    16*f0*f6^2*x2^2*y3^2 - 16*f0*f6^2*x2*x3*y2*y3 + 16*f0*f6^2*x3^2*y1*y3 - 16*f0*f6^2*x3^2*y2^2 - 8*f0*f6*h0^2*x1^2*y1^2 - 4*f0*f6*h0*h1*x1^2*y1*y2 -
    4*f0*f6*h0*h1*x1*x2*y1^2 + 8*f0*f6*h0*h2*x1^2*y1*y3 - 4*f0*f6*h0*h2*x1^2*y2^2 + 8*f0*f6*h0*h2*x1*x3*y1^2 - 4*f0*f6*h0*h2*x2^2*y1^2 +
    4*f0*f6*h0*h3*x1^2*y2*y3 - 4*f0*f6*h0*h3*x1*x2*y1*y3 + 4*f0*f6*h0*h3*x1*x2*y2^2 - 4*f0*f6*h0*h3*x1*x3*y1*y2 + 4*f0*f6*h0*h3*x2^2*y1*y2 +
    4*f0*f6*h0*h3*x2*x3*y1^2 + 4*f0*f6*h1^2*x1^2*y1*y3 - 4*f0*f6*h1^2*x1^2*y2^2 - 8*f0*f6*h1^2*x1*x2*y1*y2 + 4*f0*f6*h1^2*x1*x3*y1^2 - 4*f0*f6*h1^2*x2^2*y1^2
    - 4*f0*f6*h1*h2*x1^2*y2*y3 + 4*f0*f6*h1*h2*x1*x2*y1*y3 - 8*f0*f6*h1*h2*x1*x2*y2^2 + 4*f0*f6*h1*h2*x1*x3*y1*y2 - 8*f0*f6*h1*h2*x2^2*y1*y2 -
    4*f0*f6*h1*h2*x2*x3*y1^2 - 4*f0*f6*h1*h3*x1^2*y3^2 - 12*f0*f6*h1*h3*x1*x3*y1*y3 + 8*f0*f6*h1*h3*x1*x3*y2^2 + 8*f0*f6*h1*h3*x2^2*y1*y3 -
    4*f0*f6*h1*h3*x2^2*y2^2 - 4*f0*f6*h1*h3*x3^2*y1^2 - 4*f0*f6*h2^2*x1^2*y3^2 - 4*f0*f6*h2^2*x1*x3*y1*y3 - 4*f0*f6*h2^2*x2^2*y2^2 - 4*f0*f6*h2^2*x3^2*y1^2 -
    4*f0*f6*h2*h3*x1*x2*y3^2 - 4*f0*f6*h2*h3*x2^2*y2*y3 - 4*f0*f6*h2*h3*x2*x3*y2^2 - 4*f0*f6*h2*h3*x3^2*y1*y2 + 8*f0*f6*h3^2*x1*x3*y3^2 -
    8*f0*f6*h3^2*x2^2*y3^2 - 8*f0*f6*h3^2*x2*x3*y2*y3 + 8*f0*f6*h3^2*x3^2*y1*y3 - 8*f0*f6*h3^2*x3^2*y2^2 - 8*f0*f6*x1^2*y3*y4 - 8*f0*f6*x1*x2*y2*y4 +
    8*f0*f6*x1*x3*y1*y4 + 8*f0*f6*x1*x4*y1*y3 - 16*f0*f6*x1*x4*y2^2 - 16*f0*f6*x2^2*y1*y4 - 8*f0*f6*x2*x4*y1*y2 - 8*f0*f6*x3*x4*y1^2 - f0*h0^2*h3^2*x1^2*y1^2
    + 2*f0*h0*h1*h2*h3*x1^2*y1^2 + f0*h0*h1*h3^2*x1^2*y1*y2 + f0*h0*h1*h3^2*x1*x2*y1^2 + f0*h0*h2^2*h3*x1^2*y1*y2 + f0*h0*h2^2*h3*x1*x2*y1^2 +
    f0*h0*h2*h3^2*x1^2*y2^2 + 2*f0*h0*h2*h3^2*x1*x2*y1*y2 + f0*h0*h2*h3^2*x2^2*y1^2 + f0*h0*h3^3*x1^2*y2*y3 - f0*h0*h3^3*x1*x2*y1*y3 + f0*h0*h3^3*x1*x2*y2^2
    - f0*h0*h3^3*x1*x3*y1*y2 + f0*h0*h3^3*x2^2*y1*y2 + f0*h0*h3^3*x2*x3*y1^2 - f0*h1^3*h3*x1^2*y1^2 - f0*h1^2*h2*h3*x1^2*y1*y2 - f0*h1^2*h2*h3*x1*x2*y1^2 +
    2*f0*h1^2*h3^2*x1^2*y1*y3 - f0*h1^2*h3^2*x1^2*y2^2 + 2*f0*h1^2*h3^2*x1*x3*y1^2 - f0*h1^2*h3^2*x2^2*y1^2 - f0*h1*h2^2*h3*x1^2*y1*y3 -
    f0*h1*h2^2*h3*x1*x2*y1*y2 - f0*h1*h2^2*h3*x1*x3*y1^2 - f0*h1*h2*h3^2*x1^2*y2*y3 + 2*f0*h1*h2*h3^2*x1*x2*y1*y3 - f0*h1*h2*h3^2*x1*x2*y2^2 +
    2*f0*h1*h2*h3^2*x1*x3*y1*y2 - f0*h1*h2*h3^2*x2^2*y1*y2 - f0*h1*h2*h3^2*x2*x3*y1^2 - f0*h1*h3^3*x1^2*y3^2 - 3*f0*h1*h3^3*x1*x3*y1*y3 +
    2*f0*h1*h3^3*x1*x3*y2^2 + 2*f0*h1*h3^3*x2^2*y1*y3 - f0*h1*h3^3*x2^2*y2^2 - f0*h1*h3^3*x3^2*y1^2 - 2*f0*h1*h3*x1^2*y1*y4 - 2*f0*h1*h3*x1*x4*y1^2 -
    f0*h2^3*h3*x1*x2*y1*y3 - f0*h2^3*h3*x1*x3*y1*y2 - f0*h2^2*h3^2*x1*x2*y2*y3 + f0*h2^2*h3^2*x1*x3*y1*y3 - f0*h2^2*h3^2*x1*x3*y2^2 - f0*h2^2*h3^2*x2^2*y1*y3
    - f0*h2^2*h3^2*x2*x3*y1*y2 - 2*f0*h2^2*x1^2*y1*y4 - 2*f0*h2^2*x1*x4*y1^2 - f0*h2*h3^3*x1*x2*y3^2 - f0*h2*h3^3*x2^2*y2*y3 - f0*h2*h3^3*x2*x3*y2^2 -
    f0*h2*h3^3*x3^2*y1*y2 - 2*f0*h2*h3*x1^2*y2*y4 - 6*f0*h2*h3*x1*x2*y1*y4 - 6*f0*h2*h3*x1*x4*y1*y2 - 2*f0*h2*h3*x2*x4*y1^2 + f0*h3^4*x1*x3*y3^2 -
    f0*h3^4*x2^2*y3^2 - f0*h3^4*x2*x3*y2*y3 + f0*h3^4*x3^2*y1*y3 - f0*h3^4*x3^2*y2^2 - 2*f0*h3^2*x1^2*y3*y4 - 2*f0*h3^2*x1*x2*y2*y4 + 2*f0*h3^2*x1*x3*y1*y4 +
    2*f0*h3^2*x1*x4*y1*y3 - 4*f0*h3^2*x1*x4*y2^2 - 4*f0*h3^2*x2^2*y1*y4 - 2*f0*h3^2*x2*x4*y1*y2 - 2*f0*h3^2*x3*x4*y1^2 + 4*f1^2*f4*x1^2*y1^2 +
    4*f1^2*f5*x1^2*y1*y2 + 4*f1^2*f5*x1*x2*y1^2 - 8*f1^2*f6*x1^2*y1*y3 + 4*f1^2*f6*x1^2*y2^2 + 4*f1^2*f6*x1*x2*y1*y2 - 8*f1^2*f6*x1*x3*y1^2 +
    4*f1^2*f6*x2^2*y1^2 + f1^2*h1*h3*x1^2*y1^2 + f1^2*h2^2*x1^2*y1^2 + 2*f1^2*h2*h3*x1^2*y1*y2 + 2*f1^2*h2*h3*x1*x2*y1^2 - 2*f1^2*h3^2*x1^2*y1*y3 +
    f1^2*h3^2*x1^2*y2^2 + f1^2*h3^2*x1*x2*y1*y2 - 2*f1^2*h3^2*x1*x3*y1^2 + f1^2*h3^2*x2^2*y1^2 - 8*f1*f2*f6*x1*x2*y1*y3 - 8*f1*f2*f6*x1*x3*y1*y2 -
    2*f1*f2*h3^2*x1*x2*y1*y3 - 2*f1*f2*h3^2*x1*x3*y1*y2 - 2*f1*f3*f5*x1*x2*y1*y3 - 2*f1*f3*f5*x1*x3*y1*y2 + 4*f1*f3*f6*x1^2*y3^2 - 8*f1*f3*f6*x1*x2*y2*y3 +
    16*f1*f3*f6*x1*x3*y1*y3 - 4*f1*f3*f6*x1*x3*y2^2 - 4*f1*f3*f6*x2^2*y1*y3 - 8*f1*f3*f6*x2*x3*y1*y2 + 4*f1*f3*f6*x3^2*y1^2 - 2*f1*f3*h0*h2*x1^2*y1^2 -
    f1*f3*h0*h3*x1^2*y1*y2 - f1*f3*h0*h3*x1*x2*y1^2 - f1*f3*h2*h3*x1*x2*y1*y3 - f1*f3*h2*h3*x1*x3*y1*y2 + f1*f3*h3^2*x1^2*y3^2 - 2*f1*f3*h3^2*x1*x2*y2*y3 +
    4*f1*f3*h3^2*x1*x3*y1*y3 - f1*f3*h3^2*x1*x3*y2^2 - f1*f3*h3^2*x2^2*y1*y3 - 2*f1*f3*h3^2*x2*x3*y1*y2 + f1*f3*h3^2*x3^2*y1^2 + 2*f1*f3*x1^2*y1*y4 +
    2*f1*f3*x1*x4*y1^2 - 8*f1*f4*f5*x1*x3*y1*y3 - 8*f1*f4*f6*x2^2*y2*y3 - 8*f1*f4*f6*x2*x3*y2^2 + 4*f1*f4*h0*h1*x1^2*y1^2 + 2*f1*f4*h1*h3*x1*x2*y1*y3 +
    2*f1*f4*h1*h3*x1*x3*y1*y2 - 4*f1*f4*h2*h3*x1*x3*y1*y3 - 2*f1*f4*h3^2*x2^2*y2*y3 - 2*f1*f4*h3^2*x2*x3*y2^2 - 4*f1*f5^2*x1*x3*y2*y3 + 2*f1*f5^2*x2^2*y2*y3
    - 4*f1*f5^2*x2*x3*y1*y3 + 2*f1*f5^2*x2*x3*y2^2 - 8*f1*f5*f6*x1*x3*y3^2 - 8*f1*f5*f6*x2*x3*y2*y3 - 8*f1*f5*f6*x3^2*y1*y3 + 4*f1*f5*h0*h1*x1^2*y1*y2 +
    4*f1*f5*h0*h1*x1*x2*y1^2 + 2*f1*f5*h0*h2*x1^2*y1*y3 + 2*f1*f5*h0*h2*x1*x2*y1*y2 + 2*f1*f5*h0*h2*x1*x3*y1^2 + 2*f1*f5*h0*h3*x1^2*y2*y3 -
    f1*f5*h0*h3*x1*x2*y1*y3 + f1*f5*h0*h3*x1*x2*y2^2 - f1*f5*h0*h3*x1*x3*y1*y2 + f1*f5*h0*h3*x2^2*y1*y2 + 2*f1*f5*h0*h3*x2*x3*y1^2 - f1*f5*h1*h2*x1*x2*y1*y3
    - f1*f5*h1*h2*x1*x3*y1*y2 - f1*f5*h1*h3*x1^2*y3^2 + 2*f1*f5*h1*h3*x1*x2*y2*y3 + f1*f5*h1*h3*x1*x3*y2^2 + f1*f5*h1*h3*x2^2*y1*y3 +
    2*f1*f5*h1*h3*x2*x3*y1*y2 - f1*f5*h1*h3*x3^2*y1^2 - 2*f1*f5*h2^2*x1*x3*y1*y3 - 4*f1*f5*h2*h3*x1*x3*y2*y3 + 2*f1*f5*h2*h3*x2^2*y2*y3 -
    4*f1*f5*h2*h3*x2*x3*y1*y3 + 2*f1*f5*h2*h3*x2*x3*y2^2 - 2*f1*f5*h3^2*x1*x3*y3^2 - 2*f1*f5*h3^2*x2*x3*y2*y3 - 2*f1*f5*h3^2*x3^2*y1*y3 - 2*f1*f5*x1*x2*y2*y4
    - 4*f1*f5*x1*x3*y1*y4 - 4*f1*f5*x1*x4*y1*y3 - 2*f1*f5*x2*x4*y1*y2 - 16*f1*f6^2*x2*x3*y3^2 - 16*f1*f6^2*x3^2*y2*y3 - 2*f1*f6*h0^2*x1^2*y1*y2 -
    2*f1*f6*h0^2*x1*x2*y1^2 - 8*f1*f6*h0*h1*x1^2*y1*y3 + 4*f1*f6*h0*h1*x1^2*y2^2 + 4*f1*f6*h0*h1*x1*x2*y1*y2 - 8*f1*f6*h0*h1*x1*x3*y1^2 +
    4*f1*f6*h0*h1*x2^2*y1^2 + 2*f1*f6*h0*h2*x1*x2*y1*y3 + 2*f1*f6*h0*h2*x1*x2*y2^2 + 2*f1*f6*h0*h2*x1*x3*y1*y2 + 2*f1*f6*h0*h2*x2^2*y1*y2 +
    4*f1*f6*h0*h3*x1^2*y3^2 + 4*f1*f6*h0*h3*x1*x2*y2*y3 + 4*f1*f6*h0*h3*x1*x3*y1*y3 - 4*f1*f6*h0*h3*x1*x3*y2^2 - 4*f1*f6*h0*h3*x2^2*y1*y3 +
    4*f1*f6*h0*h3*x2^2*y2^2 + 4*f1*f6*h0*h3*x2*x3*y1*y2 + 4*f1*f6*h0*h3*x3^2*y1^2 - 2*f1*f6*h1^2*x1*x2*y1*y3 - 2*f1*f6*h1^2*x1*x3*y1*y2 +
    2*f1*f6*h1*h2*x1^2*y3^2 - 4*f1*f6*h1*h2*x1*x2*y2*y3 + 8*f1*f6*h1*h2*x1*x3*y1*y3 - 2*f1*f6*h1*h2*x1*x3*y2^2 - 2*f1*f6*h1*h2*x2^2*y1*y3 -
    4*f1*f6*h1*h2*x2*x3*y1*y2 + 2*f1*f6*h1*h2*x3^2*y1^2 + 4*f1*f6*h1*h3*x1*x3*y2*y3 + 4*f1*f6*h1*h3*x2*x3*y1*y3 - 2*f1*f6*h2^2*x2^2*y2*y3 -
    2*f1*f6*h2^2*x2*x3*y2^2 - 4*f1*f6*h2*h3*x1*x3*y3^2 - 4*f1*f6*h2*h3*x2*x3*y2*y3 - 4*f1*f6*h2*h3*x3^2*y1*y3 - 8*f1*f6*h3^2*x2*x3*y3^2 -
    8*f1*f6*h3^2*x3^2*y2*y3 - 4*f1*f6*x1*x2*y3*y4 - 8*f1*f6*x1*x4*y2*y3 - 4*f1*f6*x2^2*y2*y4 - 8*f1*f6*x2*x3*y1*y4 - 4*f1*f6*x2*x4*y2^2 - 4*f1*f6*x3*x4*y1*y2
    - f1*h0^2*h2*h3*x1^2*y1^2 - f1*h0^2*h3^2*x1^2*y1*y2 - f1*h0^2*h3^2*x1*x2*y1^2 + f1*h0*h1^2*h3*x1^2*y1^2 + f1*h0*h1*h2*h3*x1^2*y1*y2 +
    f1*h0*h1*h2*h3*x1*x2*y1^2 - 2*f1*h0*h1*h3^2*x1^2*y1*y3 + f1*h0*h1*h3^2*x1^2*y2^2 - 2*f1*h0*h1*h3^2*x1*x3*y1^2 + f1*h0*h1*h3^2*x2^2*y1^2 +
    f1*h0*h2^2*h3*x1^2*y1*y3 + f1*h0*h2^2*h3*x1*x2*y1*y2 + f1*h0*h2^2*h3*x1*x3*y1^2 + f1*h0*h2*h3^2*x1^2*y2*y3 + f1*h0*h2*h3^2*x1*x2*y2^2 +
    f1*h0*h2*h3^2*x2^2*y1*y2 + f1*h0*h2*h3^2*x2*x3*y1^2 + f1*h0*h3^3*x1^2*y3^2 + f1*h0*h3^3*x1*x2*y2*y3 + f1*h0*h3^3*x1*x3*y1*y3 - f1*h0*h3^3*x1*x3*y2^2 -
    f1*h0*h3^3*x2^2*y1*y3 + f1*h0*h3^3*x2^2*y2^2 + f1*h0*h3^3*x2*x3*y1*y2 + f1*h0*h3^3*x3^2*y1^2 + f1*h0*h3*x1^2*y1*y4 + f1*h0*h3*x1*x4*y1^2 +
    2*f1*h1*h2*h3^2*x1*x3*y1*y3 + f1*h1*h2*x1^2*y1*y4 + f1*h1*h2*x1*x4*y1^2 + f1*h1*h3^3*x1*x3*y2*y3 + f1*h1*h3^3*x2*x3*y1*y3 + f1*h1*h3*x1*x2*y1*y4 +
    f1*h1*h3*x1*x4*y1*y2 - f1*h2^3*h3*x1*x3*y1*y3 - f1*h2^2*h3^2*x1*x3*y2*y3 - f1*h2^2*h3^2*x2*x3*y1*y3 - f1*h2*h3^3*x1*x3*y3^2 - f1*h2*h3^3*x2*x3*y2*y3 -
    f1*h2*h3^3*x3^2*y1*y3 - f1*h2*h3*x1*x2*y2*y4 - 2*f1*h2*h3*x1*x3*y1*y4 - 2*f1*h2*h3*x1*x4*y1*y3 - f1*h2*h3*x2*x4*y1*y2 - f1*h3^4*x2*x3*y3^2 -
    f1*h3^4*x3^2*y2*y3 - f1*h3^2*x1*x2*y3*y4 - 2*f1*h3^2*x1*x4*y2*y3 - f1*h3^2*x2^2*y2*y4 - 2*f1*h3^2*x2*x3*y1*y4 - f1*h3^2*x2*x4*y2^2 - f1*h3^2*x3*x4*y1*y2
    - 16*f2^2*f6*x1*x3*y1*y3 - 4*f2^2*h3^2*x1*x3*y1*y3 - 8*f2*f3*f6*x1*x3*y2*y3 - 8*f2*f3*f6*x2*x3*y1*y3 - 2*f2*f3*h3^2*x1*x3*y2*y3 -
    2*f2*f3*h3^2*x2*x3*y1*y3 - 16*f2*f4*f6*x2*x3*y2*y3 - 4*f2*f4*h0^2*x1^2*y1^2 + 4*f2*f4*h1*h3*x1*x3*y1*y3 - 4*f2*f4*h3^2*x2*x3*y2*y3 +
    4*f2*f5^2*x2*x3*y2*y3 - 4*f2*f5*h0^2*x1^2*y1*y2 - 4*f2*f5*h0^2*x1*x2*y1^2 + 2*f2*f5*h0*h2*x1*x2*y1*y3 + 2*f2*f5*h0*h2*x1*x3*y1*y2 +
    2*f2*f5*h0*h3*x1^2*y3^2 - 4*f2*f5*h0*h3*x1*x3*y1*y3 + 2*f2*f5*h0*h3*x1*x3*y2^2 + 2*f2*f5*h0*h3*x2^2*y1*y3 + 2*f2*f5*h0*h3*x3^2*y1^2 +
    4*f2*f5*h1*h3*x1*x3*y2*y3 + 4*f2*f5*h1*h3*x2*x3*y1*y3 + 4*f2*f5*h2*h3*x2*x3*y2*y3 - 4*f2*f5*x1*x3*y2*y4 - 4*f2*f5*x2*x4*y1*y3 - 16*f2*f6^2*x3^2*y3^2 +
    4*f2*f6*h0^2*x1^2*y1*y3 - 4*f2*f6*h0^2*x1^2*y2^2 - 8*f2*f6*h0^2*x1*x2*y1*y2 + 4*f2*f6*h0^2*x1*x3*y1^2 - 4*f2*f6*h0^2*x2^2*y1^2 -
    4*f2*f6*h0*h1*x1*x2*y1*y3 - 4*f2*f6*h0*h1*x1*x3*y1*y2 - 4*f2*f6*h0*h2*x1^2*y3^2 + 4*f2*f6*h0*h2*x1*x2*y2*y3 + 4*f2*f6*h0*h2*x2*x3*y1*y2 -
    4*f2*f6*h0*h2*x3^2*y1^2 + 4*f2*f6*h0*h3*x1*x2*y3^2 - 4*f2*f6*h0*h3*x1*x3*y2*y3 + 4*f2*f6*h0*h3*x2^2*y2*y3 - 4*f2*f6*h0*h3*x2*x3*y1*y3 +
    4*f2*f6*h0*h3*x2*x3*y2^2 + 4*f2*f6*h0*h3*x3^2*y1*y2 - 8*f2*f6*h1^2*x1*x3*y1*y3 - 4*f2*f6*h1*h2*x1*x3*y2*y3 - 4*f2*f6*h1*h2*x2*x3*y1*y3 +
    4*f2*f6*h1*h3*x1*x3*y3^2 + 4*f2*f6*h1*h3*x2*x3*y2*y3 + 4*f2*f6*h1*h3*x3^2*y1*y3 - 4*f2*f6*h2^2*x2*x3*y2*y3 - 8*f2*f6*h3^2*x3^2*y3^2 - 8*f2*f6*x1*x3*y3*y4
    - 8*f2*f6*x2*x3*y2*y4 - 8*f2*f6*x2*x4*y2*y3 - 8*f2*f6*x3*x4*y1*y3 - f2*h0^2*h1*h3*x1^2*y1^2 - f2*h0^2*h2*h3*x1^2*y1*y2 - f2*h0^2*h2*h3*x1*x2*y1^2 +
    f2*h0^2*h3^2*x1^2*y1*y3 - f2*h0^2*h3^2*x1^2*y2^2 - f2*h0^2*h3^2*x1*x2*y1*y2 + f2*h0^2*h3^2*x1*x3*y1^2 - f2*h0^2*h3^2*x2^2*y1^2 -
    f2*h0*h1*h3^2*x1*x2*y1*y3 - f2*h0*h1*h3^2*x1*x3*y1*y2 + f2*h0*h2^2*h3*x1*x2*y1*y3 + f2*h0*h2^2*h3*x1*x3*y1*y2 + f2*h0*h2*h3^2*x1*x2*y2*y3 -
    2*f2*h0*h2*h3^2*x1*x3*y1*y3 + f2*h0*h2*h3^2*x1*x3*y2^2 + f2*h0*h2*h3^2*x2^2*y1*y3 + f2*h0*h2*h3^2*x2*x3*y1*y2 - 2*f2*h0*h2*x1^2*y1*y4 -
    2*f2*h0*h2*x1*x4*y1^2 + f2*h0*h3^3*x1*x2*y3^2 - f2*h0*h3^3*x1*x3*y2*y3 + f2*h0*h3^3*x2^2*y2*y3 - f2*h0*h3^3*x2*x3*y1*y3 + f2*h0*h3^3*x2*x3*y2^2 +
    f2*h0*h3^3*x3^2*y1*y2 - 2*f2*h0*h3*x1*x2*y1*y4 - 2*f2*h0*h3*x1*x4*y1*y2 - f2*h1^2*h3^2*x1*x3*y1*y3 + f2*h1*h2^2*h3*x1*x3*y1*y3 +
    f2*h1*h2*h3^2*x1*x3*y2*y3 + f2*h1*h2*h3^2*x2*x3*y1*y3 + f2*h1*h3^3*x1*x3*y3^2 + f2*h1*h3^3*x2*x3*y2*y3 + f2*h1*h3^3*x3^2*y1*y3 - 2*f2*h2*h3*x1*x3*y2*y4 -
    2*f2*h2*h3*x2*x4*y1*y3 - f2*h3^4*x3^2*y3^2 - 2*f2*h3^2*x1*x3*y3*y4 - 2*f2*h3^2*x2*x3*y2*y4 - 2*f2*h3^2*x2*x4*y2*y3 - 2*f2*h3^2*x3*x4*y1*y3 +
    4*f2*x1*x4*y1*y4 - 4*f3^2*f6*x1*x3*y3^2 - 4*f3^2*f6*x3^2*y1*y3 + f3^2*h0^2*x1^2*y1^2 - f3^2*h1*h3*x1*x3*y1*y3 - f3^2*h3^2*x1*x3*y3^2 -
    f3^2*h3^2*x3^2*y1*y3 - 8*f3*f4*f6*x2*x3*y3^2 - 8*f3*f4*f6*x3^2*y2*y3 - 2*f3*f4*h3^2*x2*x3*y3^2 - 2*f3*f4*h3^2*x3^2*y2*y3 + 2*f3*f5^2*x2*x3*y3^2 +
    2*f3*f5^2*x3^2*y2*y3 + 8*f3*f5*f6*x3^2*y3^2 - 2*f3*f5*h0^2*x1^2*y1*y3 - 2*f3*f5*h0^2*x1*x2*y1*y2 - 2*f3*f5*h0^2*x1*x3*y1^2 - f3*f5*h0*h1*x1*x2*y1*y3 -
    f3*f5*h0*h1*x1*x3*y1*y2 + 2*f3*f5*h0*h2*x1*x3*y1*y3 + f3*f5*h0*h3*x1*x2*y3^2 + f3*f5*h0*h3*x3^2*y1*y2 + 2*f3*f5*h1*h3*x1*x3*y3^2 +
    2*f3*f5*h1*h3*x3^2*y1*y3 + 2*f3*f5*h2*h3*x2*x3*y3^2 + 2*f3*f5*h2*h3*x3^2*y2*y3 + 2*f3*f5*h3^2*x3^2*y3^2 - 2*f3*f5*x1*x3*y3*y4 - 2*f3*f5*x3*x4*y1*y3 -
    2*f3*f6*h0^2*x1^2*y2*y3 + 2*f3*f6*h0^2*x1*x2*y1*y3 - 4*f3*f6*h0^2*x1*x2*y2^2 + 2*f3*f6*h0^2*x1*x3*y1*y2 - 4*f3*f6*h0^2*x2^2*y1*y2 -
    2*f3*f6*h0^2*x2*x3*y1^2 + 2*f3*f6*h0*h1*x1^2*y3^2 - 4*f3*f6*h0*h1*x1*x2*y2*y3 + 8*f3*f6*h0*h1*x1*x3*y1*y3 - 2*f3*f6*h0*h1*x1*x3*y2^2 -
    2*f3*f6*h0*h1*x2^2*y1*y3 - 4*f3*f6*h0*h1*x2*x3*y1*y2 + 2*f3*f6*h0*h1*x3^2*y1^2 - 2*f3*f6*h0*h2*x1*x2*y3^2 + 4*f3*f6*h0*h2*x1*x3*y2*y3 +
    4*f3*f6*h0*h2*x2*x3*y1*y3 - 2*f3*f6*h0*h2*x3^2*y1*y2 - 4*f3*f6*h0*h3*x1*x3*y3^2 + 4*f3*f6*h0*h3*x2^2*y3^2 + 4*f3*f6*h0*h3*x2*x3*y2*y3 -
    4*f3*f6*h0*h3*x3^2*y1*y3 + 4*f3*f6*h0*h3*x3^2*y2^2 - 2*f3*f6*h1^2*x1*x3*y2*y3 - 2*f3*f6*h1^2*x2*x3*y1*y3 - 4*f3*f6*h1*h2*x1*x3*y3^2 -
    4*f3*f6*h1*h2*x3^2*y1*y3 + 4*f3*f6*h1*h3*x2*x3*y3^2 + 4*f3*f6*h1*h3*x3^2*y2*y3 - 2*f3*f6*h2^2*x2*x3*y3^2 - 2*f3*f6*h2^2*x3^2*y2*y3 +
    4*f3*f6*h2*h3*x3^2*y3^2 - 8*f3*f6*x2*x3*y3*y4 - 4*f3*f6*x2*x4*y3^2 - 4*f3*f6*x3^2*y2*y4 - 8*f3*f6*x3*x4*y2*y3 + f3*h0^3*h3*x1^2*y1^2 -
    f3*h0^2*h2*h3*x1^2*y1*y3 - f3*h0^2*h2*h3*x1*x2*y1*y2 - f3*h0^2*h2*h3*x1*x3*y1^2 - f3*h0^2*h3^2*x1^2*y2*y3 + f3*h0^2*h3^2*x1*x2*y1*y3 -
    f3*h0^2*h3^2*x1*x2*y2^2 + f3*h0^2*h3^2*x1*x3*y1*y2 - f3*h0^2*h3^2*x2^2*y1*y2 - f3*h0^2*h3^2*x2*x3*y1^2 - f3*h0*h1*h2*h3*x1*x2*y1*y3 -
    f3*h0*h1*h2*h3*x1*x3*y1*y2 - f3*h0*h1*h3^2*x1*x2*y2*y3 + 2*f3*h0*h1*h3^2*x1*x3*y1*y3 - f3*h0*h1*h3^2*x1*x3*y2^2 - f3*h0*h1*h3^2*x2^2*y1*y3 -
    f3*h0*h1*h3^2*x2*x3*y1*y2 + f3*h0*h1*x1^2*y1*y4 + f3*h0*h1*x1*x4*y1^2 + f3*h0*h2^2*h3*x1*x3*y1*y3 + f3*h0*h2*h3^2*x1*x3*y2*y3 + f3*h0*h2*h3^2*x2*x3*y1*y3
    - f3*h0*h3^3*x1*x3*y3^2 + f3*h0*h3^3*x2^2*y3^2 + f3*h0*h3^3*x2*x3*y2*y3 - f3*h0*h3^3*x3^2*y1*y3 + f3*h0*h3^3*x3^2*y2^2 + f3*h0*h3*x1^2*y3*y4 -
    f3*h0*h3*x1*x3*y1*y4 - f3*h0*h3*x1*x4*y1*y3 + f3*h0*h3*x3*x4*y1^2 - f3*h1^2*h2*h3*x1*x3*y1*y3 - f3*h1^2*h3^2*x1*x3*y2*y3 - f3*h1^2*h3^2*x2*x3*y1*y3 +
    f3*h1*h3^3*x2*x3*y3^2 + f3*h1*h3^3*x3^2*y2*y3 + f3*h1*h3*x1*x3*y2*y4 + f3*h1*h3*x2*x4*y1*y3 + f3*h2*h3^3*x3^2*y3^2 - f3*h2*h3*x1*x3*y3*y4 -
    f3*h2*h3*x3*x4*y1*y3 - 2*f3*h3^2*x2*x3*y3*y4 - f3*h3^2*x2*x4*y3^2 - f3*h3^2*x3^2*y2*y4 - 2*f3*h3^2*x3*x4*y2*y3 - 16*f4^2*f6*x3^2*y3^2 -
    4*f4^2*h3^2*x3^2*y3^2 + 4*f4*f5^2*x3^2*y3^2 - 2*f4*f5*h0^2*x1*x2*y1*y3 - 2*f4*f5*h0^2*x1*x3*y1*y2 - 4*f4*f5*h0*h1*x1*x3*y1*y3 + 4*f4*f5*h2*h3*x3^2*y3^2 -
    4*f4*f6*h0^2*x1^2*y3^2 - 4*f4*f6*h0^2*x1*x3*y1*y3 - 4*f4*f6*h0^2*x2^2*y2^2 - 4*f4*f6*h0^2*x3^2*y1^2 - 4*f4*f6*h0*h1*x2^2*y2*y3 - 4*f4*f6*h0*h1*x2*x3*y2^2
    + 8*f4*f6*h0*h2*x1*x3*y3^2 - 4*f4*f6*h0*h2*x2^2*y3^2 + 8*f4*f6*h0*h2*x3^2*y1*y3 - 4*f4*f6*h0*h2*x3^2*y2^2 + 4*f4*f6*h0*h3*x2*x3*y3^2 +
    4*f4*f6*h0*h3*x3^2*y2*y3 - 4*f4*f6*h1^2*x2*x3*y2*y3 - 4*f4*f6*h1*h2*x2*x3*y3^2 - 4*f4*f6*h1*h2*x3^2*y2*y3 + 4*f4*f6*h1*h3*x3^2*y3^2 -
    8*f4*f6*h2^2*x3^2*y3^2 - 16*f4*f6*x3^2*y3*y4 - 16*f4*f6*x3*x4*y3^2 + f4*h0^3*h3*x1^2*y1*y2 + f4*h0^3*h3*x1*x2*y1^2 + f4*h0^2*h1*h3*x1^2*y1*y3 +
    f4*h0^2*h1*h3*x1*x2*y1*y2 + f4*h0^2*h1*h3*x1*x3*y1^2 - f4*h0^2*h2*h3*x1*x2*y1*y3 - f4*h0^2*h2*h3*x1*x3*y1*y2 - f4*h0^2*h3^2*x1^2*y3^2 -
    f4*h0^2*h3^2*x1*x2*y2*y3 - f4*h0^2*h3^2*x1*x3*y1*y3 + f4*h0^2*h3^2*x1*x3*y2^2 + f4*h0^2*h3^2*x2^2*y1*y3 - f4*h0^2*h3^2*x2^2*y2^2 -
    f4*h0^2*h3^2*x2*x3*y1*y2 - f4*h0^2*h3^2*x3^2*y1^2 - 2*f4*h0^2*x1^2*y1*y4 - 2*f4*h0^2*x1*x4*y1^2 + f4*h0*h1^2*h3*x1*x2*y1*y3 + f4*h0*h1^2*h3*x1*x3*y1*y2 -
    2*f4*h0*h1*h2*h3*x1*x3*y1*y3 - f4*h0*h1*h3^2*x1*x2*y3^2 - f4*h0*h1*h3^2*x2^2*y2*y3 - f4*h0*h1*h3^2*x2*x3*y2^2 - f4*h0*h1*h3^2*x3^2*y1*y2 +
    2*f4*h0*h2*h3^2*x1*x3*y3^2 - f4*h0*h2*h3^2*x2^2*y3^2 + 2*f4*h0*h2*h3^2*x3^2*y1*y3 - f4*h0*h2*h3^2*x3^2*y2^2 + f4*h0*h3^3*x2*x3*y3^2 +
    f4*h0*h3^3*x3^2*y2*y3 + 2*f4*h0*h3*x1*x2*y3*y4 - 2*f4*h0*h3*x1*x3*y2*y4 - 2*f4*h0*h3*x2*x4*y1*y3 + 2*f4*h0*h3*x3*x4*y1*y2 + f4*h1^3*h3*x1*x3*y1*y3 -
    f4*h1^2*h3^2*x1*x3*y3^2 - f4*h1^2*h3^2*x2*x3*y2*y3 - f4*h1^2*h3^2*x3^2*y1*y3 - f4*h1*h2*h3^2*x2*x3*y3^2 - f4*h1*h2*h3^2*x3^2*y2*y3 + f4*h1*h3^3*x3^2*y3^2
    + 2*f4*h1*h3*x1*x3*y3*y4 + 2*f4*h1*h3*x3*x4*y1*y3 - f4*h2^2*h3^2*x3^2*y3^2 - 4*f4*h3^2*x3^2*y3*y4 - 4*f4*h3^2*x3*x4*y3^2 + f5^2*h0^2*x1^2*y3^2 -
    f5^2*h0^2*x1*x2*y2*y3 + 2*f5^2*h0^2*x1*x3*y1*y3 - f5^2*h0^2*x1*x3*y2^2 - f5^2*h0^2*x2^2*y1*y3 + f5^2*h0^2*x2^2*y2^2 - f5^2*h0^2*x2*x3*y1*y2 +
    f5^2*h0^2*x3^2*y1^2 - 2*f5^2*h0*h1*x1*x3*y2*y3 + f5^2*h0*h1*x2^2*y2*y3 - 2*f5^2*h0*h1*x2*x3*y1*y3 + f5^2*h0*h1*x2*x3*y2^2 - 2*f5^2*h0*h2*x1*x3*y3^2 +
    f5^2*h0*h2*x2^2*y3^2 - 2*f5^2*h0*h2*x3^2*y1*y3 + f5^2*h0*h2*x3^2*y2^2 - f5^2*h0*h3*x2*x3*y3^2 - f5^2*h0*h3*x3^2*y2*y3 + f5^2*h1^2*x2*x3*y2*y3 +
    f5^2*h1*h2*x2*x3*y3^2 + f5^2*h1*h2*x3^2*y2*y3 - 3*f5^2*h1*h3*x3^2*y3^2 + f5^2*h2^2*x3^2*y3^2 + 4*f5^2*x3^2*y3*y4 + 4*f5^2*x3*x4*y3^2 -
    2*f5*f6*h0^2*x1*x2*y3^2 - 2*f5*f6*h0^2*x2^2*y2*y3 - 2*f5*f6*h0^2*x2*x3*y2^2 - 2*f5*f6*h0^2*x3^2*y1*y2 - 4*f5*f6*h0*h1*x1*x3*y3^2 -
    4*f5*f6*h0*h1*x2*x3*y2*y3 - 4*f5*f6*h0*h1*x3^2*y1*y3 + 4*f5*f6*h0*h3*x3^2*y3^2 + 4*f5*f6*h1*h2*x3^2*y3^2 - f5*h0^3*h3*x1^2*y1*y3 + f5*h0^3*h3*x1^2*y2^2 +
    f5*h0^3*h3*x1*x2*y1*y2 - f5*h0^3*h3*x1*x3*y1^2 + f5*h0^3*h3*x2^2*y1^2 + f5*h0^2*h1*h3*x1^2*y2*y3 + f5*h0^2*h1*h3*x1*x2*y2^2 + f5*h0^2*h1*h3*x2^2*y1*y2 +
    f5*h0^2*h1*h3*x2*x3*y1^2 + f5*h0^2*h2*h3*x1^2*y3^2 + 3*f5*h0^2*h2*h3*x1*x3*y1*y3 - 2*f5*h0^2*h2*h3*x1*x3*y2^2 - 2*f5*h0^2*h2*h3*x2^2*y1*y3 +
    f5*h0^2*h2*h3*x2^2*y2^2 + f5*h0^2*h2*h3*x3^2*y1^2 - f5*h0^2*h3^2*x1*x2*y3^2 + f5*h0^2*h3^2*x1*x3*y2*y3 - f5*h0^2*h3^2*x2^2*y2*y3 +
    f5*h0^2*h3^2*x2*x3*y1*y3 - f5*h0^2*h3^2*x2*x3*y2^2 - f5*h0^2*h3^2*x3^2*y1*y2 - f5*h0^2*x1^2*y2*y4 - 3*f5*h0^2*x1*x2*y1*y4 - 3*f5*h0^2*x1*x4*y1*y2 -
    f5*h0^2*x2*x4*y1^2 + f5*h0*h1^2*h3*x1*x2*y2*y3 - f5*h0*h1^2*h3*x1*x3*y1*y3 + f5*h0*h1^2*h3*x1*x3*y2^2 + f5*h0*h1^2*h3*x2^2*y1*y3 +
    f5*h0*h1^2*h3*x2*x3*y1*y2 + f5*h0*h1*h2*h3*x1*x2*y3^2 - 2*f5*h0*h1*h2*h3*x1*x3*y2*y3 + f5*h0*h1*h2*h3*x2^2*y2*y3 - 2*f5*h0*h1*h2*h3*x2*x3*y1*y3 +
    f5*h0*h1*h2*h3*x2*x3*y2^2 + f5*h0*h1*h2*h3*x3^2*y1*y2 - f5*h0*h1*h3^2*x2^2*y3^2 - 2*f5*h0*h1*h3^2*x2*x3*y2*y3 - f5*h0*h1*h3^2*x3^2*y2^2 -
    f5*h0*h1*x1*x2*y2*y4 - 2*f5*h0*h1*x1*x3*y1*y4 - 2*f5*h0*h1*x1*x4*y1*y3 - f5*h0*h1*x2*x4*y1*y2 - 2*f5*h0*h2^2*h3*x1*x3*y3^2 + f5*h0*h2^2*h3*x2^2*y3^2 -
    2*f5*h0*h2^2*h3*x3^2*y1*y3 + f5*h0*h2^2*h3*x3^2*y2^2 - f5*h0*h2*h3^2*x2*x3*y3^2 - f5*h0*h2*h3^2*x3^2*y2*y3 - f5*h0*h2*x1*x2*y3*y4 + f5*h0*h2*x1*x3*y2*y4
    + f5*h0*h2*x2*x4*y1*y3 - f5*h0*h2*x3*x4*y1*y2 + f5*h0*h3^3*x3^2*y3^2 - 3*f5*h0*h3*x1*x3*y3*y4 + 2*f5*h0*h3*x1*x4*y3^2 + 2*f5*h0*h3*x2^2*y3*y4 +
    2*f5*h0*h3*x3^2*y1*y4 - 3*f5*h0*h3*x3*x4*y1*y3 + 2*f5*h0*h3*x3*x4*y2^2 + f5*h1^3*h3*x1*x3*y2*y3 + f5*h1^3*h3*x2*x3*y1*y3 + f5*h1^2*h2*h3*x1*x3*y3^2 +
    f5*h1^2*h2*h3*x2*x3*y2*y3 + f5*h1^2*h2*h3*x3^2*y1*y3 - f5*h1^2*h3^2*x2*x3*y3^2 - f5*h1^2*h3^2*x3^2*y2*y3 - f5*h1^2*x1*x3*y2*y4 - f5*h1^2*x2*x4*y1*y3 +
    f5*h1*h2^2*h3*x2*x3*y3^2 + f5*h1*h2^2*h3*x3^2*y2*y3 - 2*f5*h1*h2*h3^2*x3^2*y3^2 - f5*h1*h2*x1*x3*y3*y4 - f5*h1*h2*x3*x4*y1*y3 + 2*f5*h1*h3*x2*x3*y3*y4 +
    f5*h1*h3*x2*x4*y3^2 + f5*h1*h3*x3^2*y2*y4 + 2*f5*h1*h3*x3*x4*y2*y3 + f5*h2^3*h3*x3^2*y3^2 + 4*f5*h2*h3*x3^2*y3*y4 + 4*f5*h2*h3*x3*x4*y3^2 -
    2*f5*x2*x4*y3*y4 - 2*f5*x3*x4*y2*y4 + 4*f6^2*h0^2*x1*x3*y3^2 - 4*f6^2*h0^2*x2^2*y3^2 - 4*f6^2*h0^2*x2*x3*y2*y3 + 4*f6^2*h0^2*x3^2*y1*y3 -
    4*f6^2*h0^2*x3^2*y2^2 - 8*f6^2*h0*h1*x2*x3*y3^2 - 8*f6^2*h0*h1*x3^2*y2*y3 - 8*f6^2*h0*h2*x3^2*y3^2 - 4*f6^2*h1^2*x3^2*y3^2 - f6*h0^4*x1^2*y1^2 -
    f6*h0^3*h1*x1^2*y1*y2 - f6*h0^3*h1*x1*x2*y1^2 + 2*f6*h0^3*h2*x1^2*y1*y3 - f6*h0^3*h2*x1^2*y2^2 + 2*f6*h0^3*h2*x1*x3*y1^2 - f6*h0^3*h2*x2^2*y1^2 +
    f6*h0^3*h3*x1^2*y2*y3 - f6*h0^3*h3*x1*x2*y1*y3 + f6*h0^3*h3*x1*x2*y2^2 - f6*h0^3*h3*x1*x3*y1*y2 + f6*h0^3*h3*x2^2*y1*y2 + f6*h0^3*h3*x2*x3*y1^2 -
    f6*h0^2*h1^2*x1^2*y1*y3 - f6*h0^2*h1^2*x1*x2*y1*y2 - f6*h0^2*h1^2*x1*x3*y1^2 - f6*h0^2*h1*h2*x1^2*y2*y3 + 2*f6*h0^2*h1*h2*x1*x2*y1*y3 -
    f6*h0^2*h1*h2*x1*x2*y2^2 + 2*f6*h0^2*h1*h2*x1*x3*y1*y2 - f6*h0^2*h1*h2*x2^2*y1*y2 - f6*h0^2*h1*h2*x2*x3*y1^2 + f6*h0^2*h1*h3*x1^2*y3^2 +
    2*f6*h0^2*h1*h3*x1*x2*y2*y3 - f6*h0^2*h1*h3*x1*x3*y1*y3 + f6*h0^2*h1*h3*x2^2*y2^2 + 2*f6*h0^2*h1*h3*x2*x3*y1*y2 + f6*h0^2*h1*h3*x3^2*y1^2 -
    f6*h0^2*h2^2*x1^2*y3^2 - 4*f6*h0^2*h2^2*x1*x3*y1*y3 + 2*f6*h0^2*h2^2*x1*x3*y2^2 + 2*f6*h0^2*h2^2*x2^2*y1*y3 - f6*h0^2*h2^2*x2^2*y2^2 -
    f6*h0^2*h2^2*x3^2*y1^2 + f6*h0^2*h2*h3*x1*x2*y3^2 - 2*f6*h0^2*h2*h3*x1*x3*y2*y3 + f6*h0^2*h2*h3*x2^2*y2*y3 - 2*f6*h0^2*h2*h3*x2*x3*y1*y3 +
    f6*h0^2*h2*h3*x2*x3*y2^2 + f6*h0^2*h2*h3*x3^2*y1*y2 + f6*h0^2*h3^2*x1*x3*y3^2 - f6*h0^2*h3^2*x2^2*y3^2 - f6*h0^2*h3^2*x2*x3*y2*y3 +
    f6*h0^2*h3^2*x3^2*y1*y3 - f6*h0^2*h3^2*x3^2*y2^2 - 2*f6*h0^2*x1^2*y3*y4 - 2*f6*h0^2*x1*x2*y2*y4 + 2*f6*h0^2*x1*x3*y1*y4 + 2*f6*h0^2*x1*x4*y1*y3 -
    4*f6*h0^2*x1*x4*y2^2 - 4*f6*h0^2*x2^2*y1*y4 - 2*f6*h0^2*x2*x4*y1*y2 - 2*f6*h0^2*x3*x4*y1^2 - f6*h0*h1^3*x1*x2*y1*y3 - f6*h0*h1^3*x1*x3*y1*y2 -
    f6*h0*h1^2*h2*x1*x2*y2*y3 + 4*f6*h0*h1^2*h2*x1*x3*y1*y3 - f6*h0*h1^2*h2*x1*x3*y2^2 - f6*h0*h1^2*h2*x2^2*y1*y3 - f6*h0*h1^2*h2*x2*x3*y1*y2 +
    f6*h0*h1^2*h3*x1*x2*y3^2 + f6*h0*h1^2*h3*x1*x3*y2*y3 + f6*h0*h1^2*h3*x2^2*y2*y3 + f6*h0*h1^2*h3*x2*x3*y1*y3 + f6*h0*h1^2*h3*x2*x3*y2^2 +
    f6*h0*h1^2*h3*x3^2*y1*y2 - f6*h0*h1*h2^2*x1*x2*y3^2 + 2*f6*h0*h1*h2^2*x1*x3*y2*y3 - f6*h0*h1*h2^2*x2^2*y2*y3 + 2*f6*h0*h1*h2^2*x2*x3*y1*y3 -
    f6*h0*h1*h2^2*x2*x3*y2^2 - f6*h0*h1*h2^2*x3^2*y1*y2 - 2*f6*h0*h1*h2*h3*x1*x3*y3^2 + 2*f6*h0*h1*h2*h3*x2^2*y3^2 + 2*f6*h0*h1*h2*h3*x2*x3*y2*y3 -
    2*f6*h0*h1*h2*h3*x3^2*y1*y3 + 2*f6*h0*h1*h2*h3*x3^2*y2^2 - 2*f6*h0*h1*h3^2*x2*x3*y3^2 - 2*f6*h0*h1*h3^2*x3^2*y2*y3 - 2*f6*h0*h1*x1*x2*y3*y4 -
    4*f6*h0*h1*x1*x4*y2*y3 - 2*f6*h0*h1*x2^2*y2*y4 - 4*f6*h0*h1*x2*x3*y1*y4 - 2*f6*h0*h1*x2*x4*y2^2 - 2*f6*h0*h1*x3*x4*y1*y2 + 2*f6*h0*h2^3*x1*x3*y3^2 -
    f6*h0*h2^3*x2^2*y3^2 + 2*f6*h0*h2^3*x3^2*y1*y3 - f6*h0*h2^3*x3^2*y2^2 + f6*h0*h2^2*h3*x2*x3*y3^2 + f6*h0*h2^2*h3*x3^2*y2*y3 - 2*f6*h0*h2*h3^2*x3^2*y3^2 +
    6*f6*h0*h2*x1*x3*y3*y4 - 4*f6*h0*h2*x1*x4*y3^2 - 4*f6*h0*h2*x2^2*y3*y4 - 4*f6*h0*h2*x3^2*y1*y4 + 6*f6*h0*h2*x3*x4*y1*y3 - 4*f6*h0*h2*x3*x4*y2^2 -
    f6*h1^4*x1*x3*y1*y3 - f6*h1^3*h2*x1*x3*y2*y3 - f6*h1^3*h2*x2*x3*y1*y3 + f6*h1^3*h3*x1*x3*y3^2 + f6*h1^3*h3*x2*x3*y2*y3 + f6*h1^3*h3*x3^2*y1*y3 -
    f6*h1^2*h2^2*x1*x3*y3^2 - f6*h1^2*h2^2*x2*x3*y2*y3 - f6*h1^2*h2^2*x3^2*y1*y3 + 2*f6*h1^2*h2*h3*x2*x3*y3^2 + 2*f6*h1^2*h2*h3*x3^2*y2*y3 -
    f6*h1^2*h3^2*x3^2*y3^2 - 2*f6*h1^2*x1*x3*y3*y4 - 2*f6*h1^2*x2*x3*y2*y4 - 2*f6*h1^2*x2*x4*y2*y3 - 2*f6*h1^2*x3*x4*y1*y3 - f6*h1*h2^3*x2*x3*y3^2 -
    f6*h1*h2^3*x3^2*y2*y3 + 3*f6*h1*h2^2*h3*x3^2*y3^2 - 4*f6*h1*h2*x2*x3*y3*y4 - 2*f6*h1*h2*x2*x4*y3^2 - 2*f6*h1*h2*x3^2*y2*y4 - 4*f6*h1*h2*x3*x4*y2*y3 -
    f6*h2^4*x3^2*y3^2 - 4*f6*h2^2*x3^2*y3*y4 - 4*f6*h2^2*x3*x4*y3^2 - 12*f6*x3*x4*y3*y4 - 4*h0*h2*x1*x4*y1*y4 - 3*h0*h3*x1*x4*y2*y4 - 3*h0*h3*x2*x4*y1*y4 +
    h1^2*x1*x4*y1*y4 - h1*h3*x1*x4*y3*y4 - h1*h3*x2*x4*y2*y4 - h1*h3*x3*x4*y1*y4 - h2*h3*x2*x4*y3*y4 - h2*h3*x3*x4*y2*y4 - 3*h3^2*x3*x4*y3*y4 + 2*x1*x4*y4^2
    + 2*x4^2*y1*y4
        where BBB22 := h eq 0 select
        (-8*f0*f2 + 2*f1^2)*x1^2*y1^2 - 4*f0*f3*x1^2*y1*y2 - 2*f1*f3*x1^2*y1*y3 -
    4*f0*x1^2*y1*y4 - 4*f0*f4*x1^2*y2^2 + (-4*f0*f5 - 4*f1*f4)*x1^2*y2*y3 -
    2*f1*x1^2*y2*y4 + (-4*f0*f6 - 2*f1*f5 - 4*f2*f4 + f3^2)*x1^2*y3^2 -
    4*f2*x1^2*y3*y4 - 4*f0*f3*x1*x2*y1^2 + 8*f0*f5*x1*x2*y1*y3 -
    4*f0*f5*x1*x2*y2^2 - 4*f1*f5*x1*x2*y2*y3 + (-4*f1*f6 - 4*f2*f5)*x1*x2*y3^2 -
    2*f3*x1*x2*y3*y4 - 2*f1*f3*x1*x3*y1^2 + 8*f0*f5*x1*x3*y1*y2 +
    8*f1*f5*x1*x3*y1*y3 + 8*f0*f6*x1*x3*y2^2 + 8*f1*f6*x1*x3*y2*y3 +
    2*f3*x1*x3*y2*y4 - 2*f3*f5*x1*x3*y3^2 - 4*f0*x1*x4*y1^2 - 2*f3*x1*x4*y2*y3 -
    4*f4*x1*x4*y3^2 - 4*x1*x4*y3*y4 - 4*f0*f4*x2^2*y1^2 - 4*f0*f5*x2^2*y1*y2 +
    8*f0*f6*x2^2*y1*y3 - 8*f0*f6*x2^2*y2^2 - 4*f1*f6*x2^2*y2*y3 -
    4*f2*f6*x2^2*y3^2 + x2^2*y4^2 + (-4*f0*f5 - 4*f1*f4)*x2*x3*y1^2 -
    4*f1*f5*x2*x3*y1*y2 + 8*f1*f6*x2*x3*y1*y3 - 2*f3*x2*x3*y1*y4 -
    4*f1*f6*x2*x3*y2^2 - 4*f3*f6*x2*x3*y3^2 - 2*f1*x2*x4*y1^2 + 2*f3*x2*x4*y1*y3
    - 2*f5*x2*x4*y3^2 + (-4*f0*f6 - 2*f1*f5 - 4*f2*f4 + f3^2)*x3^2*y1^2 +
    (-4*f1*f6 - 4*f2*f5)*x3^2*y1*y2 - 2*f3*f5*x3^2*y1*y3 - 4*f4*x3^2*y1*y4 -
    4*f2*f6*x3^2*y2^2 - 4*f3*f6*x3^2*y2*y3 - 2*f5*x3^2*y2*y4 + (-8*f4*f6 +
    2*f5^2)*x3^2*y3^2 - 4*f6*x3^2*y3*y4 - 4*f2*x3*x4*y1^2 - 2*f3*x3*x4*y1*y2 -
    4*x3*x4*y1*y4 - 4*f6*x3*x4*y3^2 + x4^2*y2^2
                        else
-8*f0*f2*x1^2*y1^2 - 4*f0*f3*x1^2*y1*y2 - 4*f0*f3*x1*x2*y1^2 - 4*f0*f4*x1^2*y2^2 - 4*f0*f4*x2^2*y1^2 - 4*f0*f5*x1^2*y2*y3 + 8*f0*f5*x1*x2*y1*y3 -
    4*f0*f5*x1*x2*y2^2 + 8*f0*f5*x1*x3*y1*y2 - 4*f0*f5*x2^2*y1*y2 - 4*f0*f5*x2*x3*y1^2 - 4*f0*f6*x1^2*y3^2 + 8*f0*f6*x1*x3*y2^2 + 8*f0*f6*x2^2*y1*y3 -
    8*f0*f6*x2^2*y2^2 - 4*f0*f6*x3^2*y1^2 - 2*f0*h1^2*x1^2*y1^2 - 2*f0*h1*h2*x1^2*y1*y2 - 2*f0*h1*h2*x1*x2*y1^2 + 2*f0*h1*h3*x1^2*y1*y3 -
    2*f0*h1*h3*x1^2*y2^2 + 2*f0*h1*h3*x1*x3*y1^2 - 2*f0*h1*h3*x2^2*y1^2 - f0*h2^2*x1^2*y2^2 - f0*h2^2*x2^2*y1^2 - 2*f0*h2*h3*x1^2*y2*y3 +
    4*f0*h2*h3*x1*x2*y1*y3 - 2*f0*h2*h3*x1*x2*y2^2 + 4*f0*h2*h3*x1*x3*y1*y2 - 2*f0*h2*h3*x2^2*y1*y2 - 2*f0*h2*h3*x2*x3*y1^2 - f0*h3^2*x1^2*y3^2 +
    2*f0*h3^2*x1*x3*y2^2 + 2*f0*h3^2*x2^2*y1*y3 - 2*f0*h3^2*x2^2*y2^2 - f0*h3^2*x3^2*y1^2 - 4*f0*x1^2*y1*y4 - 4*f0*x1*x4*y1^2 + 2*f1^2*x1^2*y1^2 -
    2*f1*f3*x1^2*y1*y3 - 2*f1*f3*x1*x3*y1^2 - 4*f1*f4*x1^2*y2*y3 - 4*f1*f4*x2*x3*y1^2 - 2*f1*f5*x1^2*y3^2 - 4*f1*f5*x1*x2*y2*y3 + 8*f1*f5*x1*x3*y1*y3 -
    4*f1*f5*x2*x3*y1*y2 - 2*f1*f5*x3^2*y1^2 - 4*f1*f6*x1*x2*y3^2 + 8*f1*f6*x1*x3*y2*y3 - 4*f1*f6*x2^2*y2*y3 + 8*f1*f6*x2*x3*y1*y3 - 4*f1*f6*x2*x3*y2^2 -
    4*f1*f6*x3^2*y1*y2 + 2*f1*h0*h1*x1^2*y1^2 + f1*h0*h2*x1^2*y1*y2 + f1*h0*h2*x1*x2*y1^2 - f1*h0*h3*x1^2*y1*y3 + f1*h0*h3*x1^2*y2^2 - f1*h0*h3*x1*x3*y1^2 +
    f1*h0*h3*x2^2*y1^2 - f1*h1*h2*x1^2*y1*y3 - f1*h1*h2*x1*x3*y1^2 - f1*h1*h3*x1^2*y2*y3 - f1*h1*h3*x2*x3*y1^2 - f1*h2^2*x1^2*y2*y3 - f1*h2^2*x2*x3*y1^2 -
    f1*h2*h3*x1^2*y3^2 - 2*f1*h2*h3*x1*x2*y2*y3 + 4*f1*h2*h3*x1*x3*y1*y3 - 2*f1*h2*h3*x2*x3*y1*y2 - f1*h2*h3*x3^2*y1^2 - f1*h3^2*x1*x2*y3^2 +
    2*f1*h3^2*x1*x3*y2*y3 - f1*h3^2*x2^2*y2*y3 + 2*f1*h3^2*x2*x3*y1*y3 - f1*h3^2*x2*x3*y2^2 - f1*h3^2*x3^2*y1*y2 - 2*f1*x1^2*y2*y4 - 2*f1*x2*x4*y1^2 -
    4*f2*f4*x1^2*y3^2 - 4*f2*f4*x3^2*y1^2 - 4*f2*f5*x1*x2*y3^2 - 4*f2*f5*x3^2*y1*y2 - 4*f2*f6*x2^2*y3^2 - 4*f2*f6*x3^2*y2^2 - 2*f2*h0^2*x1^2*y1^2 +
    2*f2*h0*h2*x1^2*y1*y3 + 2*f2*h0*h2*x1*x3*y1^2 + 2*f2*h0*h3*x1^2*y2*y3 + 2*f2*h0*h3*x2*x3*y1^2 - f2*h2^2*x1^2*y3^2 - f2*h2^2*x3^2*y1^2 -
    2*f2*h2*h3*x1*x2*y3^2 - 2*f2*h2*h3*x3^2*y1*y2 - f2*h3^2*x2^2*y3^2 - f2*h3^2*x3^2*y2^2 - 4*f2*x1^2*y3*y4 - 4*f2*x3*x4*y1^2 + f3^2*x1^2*y3^2 +
    f3^2*x3^2*y1^2 - 2*f3*f5*x1*x3*y3^2 - 2*f3*f5*x3^2*y1*y3 - 4*f3*f6*x2*x3*y3^2 - 4*f3*f6*x3^2*y2*y3 - f3*h0^2*x1^2*y1*y2 - f3*h0^2*x1*x2*y1^2 -
    f3*h0*h1*x1^2*y1*y3 - f3*h0*h1*x1*x3*y1^2 + f3*h0*h2*x1^2*y2*y3 + f3*h0*h2*x2*x3*y1^2 + f3*h0*h3*x1^2*y3^2 + 2*f3*h0*h3*x1*x2*y2*y3 - f3*h0*h3*x1*x3*y2^2
    - f3*h0*h3*x2^2*y1*y3 + 2*f3*h0*h3*x2*x3*y1*y2 + f3*h0*h3*x3^2*y1^2 + f3*h1*h2*x1^2*y3^2 + f3*h1*h2*x3^2*y1^2 + f3*h1*h3*x1*x2*y3^2 + f3*h1*h3*x3^2*y1*y2
    - f3*h2*h3*x1*x3*y3^2 - f3*h2*h3*x3^2*y1*y3 - f3*h3^2*x2*x3*y3^2 - f3*h3^2*x3^2*y2*y3 - 2*f3*x1*x2*y3*y4 + 2*f3*x1*x3*y2*y4 - 2*f3*x1*x4*y2*y3 -
    2*f3*x2*x3*y1*y4 + 2*f3*x2*x4*y1*y3 - 2*f3*x3*x4*y1*y2 - 8*f4*f6*x3^2*y3^2 - f4*h0^2*x1^2*y2^2 - f4*h0^2*x2^2*y1^2 - 2*f4*h0*h1*x1^2*y2*y3 -
    2*f4*h0*h1*x2*x3*y1^2 + 2*f4*h0*h3*x1*x2*y3^2 + 2*f4*h0*h3*x3^2*y1*y2 - f4*h1^2*x1^2*y3^2 - f4*h1^2*x3^2*y1^2 + 2*f4*h1*h3*x1*x3*y3^2 +
    2*f4*h1*h3*x3^2*y1*y3 - 2*f4*h3^2*x3^2*y3^2 - 4*f4*x1*x4*y3^2 - 4*f4*x3^2*y1*y4 + 2*f5^2*x3^2*y3^2 - f5*h0^2*x1^2*y2*y3 + 2*f5*h0^2*x1*x2*y1*y3 -
    f5*h0^2*x1*x2*y2^2 + 2*f5*h0^2*x1*x3*y1*y2 - f5*h0^2*x2^2*y1*y2 - f5*h0^2*x2*x3*y1^2 - f5*h0*h1*x1^2*y3^2 - 2*f5*h0*h1*x1*x2*y2*y3 +
    4*f5*h0*h1*x1*x3*y1*y3 - 2*f5*h0*h1*x2*x3*y1*y2 - f5*h0*h1*x3^2*y1^2 - f5*h0*h2*x1*x2*y3^2 - f5*h0*h2*x3^2*y1*y2 - f5*h0*h3*x1*x3*y3^2 +
    f5*h0*h3*x2^2*y3^2 - f5*h0*h3*x3^2*y1*y3 + f5*h0*h3*x3^2*y2^2 - f5*h1^2*x1*x2*y3^2 - f5*h1^2*x3^2*y1*y2 - f5*h1*h2*x1*x3*y3^2 - f5*h1*h2*x3^2*y1*y3 +
    f5*h1*h3*x2*x3*y3^2 + f5*h1*h3*x3^2*y2*y3 + 2*f5*h2*h3*x3^2*y3^2 - 2*f5*x2*x4*y3^2 - 2*f5*x3^2*y2*y4 - f6*h0^2*x1^2*y3^2 + 2*f6*h0^2*x1*x3*y2^2 +
    2*f6*h0^2*x2^2*y1*y3 - 2*f6*h0^2*x2^2*y2^2 - f6*h0^2*x3^2*y1^2 - 2*f6*h0*h1*x1*x2*y3^2 + 4*f6*h0*h1*x1*x3*y2*y3 - 2*f6*h0*h1*x2^2*y2*y3 +
    4*f6*h0*h1*x2*x3*y1*y3 - 2*f6*h0*h1*x2*x3*y2^2 - 2*f6*h0*h1*x3^2*y1*y2 + 2*f6*h0*h2*x1*x3*y3^2 - 2*f6*h0*h2*x2^2*y3^2 + 2*f6*h0*h2*x3^2*y1*y3 -
    2*f6*h0*h2*x3^2*y2^2 - f6*h1^2*x2^2*y3^2 - f6*h1^2*x3^2*y2^2 - 2*f6*h1*h2*x2*x3*y3^2 - 2*f6*h1*h2*x3^2*y2*y3 - 2*f6*h2^2*x3^2*y3^2 - 4*f6*x3^2*y3*y4 -
    4*f6*x3*x4*y3^2 - h0^2*x1^2*y1*y4 - h0^2*x1*x4*y1^2 - h0*h1*x1^2*y2*y4 - h0*h1*x2*x4*y1^2 + 2*h0*h2*x1*x3*y1*y4 + 2*h0*h2*x1*x4*y1*y3 - h0*h2*x1*x4*y2^2
    - h0*h2*x2^2*y1*y4 + h0*h3*x1*x2*y3*y4 + h0*h3*x1*x3*y2*y4 + h0*h3*x1*x4*y2*y3 - h0*h3*x2^2*y2*y4 + h0*h3*x2*x3*y1*y4 + h0*h3*x2*x4*y1*y3 -
    h0*h3*x2*x4*y2^2 + h0*h3*x3*x4*y1*y2 - h1^2*x1^2*y3*y4 - h1^2*x3*x4*y1^2 - h1*h2*x1*x2*y3*y4 + h1*h2*x1*x3*y2*y4 - h1*h2*x1*x4*y2*y3 - h1*h2*x2*x3*y1*y4
    + h1*h2*x2*x4*y1*y3 - h1*h2*x3*x4*y1*y2 + 2*h1*h3*x1*x3*y3*y4 - h1*h3*x2^2*y3*y4 + 2*h1*h3*x3*x4*y1*y3 - h1*h3*x3*x4*y2^2 - h2^2*x1*x4*y3^2 -
    h2^2*x3^2*y1*y4 - h2*h3*x2*x4*y3^2 - h2*h3*x3^2*y2*y4 - h3^2*x3^2*y3*y4 - h3^2*x3*x4*y3^2 - 4*x1*x4*y3*y4 + x2^2*y4^2 - 4*x3*x4*y1*y4 + x4^2*y2^2
        where BBB23 := h eq 0 select
        4*f0*f3*x1^2*y2^2 + (8*f0*f4 + 2*f1*f3)*x1^2*y2*y3 + 4*f0*x1^2*y2*y4 + (4*f0*f5
    + 4*f1*f4)*x1^2*y3^2 + 4*f1*x1^2*y3*y4 - 8*f0*f3*x1*x2*y1*y2 + (-8*f0*f4 -
    2*f1*f3)*x1*x2*y1*y3 - 4*f0*x1*x2*y1*y4 + 4*f0*f5*x1*x2*y2*y3 -
    2*f1*x1*x2*y2*y4 + (8*f0*f6 + 4*f1*f5)*x1*x2*y3^2 + (-8*f0*f4 -
    2*f1*f3)*x1*x3*y1*y2 + (-8*f0*f5 - 8*f1*f4)*x1*x3*y1*y3 - 4*f1*x1*x3*y1*y4 -
    4*f0*f5*x1*x3*y2^2 + (-8*f0*f6 - 4*f1*f5)*x1*x3*y2*y3 - 4*f2*x1*x3*y2*y4 -
    2*f3*x1*x3*y3*y4 - 4*f0*x1*x4*y1*y2 - 4*f1*x1*x4*y1*y3 + 2*f1*x1*x4*y2^2 +
    4*f2*x1*x4*y2*y3 + 2*f3*x1*x4*y3^2 + 4*f0*f3*x2^2*y1^2 - 4*f0*f5*x2^2*y1*y3
    + 2*f1*x2^2*y1*y4 + 4*f1*f6*x2^2*y3^2 + (8*f0*f4 + 2*f1*f3)*x2*x3*y1^2 +
    4*f0*f5*x2*x3*y1*y2 + (-8*f0*f6 - 4*f1*f5)*x2*x3*y1*y3 + 4*f2*x2*x3*y1*y4 -
    8*f1*f6*x2*x3*y2*y3 + 2*x2*x3*y4^2 + 4*f0*x2*x4*y1^2 - 2*f1*x2*x4*y1*y2 -
    4*f2*x2*x4*y1*y3 - 2*x2*x4*y3*y4 + (4*f0*f5 + 4*f1*f4)*x3^2*y1^2 + (8*f0*f6
    + 4*f1*f5)*x3^2*y1*y2 + 2*f3*x3^2*y1*y4 + 4*f1*f6*x3^2*y2^2 +
    4*f1*x3*x4*y1^2 - 2*f3*x3*x4*y1*y3 - 2*x3*x4*y2*y4 + 2*x4^2*y2*y3
                        else
4*f0*f3*x1^2*y2^2 - 8*f0*f3*x1*x2*y1*y2 + 4*f0*f3*x2^2*y1^2 + 8*f0*f4*x1^2*y2*y3 - 8*f0*f4*x1*x2*y1*y3 - 8*f0*f4*x1*x3*y1*y2 + 8*f0*f4*x2*x3*y1^2 +
    4*f0*f5*x1^2*y3^2 + 4*f0*f5*x1*x2*y2*y3 - 8*f0*f5*x1*x3*y1*y3 - 4*f0*f5*x1*x3*y2^2 - 4*f0*f5*x2^2*y1*y3 + 4*f0*f5*x2*x3*y1*y2 + 4*f0*f5*x3^2*y1^2 +
    8*f0*f6*x1*x2*y3^2 - 8*f0*f6*x1*x3*y2*y3 - 8*f0*f6*x2*x3*y1*y3 + 8*f0*f6*x3^2*y1*y2 + 2*f0*h1*h2*x1^2*y2^2 - 4*f0*h1*h2*x1*x2*y1*y2 +
    2*f0*h1*h2*x2^2*y1^2 + 2*f0*h1*h3*x1^2*y2*y3 - 2*f0*h1*h3*x1*x2*y1*y3 - 2*f0*h1*h3*x1*x3*y1*y2 + 2*f0*h1*h3*x2*x3*y1^2 + 2*f0*h2^2*x1^2*y2*y3 -
    2*f0*h2^2*x1*x2*y1*y3 - 2*f0*h2^2*x1*x3*y1*y2 + 2*f0*h2^2*x2*x3*y1^2 + 2*f0*h2*h3*x1^2*y3^2 + 2*f0*h2*h3*x1*x2*y2*y3 - 4*f0*h2*h3*x1*x3*y1*y3 -
    2*f0*h2*h3*x1*x3*y2^2 - 2*f0*h2*h3*x2^2*y1*y3 + 2*f0*h2*h3*x2*x3*y1*y2 + 2*f0*h2*h3*x3^2*y1^2 + 2*f0*h3^2*x1*x2*y3^2 - 2*f0*h3^2*x1*x3*y2*y3 -
    2*f0*h3^2*x2*x3*y1*y3 + 2*f0*h3^2*x3^2*y1*y2 + 4*f0*x1^2*y2*y4 - 4*f0*x1*x2*y1*y4 - 4*f0*x1*x4*y1*y2 + 4*f0*x2*x4*y1^2 + 2*f1*f3*x1^2*y2*y3 -
    2*f1*f3*x1*x2*y1*y3 - 2*f1*f3*x1*x3*y1*y2 + 2*f1*f3*x2*x3*y1^2 + 4*f1*f4*x1^2*y3^2 - 8*f1*f4*x1*x3*y1*y3 + 4*f1*f4*x3^2*y1^2 + 4*f1*f5*x1*x2*y3^2 -
    4*f1*f5*x1*x3*y2*y3 - 4*f1*f5*x2*x3*y1*y3 + 4*f1*f5*x3^2*y1*y2 + 4*f1*f6*x2^2*y3^2 - 8*f1*f6*x2*x3*y2*y3 + 4*f1*f6*x3^2*y2^2 - f1*h0*h2*x1^2*y2^2 +
    2*f1*h0*h2*x1*x2*y1*y2 - f1*h0*h2*x2^2*y1^2 - f1*h0*h3*x1^2*y2*y3 + f1*h0*h3*x1*x2*y1*y3 + f1*h0*h3*x1*x3*y1*y2 - f1*h0*h3*x2*x3*y1^2 +
    f1*h1*h2*x1^2*y2*y3 - f1*h1*h2*x1*x2*y1*y3 - f1*h1*h2*x1*x3*y1*y2 + f1*h1*h2*x2*x3*y1^2 + f1*h1*h3*x1*x2*y2*y3 - f1*h1*h3*x1*x3*y2^2 -
    f1*h1*h3*x2^2*y1*y3 + f1*h1*h3*x2*x3*y1*y2 + f1*h2^2*x1^2*y3^2 - 2*f1*h2^2*x1*x3*y1*y3 + f1*h2^2*x3^2*y1^2 + 2*f1*h2*h3*x1*x2*y3^2 -
    2*f1*h2*h3*x1*x3*y2*y3 - 2*f1*h2*h3*x2*x3*y1*y3 + 2*f1*h2*h3*x3^2*y1*y2 + f1*h3^2*x2^2*y3^2 - 2*f1*h3^2*x2*x3*y2*y3 + f1*h3^2*x3^2*y2^2 + 4*f1*x1^2*y3*y4
    - 2*f1*x1*x2*y2*y4 - 4*f1*x1*x3*y1*y4 - 4*f1*x1*x4*y1*y3 + 2*f1*x1*x4*y2^2 + 2*f1*x2^2*y1*y4 - 2*f1*x2*x4*y1*y2 + 4*f1*x3*x4*y1^2 - 2*f2*h0*h2*x1^2*y2*y3
    + 2*f2*h0*h2*x1*x2*y1*y3 + 2*f2*h0*h2*x1*x3*y1*y2 - 2*f2*h0*h2*x2*x3*y1^2 - 2*f2*h0*h3*x1*x2*y2*y3 + 2*f2*h0*h3*x1*x3*y2^2 + 2*f2*h0*h3*x2^2*y1*y3 -
    2*f2*h0*h3*x2*x3*y1*y2 - 4*f2*x1*x3*y2*y4 + 4*f2*x1*x4*y2*y3 + 4*f2*x2*x3*y1*y4 - 4*f2*x2*x4*y1*y3 + f3*h0^2*x1^2*y2^2 - 2*f3*h0^2*x1*x2*y1*y2 +
    f3*h0^2*x2^2*y1^2 + f3*h0*h1*x1^2*y2*y3 - f3*h0*h1*x1*x2*y1*y3 - f3*h0*h1*x1*x3*y1*y2 + f3*h0*h1*x2*x3*y1^2 - f3*h0*h2*x1^2*y3^2 + 2*f3*h0*h2*x1*x3*y1*y3
    - f3*h0*h2*x3^2*y1^2 - f3*h0*h3*x1*x2*y3^2 + f3*h0*h3*x1*x3*y2*y3 + f3*h0*h3*x2*x3*y1*y3 - f3*h0*h3*x3^2*y1*y2 - 2*f3*x1*x3*y3*y4 + 2*f3*x1*x4*y3^2 +
    2*f3*x3^2*y1*y4 - 2*f3*x3*x4*y1*y3 + 2*f4*h0^2*x1^2*y2*y3 - 2*f4*h0^2*x1*x2*y1*y3 - 2*f4*h0^2*x1*x3*y1*y2 + 2*f4*h0^2*x2*x3*y1^2 + 2*f4*h0*h1*x1^2*y3^2 -
    4*f4*h0*h1*x1*x3*y1*y3 + 2*f4*h0*h1*x3^2*y1^2 + f5*h0^2*x1^2*y3^2 + f5*h0^2*x1*x2*y2*y3 - 2*f5*h0^2*x1*x3*y1*y3 - f5*h0^2*x1*x3*y2^2 - f5*h0^2*x2^2*y1*y3
    + f5*h0^2*x2*x3*y1*y2 + f5*h0^2*x3^2*y1^2 + 2*f5*h0*h1*x1*x2*y3^2 - 2*f5*h0*h1*x1*x3*y2*y3 - 2*f5*h0*h1*x2*x3*y1*y3 + 2*f5*h0*h1*x3^2*y1*y2 +
    2*f6*h0^2*x1*x2*y3^2 - 2*f6*h0^2*x1*x3*y2*y3 - 2*f6*h0^2*x2*x3*y1*y3 + 2*f6*h0^2*x3^2*y1*y2 + 2*f6*h0*h1*x2^2*y3^2 - 4*f6*h0*h1*x2*x3*y2*y3 +
    2*f6*h0*h1*x3^2*y2^2 + h0^2*x1^2*y2*y4 - h0^2*x1*x2*y1*y4 - h0^2*x1*x4*y1*y2 + h0^2*x2*x4*y1^2 + 2*h0*h1*x1^2*y3*y4 - h0*h1*x1*x2*y2*y4 -
    2*h0*h1*x1*x3*y1*y4 - 2*h0*h1*x1*x4*y1*y3 + h0*h1*x1*x4*y2^2 + h0*h1*x2^2*y1*y4 - h0*h1*x2*x4*y1*y2 + 2*h0*h1*x3*x4*y1^2 + h0*h2*x1*x2*y3*y4 -
    h0*h2*x1*x3*y2*y4 - h0*h2*x2*x4*y1*y3 + h0*h2*x3*x4*y1*y2 - h0*h3*x1*x3*y3*y4 + h0*h3*x1*x4*y3^2 + h0*h3*x2^2*y3*y4 - h0*h3*x2*x3*y2*y4 -
    h0*h3*x2*x4*y2*y3 + h0*h3*x3^2*y1*y4 - h0*h3*x3*x4*y1*y3 + h0*h3*x3*x4*y2^2 - h1^2*x1*x3*y2*y4 + h1^2*x1*x4*y2*y3 + h1^2*x2*x3*y1*y4 - h1^2*x2*x4*y1*y3 -
    h1*h2*x1*x3*y3*y4 + h1*h2*x1*x4*y3^2 + h1*h2*x3^2*y1*y4 - h1*h2*x3*x4*y1*y3 - h1*h3*x2*x3*y3*y4 + h1*h3*x2*x4*y3^2 + h1*h3*x3^2*y2*y4 - h1*h3*x3*x4*y2*y3
    + 2*x2*x3*y4^2 - 2*x2*x4*y3*y4 - 2*x3*x4*y2*y4 + 2*x4^2*y2*y3
        where BBB24 := h eq 0 select
        (16*f0^2*f5 + 8*f0*f2*f3 - 2*f1^2*f3)*x1^2*y1^2 + (16*f0^2*f6 + 8*f0*f1*f5 +
    4*f0*f3^2)*x1^2*y1*y2 + (-16*f0*f2*f5 + 8*f0*f3*f4 + 8*f1^2*f5)*x1^2*y1*y3 +
    8*f0*f3*x1^2*y1*y4 + 8*f0*f1*f6*x1^2*y2^2 + (-16*f0*f2*f6 +
    8*f1^2*f6)*x1^2*y2*y3 + 2*f1*f3*x1^2*y2*y4 - 2*f1*f3*f5*x1^2*y3^2 +
    (16*f0^2*f6 + 8*f0*f1*f5 + 4*f0*f3^2)*x1*x2*y1^2 + (16*f0*f1*f6 + 8*f0*f3*f4
    + 4*f1^2*f5)*x1*x2*y1*y2 + (-16*f0*f2*f6 - 16*f0*f3*f5 + 16*f0*f4^2 +
    8*f1^2*f6 + 8*f1*f2*f5)*x1*x2*y1*y3 + (8*f0*f4 + 2*f1*f3)*x1*x2*y1*y4 +
    (4*f0*f3*f5 + 4*f1^2*f6)*x1*x2*y2^2 + (-24*f0*f3*f6 + 8*f0*f4*f5 +
    8*f1*f2*f6 + 2*f1*f3*f5)*x1*x2*y2*y3 + 4*f1*f4*x1*x2*y2*y4 + (-16*f0*f4*f6 +
    8*f0*f5^2)*x1*x2*y3^2 + (-8*f0*f6 + 4*f1*f5)*x1*x2*y3*y4 + (-16*f0*f2*f5 +
    8*f0*f3*f4 + 8*f1^2*f5)*x1*x3*y1^2 + (-16*f0*f2*f6 - 16*f0*f3*f5 +
    16*f0*f4^2 + 8*f1^2*f6 + 8*f1*f2*f5)*x1*x3*y1*y2 + (-8*f0*f3*f6 -
    16*f1*f3*f5 + 16*f1*f4^2 + 16*f2^2*f5 - 8*f2*f3*f4 + 2*f3^3)*x1*x3*y1*y3 +
    (-8*f0*f5 + 8*f1*f4)*x1*x3*y1*y4 + (-16*f0*f3*f6 + 8*f0*f4*f5 +
    8*f1*f2*f6)*x1*x3*y2^2 + (-16*f0*f4*f6 + 8*f0*f5^2 - 16*f1*f3*f6 +
    8*f1*f4*f5 + 16*f2^2*f6)*x1*x3*y2*y3 + (-8*f0*f6 + 8*f2*f4 -
    2*f3^2)*x1*x3*y2*y4 + (-16*f1*f4*f6 + 8*f1*f5^2 + 8*f2*f3*f6)*x1*x3*y3^2 +
    (-8*f1*f6 + 8*f2*f5)*x1*x3*y3*y4 + 8*f0*f3*x1*x4*y1^2 + (8*f0*f4 +
    2*f1*f3)*x1*x4*y1*y2 + (-8*f0*f5 + 8*f1*f4)*x1*x4*y1*y3 + 4*f1*x1*x4*y1*y4 +
    4*f0*f5*x1*x4*y2^2 + (-8*f0*f6 + 4*f1*f5)*x1*x4*y2*y3 + 4*f2*x1*x4*y2*y4 +
    2*f3*x1*x4*y3*y4 + 8*f0*f1*f6*x2^2*y1^2 + (4*f0*f3*f5 +
    4*f1^2*f6)*x2^2*y1*y2 + (-16*f0*f3*f6 + 8*f0*f4*f5 + 8*f1*f2*f6)*x2^2*y1*y3
    + 4*f0*f5*x2^2*y1*y4 + 8*f0*f3*f6*x2^2*y2^2 + (4*f0*f5^2 +
    4*f1*f3*f6)*x2^2*y2*y3 + 2*f1*f5*x2^2*y2*y4 + 8*f0*f5*f6*x2^2*y3^2 +
    4*f1*f6*x2^2*y3*y4 + (-16*f0*f2*f6 + 8*f1^2*f6)*x2*x3*y1^2 + (-24*f0*f3*f6 +
    8*f0*f4*f5 + 8*f1*f2*f6 + 2*f1*f3*f5)*x2*x3*y1*y2 + (-16*f0*f4*f6 +
    8*f0*f5^2 - 16*f1*f3*f6 + 8*f1*f4*f5 + 16*f2^2*f6)*x2*x3*y1*y3 + (-8*f0*f6 +
    4*f1*f5)*x2*x3*y1*y4 + (4*f0*f5^2 + 4*f1*f3*f6)*x2*x3*y2^2 + (16*f0*f5*f6 +
    4*f1*f5^2 + 8*f2*f3*f6)*x2*x3*y2*y3 + 4*f2*f5*x2*x3*y2*y4 + (16*f0*f6^2 +
    8*f1*f5*f6 + 4*f3^2*f6)*x2*x3*y3^2 + (8*f2*f6 + 2*f3*f5)*x2*x3*y3*y4 +
    2*f1*f3*x2*x4*y1^2 + 4*f1*f4*x2*x4*y1*y2 + (-8*f0*f6 + 8*f2*f4 -
    2*f3^2)*x2*x4*y1*y3 + 4*f2*x2*x4*y1*y4 + 2*f1*f5*x2*x4*y2^2 +
    4*f2*f5*x2*x4*y2*y3 + 2*f3*x2*x4*y2*y4 + 2*f3*f5*x2*x4*y3^2 +
    4*f4*x2*x4*y3*y4 + 2*x2*x4*y4^2 - 2*f1*f3*f5*x3^2*y1^2 + (-16*f0*f4*f6 +
    8*f0*f5^2)*x3^2*y1*y2 + (-16*f1*f4*f6 + 8*f1*f5^2 + 8*f2*f3*f6)*x3^2*y1*y3 +
    8*f0*f5*f6*x3^2*y2^2 + (16*f0*f6^2 + 8*f1*f5*f6 + 4*f3^2*f6)*x3^2*y2*y3 +
    2*f3*f5*x3^2*y2*y4 + (16*f1*f6^2 + 8*f3*f4*f6 - 2*f3*f5^2)*x3^2*y3^2 +
    8*f3*f6*x3^2*y3*y4 + (-8*f0*f6 + 4*f1*f5)*x3*x4*y1*y2 + (-8*f1*f6 +
    8*f2*f5)*x3*x4*y1*y3 + 2*f3*x3*x4*y1*y4 + 4*f1*f6*x3*x4*y2^2 + (8*f2*f6 +
    2*f3*f5)*x3*x4*y2*y3 + 4*f4*x3*x4*y2*y4 + 8*f3*f6*x3*x4*y3^2 +
    4*f5*x3*x4*y3*y4 + 2*x4^2*y2*y4
                        else
16*f0^2*f5*x1^2*y1^2 + 16*f0^2*f6*x1^2*y1*y2 + 16*f0^2*f6*x1*x2*y1^2 + 8*f0^2*h2*h3*x1^2*y1^2 + 4*f0^2*h3^2*x1^2*y1*y2 + 4*f0^2*h3^2*x1*x2*y1^2 +
    8*f0*f1*f5*x1^2*y1*y2 + 8*f0*f1*f5*x1*x2*y1^2 + 8*f0*f1*f6*x1^2*y2^2 + 16*f0*f1*f6*x1*x2*y1*y2 + 8*f0*f1*f6*x2^2*y1^2 + 4*f0*f1*h2*h3*x1^2*y1*y2 +
    4*f0*f1*h2*h3*x1*x2*y1^2 + 2*f0*f1*h3^2*x1^2*y2^2 + 4*f0*f1*h3^2*x1*x2*y1*y2 + 2*f0*f1*h3^2*x2^2*y1^2 + 8*f0*f2*f3*x1^2*y1^2 - 16*f0*f2*f5*x1^2*y1*y3 -
    16*f0*f2*f5*x1*x3*y1^2 - 16*f0*f2*f6*x1^2*y2*y3 - 16*f0*f2*f6*x1*x2*y1*y3 - 16*f0*f2*f6*x1*x3*y1*y2 - 16*f0*f2*f6*x2*x3*y1^2 - 4*f0*f2*h0*h3*x1^2*y1^2 +
    4*f0*f2*h1*h2*x1^2*y1^2 - 8*f0*f2*h2*h3*x1^2*y1*y3 - 8*f0*f2*h2*h3*x1*x3*y1^2 - 4*f0*f2*h3^2*x1^2*y2*y3 - 4*f0*f2*h3^2*x1*x2*y1*y3 -
    4*f0*f2*h3^2*x1*x3*y1*y2 - 4*f0*f2*h3^2*x2*x3*y1^2 + 4*f0*f3^2*x1^2*y1*y2 + 4*f0*f3^2*x1*x2*y1^2 + 8*f0*f3*f4*x1^2*y1*y3 + 8*f0*f3*f4*x1*x2*y1*y2 +
    8*f0*f3*f4*x1*x3*y1^2 - 16*f0*f3*f5*x1*x2*y1*y3 + 4*f0*f3*f5*x1*x2*y2^2 - 16*f0*f3*f5*x1*x3*y1*y2 + 4*f0*f3*f5*x2^2*y1*y2 - 24*f0*f3*f6*x1*x2*y2*y3 -
    8*f0*f3*f6*x1*x3*y1*y3 - 16*f0*f3*f6*x1*x3*y2^2 - 16*f0*f3*f6*x2^2*y1*y3 + 8*f0*f3*f6*x2^2*y2^2 - 24*f0*f3*f6*x2*x3*y1*y2 - 4*f0*f3*h0*h2*x1^2*y1^2 -
    4*f0*f3*h0*h3*x1^2*y1*y2 - 4*f0*f3*h0*h3*x1*x2*y1^2 + 2*f0*f3*h1^2*x1^2*y1^2 + 4*f0*f3*h1*h2*x1^2*y1*y2 + 4*f0*f3*h1*h2*x1*x2*y1^2 +
    2*f0*f3*h1*h3*x1^2*y2^2 + 2*f0*f3*h1*h3*x2^2*y1^2 + 2*f0*f3*h2^2*x1^2*y1*y3 + 2*f0*f3*h2^2*x1*x2*y1*y2 + 2*f0*f3*h2^2*x1*x3*y1^2 -
    8*f0*f3*h2*h3*x1*x2*y1*y3 + 2*f0*f3*h2*h3*x1*x2*y2^2 - 8*f0*f3*h2*h3*x1*x3*y1*y2 + 2*f0*f3*h2*h3*x2^2*y1*y2 - 6*f0*f3*h3^2*x1*x2*y2*y3 -
    2*f0*f3*h3^2*x1*x3*y1*y3 - 4*f0*f3*h3^2*x1*x3*y2^2 - 4*f0*f3*h3^2*x2^2*y1*y3 + 2*f0*f3*h3^2*x2^2*y2^2 - 6*f0*f3*h3^2*x2*x3*y1*y2 + 8*f0*f3*x1^2*y1*y4 +
    8*f0*f3*x1*x4*y1^2 + 16*f0*f4^2*x1*x2*y1*y3 + 16*f0*f4^2*x1*x3*y1*y2 + 8*f0*f4*f5*x1*x2*y2*y3 + 8*f0*f4*f5*x1*x3*y2^2 + 8*f0*f4*f5*x2^2*y1*y3 +
    8*f0*f4*f5*x2*x3*y1*y2 - 16*f0*f4*f6*x1*x2*y3^2 - 16*f0*f4*f6*x1*x3*y2*y3 - 16*f0*f4*f6*x2*x3*y1*y3 - 16*f0*f4*f6*x3^2*y1*y2 - 4*f0*f4*h0*h2*x1^2*y1*y2 -
    4*f0*f4*h0*h2*x1*x2*y1^2 + 4*f0*f4*h0*h3*x1^2*y1*y3 - 4*f0*f4*h0*h3*x1^2*y2^2 - 4*f0*f4*h0*h3*x1*x2*y1*y2 + 4*f0*f4*h0*h3*x1*x3*y1^2 -
    4*f0*f4*h0*h3*x2^2*y1^2 + 4*f0*f4*h1*h2*x1^2*y1*y3 + 4*f0*f4*h1*h2*x1*x2*y1*y2 + 4*f0*f4*h1*h2*x1*x3*y1^2 + 4*f0*f4*h1*h3*x1^2*y2*y3 +
    8*f0*f4*h1*h3*x1*x2*y1*y3 + 8*f0*f4*h1*h3*x1*x3*y1*y2 + 4*f0*f4*h1*h3*x2*x3*y1^2 + 8*f0*f4*h2^2*x1*x2*y1*y3 + 8*f0*f4*h2^2*x1*x3*y1*y2 +
    4*f0*f4*h2*h3*x1*x2*y2*y3 + 4*f0*f4*h2*h3*x1*x3*y2^2 + 4*f0*f4*h2*h3*x2^2*y1*y3 + 4*f0*f4*h2*h3*x2*x3*y1*y2 - 4*f0*f4*h3^2*x1*x2*y3^2 -
    4*f0*f4*h3^2*x1*x3*y2*y3 - 4*f0*f4*h3^2*x2*x3*y1*y3 - 4*f0*f4*h3^2*x3^2*y1*y2 + 8*f0*f4*x1*x2*y1*y4 + 8*f0*f4*x1*x4*y1*y2 + 8*f0*f5^2*x1*x2*y3^2 +
    8*f0*f5^2*x1*x3*y2*y3 + 4*f0*f5^2*x2^2*y2*y3 + 8*f0*f5^2*x2*x3*y1*y3 + 4*f0*f5^2*x2*x3*y2^2 + 8*f0*f5^2*x3^2*y1*y2 + 8*f0*f5*f6*x2^2*y3^2 +
    16*f0*f5*f6*x2*x3*y2*y3 + 8*f0*f5*f6*x3^2*y2^2 + 8*f0*f5*h0^2*x1^2*y1^2 + 4*f0*f5*h0*h1*x1^2*y1*y2 + 4*f0*f5*h0*h1*x1*x2*y1^2 - 4*f0*f5*h0*h2*x1^2*y1*y3
    - 4*f0*f5*h0*h2*x1*x2*y1*y2 - 4*f0*f5*h0*h2*x1*x3*y1^2 - 4*f0*f5*h0*h3*x1^2*y2*y3 + 4*f0*f5*h0*h3*x1*x2*y1*y3 - 4*f0*f5*h0*h3*x1*x2*y2^2 +
    4*f0*f5*h0*h3*x1*x3*y1*y2 - 4*f0*f5*h0*h3*x2^2*y1*y2 - 4*f0*f5*h0*h3*x2*x3*y1^2 - 4*f0*f5*h1^2*x1^2*y1*y3 - 4*f0*f5*h1^2*x1*x3*y1^2 -
    8*f0*f5*h1*h2*x1*x2*y1*y3 + 2*f0*f5*h1*h2*x1*x2*y2^2 - 8*f0*f5*h1*h2*x1*x3*y1*y2 + 2*f0*f5*h1*h2*x2^2*y1*y2 + 2*f0*f5*h1*h3*x1^2*y3^2 +
    6*f0*f5*h1*h3*x1*x2*y2*y3 + 4*f0*f5*h1*h3*x1*x3*y1*y3 + 6*f0*f5*h1*h3*x2*x3*y1*y2 + 2*f0*f5*h1*h3*x3^2*y1^2 + 2*f0*f5*h2^2*x1*x2*y2*y3 +
    2*f0*f5*h2^2*x1*x3*y2^2 + 2*f0*f5*h2^2*x2^2*y1*y3 + 2*f0*f5*h2^2*x2*x3*y1*y2 + 8*f0*f5*h2*h3*x1*x2*y3^2 + 8*f0*f5*h2*h3*x1*x3*y2*y3 +
    4*f0*f5*h2*h3*x2^2*y2*y3 + 8*f0*f5*h2*h3*x2*x3*y1*y3 + 4*f0*f5*h2*h3*x2*x3*y2^2 + 8*f0*f5*h2*h3*x3^2*y1*y2 + 2*f0*f5*h3^2*x2^2*y3^2 +
    4*f0*f5*h3^2*x2*x3*y2*y3 + 2*f0*f5*h3^2*x3^2*y2^2 - 8*f0*f5*x1*x3*y1*y4 - 8*f0*f5*x1*x4*y1*y3 + 4*f0*f5*x1*x4*y2^2 + 4*f0*f5*x2^2*y1*y4 +
    16*f0*f6^2*x2*x3*y3^2 + 16*f0*f6^2*x3^2*y2*y3 + 8*f0*f6*h0^2*x1^2*y1*y2 + 8*f0*f6*h0^2*x1*x2*y1^2 + 4*f0*f6*h0*h1*x1^2*y2^2 + 8*f0*f6*h0*h1*x1*x2*y1*y2 +
    4*f0*f6*h0*h1*x2^2*y1^2 - 4*f0*f6*h0*h2*x1*x2*y1*y3 - 4*f0*f6*h0*h2*x1*x3*y1*y2 - 4*f0*f6*h0*h3*x1^2*y3^2 - 4*f0*f6*h0*h3*x1*x2*y2*y3 -
    4*f0*f6*h0*h3*x1*x3*y1*y3 + 4*f0*f6*h0*h3*x1*x3*y2^2 + 4*f0*f6*h0*h3*x2^2*y1*y3 - 4*f0*f6*h0*h3*x2^2*y2^2 - 4*f0*f6*h0*h3*x2*x3*y1*y2 -
    4*f0*f6*h0*h3*x3^2*y1^2 - 4*f0*f6*h1^2*x1^2*y2*y3 - 4*f0*f6*h1^2*x1*x2*y1*y3 - 4*f0*f6*h1^2*x1*x3*y1*y2 - 4*f0*f6*h1^2*x2*x3*y1^2 -
    12*f0*f6*h1*h2*x1*x2*y2*y3 - 4*f0*f6*h1*h2*x1*x3*y1*y3 - 8*f0*f6*h1*h2*x1*x3*y2^2 - 8*f0*f6*h1*h2*x2^2*y1*y3 + 4*f0*f6*h1*h2*x2^2*y2^2 -
    12*f0*f6*h1*h2*x2*x3*y1*y2 - 4*f0*f6*h1*h3*x1*x3*y2*y3 - 4*f0*f6*h1*h3*x2*x3*y1*y3 - 4*f0*f6*h2^2*x1*x2*y3^2 - 4*f0*f6*h2^2*x1*x3*y2*y3 -
    4*f0*f6*h2^2*x2*x3*y1*y3 - 4*f0*f6*h2^2*x3^2*y1*y2 + 4*f0*f6*h2*h3*x2^2*y3^2 + 8*f0*f6*h2*h3*x2*x3*y2*y3 + 4*f0*f6*h2*h3*x3^2*y2^2 +
    8*f0*f6*h3^2*x2*x3*y3^2 + 8*f0*f6*h3^2*x3^2*y2*y3 - 8*f0*f6*x1*x2*y3*y4 - 8*f0*f6*x1*x3*y2*y4 - 8*f0*f6*x1*x4*y2*y3 - 8*f0*f6*x2*x3*y1*y4 -
    8*f0*f6*x2*x4*y1*y3 - 8*f0*f6*x3*x4*y1*y2 + 2*f0*h0^2*h2*h3*x1^2*y1^2 + f0*h0^2*h3^2*x1^2*y1*y2 + f0*h0^2*h3^2*x1*x2*y1^2 - f0*h0*h1^2*h3*x1^2*y1^2 -
    2*f0*h0*h1*h2^2*x1^2*y1^2 - 2*f0*h0*h1*h2*h3*x1^2*y1*y2 - 2*f0*h0*h1*h2*h3*x1*x2*y1^2 + 2*f0*h0*h1*h3^2*x1^2*y1*y3 - f0*h0*h1*h3^2*x1^2*y2^2 +
    2*f0*h0*h1*h3^2*x1*x3*y1^2 - f0*h0*h1*h3^2*x2^2*y1^2 - f0*h0*h2^3*x1^2*y1*y2 - f0*h0*h2^3*x1*x2*y1^2 - f0*h0*h2^2*h3*x1^2*y1*y3 - f0*h0*h2^2*h3*x1^2*y2^2
    - 3*f0*h0*h2^2*h3*x1*x2*y1*y2 - f0*h0*h2^2*h3*x1*x3*y1^2 - f0*h0*h2^2*h3*x2^2*y1^2 - 2*f0*h0*h2*h3^2*x1^2*y2*y3 + f0*h0*h2*h3^2*x1*x2*y1*y3 -
    2*f0*h0*h2*h3^2*x1*x2*y2^2 + f0*h0*h2*h3^2*x1*x3*y1*y2 - 2*f0*h0*h2*h3^2*x2^2*y1*y2 - 2*f0*h0*h2*h3^2*x2*x3*y1^2 - f0*h0*h3^3*x1^2*y3^2 -
    f0*h0*h3^3*x1*x2*y2*y3 - f0*h0*h3^3*x1*x3*y1*y3 + f0*h0*h3^3*x1*x3*y2^2 + f0*h0*h3^3*x2^2*y1*y3 - f0*h0*h3^3*x2^2*y2^2 - f0*h0*h3^3*x2*x3*y1*y2 -
    f0*h0*h3^3*x3^2*y1^2 + f0*h1^3*h2*x1^2*y1^2 + f0*h1^2*h2^2*x1^2*y1*y2 + f0*h1^2*h2^2*x1*x2*y1^2 - 2*f0*h1^2*h2*h3*x1^2*y1*y3 + f0*h1^2*h2*h3*x1^2*y2^2 -
    2*f0*h1^2*h2*h3*x1*x3*y1^2 + f0*h1^2*h2*h3*x2^2*y1^2 + f0*h1*h2^3*x1^2*y1*y3 + f0*h1*h2^3*x1*x2*y1*y2 + f0*h1*h2^3*x1*x3*y1^2 + f0*h1*h2^2*h3*x1^2*y2*y3
    - 2*f0*h1*h2^2*h3*x1*x2*y1*y3 + f0*h1*h2^2*h3*x1*x2*y2^2 - 2*f0*h1*h2^2*h3*x1*x3*y1*y2 + f0*h1*h2^2*h3*x2^2*y1*y2 + f0*h1*h2^2*h3*x2*x3*y1^2 +
    f0*h1*h2*h3^2*x1^2*y3^2 + f0*h1*h2*h3^2*x1*x3*y1*y3 - 2*f0*h1*h2*h3^2*x1*x3*y2^2 - 2*f0*h1*h2*h3^2*x2^2*y1*y3 + f0*h1*h2*h3^2*x2^2*y2^2 +
    f0*h1*h2*h3^2*x3^2*y1^2 + 4*f0*h1*h2*x1^2*y1*y4 + 4*f0*h1*h2*x1*x4*y1^2 - f0*h1*h3^3*x1*x3*y2*y3 - f0*h1*h3^3*x2*x3*y1*y3 + 2*f0*h1*h3*x1^2*y2*y4 +
    2*f0*h1*h3*x1*x2*y1*y4 + 2*f0*h1*h3*x1*x4*y1*y2 + 2*f0*h1*h3*x2*x4*y1^2 + f0*h2^4*x1*x2*y1*y3 + f0*h2^4*x1*x3*y1*y2 + f0*h2^3*h3*x1*x2*y2*y3 +
    f0*h2^3*h3*x1*x3*y2^2 + f0*h2^3*h3*x2^2*y1*y3 + f0*h2^3*h3*x2*x3*y1*y2 + f0*h2^2*h3^2*x1*x2*y3^2 + f0*h2^2*h3^2*x1*x3*y2*y3 + f0*h2^2*h3^2*x2^2*y2*y3 +
    f0*h2^2*h3^2*x2*x3*y1*y3 + f0*h2^2*h3^2*x2*x3*y2^2 + f0*h2^2*h3^2*x3^2*y1*y2 + 2*f0*h2^2*x1*x2*y1*y4 + 2*f0*h2^2*x1*x4*y1*y2 + f0*h2*h3^3*x2^2*y3^2 +
    2*f0*h2*h3^3*x2*x3*y2*y3 + f0*h2*h3^3*x3^2*y2^2 - 4*f0*h2*h3*x1*x3*y1*y4 - 4*f0*h2*h3*x1*x4*y1*y3 + 2*f0*h2*h3*x1*x4*y2^2 + 2*f0*h2*h3*x2^2*y1*y4 +
    f0*h3^4*x2*x3*y3^2 + f0*h3^4*x3^2*y2*y3 - 2*f0*h3^2*x1*x2*y3*y4 - 2*f0*h3^2*x1*x3*y2*y4 - 2*f0*h3^2*x1*x4*y2*y3 - 2*f0*h3^2*x2*x3*y1*y4 -
    2*f0*h3^2*x2*x4*y1*y3 - 2*f0*h3^2*x3*x4*y1*y2 - 2*f1^2*f3*x1^2*y1^2 + 8*f1^2*f5*x1^2*y1*y3 + 4*f1^2*f5*x1*x2*y1*y2 + 8*f1^2*f5*x1*x3*y1^2 +
    8*f1^2*f6*x1^2*y2*y3 + 8*f1^2*f6*x1*x2*y1*y3 + 4*f1^2*f6*x1*x2*y2^2 + 8*f1^2*f6*x1*x3*y1*y2 + 4*f1^2*f6*x2^2*y1*y2 + 8*f1^2*f6*x2*x3*y1^2 +
    f1^2*h0*h3*x1^2*y1^2 - f1^2*h1*h2*x1^2*y1^2 + 4*f1^2*h2*h3*x1^2*y1*y3 + 2*f1^2*h2*h3*x1*x2*y1*y2 + 4*f1^2*h2*h3*x1*x3*y1^2 + 2*f1^2*h3^2*x1^2*y2*y3 +
    2*f1^2*h3^2*x1*x2*y1*y3 + f1^2*h3^2*x1*x2*y2^2 + 2*f1^2*h3^2*x1*x3*y1*y2 + f1^2*h3^2*x2^2*y1*y2 + 2*f1^2*h3^2*x2*x3*y1^2 + 8*f1*f2*f5*x1*x2*y1*y3 +
    8*f1*f2*f5*x1*x3*y1*y2 + 8*f1*f2*f6*x1*x2*y2*y3 + 8*f1*f2*f6*x1*x3*y2^2 + 8*f1*f2*f6*x2^2*y1*y3 + 8*f1*f2*f6*x2*x3*y1*y2 + 4*f1*f2*h2*h3*x1*x2*y1*y3 +
    4*f1*f2*h2*h3*x1*x3*y1*y2 + 2*f1*f2*h3^2*x1*x2*y2*y3 + 2*f1*f2*h3^2*x1*x3*y2^2 + 2*f1*f2*h3^2*x2^2*y1*y3 + 2*f1*f2*h3^2*x2*x3*y1*y2 -
    2*f1*f3*f5*x1^2*y3^2 + 2*f1*f3*f5*x1*x2*y2*y3 - 16*f1*f3*f5*x1*x3*y1*y3 + 2*f1*f3*f5*x2*x3*y1*y2 - 2*f1*f3*f5*x3^2*y1^2 - 16*f1*f3*f6*x1*x3*y2*y3 +
    4*f1*f3*f6*x2^2*y2*y3 - 16*f1*f3*f6*x2*x3*y1*y3 + 4*f1*f3*f6*x2*x3*y2^2 - 2*f1*f3*h0*h1*x1^2*y1^2 - 2*f1*f3*h0*h2*x1^2*y1*y2 - 2*f1*f3*h0*h2*x1*x2*y1^2 -
    2*f1*f3*h0*h3*x1^2*y1*y3 - f1*f3*h0*h3*x1^2*y2^2 - 2*f1*f3*h0*h3*x1*x2*y1*y2 - 2*f1*f3*h0*h3*x1*x3*y1^2 - f1*f3*h0*h3*x2^2*y1^2 -
    2*f1*f3*h1*h3*x1*x2*y1*y3 - 2*f1*f3*h1*h3*x1*x3*y1*y2 - f1*f3*h2*h3*x1^2*y3^2 + f1*f3*h2*h3*x1*x2*y2*y3 - 8*f1*f3*h2*h3*x1*x3*y1*y3 +
    f1*f3*h2*h3*x2*x3*y1*y2 - f1*f3*h2*h3*x3^2*y1^2 - 4*f1*f3*h3^2*x1*x3*y2*y3 + f1*f3*h3^2*x2^2*y2*y3 - 4*f1*f3*h3^2*x2*x3*y1*y3 + f1*f3*h3^2*x2*x3*y2^2 +
    2*f1*f3*x1^2*y2*y4 + 2*f1*f3*x1*x2*y1*y4 + 2*f1*f3*x1*x4*y1*y2 + 2*f1*f3*x2*x4*y1^2 + 16*f1*f4^2*x1*x3*y1*y3 + 8*f1*f4*f5*x1*x3*y2*y3 +
    8*f1*f4*f5*x2*x3*y1*y3 - 16*f1*f4*f6*x1*x3*y3^2 - 16*f1*f4*f6*x3^2*y1*y3 - 4*f1*f4*h0*h2*x1^2*y1*y3 - 4*f1*f4*h0*h2*x1*x2*y1*y2 -
    4*f1*f4*h0*h2*x1*x3*y1^2 - 4*f1*f4*h0*h3*x1^2*y2*y3 - 4*f1*f4*h0*h3*x1*x2*y1*y3 - 2*f1*f4*h0*h3*x1*x2*y2^2 - 4*f1*f4*h0*h3*x1*x3*y1*y2 -
    2*f1*f4*h0*h3*x2^2*y1*y2 - 4*f1*f4*h0*h3*x2*x3*y1^2 + 2*f1*f4*h1*h3*x1^2*y3^2 - 2*f1*f4*h1*h3*x1*x2*y2*y3 + 4*f1*f4*h1*h3*x1*x3*y1*y3 -
    2*f1*f4*h1*h3*x2*x3*y1*y2 + 2*f1*f4*h1*h3*x3^2*y1^2 + 8*f1*f4*h2^2*x1*x3*y1*y3 + 4*f1*f4*h2*h3*x1*x3*y2*y3 + 4*f1*f4*h2*h3*x2*x3*y1*y3 -
    4*f1*f4*h3^2*x1*x3*y3^2 - 4*f1*f4*h3^2*x3^2*y1*y3 + 4*f1*f4*x1*x2*y2*y4 + 8*f1*f4*x1*x3*y1*y4 + 8*f1*f4*x1*x4*y1*y3 + 4*f1*f4*x2*x4*y1*y2 +
    8*f1*f5^2*x1*x3*y3^2 + 4*f1*f5^2*x2*x3*y2*y3 + 8*f1*f5^2*x3^2*y1*y3 + 8*f1*f5*f6*x2*x3*y3^2 + 8*f1*f5*f6*x3^2*y2*y3 + 2*f1*f5*h0^2*x1^2*y1*y2 +
    2*f1*f5*h0^2*x1*x2*y1^2 + 8*f1*f5*h0*h1*x1^2*y1*y3 + 4*f1*f5*h0*h1*x1*x2*y1*y2 + 8*f1*f5*h0*h1*x1*x3*y1^2 - f1*f5*h0*h2*x1*x2*y2^2 -
    f1*f5*h0*h2*x2^2*y1*y2 - 3*f1*f5*h0*h3*x1^2*y3^2 - 7*f1*f5*h0*h3*x1*x2*y2*y3 - 2*f1*f5*h0*h3*x2^2*y2^2 - 7*f1*f5*h0*h3*x2*x3*y1*y2 -
    3*f1*f5*h0*h3*x3^2*y1^2 + 2*f1*f5*h1^2*x1*x2*y1*y3 + 2*f1*f5*h1^2*x1*x3*y1*y2 - f1*f5*h1*h2*x1^2*y3^2 + f1*f5*h1*h2*x1*x2*y2*y3 -
    8*f1*f5*h1*h2*x1*x3*y1*y3 + f1*f5*h1*h2*x2*x3*y1*y2 - f1*f5*h1*h2*x3^2*y1^2 - f1*f5*h1*h3*x2^2*y2*y3 - f1*f5*h1*h3*x2*x3*y2^2 + 2*f1*f5*h2^2*x1*x3*y2*y3
    + 2*f1*f5*h2^2*x2*x3*y1*y3 + 8*f1*f5*h2*h3*x1*x3*y3^2 + 4*f1*f5*h2*h3*x2*x3*y2*y3 + 8*f1*f5*h2*h3*x3^2*y1*y3 + 2*f1*f5*h3^2*x2*x3*y3^2 +
    2*f1*f5*h3^2*x3^2*y2*y3 + 4*f1*f5*x1*x2*y3*y4 + 4*f1*f5*x1*x4*y2*y3 + 2*f1*f5*x2^2*y2*y4 + 4*f1*f5*x2*x3*y1*y4 + 2*f1*f5*x2*x4*y2^2 + 4*f1*f5*x3*x4*y1*y2
    + 16*f1*f6^2*x3^2*y3^2 + 2*f1*f6*h0^2*x1^2*y2^2 + 4*f1*f6*h0^2*x1*x2*y1*y2 + 2*f1*f6*h0^2*x2^2*y1^2 + 8*f1*f6*h0*h1*x1^2*y2*y3 +
    8*f1*f6*h0*h1*x1*x2*y1*y3 + 4*f1*f6*h0*h1*x1*x2*y2^2 + 8*f1*f6*h0*h1*x1*x3*y1*y2 + 4*f1*f6*h0*h1*x2^2*y1*y2 + 8*f1*f6*h0*h1*x2*x3*y1^2 +
    2*f1*f6*h0*h2*x1^2*y3^2 + 6*f1*f6*h0*h2*x1*x2*y2*y3 + 4*f1*f6*h0*h2*x1*x3*y1*y3 + 6*f1*f6*h0*h2*x2*x3*y1*y2 + 2*f1*f6*h0*h2*x3^2*y1^2 -
    4*f1*f6*h0*h3*x1*x2*y3^2 + 4*f1*f6*h0*h3*x1*x3*y2*y3 - 4*f1*f6*h0*h3*x2^2*y2*y3 + 4*f1*f6*h0*h3*x2*x3*y1*y3 - 4*f1*f6*h0*h3*x2*x3*y2^2 -
    4*f1*f6*h0*h3*x3^2*y1*y2 + 2*f1*f6*h1^2*x1*x2*y2*y3 + 2*f1*f6*h1^2*x1*x3*y2^2 + 2*f1*f6*h1^2*x2^2*y1*y3 + 2*f1*f6*h1^2*x2*x3*y1*y2 -
    8*f1*f6*h1*h2*x1*x3*y2*y3 + 2*f1*f6*h1*h2*x2^2*y2*y3 - 8*f1*f6*h1*h2*x2*x3*y1*y3 + 2*f1*f6*h1*h2*x2*x3*y2^2 - 4*f1*f6*h1*h3*x1*x3*y3^2 -
    4*f1*f6*h1*h3*x2*x3*y2*y3 - 4*f1*f6*h1*h3*x3^2*y1*y3 - 4*f1*f6*h2^2*x1*x3*y3^2 - 4*f1*f6*h2^2*x3^2*y1*y3 + 4*f1*f6*h2*h3*x2*x3*y3^2 +
    4*f1*f6*h2*h3*x3^2*y2*y3 + 8*f1*f6*h3^2*x3^2*y3^2 - 8*f1*f6*x1*x3*y3*y4 + 4*f1*f6*x2^2*y3*y4 - 8*f1*f6*x3*x4*y1*y3 + 4*f1*f6*x3*x4*y2^2 +
    f1*h0^2*h1*h3*x1^2*y1^2 + f1*h0^2*h2^2*x1^2*y1^2 + 2*f1*h0^2*h2*h3*x1^2*y1*y2 + 2*f1*h0^2*h2*h3*x1*x2*y1^2 - f1*h0^2*h3^2*x1^2*y1*y3 +
    f1*h0^2*h3^2*x1^2*y2^2 + f1*h0^2*h3^2*x1*x2*y1*y2 - f1*h0^2*h3^2*x1*x3*y1^2 + f1*h0^2*h3^2*x2^2*y1^2 - f1*h0*h1^2*h2*x1^2*y1^2 - f1*h0*h1*h2^2*x1^2*y1*y2
    - f1*h0*h1*h2^2*x1*x2*y1^2 + 2*f1*h0*h1*h2*h3*x1^2*y1*y3 - f1*h0*h1*h2*h3*x1^2*y2^2 + 2*f1*h0*h1*h2*h3*x1*x3*y1^2 - f1*h0*h1*h2*h3*x2^2*y1^2 +
    f1*h0*h1*h3^2*x1*x2*y1*y3 + f1*h0*h1*h3^2*x1*x3*y1*y2 - f1*h0*h2^3*x1^2*y1*y3 - f1*h0*h2^3*x1*x2*y1*y2 - f1*h0*h2^3*x1*x3*y1^2 - f1*h0*h2^2*h3*x1^2*y2*y3
    - f1*h0*h2^2*h3*x1*x2*y1*y3 - f1*h0*h2^2*h3*x1*x2*y2^2 - f1*h0*h2^2*h3*x1*x3*y1*y2 - f1*h0*h2^2*h3*x2^2*y1*y2 - f1*h0*h2^2*h3*x2*x3*y1^2 -
    f1*h0*h2*h3^2*x1^2*y3^2 - 2*f1*h0*h2*h3^2*x1*x2*y2*y3 + f1*h0*h2*h3^2*x1*x3*y1*y3 - f1*h0*h2*h3^2*x2^2*y2^2 - 2*f1*h0*h2*h3^2*x2*x3*y1*y2 -
    f1*h0*h2*h3^2*x3^2*y1^2 - 2*f1*h0*h2*x1^2*y1*y4 - 2*f1*h0*h2*x1*x4*y1^2 - f1*h0*h3^3*x1*x2*y3^2 + f1*h0*h3^3*x1*x3*y2*y3 - f1*h0*h3^3*x2^2*y2*y3 +
    f1*h0*h3^3*x2*x3*y1*y3 - f1*h0*h3^3*x2*x3*y2^2 - f1*h0*h3^3*x3^2*y1*y2 - f1*h0*h3*x1^2*y2*y4 - f1*h0*h3*x1*x2*y1*y4 - f1*h0*h3*x1*x4*y1*y2 -
    f1*h0*h3*x2*x4*y1^2 + f1*h1^2*h3^2*x1*x3*y1*y3 - 3*f1*h1*h2^2*h3*x1*x3*y1*y3 - 2*f1*h1*h2*h3^2*x1*x3*y2*y3 - 2*f1*h1*h2*h3^2*x2*x3*y1*y3 +
    f1*h1*h2*x1^2*y2*y4 + f1*h1*h2*x1*x2*y1*y4 + f1*h1*h2*x1*x4*y1*y2 + f1*h1*h2*x2*x4*y1^2 - f1*h1*h3^3*x1*x3*y3^2 - f1*h1*h3^3*x2*x3*y2*y3 -
    f1*h1*h3^3*x3^2*y1*y3 + 2*f1*h1*h3*x1^2*y3*y4 + f1*h1*h3*x1*x2*y2*y4 + f1*h1*h3*x1*x4*y2^2 + f1*h1*h3*x2^2*y1*y4 + f1*h1*h3*x2*x4*y1*y2 +
    2*f1*h1*h3*x3*x4*y1^2 + f1*h2^4*x1*x3*y1*y3 + f1*h2^3*h3*x1*x3*y2*y3 + f1*h2^3*h3*x2*x3*y1*y3 + f1*h2^2*h3^2*x1*x3*y3^2 + f1*h2^2*h3^2*x2*x3*y2*y3 +
    f1*h2^2*h3^2*x3^2*y1*y3 + f1*h2^2*x1*x2*y2*y4 + 2*f1*h2^2*x1*x3*y1*y4 + 2*f1*h2^2*x1*x4*y1*y3 + f1*h2^2*x2*x4*y1*y2 + f1*h2*h3^3*x2*x3*y3^2 +
    f1*h2*h3^3*x3^2*y2*y3 + 2*f1*h2*h3*x1*x2*y3*y4 + 2*f1*h2*h3*x1*x4*y2*y3 + f1*h2*h3*x2^2*y2*y4 + 2*f1*h2*h3*x2*x3*y1*y4 + f1*h2*h3*x2*x4*y2^2 +
    2*f1*h2*h3*x3*x4*y1*y2 + f1*h3^4*x3^2*y3^2 - 2*f1*h3^2*x1*x3*y3*y4 + f1*h3^2*x2^2*y3*y4 - 2*f1*h3^2*x3*x4*y1*y3 + f1*h3^2*x3*x4*y2^2 + 4*f1*x1*x4*y1*y4 +
    16*f2^2*f5*x1*x3*y1*y3 + 16*f2^2*f6*x1*x3*y2*y3 + 16*f2^2*f6*x2*x3*y1*y3 + 8*f2^2*h2*h3*x1*x3*y1*y3 + 4*f2^2*h3^2*x1*x3*y2*y3 + 4*f2^2*h3^2*x2*x3*y1*y3 -
    8*f2*f3*f4*x1*x3*y1*y3 + 8*f2*f3*f6*x1*x3*y3^2 + 8*f2*f3*f6*x2*x3*y2*y3 + 8*f2*f3*f6*x3^2*y1*y3 + 2*f2*f3*h0^2*x1^2*y1^2 - 4*f2*f3*h1*h3*x1*x3*y1*y3 -
    2*f2*f3*h2^2*x1*x3*y1*y3 + 2*f2*f3*h3^2*x1*x3*y3^2 + 2*f2*f3*h3^2*x2*x3*y2*y3 + 2*f2*f3*h3^2*x3^2*y1*y3 - 4*f2*f4*h0*h2*x1*x2*y1*y3 -
    4*f2*f4*h0*h2*x1*x3*y1*y2 - 4*f2*f4*h0*h3*x1^2*y3^2 - 4*f2*f4*h0*h3*x1*x3*y1*y3 - 4*f2*f4*h0*h3*x1*x3*y2^2 - 4*f2*f4*h0*h3*x2^2*y1*y3 -
    4*f2*f4*h0*h3*x3^2*y1^2 - 4*f2*f4*h1*h2*x1*x3*y1*y3 - 4*f2*f4*h1*h3*x1*x3*y2*y3 - 4*f2*f4*h1*h3*x2*x3*y1*y3 + 8*f2*f4*x1*x3*y2*y4 + 8*f2*f4*x2*x4*y1*y3 -
    4*f2*f5*h0^2*x1^2*y1*y3 - 4*f2*f5*h0^2*x1*x3*y1^2 + 4*f2*f5*h0*h1*x1*x2*y1*y3 + 4*f2*f5*h0*h1*x1*x3*y1*y2 + 2*f2*f5*h0*h2*x1^2*y3^2 -
    2*f2*f5*h0*h2*x1*x2*y2*y3 + 4*f2*f5*h0*h2*x1*x3*y1*y3 - 2*f2*f5*h0*h2*x2*x3*y1*y2 + 2*f2*f5*h0*h2*x3^2*y1^2 - 4*f2*f5*h0*h3*x1*x2*y3^2 -
    4*f2*f5*h0*h3*x1*x3*y2*y3 - 2*f2*f5*h0*h3*x2^2*y2*y3 - 4*f2*f5*h0*h3*x2*x3*y1*y3 - 2*f2*f5*h0*h3*x2*x3*y2^2 - 4*f2*f5*h0*h3*x3^2*y1*y2 +
    8*f2*f5*h1^2*x1*x3*y1*y3 - 4*f2*f5*h1*h3*x1*x3*y3^2 - 4*f2*f5*h1*h3*x2*x3*y2*y3 - 4*f2*f5*h1*h3*x3^2*y1*y3 + 8*f2*f5*x1*x3*y3*y4 + 4*f2*f5*x2*x3*y2*y4 +
    4*f2*f5*x2*x4*y2*y3 + 8*f2*f5*x3*x4*y1*y3 - 4*f2*f6*h0^2*x1^2*y2*y3 - 4*f2*f6*h0^2*x1*x2*y1*y3 - 4*f2*f6*h0^2*x1*x3*y1*y2 - 4*f2*f6*h0^2*x2*x3*y1^2 +
    4*f2*f6*h0*h1*x1*x2*y2*y3 + 4*f2*f6*h0*h1*x1*x3*y2^2 + 4*f2*f6*h0*h1*x2^2*y1*y3 + 4*f2*f6*h0*h1*x2*x3*y1*y2 + 4*f2*f6*h0*h2*x1*x2*y3^2 +
    8*f2*f6*h0*h2*x1*x3*y2*y3 + 8*f2*f6*h0*h2*x2*x3*y1*y3 + 4*f2*f6*h0*h2*x3^2*y1*y2 + 4*f2*f6*h0*h3*x1*x3*y3^2 - 4*f2*f6*h0*h3*x2^2*y3^2 -
    4*f2*f6*h0*h3*x2*x3*y2*y3 + 4*f2*f6*h0*h3*x3^2*y1*y3 - 4*f2*f6*h0*h3*x3^2*y2^2 + 8*f2*f6*h1^2*x1*x3*y2*y3 + 8*f2*f6*h1^2*x2*x3*y1*y3 +
    4*f2*f6*h1*h2*x1*x3*y3^2 + 4*f2*f6*h1*h2*x2*x3*y2*y3 + 4*f2*f6*h1*h2*x3^2*y1*y3 - 4*f2*f6*h1*h3*x2*x3*y3^2 - 4*f2*f6*h1*h3*x3^2*y2*y3 +
    8*f2*f6*x2*x3*y3*y4 + 8*f2*f6*x3*x4*y2*y3 - f2*h0^3*h3*x1^2*y1^2 + f2*h0^2*h1*h2*x1^2*y1^2 + f2*h0^2*h2^2*x1^2*y1*y2 + f2*h0^2*h2^2*x1*x2*y1^2 +
    f2*h0^2*h2*h3*x1^2*y2^2 + 2*f2*h0^2*h2*h3*x1*x2*y1*y2 + f2*h0^2*h2*h3*x2^2*y1^2 + f2*h0^2*h3^2*x1^2*y2*y3 - f2*h0^2*h3^2*x1*x2*y1*y3 +
    f2*h0^2*h3^2*x1*x2*y2^2 - f2*h0^2*h3^2*x1*x3*y1*y2 + f2*h0^2*h3^2*x2^2*y1*y2 + f2*h0^2*h3^2*x2*x3*y1^2 + 2*f2*h0*h1*h2*h3*x1*x2*y1*y3 +
    2*f2*h0*h1*h2*h3*x1*x3*y1*y2 + f2*h0*h1*h3^2*x1*x2*y2*y3 - 2*f2*h0*h1*h3^2*x1*x3*y1*y3 + f2*h0*h1*h3^2*x1*x3*y2^2 + f2*h0*h1*h3^2*x2^2*y1*y3 +
    f2*h0*h1*h3^2*x2*x3*y1*y2 - f2*h0*h2^3*x1*x2*y1*y3 - f2*h0*h2^3*x1*x3*y1*y2 - f2*h0*h2^2*h3*x1*x2*y2*y3 + f2*h0*h2^2*h3*x1*x3*y1*y3 -
    f2*h0*h2^2*h3*x1*x3*y2^2 - f2*h0*h2^2*h3*x2^2*y1*y3 - f2*h0*h2^2*h3*x2*x3*y1*y2 - f2*h0*h2*h3^2*x1*x2*y3^2 - f2*h0*h2*h3^2*x2^2*y2*y3 -
    f2*h0*h2*h3^2*x2*x3*y2^2 - f2*h0*h2*h3^2*x3^2*y1*y2 - 2*f2*h0*h2*x1^2*y2*y4 - 2*f2*h0*h2*x1*x2*y1*y4 - 2*f2*h0*h2*x1*x4*y1*y2 - 2*f2*h0*h2*x2*x4*y1^2 +
    f2*h0*h3^3*x1*x3*y3^2 - f2*h0*h3^3*x2^2*y3^2 - f2*h0*h3^3*x2*x3*y2*y3 + f2*h0*h3^3*x3^2*y1*y3 - f2*h0*h3^3*x3^2*y2^2 - 4*f2*h0*h3*x1^2*y3*y4 -
    2*f2*h0*h3*x1*x2*y2*y4 - 2*f2*h0*h3*x1*x4*y2^2 - 2*f2*h0*h3*x2^2*y1*y4 - 2*f2*h0*h3*x2*x4*y1*y2 - 4*f2*h0*h3*x3*x4*y1^2 + 2*f2*h1^2*h2*h3*x1*x3*y1*y3 +
    f2*h1^2*h3^2*x1*x3*y2*y3 + f2*h1^2*h3^2*x2*x3*y1*y3 - f2*h1*h2^3*x1*x3*y1*y3 - f2*h1*h2^2*h3*x1*x3*y2*y3 - f2*h1*h2^2*h3*x2*x3*y1*y3 -
    f2*h1*h2*h3^2*x1*x3*y3^2 - f2*h1*h2*h3^2*x2*x3*y2*y3 - f2*h1*h2*h3^2*x3^2*y1*y3 - f2*h1*h3^3*x2*x3*y3^2 - f2*h1*h3^3*x3^2*y2*y3 + 2*f2*h2^2*x1*x3*y2*y4 +
    2*f2*h2^2*x2*x4*y1*y3 + 4*f2*h2*h3*x1*x3*y3*y4 + 2*f2*h2*h3*x2*x3*y2*y4 + 2*f2*h2*h3*x2*x4*y2*y3 + 4*f2*h2*h3*x3*x4*y1*y3 + 2*f2*h3^2*x2*x3*y3*y4 +
    2*f2*h3^2*x3*x4*y2*y3 + 4*f2*x1*x4*y2*y4 + 4*f2*x2*x4*y1*y4 + 2*f3^3*x1*x3*y1*y3 + 4*f3^2*f6*x2*x3*y3^2 + 4*f3^2*f6*x3^2*y2*y3 + f3^2*h0^2*x1^2*y1*y2 +
    f3^2*h0^2*x1*x2*y1^2 + f3^2*h0*h2*x1*x2*y1*y3 + f3^2*h0*h2*x1*x3*y1*y2 + f3^2*h0*h3*x1^2*y3^2 + 3*f3^2*h0*h3*x1*x3*y1*y3 + f3^2*h0*h3*x1*x3*y2^2 +
    f3^2*h0*h3*x2^2*y1*y3 + f3^2*h0*h3*x3^2*y1^2 + 3*f3^2*h1*h2*x1*x3*y1*y3 + f3^2*h1*h3*x1*x3*y2*y3 + f3^2*h1*h3*x2*x3*y1*y3 + f3^2*h3^2*x2*x3*y3^2 +
    f3^2*h3^2*x3^2*y2*y3 - 2*f3^2*x1*x3*y2*y4 - 2*f3^2*x2*x4*y1*y3 + 8*f3*f4*f6*x3^2*y3^2 + 2*f3*f4*h0^2*x1^2*y1*y3 + 2*f3*f4*h0^2*x1*x2*y1*y2 +
    2*f3*f4*h0^2*x1*x3*y1^2 - 4*f3*f4*h0*h2*x1*x3*y1*y3 - 2*f3*f4*h1^2*x1*x3*y1*y3 + 2*f3*f4*h3^2*x3^2*y3^2 - 2*f3*f5^2*x3^2*y3^2 - 4*f3*f5*h0^2*x1*x2*y1*y3
    + f3*f5*h0^2*x1*x2*y2^2 - 4*f3*f5*h0^2*x1*x3*y1*y2 + f3*f5*h0^2*x2^2*y1*y2 - f3*f5*h0*h1*x1^2*y3^2 + f3*f5*h0*h1*x1*x2*y2*y3 - 8*f3*f5*h0*h1*x1*x3*y1*y3
    + f3*f5*h0*h1*x2*x3*y1*y2 - f3*f5*h0*h1*x3^2*y1^2 - 2*f3*f5*h0*h2*x1*x3*y2*y3 - 2*f3*f5*h0*h2*x2*x3*y1*y3 - 2*f3*f5*h0*h3*x1*x3*y3^2 -
    f3*f5*h0*h3*x2^2*y3^2 - 2*f3*f5*h0*h3*x2*x3*y2*y3 - 2*f3*f5*h0*h3*x3^2*y1*y3 - f3*f5*h0*h3*x3^2*y2^2 - 2*f3*f5*h1*h3*x2*x3*y3^2 -
    2*f3*f5*h1*h3*x3^2*y2*y3 - 2*f3*f5*h2*h3*x3^2*y3^2 + 2*f3*f5*x2*x3*y3*y4 + 2*f3*f5*x2*x4*y3^2 + 2*f3*f5*x3^2*y2*y4 + 2*f3*f5*x3*x4*y2*y3 -
    6*f3*f6*h0^2*x1*x2*y2*y3 - 2*f3*f6*h0^2*x1*x3*y1*y3 - 4*f3*f6*h0^2*x1*x3*y2^2 - 4*f3*f6*h0^2*x2^2*y1*y3 + 2*f3*f6*h0^2*x2^2*y2^2 -
    6*f3*f6*h0^2*x2*x3*y1*y2 - 8*f3*f6*h0*h1*x1*x3*y2*y3 + 2*f3*f6*h0*h1*x2^2*y2*y3 - 8*f3*f6*h0*h1*x2*x3*y1*y3 + 2*f3*f6*h0*h1*x2*x3*y2^2 +
    2*f3*f6*h0*h2*x2^2*y3^2 + 2*f3*f6*h0*h2*x3^2*y2^2 - 4*f3*f6*h0*h3*x2*x3*y3^2 - 4*f3*f6*h0*h3*x3^2*y2*y3 + 2*f3*f6*h1^2*x1*x3*y3^2 +
    2*f3*f6*h1^2*x2*x3*y2*y3 + 2*f3*f6*h1^2*x3^2*y1*y3 + 4*f3*f6*h1*h2*x2*x3*y3^2 + 4*f3*f6*h1*h2*x3^2*y2*y3 - 4*f3*f6*h1*h3*x3^2*y3^2 +
    2*f3*f6*h2^2*x3^2*y3^2 + 8*f3*f6*x3^2*y3*y4 + 8*f3*f6*x3*x4*y3^2 - f3*h0^3*h2*x1^2*y1^2 - f3*h0^3*h3*x1^2*y1*y2 - f3*h0^3*h3*x1*x2*y1^2 -
    f3*h0^2*h1*h3*x1^2*y1*y3 - f3*h0^2*h1*h3*x1*x2*y1*y2 - f3*h0^2*h1*h3*x1*x3*y1^2 + f3*h0^2*h2^2*x1^2*y1*y3 + f3*h0^2*h2^2*x1*x2*y1*y2 +
    f3*h0^2*h2^2*x1*x3*y1^2 + f3*h0^2*h2*h3*x1^2*y2*y3 + f3*h0^2*h2*h3*x1*x2*y2^2 + f3*h0^2*h2*h3*x2^2*y1*y2 + f3*h0^2*h2*h3*x2*x3*y1^2 +
    f3*h0^2*h3^2*x1^2*y3^2 + f3*h0^2*h3^2*x1*x2*y2*y3 + f3*h0^2*h3^2*x1*x3*y1*y3 - f3*h0^2*h3^2*x1*x3*y2^2 - f3*h0^2*h3^2*x2^2*y1*y3 + f3*h0^2*h3^2*x2^2*y2^2
    + f3*h0^2*h3^2*x2*x3*y1*y2 + f3*h0^2*h3^2*x3^2*y1^2 + 2*f3*h0^2*x1^2*y1*y4 + 2*f3*h0^2*x1*x4*y1^2 - f3*h0*h1^2*h3*x1*x2*y1*y3 - f3*h0*h1^2*h3*x1*x3*y1*y2
    + f3*h0*h1*h2^2*x1*x2*y1*y3 + f3*h0*h1*h2^2*x1*x3*y1*y2 + f3*h0*h1*h2*h3*x1*x2*y2*y3 + f3*h0*h1*h2*h3*x1*x3*y2^2 + f3*h0*h1*h2*h3*x2^2*y1*y3 +
    f3*h0*h1*h2*h3*x2*x3*y1*y2 + f3*h0*h1*h3^2*x1*x2*y3^2 + f3*h0*h1*h3^2*x2^2*y2*y3 + f3*h0*h1*h3^2*x2*x3*y2^2 + f3*h0*h1*h3^2*x3^2*y1*y2 +
    f3*h0*h1*x1^2*y2*y4 + f3*h0*h1*x1*x2*y1*y4 + f3*h0*h1*x1*x4*y1*y2 + f3*h0*h1*x2*x4*y1^2 - f3*h0*h2^3*x1*x3*y1*y3 - f3*h0*h2^2*h3*x1*x3*y2*y3 -
    f3*h0*h2^2*h3*x2*x3*y1*y3 - f3*h0*h2*h3^2*x1*x3*y3^2 - f3*h0*h2*h3^2*x2*x3*y2*y3 - f3*h0*h2*h3^2*x3^2*y1*y3 - f3*h0*h2*x1*x2*y2*y4 -
    2*f3*h0*h2*x1*x3*y1*y4 - 2*f3*h0*h2*x1*x4*y1*y3 - f3*h0*h2*x2*x4*y1*y2 - f3*h0*h3^3*x2*x3*y3^2 - f3*h0*h3^3*x3^2*y2*y3 - 3*f3*h0*h3*x1*x2*y3*y4 -
    3*f3*h0*h3*x1*x4*y2*y3 - f3*h0*h3*x2^2*y2*y4 - 3*f3*h0*h3*x2*x3*y1*y4 - f3*h0*h3*x2*x4*y2^2 - 3*f3*h0*h3*x3*x4*y1*y2 - f3*h1^3*h3*x1*x3*y1*y3 +
    f3*h1^2*h2^2*x1*x3*y1*y3 + f3*h1^2*h2*h3*x1*x3*y2*y3 + f3*h1^2*h2*h3*x2*x3*y1*y3 + f3*h1^2*h3^2*x1*x3*y3^2 + f3*h1^2*h3^2*x2*x3*y2*y3 +
    f3*h1^2*h3^2*x3^2*y1*y3 - 2*f3*h1*h2*x1*x3*y2*y4 - 2*f3*h1*h2*x2*x4*y1*y3 - f3*h1*h3^3*x3^2*y3^2 - 2*f3*h1*h3*x1*x3*y3*y4 - f3*h1*h3*x2*x3*y2*y4 -
    f3*h1*h3*x2*x4*y2*y3 - 2*f3*h1*h3*x3*x4*y1*y3 + f3*h2*h3*x2*x3*y3*y4 + f3*h2*h3*x2*x4*y3^2 + f3*h2*h3*x3^2*y2*y4 + f3*h2*h3*x3*x4*y2*y3 +
    2*f3*h3^2*x3^2*y3*y4 + 2*f3*h3^2*x3*x4*y3^2 + 2*f3*x1*x4*y3*y4 + 2*f3*x2*x4*y2*y4 + 2*f3*x3*x4*y1*y4 + 4*f4^2*h0^2*x1*x2*y1*y3 + 4*f4^2*h0^2*x1*x3*y1*y2
    + 8*f4^2*h0*h1*x1*x3*y1*y3 + 2*f4*f5*h0^2*x1*x2*y2*y3 + 2*f4*f5*h0^2*x1*x3*y2^2 + 2*f4*f5*h0^2*x2^2*y1*y3 + 2*f4*f5*h0^2*x2*x3*y1*y2 +
    4*f4*f5*h0*h1*x1*x3*y2*y3 + 4*f4*f5*h0*h1*x2*x3*y1*y3 - 4*f4*f6*h0^2*x1*x2*y3^2 - 4*f4*f6*h0^2*x1*x3*y2*y3 - 4*f4*f6*h0^2*x2*x3*y1*y3 -
    4*f4*f6*h0^2*x3^2*y1*y2 - 8*f4*f6*h0*h1*x1*x3*y3^2 - 8*f4*f6*h0*h1*x3^2*y1*y3 - 4*f4*f6*h0*h3*x3^2*y3^2 + 4*f4*f6*h1*h2*x3^2*y3^2 - f4*h0^3*h2*x1^2*y1*y2
    - f4*h0^3*h2*x1*x2*y1^2 + f4*h0^3*h3*x1^2*y1*y3 - f4*h0^3*h3*x1^2*y2^2 - f4*h0^3*h3*x1*x2*y1*y2 + f4*h0^3*h3*x1*x3*y1^2 - f4*h0^3*h3*x2^2*y1^2 -
    f4*h0^2*h1*h2*x1^2*y1*y3 - f4*h0^2*h1*h2*x1*x2*y1*y2 - f4*h0^2*h1*h2*x1*x3*y1^2 - f4*h0^2*h1*h3*x1^2*y2*y3 - f4*h0^2*h1*h3*x1*x2*y2^2 -
    f4*h0^2*h1*h3*x2^2*y1*y2 - f4*h0^2*h1*h3*x2*x3*y1^2 + f4*h0^2*h2^2*x1*x2*y1*y3 + f4*h0^2*h2^2*x1*x3*y1*y2 + f4*h0^2*h2*h3*x1*x2*y2*y3 -
    2*f4*h0^2*h2*h3*x1*x3*y1*y3 + f4*h0^2*h2*h3*x1*x3*y2^2 + f4*h0^2*h2*h3*x2^2*y1*y3 + f4*h0^2*h2*h3*x2*x3*y1*y2 + f4*h0^2*h3^2*x1*x2*y3^2 -
    f4*h0^2*h3^2*x1*x3*y2*y3 + f4*h0^2*h3^2*x2^2*y2*y3 - f4*h0^2*h3^2*x2*x3*y1*y3 + f4*h0^2*h3^2*x2*x3*y2^2 + f4*h0^2*h3^2*x3^2*y1*y2 + 2*f4*h0^2*x1*x2*y1*y4
    + 2*f4*h0^2*x1*x4*y1*y2 - f4*h0*h1^2*h2*x1*x2*y1*y3 - f4*h0*h1^2*h2*x1*x3*y1*y2 - f4*h0*h1^2*h3*x1*x2*y2*y3 + f4*h0*h1^2*h3*x1*x3*y1*y3 -
    f4*h0*h1^2*h3*x1*x3*y2^2 - f4*h0*h1^2*h3*x2^2*y1*y3 - f4*h0*h1^2*h3*x2*x3*y1*y2 + 2*f4*h0*h1*h2^2*x1*x3*y1*y3 + 2*f4*h0*h1*h2*h3*x1*x3*y2*y3 +
    2*f4*h0*h1*h2*h3*x2*x3*y1*y3 + f4*h0*h1*h3^2*x2^2*y3^2 + 2*f4*h0*h1*h3^2*x2*x3*y2*y3 + f4*h0*h1*h3^2*x3^2*y2^2 + 2*f4*h0*h1*x1*x2*y2*y4 +
    4*f4*h0*h1*x1*x3*y1*y4 + 4*f4*h0*h1*x1*x4*y1*y3 + 2*f4*h0*h1*x2*x4*y1*y2 - f4*h0*h3^3*x3^2*y3^2 - 4*f4*h0*h3*x1*x4*y3^2 - 2*f4*h0*h3*x2^2*y3*y4 -
    2*f4*h0*h3*x2*x3*y2*y4 - 2*f4*h0*h3*x2*x4*y2*y3 - 4*f4*h0*h3*x3^2*y1*y4 - 2*f4*h0*h3*x3*x4*y2^2 - f4*h1^3*h2*x1*x3*y1*y3 - f4*h1^3*h3*x1*x3*y2*y3 -
    f4*h1^3*h3*x2*x3*y1*y3 + f4*h1^2*h3^2*x2*x3*y3^2 + f4*h1^2*h3^2*x3^2*y2*y3 + 2*f4*h1^2*x1*x3*y2*y4 + 2*f4*h1^2*x2*x4*y1*y3 + f4*h1*h2*h3^2*x3^2*y3^2 -
    2*f4*h1*h3*x2*x3*y3*y4 - 2*f4*h1*h3*x2*x4*y3^2 - 2*f4*h1*h3*x3^2*y2*y4 - 2*f4*h1*h3*x3*x4*y2*y3 + 4*f4*x2*x4*y3*y4 + 4*f4*x3*x4*y2*y4 +
    2*f5^2*h0^2*x1*x2*y3^2 + 2*f5^2*h0^2*x1*x3*y2*y3 + f5^2*h0^2*x2^2*y2*y3 + 2*f5^2*h0^2*x2*x3*y1*y3 + f5^2*h0^2*x2*x3*y2^2 + 2*f5^2*h0^2*x3^2*y1*y2 +
    4*f5^2*h0*h1*x1*x3*y3^2 + 2*f5^2*h0*h1*x2*x3*y2*y3 + 4*f5^2*h0*h1*x3^2*y1*y3 + f5^2*h0*h3*x3^2*y3^2 - f5^2*h1*h2*x3^2*y3^2 + 2*f5*f6*h0^2*x2^2*y3^2 +
    4*f5*f6*h0^2*x2*x3*y2*y3 + 2*f5*f6*h0^2*x3^2*y2^2 + 4*f5*f6*h0*h1*x2*x3*y3^2 + 4*f5*f6*h0*h1*x3^2*y2*y3 + f5*h0^4*x1^2*y1^2 + f5*h0^3*h1*x1^2*y1*y2 +
    f5*h0^3*h1*x1*x2*y1^2 - f5*h0^3*h2*x1^2*y1*y3 - f5*h0^3*h2*x1*x2*y1*y2 - f5*h0^3*h2*x1*x3*y1^2 - f5*h0^3*h3*x1^2*y2*y3 + f5*h0^3*h3*x1*x2*y1*y3 -
    f5*h0^3*h3*x1*x2*y2^2 + f5*h0^3*h3*x1*x3*y1*y2 - f5*h0^3*h3*x2^2*y1*y2 - f5*h0^3*h3*x2*x3*y1^2 + f5*h0^2*h1^2*x1^2*y1*y3 + f5*h0^2*h1^2*x1*x2*y1*y2 +
    f5*h0^2*h1^2*x1*x3*y1^2 - 2*f5*h0^2*h1*h2*x1*x2*y1*y3 - 2*f5*h0^2*h1*h2*x1*x3*y1*y2 - f5*h0^2*h1*h3*x1^2*y3^2 - 2*f5*h0^2*h1*h3*x1*x2*y2*y3 +
    f5*h0^2*h1*h3*x1*x3*y1*y3 - f5*h0^2*h1*h3*x2^2*y2^2 - 2*f5*h0^2*h1*h3*x2*x3*y1*y2 - f5*h0^2*h1*h3*x3^2*y1^2 + f5*h0^2*h2^2*x1*x3*y1*y3 +
    f5*h0^2*h2*h3*x1*x3*y2*y3 + f5*h0^2*h2*h3*x2*x3*y1*y3 - f5*h0^2*h3^2*x1*x3*y3^2 + f5*h0^2*h3^2*x2^2*y3^2 + f5*h0^2*h3^2*x2*x3*y2*y3 -
    f5*h0^2*h3^2*x3^2*y1*y3 + f5*h0^2*h3^2*x3^2*y2^2 - 2*f5*h0^2*x1*x3*y1*y4 - 2*f5*h0^2*x1*x4*y1*y3 + f5*h0^2*x1*x4*y2^2 + f5*h0^2*x2^2*y1*y4 +
    f5*h0*h1^3*x1*x2*y1*y3 + f5*h0*h1^3*x1*x3*y1*y2 - 3*f5*h0*h1^2*h2*x1*x3*y1*y3 - f5*h0*h1^2*h3*x1*x2*y3^2 - f5*h0*h1^2*h3*x1*x3*y2*y3 -
    f5*h0*h1^2*h3*x2^2*y2*y3 - f5*h0*h1^2*h3*x2*x3*y1*y3 - f5*h0*h1^2*h3*x2*x3*y2^2 - f5*h0*h1^2*h3*x3^2*y1*y2 + 2*f5*h0*h1*h2*h3*x1*x3*y3^2 -
    f5*h0*h1*h2*h3*x2^2*y3^2 + 2*f5*h0*h1*h2*h3*x3^2*y1*y3 - f5*h0*h1*h2*h3*x3^2*y2^2 + 2*f5*h0*h1*h3^2*x2*x3*y3^2 + 2*f5*h0*h1*h3^2*x3^2*y2*y3 +
    2*f5*h0*h1*x1*x2*y3*y4 + 2*f5*h0*h1*x1*x4*y2*y3 + f5*h0*h1*x2^2*y2*y4 + 2*f5*h0*h1*x2*x3*y1*y4 + f5*h0*h1*x2*x4*y2^2 + 2*f5*h0*h1*x3*x4*y1*y2 +
    f5*h0*h2*h3^2*x3^2*y3^2 + 2*f5*h0*h2*x1*x4*y3^2 + f5*h0*h2*x2^2*y3*y4 + f5*h0*h2*x2*x3*y2*y4 + f5*h0*h2*x2*x4*y2*y3 + 2*f5*h0*h2*x3^2*y1*y4 +
    f5*h0*h2*x3*x4*y2^2 - f5*h0*h3*x2*x3*y3*y4 - f5*h0*h3*x2*x4*y3^2 - f5*h0*h3*x3^2*y2*y4 - f5*h0*h3*x3*x4*y2*y3 + f5*h1^4*x1*x3*y1*y3 -
    f5*h1^3*h3*x1*x3*y3^2 - f5*h1^3*h3*x2*x3*y2*y3 - f5*h1^3*h3*x3^2*y1*y3 - f5*h1^2*h2*h3*x2*x3*y3^2 - f5*h1^2*h2*h3*x3^2*y2*y3 + f5*h1^2*h3^2*x3^2*y3^2 +
    2*f5*h1^2*x1*x3*y3*y4 + f5*h1^2*x2*x3*y2*y4 + f5*h1^2*x2*x4*y2*y3 + 2*f5*h1^2*x3*x4*y1*y3 - f5*h1*h2^2*h3*x3^2*y3^2 + f5*h1*h2*x2*x3*y3*y4 +
    f5*h1*h2*x2*x4*y3^2 + f5*h1*h2*x3^2*y2*y4 + f5*h1*h2*x3*x4*y2*y3 - 2*f5*h1*h3*x3^2*y3*y4 - 2*f5*h1*h3*x3*x4*y3^2 + 4*f5*x3*x4*y3*y4 +
    4*f6^2*h0^2*x2*x3*y3^2 + 4*f6^2*h0^2*x3^2*y2*y3 + 8*f6^2*h0*h1*x3^2*y3^2 + f6*h0^4*x1^2*y1*y2 + f6*h0^4*x1*x2*y1^2 + f6*h0^3*h1*x1^2*y2^2 +
    2*f6*h0^3*h1*x1*x2*y1*y2 + f6*h0^3*h1*x2^2*y1^2 - f6*h0^3*h2*x1*x2*y1*y3 - f6*h0^3*h2*x1*x3*y1*y2 - f6*h0^3*h3*x1^2*y3^2 - f6*h0^3*h3*x1*x2*y2*y3 -
    f6*h0^3*h3*x1*x3*y1*y3 + f6*h0^3*h3*x1*x3*y2^2 + f6*h0^3*h3*x2^2*y1*y3 - f6*h0^3*h3*x2^2*y2^2 - f6*h0^3*h3*x2*x3*y1*y2 - f6*h0^3*h3*x3^2*y1^2 +
    f6*h0^2*h1^2*x1^2*y2*y3 + f6*h0^2*h1^2*x1*x2*y1*y3 + f6*h0^2*h1^2*x1*x2*y2^2 + f6*h0^2*h1^2*x1*x3*y1*y2 + f6*h0^2*h1^2*x2^2*y1*y2 +
    f6*h0^2*h1^2*x2*x3*y1^2 + f6*h0^2*h1*h2*x1^2*y3^2 + f6*h0^2*h1*h2*x1*x3*y1*y3 - 2*f6*h0^2*h1*h2*x1*x3*y2^2 - 2*f6*h0^2*h1*h2*x2^2*y1*y3 +
    f6*h0^2*h1*h2*x2^2*y2^2 + f6*h0^2*h1*h2*x3^2*y1^2 - 2*f6*h0^2*h1*h3*x1*x2*y3^2 + f6*h0^2*h1*h3*x1*x3*y2*y3 - 2*f6*h0^2*h1*h3*x2^2*y2*y3 +
    f6*h0^2*h1*h3*x2*x3*y1*y3 - 2*f6*h0^2*h1*h3*x2*x3*y2^2 - 2*f6*h0^2*h1*h3*x3^2*y1*y2 + 2*f6*h0^2*h2*h3*x1*x3*y3^2 - f6*h0^2*h2*h3*x2^2*y3^2 +
    2*f6*h0^2*h2*h3*x3^2*y1*y3 - f6*h0^2*h2*h3*x3^2*y2^2 + f6*h0^2*h3^2*x2*x3*y3^2 + f6*h0^2*h3^2*x3^2*y2*y3 - 2*f6*h0^2*x1*x2*y3*y4 - 2*f6*h0^2*x1*x3*y2*y4
    - 2*f6*h0^2*x1*x4*y2*y3 - 2*f6*h0^2*x2*x3*y1*y4 - 2*f6*h0^2*x2*x4*y1*y3 - 2*f6*h0^2*x3*x4*y1*y2 + f6*h0*h1^3*x1*x2*y2*y3 + f6*h0*h1^3*x1*x3*y2^2 +
    f6*h0*h1^3*x2^2*y1*y3 + f6*h0*h1^3*x2*x3*y1*y2 + f6*h0*h1^2*h2*x1*x2*y3^2 - 2*f6*h0*h1^2*h2*x1*x3*y2*y3 + f6*h0*h1^2*h2*x2^2*y2*y3 -
    2*f6*h0*h1^2*h2*x2*x3*y1*y3 + f6*h0*h1^2*h2*x2*x3*y2^2 + f6*h0*h1^2*h2*x3^2*y1*y2 - f6*h0*h1^2*h3*x1*x3*y3^2 - f6*h0*h1^2*h3*x2^2*y3^2 -
    3*f6*h0*h1^2*h3*x2*x3*y2*y3 - f6*h0*h1^2*h3*x3^2*y1*y3 - f6*h0*h1^2*h3*x3^2*y2^2 - 2*f6*h0*h1*h2^2*x1*x3*y3^2 + f6*h0*h1*h2^2*x2^2*y3^2 -
    2*f6*h0*h1*h2^2*x3^2*y1*y3 + f6*h0*h1*h2^2*x3^2*y2^2 - 2*f6*h0*h1*h2*h3*x2*x3*y3^2 - 2*f6*h0*h1*h2*h3*x3^2*y2*y3 + 2*f6*h0*h1*h3^2*x3^2*y3^2 -
    4*f6*h0*h1*x1*x3*y3*y4 + 2*f6*h0*h1*x2^2*y3*y4 - 4*f6*h0*h1*x3*x4*y1*y3 + 2*f6*h0*h1*x3*x4*y2^2 - f6*h0*h2^2*h3*x3^2*y3^2 + 2*f6*h0*h2*x2*x3*y3*y4 +
    2*f6*h0*h2*x2*x4*y3^2 + 2*f6*h0*h2*x3^2*y2*y4 + 2*f6*h0*h2*x3*x4*y2*y3 + f6*h1^4*x1*x3*y2*y3 + f6*h1^4*x2*x3*y1*y3 + f6*h1^3*h2*x1*x3*y3^2 +
    f6*h1^3*h2*x2*x3*y2*y3 + f6*h1^3*h2*x3^2*y1*y3 - f6*h1^3*h3*x2*x3*y3^2 - f6*h1^3*h3*x3^2*y2*y3 + f6*h1^2*h2^2*x2*x3*y3^2 + f6*h1^2*h2^2*x3^2*y2*y3 -
    2*f6*h1^2*h2*h3*x3^2*y3^2 + 2*f6*h1^2*x2*x3*y3*y4 + 2*f6*h1^2*x3*x4*y2*y3 + f6*h1*h2^3*x3^2*y3^2 + 4*f6*h1*h2*x3^2*y3*y4 + 4*f6*h1*h2*x3*x4*y3^2 +
    2*h0*h1*x1*x4*y1*y4 - h0*h2*x1*x4*y2*y4 - h0*h2*x2*x4*y1*y4 - 3*h0*h3*x1*x4*y3*y4 - 3*h0*h3*x2*x4*y2*y4 - 3*h0*h3*x3*x4*y1*y4 + h1^2*x1*x4*y2*y4 +
    h1^2*x2*x4*y1*y4 + h1*h2*x1*x4*y3*y4 + h1*h2*x2*x4*y2*y4 + h1*h2*x3*x4*y1*y4 - h1*h3*x2*x4*y3*y4 - h1*h3*x3*x4*y2*y4 + h2^2*x2*x4*y3*y4 +
    h2^2*x3*x4*y2*y4 + 2*h2*h3*x3*x4*y3*y4 + 2*x2*x4*y4^2 + 2*x4^2*y2*y4
        where BBB33 := h eq 0 select
        (-4*f0*f2 + f1^2)*x1^2*y2^2 - 4*f0*f3*x1^2*y2*y3 - 4*f0*f4*x1^2*y3^2 -
    4*f0*x1^2*y3*y4 + (8*f0*f2 - 2*f1^2)*x1*x2*y1*y2 + 4*f0*f3*x1*x2*y1*y3 +
    4*f0*x1*x2*y2*y4 - 4*f0*f5*x1*x2*y3^2 + 4*f0*f3*x1*x3*y1*y2 +
    8*f0*f4*x1*x3*y1*y3 + 4*f0*x1*x3*y1*y4 + 4*f0*f5*x1*x3*y2*y3 +
    2*f1*x1*x3*y2*y4 + 4*f0*x1*x4*y1*y3 - 4*f0*x1*x4*y2^2 - 2*f1*x1*x4*y2*y3 +
    (-4*f0*f2 + f1^2)*x2^2*y1^2 - 4*f0*x2^2*y1*y4 - 4*f0*f6*x2^2*y3^2 -
    4*f0*f3*x2*x3*y1^2 + 4*f0*f5*x2*x3*y1*y3 - 2*f1*x2*x3*y1*y4 +
    8*f0*f6*x2*x3*y2*y3 + 4*f0*x2*x4*y1*y2 + 2*f1*x2*x4*y1*y3 -
    4*f0*f4*x3^2*y1^2 - 4*f0*f5*x3^2*y1*y2 - 4*f0*f6*x3^2*y2^2 + x3^2*y4^2 -
    4*f0*x3*x4*y1^2 - 2*x3*x4*y3*y4 + x4^2*y3^2
                        else
-4*f0*f2*x1^2*y2^2 + 8*f0*f2*x1*x2*y1*y2 - 4*f0*f2*x2^2*y1^2 - 4*f0*f3*x1^2*y2*y3 + 4*f0*f3*x1*x2*y1*y3 + 4*f0*f3*x1*x3*y1*y2 - 4*f0*f3*x2*x3*y1^2 -
    4*f0*f4*x1^2*y3^2 + 8*f0*f4*x1*x3*y1*y3 - 4*f0*f4*x3^2*y1^2 - 4*f0*f5*x1*x2*y3^2 + 4*f0*f5*x1*x3*y2*y3 + 4*f0*f5*x2*x3*y1*y3 - 4*f0*f5*x3^2*y1*y2 -
    4*f0*f6*x2^2*y3^2 + 8*f0*f6*x2*x3*y2*y3 - 4*f0*f6*x3^2*y2^2 - f0*h1^2*x1^2*y2^2 + 2*f0*h1^2*x1*x2*y1*y2 - f0*h1^2*x2^2*y1^2 - 2*f0*h1*h2*x1^2*y2*y3 +
    2*f0*h1*h2*x1*x2*y1*y3 + 2*f0*h1*h2*x1*x3*y1*y2 - 2*f0*h1*h2*x2*x3*y1^2 - 2*f0*h1*h3*x1*x2*y2*y3 + 2*f0*h1*h3*x1*x3*y2^2 + 2*f0*h1*h3*x2^2*y1*y3 -
    2*f0*h1*h3*x2*x3*y1*y2 - f0*h2^2*x1^2*y3^2 + 2*f0*h2^2*x1*x3*y1*y3 - f0*h2^2*x3^2*y1^2 - 2*f0*h2*h3*x1*x2*y3^2 + 2*f0*h2*h3*x1*x3*y2*y3 +
    2*f0*h2*h3*x2*x3*y1*y3 - 2*f0*h2*h3*x3^2*y1*y2 - f0*h3^2*x2^2*y3^2 + 2*f0*h3^2*x2*x3*y2*y3 - f0*h3^2*x3^2*y2^2 - 4*f0*x1^2*y3*y4 + 4*f0*x1*x2*y2*y4 +
    4*f0*x1*x3*y1*y4 + 4*f0*x1*x4*y1*y3 - 4*f0*x1*x4*y2^2 - 4*f0*x2^2*y1*y4 + 4*f0*x2*x4*y1*y2 - 4*f0*x3*x4*y1^2 + f1^2*x1^2*y2^2 - 2*f1^2*x1*x2*y1*y2 +
    f1^2*x2^2*y1^2 + f1*h0*h1*x1^2*y2^2 - 2*f1*h0*h1*x1*x2*y1*y2 + f1*h0*h1*x2^2*y1^2 + f1*h0*h2*x1^2*y2*y3 - f1*h0*h2*x1*x2*y1*y3 - f1*h0*h2*x1*x3*y1*y2 +
    f1*h0*h2*x2*x3*y1^2 + f1*h0*h3*x1*x2*y2*y3 - f1*h0*h3*x1*x3*y2^2 - f1*h0*h3*x2^2*y1*y3 + f1*h0*h3*x2*x3*y1*y2 + 2*f1*x1*x3*y2*y4 - 2*f1*x1*x4*y2*y3 -
    2*f1*x2*x3*y1*y4 + 2*f1*x2*x4*y1*y3 - f2*h0^2*x1^2*y2^2 + 2*f2*h0^2*x1*x2*y1*y2 - f2*h0^2*x2^2*y1^2 - f3*h0^2*x1^2*y2*y3 + f3*h0^2*x1*x2*y1*y3 +
    f3*h0^2*x1*x3*y1*y2 - f3*h0^2*x2*x3*y1^2 - f4*h0^2*x1^2*y3^2 + 2*f4*h0^2*x1*x3*y1*y3 - f4*h0^2*x3^2*y1^2 - f5*h0^2*x1*x2*y3^2 + f5*h0^2*x1*x3*y2*y3 +
    f5*h0^2*x2*x3*y1*y3 - f5*h0^2*x3^2*y1*y2 - f6*h0^2*x2^2*y3^2 + 2*f6*h0^2*x2*x3*y2*y3 - f6*h0^2*x3^2*y2^2 - h0^2*x1^2*y3*y4 + h0^2*x1*x2*y2*y4 +
    h0^2*x1*x3*y1*y4 + h0^2*x1*x4*y1*y3 - h0^2*x1*x4*y2^2 - h0^2*x2^2*y1*y4 + h0^2*x2*x4*y1*y2 - h0^2*x3*x4*y1^2 + h0*h1*x1*x3*y2*y4 - h0*h1*x1*x4*y2*y3 -
    h0*h1*x2*x3*y1*y4 + h0*h1*x2*x4*y1*y3 + h0*h2*x1*x3*y3*y4 - h0*h2*x1*x4*y3^2 - h0*h2*x3^2*y1*y4 + h0*h2*x3*x4*y1*y3 + h0*h3*x2*x3*y3*y4 -
    h0*h3*x2*x4*y3^2 - h0*h3*x3^2*y2*y4 + h0*h3*x3*x4*y2*y3 + x3^2*y4^2 - 2*x3*x4*y3*y4 + x4^2*y3^2
        where BBB34 := h eq 0 select
        (-16*f0^2*f4 + 8*f0*f1*f3 - 16*f0*f2^2 + 4*f1^2*f2)*x1^2*y1^2 + (-16*f0^2*f5 -
    8*f0*f2*f3 + 2*f1^2*f3)*x1^2*y1*y2 + (16*f0^2*f6 - 8*f0*f1*f5 -
    4*f0*f3^2)*x1^2*y1*y3 + (-16*f0*f2 + 4*f1^2)*x1^2*y1*y4 -
    16*f0^2*f6*x1^2*y2^2 - 8*f0*f1*f6*x1^2*y2*y3 - 4*f0*f3*x1^2*y2*y4 +
    (-16*f0*f2*f6 + 4*f0*f3*f5 + 4*f1^2*f6)*x1^2*y3^2 + (-16*f0^2*f5 -
    8*f0*f2*f3 + 2*f1^2*f3)*x1*x2*y1^2 + (-16*f0^2*f6 - 8*f0*f1*f5 - 16*f0*f2*f4
    + 4*f1^2*f4)*x1*x2*y1*y2 + (-8*f0*f3*f4 - 4*f1^2*f5)*x1*x2*y1*y3 -
    8*f0*f3*x1*x2*y1*y4 + (-8*f0*f1*f6 - 8*f0*f2*f5 + 2*f1^2*f5)*x1*x2*y2^2 +
    (-8*f0*f3*f5 - 4*f1^2*f6)*x1*x2*y2*y3 - 8*f0*f4*x1*x2*y2*y4 -
    8*f0*f3*f6*x1*x2*y3^2 - 8*f0*f5*x1*x2*y3*y4 + (16*f0^2*f6 - 8*f0*f1*f5 -
    4*f0*f3^2)*x1*x3*y1^2 + (-8*f0*f3*f4 - 4*f1^2*f5)*x1*x3*y1*y2 +
    (-16*f0*f2*f6 + 16*f0*f3*f5 - 16*f0*f4^2 + 8*f1^2*f6 -
    8*f1*f2*f5)*x1*x3*y1*y3 + (-8*f0*f4 - 2*f1*f3)*x1*x3*y1*y4 + (-4*f0*f3*f5 -
    4*f1^2*f6)*x1*x3*y2^2 + (8*f0*f3*f6 - 8*f0*f4*f5 - 8*f1*f2*f6 -
    2*f1*f3*f5)*x1*x3*y2*y3 - 4*f1*f4*x1*x3*y2*y4 + (16*f0*f4*f6 - 8*f0*f5^2 -
    8*f1*f3*f6)*x1*x3*y3^2 + (8*f0*f6 - 4*f1*f5)*x1*x3*y3*y4 + (-16*f0*f2 +
    4*f1^2)*x1*x4*y1^2 - 8*f0*f3*x1*x4*y1*y2 + (-8*f0*f4 - 2*f1*f3)*x1*x4*y1*y3
    - 12*f0*x1*x4*y1*y4 - 4*f0*f5*x1*x4*y2*y3 - 2*f1*x1*x4*y2*y4 -
    8*f0*f6*x1*x4*y3^2 - 16*f0^2*f6*x2^2*y1^2 + (-8*f0*f1*f6 - 8*f0*f2*f5 +
    2*f1^2*f5)*x2^2*y1*y2 + (-4*f0*f3*f5 - 4*f1^2*f6)*x2^2*y1*y3 + (-16*f0*f2*f6
    + 4*f1^2*f6)*x2^2*y2^2 - 16*f0*f3*f6*x2^2*y2*y3 - 4*f0*f5*x2^2*y2*y4 +
    (-16*f0*f4*f6 + 4*f0*f5^2)*x2^2*y3^2 - 16*f0*f6*x2^2*y3*y4 -
    8*f0*f1*f6*x2*x3*y1^2 + (-8*f0*f3*f5 - 4*f1^2*f6)*x2*x3*y1*y2 + (8*f0*f3*f6
    - 8*f0*f4*f5 - 8*f1*f2*f6 - 2*f1*f3*f5)*x2*x3*y1*y3 - 4*f0*f5*x2*x3*y1*y4 -
    16*f0*f3*f6*x2*x3*y2^2 + (-32*f0*f4*f6 + 4*f0*f5^2 - 8*f1*f3*f6)*x2*x3*y2*y3
    + (-8*f0*f6 - 2*f1*f5)*x2*x3*y2*y4 + (-8*f0*f5*f6 - 16*f1*f4*f6 +
    4*f1*f5^2)*x2*x3*y3^2 - 12*f1*f6*x2*x3*y3*y4 - 4*f0*f3*x2*x4*y1^2 -
    8*f0*f4*x2*x4*y1*y2 - 4*f1*f4*x2*x4*y1*y3 - 2*f1*x2*x4*y1*y4 -
    4*f0*f5*x2*x4*y2^2 + (-8*f0*f6 - 2*f1*f5)*x2*x4*y2*y3 - 4*f1*f6*x2*x4*y3^2 +
    (-16*f0*f2*f6 + 4*f0*f3*f5 + 4*f1^2*f6)*x3^2*y1^2 - 8*f0*f3*f6*x3^2*y1*y2 +
    (16*f0*f4*f6 - 8*f0*f5^2 - 8*f1*f3*f6)*x3^2*y1*y3 - 8*f0*f6*x3^2*y1*y4 +
    (-16*f0*f4*f6 + 4*f0*f5^2)*x3^2*y2^2 + (-8*f0*f5*f6 - 16*f1*f4*f6 +
    4*f1*f5^2)*x3^2*y2*y3 - 4*f1*f6*x3^2*y2*y4 + (-16*f0*f6^2 - 16*f2*f4*f6 +
    4*f2*f5^2 + 4*f3^2*f6)*x3^2*y3^2 + (-8*f2*f6 + 2*f3*f5)*x3^2*y3*y4 -
    8*f0*f5*x3*x4*y1*y2 + (8*f0*f6 - 4*f1*f5)*x3*x4*y1*y3 - 16*f0*f6*x3*x4*y2^2
    - 12*f1*f6*x3*x4*y2*y3 + (-8*f2*f6 + 2*f3*f5)*x3*x4*y3^2 + 4*f4*x3*x4*y3*y4
    + 2*x3*x4*y4^2 + 2*x4^2*y3*y4
                        else
-16*f0^2*f4*x1^2*y1^2 - 16*f0^2*f5*x1^2*y1*y2 - 16*f0^2*f5*x1*x2*y1^2 + 16*f0^2*f6*x1^2*y1*y3 - 16*f0^2*f6*x1^2*y2^2 - 16*f0^2*f6*x1*x2*y1*y2 +
    16*f0^2*f6*x1*x3*y1^2 - 16*f0^2*f6*x2^2*y1^2 - 8*f0^2*h1*h3*x1^2*y1^2 - 4*f0^2*h2^2*x1^2*y1^2 - 8*f0^2*h2*h3*x1^2*y1*y2 - 8*f0^2*h2*h3*x1*x2*y1^2 +
    4*f0^2*h3^2*x1^2*y1*y3 - 4*f0^2*h3^2*x1^2*y2^2 - 4*f0^2*h3^2*x1*x2*y1*y2 + 4*f0^2*h3^2*x1*x3*y1^2 - 4*f0^2*h3^2*x2^2*y1^2 + 8*f0*f1*f3*x1^2*y1^2 -
    8*f0*f1*f5*x1^2*y1*y3 - 8*f0*f1*f5*x1*x2*y1*y2 - 8*f0*f1*f5*x1*x3*y1^2 - 8*f0*f1*f6*x1^2*y2*y3 - 8*f0*f1*f6*x1*x2*y2^2 - 8*f0*f1*f6*x2^2*y1*y2 -
    8*f0*f1*f6*x2*x3*y1^2 + 4*f0*f1*h0*h3*x1^2*y1^2 + 4*f0*f1*h1*h2*x1^2*y1^2 - 4*f0*f1*h2*h3*x1^2*y1*y3 - 4*f0*f1*h2*h3*x1*x2*y1*y2 -
    4*f0*f1*h2*h3*x1*x3*y1^2 - 2*f0*f1*h3^2*x1^2*y2*y3 - 2*f0*f1*h3^2*x1*x2*y2^2 - 2*f0*f1*h3^2*x2^2*y1*y2 - 2*f0*f1*h3^2*x2*x3*y1^2 - 16*f0*f2^2*x1^2*y1^2 -
    8*f0*f2*f3*x1^2*y1*y2 - 8*f0*f2*f3*x1*x2*y1^2 - 16*f0*f2*f4*x1*x2*y1*y2 - 8*f0*f2*f5*x1*x2*y2^2 - 8*f0*f2*f5*x2^2*y1*y2 - 16*f0*f2*f6*x1^2*y3^2 -
    16*f0*f2*f6*x1*x3*y1*y3 - 16*f0*f2*f6*x2^2*y2^2 - 16*f0*f2*f6*x3^2*y1^2 + 4*f0*f2*h0*h2*x1^2*y1^2 + 4*f0*f2*h0*h3*x1^2*y1*y2 + 4*f0*f2*h0*h3*x1*x2*y1^2 -
    8*f0*f2*h1^2*x1^2*y1^2 - 4*f0*f2*h1*h2*x1^2*y1*y2 - 4*f0*f2*h1*h2*x1*x2*y1^2 + 8*f0*f2*h1*h3*x1^2*y1*y3 - 4*f0*f2*h1*h3*x1^2*y2^2 +
    8*f0*f2*h1*h3*x1*x3*y1^2 - 4*f0*f2*h1*h3*x2^2*y1^2 - 4*f0*f2*h2^2*x1*x2*y1*y2 - 4*f0*f2*h2*h3*x1*x2*y2^2 - 4*f0*f2*h2*h3*x2^2*y1*y2 -
    4*f0*f2*h3^2*x1^2*y3^2 - 4*f0*f2*h3^2*x1*x3*y1*y3 - 4*f0*f2*h3^2*x2^2*y2^2 - 4*f0*f2*h3^2*x3^2*y1^2 - 16*f0*f2*x1^2*y1*y4 - 16*f0*f2*x1*x4*y1^2 -
    4*f0*f3^2*x1^2*y1*y3 - 4*f0*f3^2*x1*x3*y1^2 - 8*f0*f3*f4*x1*x2*y1*y3 - 8*f0*f3*f4*x1*x3*y1*y2 + 4*f0*f3*f5*x1^2*y3^2 - 8*f0*f3*f5*x1*x2*y2*y3 +
    16*f0*f3*f5*x1*x3*y1*y3 - 4*f0*f3*f5*x1*x3*y2^2 - 4*f0*f3*f5*x2^2*y1*y3 - 8*f0*f3*f5*x2*x3*y1*y2 + 4*f0*f3*f5*x3^2*y1^2 - 8*f0*f3*f6*x1*x2*y3^2 +
    8*f0*f3*f6*x1*x3*y2*y3 - 16*f0*f3*f6*x2^2*y2*y3 + 8*f0*f3*f6*x2*x3*y1*y3 - 16*f0*f3*f6*x2*x3*y2^2 - 8*f0*f3*f6*x3^2*y1*y2 + 4*f0*f3*h0*h1*x1^2*y1^2 +
    4*f0*f3*h0*h2*x1^2*y1*y2 + 4*f0*f3*h0*h2*x1*x2*y1^2 - 4*f0*f3*h0*h3*x1^2*y1*y3 + 4*f0*f3*h0*h3*x1^2*y2^2 + 4*f0*f3*h0*h3*x1*x2*y1*y2 -
    4*f0*f3*h0*h3*x1*x3*y1^2 + 4*f0*f3*h0*h3*x2^2*y1^2 - 2*f0*f3*h1^2*x1^2*y1*y2 - 2*f0*f3*h1^2*x1*x2*y1^2 - 4*f0*f3*h1*h2*x1^2*y1*y3 -
    4*f0*f3*h1*h2*x1*x3*y1^2 - 2*f0*f3*h1*h3*x1^2*y2*y3 + 4*f0*f3*h1*h3*x1*x2*y1*y3 + 4*f0*f3*h1*h3*x1*x3*y1*y2 - 2*f0*f3*h1*h3*x2*x3*y1^2 -
    2*f0*f3*h2^2*x1*x2*y1*y3 - 2*f0*f3*h2^2*x1*x3*y1*y2 + 2*f0*f3*h2*h3*x1^2*y3^2 - 4*f0*f3*h2*h3*x1*x2*y2*y3 + 8*f0*f3*h2*h3*x1*x3*y1*y3 -
    2*f0*f3*h2*h3*x1*x3*y2^2 - 2*f0*f3*h2*h3*x2^2*y1*y3 - 4*f0*f3*h2*h3*x2*x3*y1*y2 + 2*f0*f3*h2*h3*x3^2*y1^2 - 2*f0*f3*h3^2*x1*x2*y3^2 +
    2*f0*f3*h3^2*x1*x3*y2*y3 - 4*f0*f3*h3^2*x2^2*y2*y3 + 2*f0*f3*h3^2*x2*x3*y1*y3 - 4*f0*f3*h3^2*x2*x3*y2^2 - 2*f0*f3*h3^2*x3^2*y1*y2 - 4*f0*f3*x1^2*y2*y4 -
    8*f0*f3*x1*x2*y1*y4 - 8*f0*f3*x1*x4*y1*y2 - 4*f0*f3*x2*x4*y1^2 - 16*f0*f4^2*x1*x3*y1*y3 - 8*f0*f4*f5*x1*x3*y2*y3 - 8*f0*f4*f5*x2*x3*y1*y3 +
    16*f0*f4*f6*x1*x3*y3^2 - 16*f0*f4*f6*x2^2*y3^2 - 32*f0*f4*f6*x2*x3*y2*y3 + 16*f0*f4*f6*x3^2*y1*y3 - 16*f0*f4*f6*x3^2*y2^2 - 8*f0*f4*h0^2*x1^2*y1^2 +
    4*f0*f4*h0*h2*x1^2*y1*y3 + 4*f0*f4*h0*h2*x1*x2*y1*y2 + 4*f0*f4*h0*h2*x1*x3*y1^2 + 4*f0*f4*h0*h3*x1^2*y2*y3 - 4*f0*f4*h0*h3*x1*x2*y1*y3 +
    4*f0*f4*h0*h3*x1*x2*y2^2 - 4*f0*f4*h0*h3*x1*x3*y1*y2 + 4*f0*f4*h0*h3*x2^2*y1*y2 + 4*f0*f4*h0*h3*x2*x3*y1^2 - 4*f0*f4*h1^2*x1*x2*y1*y2 -
    4*f0*f4*h1*h2*x1*x2*y1*y3 - 4*f0*f4*h1*h2*x1*x3*y1*y2 - 4*f0*f4*h1*h3*x1^2*y3^2 + 4*f0*f4*h1*h3*x1*x2*y2*y3 + 4*f0*f4*h1*h3*x2*x3*y1*y2 -
    4*f0*f4*h1*h3*x3^2*y1^2 - 8*f0*f4*h2^2*x1*x3*y1*y3 - 4*f0*f4*h2*h3*x1*x3*y2*y3 - 4*f0*f4*h2*h3*x2*x3*y1*y3 + 4*f0*f4*h3^2*x1*x3*y3^2 -
    4*f0*f4*h3^2*x2^2*y3^2 - 8*f0*f4*h3^2*x2*x3*y2*y3 + 4*f0*f4*h3^2*x3^2*y1*y3 - 4*f0*f4*h3^2*x3^2*y2^2 - 8*f0*f4*x1*x2*y2*y4 - 8*f0*f4*x1*x3*y1*y4 -
    8*f0*f4*x1*x4*y1*y3 - 8*f0*f4*x2*x4*y1*y2 - 8*f0*f5^2*x1*x3*y3^2 + 4*f0*f5^2*x2^2*y3^2 + 4*f0*f5^2*x2*x3*y2*y3 - 8*f0*f5^2*x3^2*y1*y3 +
    4*f0*f5^2*x3^2*y2^2 - 8*f0*f5*f6*x2*x3*y3^2 - 8*f0*f5*f6*x3^2*y2*y3 - 8*f0*f5*h0^2*x1^2*y1*y2 - 8*f0*f5*h0^2*x1*x2*y1^2 - 4*f0*f5*h0*h1*x1^2*y1*y3 -
    4*f0*f5*h0*h1*x1*x2*y1*y2 - 4*f0*f5*h0*h1*x1*x3*y1^2 + 4*f0*f5*h0*h2*x1*x2*y1*y3 + 4*f0*f5*h0*h2*x1*x3*y1*y2 + 4*f0*f5*h0*h3*x1^2*y3^2 +
    4*f0*f5*h0*h3*x1*x2*y2*y3 + 4*f0*f5*h0*h3*x1*x3*y1*y3 - 4*f0*f5*h0*h3*x1*x3*y2^2 - 4*f0*f5*h0*h3*x2^2*y1*y3 + 4*f0*f5*h0*h3*x2^2*y2^2 +
    4*f0*f5*h0*h3*x2*x3*y1*y2 + 4*f0*f5*h0*h3*x3^2*y1^2 - 2*f0*f5*h1^2*x1*x2*y2^2 - 2*f0*f5*h1^2*x2^2*y1*y2 + 2*f0*f5*h1*h2*x1^2*y3^2 -
    4*f0*f5*h1*h2*x1*x2*y2*y3 + 8*f0*f5*h1*h2*x1*x3*y1*y3 - 2*f0*f5*h1*h2*x1*x3*y2^2 - 2*f0*f5*h1*h2*x2^2*y1*y3 - 4*f0*f5*h1*h2*x2*x3*y1*y2 +
    2*f0*f5*h1*h2*x3^2*y1^2 + 2*f0*f5*h1*h3*x1*x3*y2*y3 + 2*f0*f5*h1*h3*x2^2*y2*y3 + 2*f0*f5*h1*h3*x2*x3*y1*y3 + 2*f0*f5*h1*h3*x2*x3*y2^2 -
    2*f0*f5*h2^2*x1*x3*y2*y3 - 2*f0*f5*h2^2*x2*x3*y1*y3 - 8*f0*f5*h2*h3*x1*x3*y3^2 + 4*f0*f5*h2*h3*x2^2*y3^2 + 4*f0*f5*h2*h3*x2*x3*y2*y3 -
    8*f0*f5*h2*h3*x3^2*y1*y3 + 4*f0*f5*h2*h3*x3^2*y2^2 - 2*f0*f5*h3^2*x2*x3*y3^2 - 2*f0*f5*h3^2*x3^2*y2*y3 - 8*f0*f5*x1*x2*y3*y4 - 4*f0*f5*x1*x4*y2*y3 -
    4*f0*f5*x2^2*y2*y4 - 4*f0*f5*x2*x3*y1*y4 - 4*f0*f5*x2*x4*y2^2 - 8*f0*f5*x3*x4*y1*y2 - 16*f0*f6^2*x3^2*y3^2 + 8*f0*f6*h0^2*x1^2*y1*y3 -
    8*f0*f6*h0^2*x1^2*y2^2 - 8*f0*f6*h0^2*x1*x2*y1*y2 + 8*f0*f6*h0^2*x1*x3*y1^2 - 8*f0*f6*h0^2*x2^2*y1^2 - 4*f0*f6*h0*h1*x1^2*y2*y3 -
    4*f0*f6*h0*h1*x1*x2*y2^2 - 4*f0*f6*h0*h1*x2^2*y1*y2 - 4*f0*f6*h0*h1*x2*x3*y1^2 - 4*f0*f6*h0*h2*x1^2*y3^2 - 12*f0*f6*h0*h2*x1*x3*y1*y3 +
    8*f0*f6*h0*h2*x1*x3*y2^2 + 8*f0*f6*h0*h2*x2^2*y1*y3 - 4*f0*f6*h0*h2*x2^2*y2^2 - 4*f0*f6*h0*h2*x3^2*y1^2 + 4*f0*f6*h0*h3*x1*x2*y3^2 -
    4*f0*f6*h0*h3*x1*x3*y2*y3 + 4*f0*f6*h0*h3*x2^2*y2*y3 - 4*f0*f6*h0*h3*x2*x3*y1*y3 + 4*f0*f6*h0*h3*x2*x3*y2^2 + 4*f0*f6*h0*h3*x3^2*y1*y2 -
    4*f0*f6*h1^2*x1^2*y3^2 - 4*f0*f6*h1^2*x1*x3*y1*y3 - 4*f0*f6*h1^2*x2^2*y2^2 - 4*f0*f6*h1^2*x3^2*y1^2 - 4*f0*f6*h1*h2*x1*x2*y3^2 +
    4*f0*f6*h1*h2*x1*x3*y2*y3 - 8*f0*f6*h1*h2*x2^2*y2*y3 + 4*f0*f6*h1*h2*x2*x3*y1*y3 - 8*f0*f6*h1*h2*x2*x3*y2^2 - 4*f0*f6*h1*h2*x3^2*y1*y2 +
    8*f0*f6*h1*h3*x1*x3*y3^2 - 4*f0*f6*h1*h3*x2^2*y3^2 + 8*f0*f6*h1*h3*x3^2*y1*y3 - 4*f0*f6*h1*h3*x3^2*y2^2 + 4*f0*f6*h2^2*x1*x3*y3^2 -
    4*f0*f6*h2^2*x2^2*y3^2 - 8*f0*f6*h2^2*x2*x3*y2*y3 + 4*f0*f6*h2^2*x3^2*y1*y3 - 4*f0*f6*h2^2*x3^2*y2^2 - 4*f0*f6*h2*h3*x2*x3*y3^2 -
    4*f0*f6*h2*h3*x3^2*y2*y3 - 8*f0*f6*h3^2*x3^2*y3^2 + 8*f0*f6*x1*x3*y3*y4 - 8*f0*f6*x1*x4*y3^2 - 16*f0*f6*x2^2*y3*y4 - 8*f0*f6*x2*x3*y2*y4 -
    8*f0*f6*x2*x4*y2*y3 - 8*f0*f6*x3^2*y1*y4 + 8*f0*f6*x3*x4*y1*y3 - 16*f0*f6*x3*x4*y2^2 - 2*f0*h0^2*h1*h3*x1^2*y1^2 - f0*h0^2*h2^2*x1^2*y1^2 -
    2*f0*h0^2*h2*h3*x1^2*y1*y2 - 2*f0*h0^2*h2*h3*x1*x2*y1^2 + f0*h0^2*h3^2*x1^2*y1*y3 - f0*h0^2*h3^2*x1^2*y2^2 - f0*h0^2*h3^2*x1*x2*y1*y2 +
    f0*h0^2*h3^2*x1*x3*y1^2 - f0*h0^2*h3^2*x2^2*y1^2 + 3*f0*h0*h1^2*h2*x1^2*y1^2 + f0*h0*h1^2*h3*x1^2*y1*y2 + f0*h0*h1^2*h3*x1*x2*y1^2 +
    2*f0*h0*h1*h2^2*x1^2*y1*y2 + 2*f0*h0*h1*h2^2*x1*x2*y1^2 - 2*f0*h0*h1*h2*h3*x1^2*y1*y3 + 2*f0*h0*h1*h2*h3*x1^2*y2^2 + 2*f0*h0*h1*h2*h3*x1*x2*y1*y2 -
    2*f0*h0*h1*h2*h3*x1*x3*y1^2 + 2*f0*h0*h1*h2*h3*x2^2*y1^2 + f0*h0*h1*h3^2*x1^2*y2*y3 - 2*f0*h0*h1*h3^2*x1*x2*y1*y3 + f0*h0*h1*h3^2*x1*x2*y2^2 -
    2*f0*h0*h1*h3^2*x1*x3*y1*y2 + f0*h0*h1*h3^2*x2^2*y1*y2 + f0*h0*h1*h3^2*x2*x3*y1^2 + f0*h0*h2^3*x1^2*y1*y3 + f0*h0*h2^3*x1*x2*y1*y2 +
    f0*h0*h2^3*x1*x3*y1^2 + f0*h0*h2^2*h3*x1^2*y2*y3 + f0*h0*h2^2*h3*x1*x2*y1*y3 + f0*h0*h2^2*h3*x1*x2*y2^2 + f0*h0*h2^2*h3*x1*x3*y1*y2 +
    f0*h0*h2^2*h3*x2^2*y1*y2 + f0*h0*h2^2*h3*x2*x3*y1^2 + f0*h0*h2*h3^2*x1^2*y3^2 + 2*f0*h0*h2*h3^2*x1*x2*y2*y3 - f0*h0*h2*h3^2*x1*x3*y1*y3 +
    f0*h0*h2*h3^2*x2^2*y2^2 + 2*f0*h0*h2*h3^2*x2*x3*y1*y2 + f0*h0*h2*h3^2*x3^2*y1^2 + f0*h0*h3^3*x1*x2*y3^2 - f0*h0*h3^3*x1*x3*y2*y3 + f0*h0*h3^3*x2^2*y2*y3
    - f0*h0*h3^3*x2*x3*y1*y3 + f0*h0*h3^3*x2*x3*y2^2 + f0*h0*h3^3*x3^2*y1*y2 - f0*h1^4*x1^2*y1^2 - f0*h1^3*h2*x1^2*y1*y2 - f0*h1^3*h2*x1*x2*y1^2 +
    2*f0*h1^3*h3*x1^2*y1*y3 - f0*h1^3*h3*x1^2*y2^2 + 2*f0*h1^3*h3*x1*x3*y1^2 - f0*h1^3*h3*x2^2*y1^2 - f0*h1^2*h2^2*x1^2*y1*y3 - f0*h1^2*h2^2*x1*x2*y1*y2 -
    f0*h1^2*h2^2*x1*x3*y1^2 - f0*h1^2*h2*h3*x1^2*y2*y3 + 2*f0*h1^2*h2*h3*x1*x2*y1*y3 - f0*h1^2*h2*h3*x1*x2*y2^2 + 2*f0*h1^2*h2*h3*x1*x3*y1*y2 -
    f0*h1^2*h2*h3*x2^2*y1*y2 - f0*h1^2*h2*h3*x2*x3*y1^2 - f0*h1^2*h3^2*x1^2*y3^2 - 4*f0*h1^2*h3^2*x1*x3*y1*y3 + 2*f0*h1^2*h3^2*x1*x3*y2^2 +
    2*f0*h1^2*h3^2*x2^2*y1*y3 - f0*h1^2*h3^2*x2^2*y2^2 - f0*h1^2*h3^2*x3^2*y1^2 - 4*f0*h1^2*x1^2*y1*y4 - 4*f0*h1^2*x1*x4*y1^2 - f0*h1*h2^3*x1*x2*y1*y3 -
    f0*h1*h2^3*x1*x3*y1*y2 - f0*h1*h2^2*h3*x1*x2*y2*y3 + 4*f0*h1*h2^2*h3*x1*x3*y1*y3 - f0*h1*h2^2*h3*x1*x3*y2^2 - f0*h1*h2^2*h3*x2^2*y1*y3 -
    f0*h1*h2^2*h3*x2*x3*y1*y2 - f0*h1*h2*h3^2*x1*x2*y3^2 + 2*f0*h1*h2*h3^2*x1*x3*y2*y3 - f0*h1*h2*h3^2*x2^2*y2*y3 + 2*f0*h1*h2*h3^2*x2*x3*y1*y3 -
    f0*h1*h2*h3^2*x2*x3*y2^2 - f0*h1*h2*h3^2*x3^2*y1*y2 - 2*f0*h1*h2*x1^2*y2*y4 - 4*f0*h1*h2*x1*x2*y1*y4 - 4*f0*h1*h2*x1*x4*y1*y2 - 2*f0*h1*h2*x2*x4*y1^2 +
    2*f0*h1*h3^3*x1*x3*y3^2 - f0*h1*h3^3*x2^2*y3^2 + 2*f0*h1*h3^3*x3^2*y1*y3 - f0*h1*h3^3*x3^2*y2^2 - 4*f0*h1*h3*x1^2*y3*y4 + 6*f0*h1*h3*x1*x3*y1*y4 +
    6*f0*h1*h3*x1*x4*y1*y3 - 4*f0*h1*h3*x1*x4*y2^2 - 4*f0*h1*h3*x2^2*y1*y4 - 4*f0*h1*h3*x3*x4*y1^2 - f0*h2^4*x1*x3*y1*y3 - f0*h2^3*h3*x1*x3*y2*y3 -
    f0*h2^3*h3*x2*x3*y1*y3 - f0*h2^2*h3^2*x1*x3*y3^2 - f0*h2^2*h3^2*x2*x3*y2*y3 - f0*h2^2*h3^2*x3^2*y1*y3 - 2*f0*h2^2*x1*x2*y2*y4 - 2*f0*h2^2*x1*x3*y1*y4 -
    2*f0*h2^2*x1*x4*y1*y3 - 2*f0*h2^2*x2*x4*y1*y2 - f0*h2*h3^3*x2*x3*y3^2 - f0*h2*h3^3*x3^2*y2*y3 - 4*f0*h2*h3*x1*x2*y3*y4 - 2*f0*h2*h3*x1*x4*y2*y3 -
    2*f0*h2*h3*x2^2*y2*y4 - 2*f0*h2*h3*x2*x3*y1*y4 - 2*f0*h2*h3*x2*x4*y2^2 - 4*f0*h2*h3*x3*x4*y1*y2 - f0*h3^4*x3^2*y3^2 + 2*f0*h3^2*x1*x3*y3*y4 -
    2*f0*h3^2*x1*x4*y3^2 - 4*f0*h3^2*x2^2*y3*y4 - 2*f0*h3^2*x2*x3*y2*y4 - 2*f0*h3^2*x2*x4*y2*y3 - 2*f0*h3^2*x3^2*y1*y4 + 2*f0*h3^2*x3*x4*y1*y3 -
    4*f0*h3^2*x3*x4*y2^2 - 12*f0*x1*x4*y1*y4 + 4*f1^2*f2*x1^2*y1^2 + 2*f1^2*f3*x1^2*y1*y2 + 2*f1^2*f3*x1*x2*y1^2 + 4*f1^2*f4*x1*x2*y1*y2 -
    4*f1^2*f5*x1*x2*y1*y3 + 2*f1^2*f5*x1*x2*y2^2 - 4*f1^2*f5*x1*x3*y1*y2 + 2*f1^2*f5*x2^2*y1*y2 + 4*f1^2*f6*x1^2*y3^2 - 4*f1^2*f6*x1*x2*y2*y3 +
    8*f1^2*f6*x1*x3*y1*y3 - 4*f1^2*f6*x1*x3*y2^2 - 4*f1^2*f6*x2^2*y1*y3 + 4*f1^2*f6*x2^2*y2^2 - 4*f1^2*f6*x2*x3*y1*y2 + 4*f1^2*f6*x3^2*y1^2 -
    3*f1^2*h0*h2*x1^2*y1^2 - f1^2*h0*h3*x1^2*y1*y2 - f1^2*h0*h3*x1*x2*y1^2 + f1^2*h1^2*x1^2*y1^2 + f1^2*h1*h2*x1^2*y1*y2 + f1^2*h1*h2*x1*x2*y1^2 -
    2*f1^2*h1*h3*x1^2*y1*y3 + f1^2*h1*h3*x1^2*y2^2 - 2*f1^2*h1*h3*x1*x3*y1^2 + f1^2*h1*h3*x2^2*y1^2 + f1^2*h2^2*x1*x2*y1*y2 - 2*f1^2*h2*h3*x1*x2*y1*y3 +
    f1^2*h2*h3*x1*x2*y2^2 - 2*f1^2*h2*h3*x1*x3*y1*y2 + f1^2*h2*h3*x2^2*y1*y2 + f1^2*h3^2*x1^2*y3^2 - f1^2*h3^2*x1*x2*y2*y3 + 2*f1^2*h3^2*x1*x3*y1*y3 -
    f1^2*h3^2*x1*x3*y2^2 - f1^2*h3^2*x2^2*y1*y3 + f1^2*h3^2*x2^2*y2^2 - f1^2*h3^2*x2*x3*y1*y2 + f1^2*h3^2*x3^2*y1^2 + 4*f1^2*x1^2*y1*y4 + 4*f1^2*x1*x4*y1^2 -
    8*f1*f2*f5*x1*x3*y1*y3 - 8*f1*f2*f6*x1*x3*y2*y3 - 8*f1*f2*f6*x2*x3*y1*y3 + 4*f1*f2*h0*h1*x1^2*y1^2 - 4*f1*f2*h2*h3*x1*x3*y1*y3 - 2*f1*f2*h3^2*x1*x3*y2*y3
    - 2*f1*f2*h3^2*x2*x3*y1*y3 - 2*f1*f3*f5*x1*x3*y2*y3 - 2*f1*f3*f5*x2*x3*y1*y3 - 8*f1*f3*f6*x1*x3*y3^2 - 8*f1*f3*f6*x2*x3*y2*y3 - 8*f1*f3*f6*x3^2*y1*y3 +
    2*f1*f3*h0^2*x1^2*y1^2 + 2*f1*f3*h0*h1*x1^2*y1*y2 + 2*f1*f3*h0*h1*x1*x2*y1^2 + 2*f1*f3*h0*h2*x1^2*y1*y3 + 2*f1*f3*h0*h2*x1*x3*y1^2 +
    f1*f3*h0*h3*x1^2*y2*y3 + f1*f3*h0*h3*x2*x3*y1^2 + 2*f1*f3*h1*h3*x1*x3*y1*y3 - f1*f3*h2*h3*x1*x3*y2*y3 - f1*f3*h2*h3*x2*x3*y1*y3 - 2*f1*f3*h3^2*x1*x3*y3^2
    - 2*f1*f3*h3^2*x2*x3*y2*y3 - 2*f1*f3*h3^2*x3^2*y1*y3 - 2*f1*f3*x1*x3*y1*y4 - 2*f1*f3*x1*x4*y1*y3 - 16*f1*f4*f6*x2*x3*y3^2 - 16*f1*f4*f6*x3^2*y2*y3 +
    4*f1*f4*h0*h1*x1*x2*y1*y2 + 4*f1*f4*h0*h2*x1*x2*y1*y3 + 4*f1*f4*h0*h2*x1*x3*y1*y2 + 2*f1*f4*h0*h3*x1^2*y3^2 - 4*f1*f4*h0*h3*x1*x3*y1*y3 +
    2*f1*f4*h0*h3*x1*x3*y2^2 + 2*f1*f4*h0*h3*x2^2*y1*y3 + 2*f1*f4*h0*h3*x3^2*y1^2 + 2*f1*f4*h1*h3*x1*x3*y2*y3 + 2*f1*f4*h1*h3*x2*x3*y1*y3 -
    4*f1*f4*h3^2*x2*x3*y3^2 - 4*f1*f4*h3^2*x3^2*y2*y3 - 4*f1*f4*x1*x3*y2*y4 - 4*f1*f4*x2*x4*y1*y3 + 4*f1*f5^2*x2*x3*y3^2 + 4*f1*f5^2*x3^2*y2*y3 -
    2*f1*f5*h0^2*x1^2*y1*y3 - 2*f1*f5*h0^2*x1*x2*y1*y2 - 2*f1*f5*h0^2*x1*x3*y1^2 - 4*f1*f5*h0*h1*x1*x2*y1*y3 + 2*f1*f5*h0*h1*x1*x2*y2^2 -
    4*f1*f5*h0*h1*x1*x3*y1*y2 + 2*f1*f5*h0*h1*x2^2*y1*y2 - f1*f5*h0*h2*x1^2*y3^2 + 2*f1*f5*h0*h2*x1*x2*y2*y3 + f1*f5*h0*h2*x1*x3*y2^2 +
    f1*f5*h0*h2*x2^2*y1*y3 + 2*f1*f5*h0*h2*x2*x3*y1*y2 - f1*f5*h0*h2*x3^2*y1^2 + 2*f1*f5*h0*h3*x1*x2*y3^2 - f1*f5*h0*h3*x1*x3*y2*y3 + f1*f5*h0*h3*x2^2*y2*y3
    - f1*f5*h0*h3*x2*x3*y1*y3 + f1*f5*h0*h3*x2*x3*y2^2 + 2*f1*f5*h0*h3*x3^2*y1*y2 - 2*f1*f5*h1^2*x1*x3*y1*y3 - f1*f5*h1*h2*x1*x3*y2*y3 -
    f1*f5*h1*h2*x2*x3*y1*y3 + 2*f1*f5*h1*h3*x1*x3*y3^2 + 2*f1*f5*h1*h3*x2*x3*y2*y3 + 2*f1*f5*h1*h3*x3^2*y1*y3 + 4*f1*f5*h2*h3*x2*x3*y3^2 +
    4*f1*f5*h2*h3*x3^2*y2*y3 - 4*f1*f5*x1*x3*y3*y4 - 2*f1*f5*x2*x3*y2*y4 - 2*f1*f5*x2*x4*y2*y3 - 4*f1*f5*x3*x4*y1*y3 - 2*f1*f6*h0^2*x1^2*y2*y3 -
    2*f1*f6*h0^2*x1*x2*y2^2 - 2*f1*f6*h0^2*x2^2*y1*y2 - 2*f1*f6*h0^2*x2*x3*y1^2 + 4*f1*f6*h0*h1*x1^2*y3^2 - 4*f1*f6*h0*h1*x1*x2*y2*y3 +
    8*f1*f6*h0*h1*x1*x3*y1*y3 - 4*f1*f6*h0*h1*x1*x3*y2^2 - 4*f1*f6*h0*h1*x2^2*y1*y3 + 4*f1*f6*h0*h1*x2^2*y2^2 - 4*f1*f6*h0*h1*x2*x3*y1*y2 +
    4*f1*f6*h0*h1*x3^2*y1^2 + 2*f1*f6*h0*h2*x1*x3*y2*y3 + 2*f1*f6*h0*h2*x2^2*y2*y3 + 2*f1*f6*h0*h2*x2*x3*y1*y3 + 2*f1*f6*h0*h2*x2*x3*y2^2 -
    4*f1*f6*h0*h3*x1*x3*y3^2 + 4*f1*f6*h0*h3*x2^2*y3^2 + 4*f1*f6*h0*h3*x2*x3*y2*y3 - 4*f1*f6*h0*h3*x3^2*y1*y3 + 4*f1*f6*h0*h3*x3^2*y2^2 -
    2*f1*f6*h1^2*x1*x3*y2*y3 - 2*f1*f6*h1^2*x2*x3*y1*y3 - 4*f1*f6*h1*h2*x1*x3*y3^2 - 4*f1*f6*h1*h2*x2*x3*y2*y3 - 4*f1*f6*h1*h2*x3^2*y1*y3 -
    4*f1*f6*h2^2*x2*x3*y3^2 - 4*f1*f6*h2^2*x3^2*y2*y3 - 12*f1*f6*x2*x3*y3*y4 - 4*f1*f6*x2*x4*y3^2 - 4*f1*f6*x3^2*y2*y4 - 12*f1*f6*x3*x4*y2*y3 +
    f1*h0^3*h3*x1^2*y1^2 - 2*f1*h0^2*h1*h2*x1^2*y1^2 - f1*h0^2*h1*h3*x1^2*y1*y2 - f1*h0^2*h1*h3*x1*x2*y1^2 - f1*h0^2*h2^2*x1^2*y1*y2 -
    f1*h0^2*h2^2*x1*x2*y1^2 - f1*h0^2*h2*h3*x1^2*y2^2 - 2*f1*h0^2*h2*h3*x1*x2*y1*y2 - f1*h0^2*h2*h3*x2^2*y1^2 - f1*h0^2*h3^2*x1^2*y2*y3 +
    f1*h0^2*h3^2*x1*x2*y1*y3 - f1*h0^2*h3^2*x1*x2*y2^2 + f1*h0^2*h3^2*x1*x3*y1*y2 - f1*h0^2*h3^2*x2^2*y1*y2 - f1*h0^2*h3^2*x2*x3*y1^2 + f1*h0*h1^3*x1^2*y1^2
    + f1*h0*h1^2*h2*x1^2*y1*y2 + f1*h0*h1^2*h2*x1*x2*y1^2 - 2*f1*h0*h1^2*h3*x1^2*y1*y3 + f1*h0*h1^2*h3*x1^2*y2^2 - 2*f1*h0*h1^2*h3*x1*x3*y1^2 +
    f1*h0*h1^2*h3*x2^2*y1^2 + f1*h0*h1*h2^2*x1^2*y1*y3 + f1*h0*h1*h2^2*x1*x2*y1*y2 + f1*h0*h1*h2^2*x1*x3*y1^2 + f1*h0*h1*h2*h3*x1^2*y2*y3 -
    2*f1*h0*h1*h2*h3*x1*x2*y1*y3 + f1*h0*h1*h2*h3*x1*x2*y2^2 - 2*f1*h0*h1*h2*h3*x1*x3*y1*y2 + f1*h0*h1*h2*h3*x2^2*y1*y2 + f1*h0*h1*h2*h3*x2*x3*y1^2 +
    f1*h0*h1*h3^2*x1^2*y3^2 + 3*f1*h0*h1*h3^2*x1*x3*y1*y3 - 2*f1*h0*h1*h3^2*x1*x3*y2^2 - 2*f1*h0*h1*h3^2*x2^2*y1*y3 + f1*h0*h1*h3^2*x2^2*y2^2 +
    f1*h0*h1*h3^2*x3^2*y1^2 + 4*f1*h0*h1*x1^2*y1*y4 + 4*f1*h0*h1*x1*x4*y1^2 + f1*h0*h2^3*x1*x2*y1*y3 + f1*h0*h2^3*x1*x3*y1*y2 + f1*h0*h2^2*h3*x1*x2*y2*y3 -
    f1*h0*h2^2*h3*x1*x3*y1*y3 + f1*h0*h2^2*h3*x1*x3*y2^2 + f1*h0*h2^2*h3*x2^2*y1*y3 + f1*h0*h2^2*h3*x2*x3*y1*y2 + f1*h0*h2*h3^2*x1*x2*y3^2 +
    f1*h0*h2*h3^2*x2^2*y2*y3 + f1*h0*h2*h3^2*x2*x3*y2^2 + f1*h0*h2*h3^2*x3^2*y1*y2 + f1*h0*h2*x1^2*y2*y4 + 2*f1*h0*h2*x1*x2*y1*y4 + 2*f1*h0*h2*x1*x4*y1*y2 +
    f1*h0*h2*x2*x4*y1^2 - f1*h0*h3^3*x1*x3*y3^2 + f1*h0*h3^3*x2^2*y3^2 + f1*h0*h3^3*x2*x3*y2*y3 - f1*h0*h3^3*x3^2*y1*y3 + f1*h0*h3^3*x3^2*y2^2 +
    2*f1*h0*h3*x1^2*y3*y4 - 3*f1*h0*h3*x1*x3*y1*y4 - 3*f1*h0*h3*x1*x4*y1*y3 + 2*f1*h0*h3*x1*x4*y2^2 + 2*f1*h0*h3*x2^2*y1*y4 + 2*f1*h0*h3*x3*x4*y1^2 -
    f1*h1*h2*x1*x3*y1*y4 - f1*h1*h2*x1*x4*y1*y3 + f1*h1*h3*x1*x3*y2*y4 - f1*h1*h3*x1*x4*y2*y3 - f1*h1*h3*x2*x3*y1*y4 + f1*h1*h3*x2*x4*y1*y3 -
    f1*h2^2*x1*x3*y2*y4 - f1*h2^2*x2*x4*y1*y3 - 2*f1*h2*h3*x1*x3*y3*y4 - f1*h2*h3*x2*x3*y2*y4 - f1*h2*h3*x2*x4*y2*y3 - 2*f1*h2*h3*x3*x4*y1*y3 -
    3*f1*h3^2*x2*x3*y3*y4 - f1*h3^2*x2*x4*y3^2 - f1*h3^2*x3^2*y2*y4 - 3*f1*h3^2*x3*x4*y2*y3 - 2*f1*x1*x4*y2*y4 - 2*f1*x2*x4*y1*y4 - 4*f2^2*h0^2*x1^2*y1^2 -
    2*f2*f3*h0^2*x1^2*y1*y2 - 2*f2*f3*h0^2*x1*x2*y1^2 - 16*f2*f4*f6*x3^2*y3^2 - 4*f2*f4*h0^2*x1*x2*y1*y2 + 4*f2*f4*h0*h2*x1*x3*y1*y3 - 4*f2*f4*h3^2*x3^2*y3^2
    + 4*f2*f5^2*x3^2*y3^2 - 2*f2*f5*h0^2*x1*x2*y2^2 - 2*f2*f5*h0^2*x2^2*y1*y2 - 4*f2*f5*h0*h1*x1*x3*y1*y3 + 2*f2*f5*h0*h2*x1*x3*y2*y3 +
    2*f2*f5*h0*h2*x2*x3*y1*y3 + 4*f2*f5*h2*h3*x3^2*y3^2 - 4*f2*f6*h0^2*x1^2*y3^2 - 4*f2*f6*h0^2*x1*x3*y1*y3 - 4*f2*f6*h0^2*x2^2*y2^2 - 4*f2*f6*h0^2*x3^2*y1^2
    - 4*f2*f6*h0*h1*x1*x3*y2*y3 - 4*f2*f6*h0*h1*x2*x3*y1*y3 + 4*f2*f6*h0*h2*x1*x3*y3^2 + 4*f2*f6*h0*h2*x2*x3*y2*y3 + 4*f2*f6*h0*h2*x3^2*y1*y3 +
    4*f2*f6*h0*h3*x2*x3*y3^2 + 4*f2*f6*h0*h3*x3^2*y2*y3 - 4*f2*f6*h2^2*x3^2*y3^2 - 8*f2*f6*x3^2*y3*y4 - 8*f2*f6*x3*x4*y3^2 + f2*h0^3*h2*x1^2*y1^2 +
    f2*h0^3*h3*x1^2*y1*y2 + f2*h0^3*h3*x1*x2*y1^2 - f2*h0^2*h1^2*x1^2*y1^2 - f2*h0^2*h1*h2*x1^2*y1*y2 - f2*h0^2*h1*h2*x1*x2*y1^2 + 2*f2*h0^2*h1*h3*x1^2*y1*y3
    - f2*h0^2*h1*h3*x1^2*y2^2 + 2*f2*h0^2*h1*h3*x1*x3*y1^2 - f2*h0^2*h1*h3*x2^2*y1^2 - f2*h0^2*h2^2*x1^2*y1*y3 - f2*h0^2*h2^2*x1*x2*y1*y2 -
    f2*h0^2*h2^2*x1*x3*y1^2 - f2*h0^2*h2*h3*x1^2*y2*y3 - f2*h0^2*h2*h3*x1*x2*y2^2 - f2*h0^2*h2*h3*x2^2*y1*y2 - f2*h0^2*h2*h3*x2*x3*y1^2 -
    f2*h0^2*h3^2*x1^2*y3^2 - f2*h0^2*h3^2*x1*x2*y2*y3 - f2*h0^2*h3^2*x1*x3*y1*y3 + f2*h0^2*h3^2*x1*x3*y2^2 + f2*h0^2*h3^2*x2^2*y1*y3 - f2*h0^2*h3^2*x2^2*y2^2
    - f2*h0^2*h3^2*x2*x3*y1*y2 - f2*h0^2*h3^2*x3^2*y1^2 - 4*f2*h0^2*x1^2*y1*y4 - 4*f2*h0^2*x1*x4*y1^2 - 2*f2*h0*h1*h2*h3*x1*x3*y1*y3 -
    f2*h0*h1*h3^2*x1*x3*y2*y3 - f2*h0*h1*h3^2*x2*x3*y1*y3 + f2*h0*h2^3*x1*x3*y1*y3 + f2*h0*h2^2*h3*x1*x3*y2*y3 + f2*h0*h2^2*h3*x2*x3*y1*y3 +
    f2*h0*h2*h3^2*x1*x3*y3^2 + f2*h0*h2*h3^2*x2*x3*y2*y3 + f2*h0*h2*h3^2*x3^2*y1*y3 + 2*f2*h0*h2*x1*x3*y1*y4 + 2*f2*h0*h2*x1*x4*y1*y3 + f2*h0*h3^3*x2*x3*y3^2
    + f2*h0*h3^3*x3^2*y2*y3 - 2*f2*h0*h3*x1*x3*y2*y4 + 2*f2*h0*h3*x1*x4*y2*y3 + 2*f2*h0*h3*x2*x3*y1*y4 - 2*f2*h0*h3*x2*x4*y1*y3 - 2*f2*h3^2*x3^2*y3*y4 -
    2*f2*h3^2*x3*x4*y3^2 + 4*f3^2*f6*x3^2*y3^2 - f3^2*h0^2*x1^2*y1*y3 - f3^2*h0^2*x1*x3*y1^2 - f3^2*h0*h2*x1*x3*y1*y3 + f3^2*h3^2*x3^2*y3^2 -
    2*f3*f4*h0^2*x1*x2*y1*y3 - 2*f3*f4*h0^2*x1*x3*y1*y2 + f3*f5*h0^2*x1^2*y3^2 - 2*f3*f5*h0^2*x1*x2*y2*y3 + 4*f3*f5*h0^2*x1*x3*y1*y3 - f3*f5*h0^2*x1*x3*y2^2
    - f3*f5*h0^2*x2^2*y1*y3 - 2*f3*f5*h0^2*x2*x3*y1*y2 + f3*f5*h0^2*x3^2*y1^2 - f3*f5*h0*h1*x1*x3*y2*y3 - f3*f5*h0*h1*x2*x3*y1*y3 - f3*f5*h0*h3*x2*x3*y3^2 -
    f3*f5*h0*h3*x3^2*y2*y3 - 2*f3*f5*h1*h3*x3^2*y3^2 + 2*f3*f5*x3^2*y3*y4 + 2*f3*f5*x3*x4*y3^2 - 2*f3*f6*h0^2*x1*x2*y3^2 + 2*f3*f6*h0^2*x1*x3*y2*y3 -
    4*f3*f6*h0^2*x2^2*y2*y3 + 2*f3*f6*h0^2*x2*x3*y1*y3 - 4*f3*f6*h0^2*x2*x3*y2^2 - 2*f3*f6*h0^2*x3^2*y1*y2 - 4*f3*f6*h0*h1*x1*x3*y3^2 -
    4*f3*f6*h0*h1*x2*x3*y2*y3 - 4*f3*f6*h0*h1*x3^2*y1*y3 + 2*f3*f6*h0*h2*x2*x3*y3^2 + 2*f3*f6*h0*h2*x3^2*y2*y3 + 4*f3*f6*h0*h3*x3^2*y3^2 +
    4*f3*f6*h1*h2*x3^2*y3^2 + f3*h0^3*h1*x1^2*y1^2 + f3*h0^3*h2*x1^2*y1*y2 + f3*h0^3*h2*x1*x2*y1^2 - f3*h0^3*h3*x1^2*y1*y3 + f3*h0^3*h3*x1^2*y2^2 +
    f3*h0^3*h3*x1*x2*y1*y2 - f3*h0^3*h3*x1*x3*y1^2 + f3*h0^3*h3*x2^2*y1^2 + f3*h0^2*h1*h3*x1*x2*y1*y3 + f3*h0^2*h1*h3*x1*x3*y1*y2 - f3*h0^2*h2^2*x1*x2*y1*y3
    - f3*h0^2*h2^2*x1*x3*y1*y2 - f3*h0^2*h2*h3*x1*x2*y2*y3 + 2*f3*h0^2*h2*h3*x1*x3*y1*y3 - f3*h0^2*h2*h3*x1*x3*y2^2 - f3*h0^2*h2*h3*x2^2*y1*y3 -
    f3*h0^2*h2*h3*x2*x3*y1*y2 - f3*h0^2*h3^2*x1*x2*y3^2 + f3*h0^2*h3^2*x1*x3*y2*y3 - f3*h0^2*h3^2*x2^2*y2*y3 + f3*h0^2*h3^2*x2*x3*y1*y3 -
    f3*h0^2*h3^2*x2*x3*y2^2 - f3*h0^2*h3^2*x3^2*y1*y2 - f3*h0^2*x1^2*y2*y4 - 2*f3*h0^2*x1*x2*y1*y4 - 2*f3*h0^2*x1*x4*y1*y2 - f3*h0^2*x2*x4*y1^2 +
    f3*h0*h1^2*h3*x1*x3*y1*y3 - f3*h0*h1*h2^2*x1*x3*y1*y3 - f3*h0*h1*h2*h3*x1*x3*y2*y3 - f3*h0*h1*h2*h3*x2*x3*y1*y3 - f3*h0*h1*h3^2*x1*x3*y3^2 -
    f3*h0*h1*h3^2*x2*x3*y2*y3 - f3*h0*h1*h3^2*x3^2*y1*y3 - f3*h0*h1*x1*x3*y1*y4 - f3*h0*h1*x1*x4*y1*y3 + f3*h0*h2*x1*x3*y2*y4 + f3*h0*h2*x2*x4*y1*y3 +
    f3*h0*h3^3*x3^2*y3^2 - f3*h0*h3*x1*x3*y3*y4 + f3*h0*h3*x1*x4*y3^2 + f3*h0*h3*x3^2*y1*y4 - f3*h0*h3*x3*x4*y1*y3 + f3*h2*h3*x3^2*y3*y4 +
    f3*h2*h3*x3*x4*y3^2 - 4*f4^2*h0^2*x1*x3*y1*y3 - 2*f4*f5*h0^2*x1*x3*y2*y3 - 2*f4*f5*h0^2*x2*x3*y1*y3 + 4*f4*f6*h0^2*x1*x3*y3^2 - 4*f4*f6*h0^2*x2^2*y3^2 -
    8*f4*f6*h0^2*x2*x3*y2*y3 + 4*f4*f6*h0^2*x3^2*y1*y3 - 4*f4*f6*h0^2*x3^2*y2^2 - 8*f4*f6*h0*h1*x2*x3*y3^2 - 8*f4*f6*h0*h1*x3^2*y2*y3 -
    4*f4*f6*h0*h2*x3^2*y3^2 - 4*f4*f6*h1^2*x3^2*y3^2 - f4*h0^4*x1^2*y1^2 + f4*h0^3*h2*x1^2*y1*y3 + f4*h0^3*h2*x1*x2*y1*y2 + f4*h0^3*h2*x1*x3*y1^2 +
    f4*h0^3*h3*x1^2*y2*y3 - f4*h0^3*h3*x1*x2*y1*y3 + f4*h0^3*h3*x1*x2*y2^2 - f4*h0^3*h3*x1*x3*y1*y2 + f4*h0^3*h3*x2^2*y1*y2 + f4*h0^3*h3*x2*x3*y1^2 +
    f4*h0^2*h1*h2*x1*x2*y1*y3 + f4*h0^2*h1*h2*x1*x3*y1*y2 + f4*h0^2*h1*h3*x1*x2*y2*y3 - 2*f4*h0^2*h1*h3*x1*x3*y1*y3 + f4*h0^2*h1*h3*x1*x3*y2^2 +
    f4*h0^2*h1*h3*x2^2*y1*y3 + f4*h0^2*h1*h3*x2*x3*y1*y2 - f4*h0^2*h2^2*x1*x3*y1*y3 - f4*h0^2*h2*h3*x1*x3*y2*y3 - f4*h0^2*h2*h3*x2*x3*y1*y3 +
    f4*h0^2*h3^2*x1*x3*y3^2 - f4*h0^2*h3^2*x2^2*y3^2 - f4*h0^2*h3^2*x2*x3*y2*y3 + f4*h0^2*h3^2*x3^2*y1*y3 - f4*h0^2*h3^2*x3^2*y2^2 - 2*f4*h0^2*x1*x2*y2*y4 -
    2*f4*h0^2*x1*x3*y1*y4 - 2*f4*h0^2*x1*x4*y1*y3 - 2*f4*h0^2*x2*x4*y1*y2 + f4*h0*h1^2*h2*x1*x3*y1*y3 + f4*h0*h1^2*h3*x1*x3*y2*y3 + f4*h0*h1^2*h3*x2*x3*y1*y3
    - f4*h0*h1*h3^2*x2*x3*y3^2 - f4*h0*h1*h3^2*x3^2*y2*y3 - 2*f4*h0*h1*x1*x3*y2*y4 - 2*f4*h0*h1*x2*x4*y1*y3 - f4*h0*h2*h3^2*x3^2*y3^2 -
    2*f4*h0*h3*x2*x3*y3*y4 - 2*f4*h0*h3*x3*x4*y2*y3 - 2*f4*h1*h3*x3^2*y3*y4 - 2*f4*h1*h3*x3*x4*y3^2 + 4*f4*x3*x4*y3*y4 - 2*f5^2*h0^2*x1*x3*y3^2 +
    f5^2*h0^2*x2^2*y3^2 + f5^2*h0^2*x2*x3*y2*y3 - 2*f5^2*h0^2*x3^2*y1*y3 + f5^2*h0^2*x3^2*y2^2 + 2*f5^2*h0*h1*x2*x3*y3^2 + 2*f5^2*h0*h1*x3^2*y2*y3 +
    f5^2*h0*h2*x3^2*y3^2 + f5^2*h1^2*x3^2*y3^2 - 2*f5*f6*h0^2*x2*x3*y3^2 - 2*f5*f6*h0^2*x3^2*y2*y3 - f5*h0^4*x1^2*y1*y2 - f5*h0^4*x1*x2*y1^2 -
    f5*h0^3*h1*x1^2*y1*y3 - f5*h0^3*h1*x1*x2*y1*y2 - f5*h0^3*h1*x1*x3*y1^2 + f5*h0^3*h2*x1*x2*y1*y3 + f5*h0^3*h2*x1*x3*y1*y2 + f5*h0^3*h3*x1^2*y3^2 +
    f5*h0^3*h3*x1*x2*y2*y3 + f5*h0^3*h3*x1*x3*y1*y3 - f5*h0^3*h3*x1*x3*y2^2 - f5*h0^3*h3*x2^2*y1*y3 + f5*h0^3*h3*x2^2*y2^2 + f5*h0^3*h3*x2*x3*y1*y2 +
    f5*h0^3*h3*x3^2*y1^2 - f5*h0^2*h1^2*x1*x2*y1*y3 - f5*h0^2*h1^2*x1*x3*y1*y2 + 2*f5*h0^2*h1*h2*x1*x3*y1*y3 + f5*h0^2*h1*h3*x1*x2*y3^2 +
    f5*h0^2*h1*h3*x2^2*y2*y3 + f5*h0^2*h1*h3*x2*x3*y2^2 + f5*h0^2*h1*h3*x3^2*y1*y2 - 2*f5*h0^2*h2*h3*x1*x3*y3^2 + f5*h0^2*h2*h3*x2^2*y3^2 -
    2*f5*h0^2*h2*h3*x3^2*y1*y3 + f5*h0^2*h2*h3*x3^2*y2^2 - f5*h0^2*h3^2*x2*x3*y3^2 - f5*h0^2*h3^2*x3^2*y2*y3 - 2*f5*h0^2*x1*x2*y3*y4 - f5*h0^2*x1*x4*y2*y3 -
    f5*h0^2*x2^2*y2*y4 - f5*h0^2*x2*x3*y1*y4 - f5*h0^2*x2*x4*y2^2 - 2*f5*h0^2*x3*x4*y1*y2 - f5*h0*h1^3*x1*x3*y1*y3 + f5*h0*h1^2*h3*x1*x3*y3^2 +
    f5*h0*h1^2*h3*x2*x3*y2*y3 + f5*h0*h1^2*h3*x3^2*y1*y3 + f5*h0*h1*h2*h3*x2*x3*y3^2 + f5*h0*h1*h2*h3*x3^2*y2*y3 - f5*h0*h1*h3^2*x3^2*y3^2 -
    2*f5*h0*h1*x1*x3*y3*y4 - f5*h0*h1*x2*x3*y2*y4 - f5*h0*h1*x2*x4*y2*y3 - 2*f5*h0*h1*x3*x4*y1*y3 + f5*h0*h2^2*h3*x3^2*y3^2 + f5*h0*h2*x2*x3*y3*y4 +
    f5*h0*h2*x3*x4*y2*y3 + f5*h0*h3*x3^2*y3*y4 + f5*h0*h3*x3*x4*y3^2 + f5*h1*h2*x3^2*y3*y4 + f5*h1*h2*x3*x4*y3^2 - 4*f6^2*h0^2*x3^2*y3^2 + f6*h0^4*x1^2*y1*y3
    - f6*h0^4*x1^2*y2^2 - f6*h0^4*x1*x2*y1*y2 + f6*h0^4*x1*x3*y1^2 - f6*h0^4*x2^2*y1^2 - f6*h0^3*h1*x1^2*y2*y3 - f6*h0^3*h1*x1*x2*y2^2 -
    f6*h0^3*h1*x2^2*y1*y2 - f6*h0^3*h1*x2*x3*y1^2 - f6*h0^3*h2*x1^2*y3^2 - 3*f6*h0^3*h2*x1*x3*y1*y3 + 2*f6*h0^3*h2*x1*x3*y2^2 + 2*f6*h0^3*h2*x2^2*y1*y3 -
    f6*h0^3*h2*x2^2*y2^2 - f6*h0^3*h2*x3^2*y1^2 + f6*h0^3*h3*x1*x2*y3^2 - f6*h0^3*h3*x1*x3*y2*y3 + f6*h0^3*h3*x2^2*y2*y3 - f6*h0^3*h3*x2*x3*y1*y3 +
    f6*h0^3*h3*x2*x3*y2^2 + f6*h0^3*h3*x3^2*y1*y2 - f6*h0^2*h1^2*x1*x2*y2*y3 + f6*h0^2*h1^2*x1*x3*y1*y3 - f6*h0^2*h1^2*x1*x3*y2^2 - f6*h0^2*h1^2*x2^2*y1*y3 -
    f6*h0^2*h1^2*x2*x3*y1*y2 - f6*h0^2*h1*h2*x1*x2*y3^2 + 2*f6*h0^2*h1*h2*x1*x3*y2*y3 - f6*h0^2*h1*h2*x2^2*y2*y3 + 2*f6*h0^2*h1*h2*x2*x3*y1*y3 -
    f6*h0^2*h1*h2*x2*x3*y2^2 - f6*h0^2*h1*h2*x3^2*y1*y2 + f6*h0^2*h1*h3*x2^2*y3^2 + 2*f6*h0^2*h1*h3*x2*x3*y2*y3 + f6*h0^2*h1*h3*x3^2*y2^2 +
    2*f6*h0^2*h2^2*x1*x3*y3^2 - f6*h0^2*h2^2*x2^2*y3^2 + 2*f6*h0^2*h2^2*x3^2*y1*y3 - f6*h0^2*h2^2*x3^2*y2^2 + f6*h0^2*h2*h3*x2*x3*y3^2 +
    f6*h0^2*h2*h3*x3^2*y2*y3 - f6*h0^2*h3^2*x3^2*y3^2 + 2*f6*h0^2*x1*x3*y3*y4 - 2*f6*h0^2*x1*x4*y3^2 - 4*f6*h0^2*x2^2*y3*y4 - 2*f6*h0^2*x2*x3*y2*y4 -
    2*f6*h0^2*x2*x4*y2*y3 - 2*f6*h0^2*x3^2*y1*y4 + 2*f6*h0^2*x3*x4*y1*y3 - 4*f6*h0^2*x3*x4*y2^2 - f6*h0*h1^3*x1*x3*y2*y3 - f6*h0*h1^3*x2*x3*y1*y3 -
    f6*h0*h1^2*h2*x1*x3*y3^2 - f6*h0*h1^2*h2*x2*x3*y2*y3 - f6*h0*h1^2*h2*x3^2*y1*y3 + f6*h0*h1^2*h3*x2*x3*y3^2 + f6*h0*h1^2*h3*x3^2*y2*y3 -
    f6*h0*h1*h2^2*x2*x3*y3^2 - f6*h0*h1*h2^2*x3^2*y2*y3 + 2*f6*h0*h1*h2*h3*x3^2*y3^2 - 6*f6*h0*h1*x2*x3*y3*y4 - 2*f6*h0*h1*x2*x4*y3^2 - 2*f6*h0*h1*x3^2*y2*y4
    - 6*f6*h0*h1*x3*x4*y2*y3 - f6*h0*h2^3*x3^2*y3^2 - 2*f6*h0*h2*x3^2*y3*y4 - 2*f6*h0*h2*x3*x4*y3^2 - 2*f6*h1^2*x3^2*y3*y4 - 2*f6*h1^2*x3*x4*y3^2 -
    3*h0^2*x1*x4*y1*y4 - h0*h1*x1*x4*y2*y4 - h0*h1*x2*x4*y1*y4 - h0*h2*x1*x4*y3*y4 - h0*h2*x2*x4*y2*y4 - h0*h2*x3*x4*y1*y4 - 3*h0*h3*x2*x4*y3*y4 -
    3*h0*h3*x3*x4*y2*y4 - 4*h1*h3*x3*x4*y3*y4 + h2^2*x3*x4*y3*y4 + 2*x3*x4*y4^2 + 2*x4^2*y3*y4
        where BBB44 := h eq 0 select
        (16*f0^2*f2*f6 - 16*f0^2*f3*f5 + 16*f0^2*f4^2 - 4*f0*f1^2*f6 + 8*f0*f1*f2*f5 -
    8*f0*f1*f3*f4 + 16*f0*f2^2*f4 - 4*f0*f2*f3^2 - 2*f1^3*f5 - 4*f1^2*f2*f4 +
    f1^2*f3^2)*x1^2*y1^2 + (-16*f0^2*f3*f6 + 16*f0^2*f4*f5 + 16*f0*f1*f2*f6 -
    8*f0*f1*f3*f5 + 16*f0*f2^2*f5 - 4*f1^3*f6 - 4*f1^2*f2*f5)*x1^2*y1*y2 +
    (-32*f0^2*f4*f6 + 16*f0^2*f5^2 + 8*f0*f1*f3*f6 + 8*f0*f2*f3*f5 -
    2*f1^2*f3*f5)*x1^2*y1*y3 + (16*f0*f2*f4 - 4*f0*f3^2 - 4*f1^2*f4)*x1^2*y1*y4
    + (16*f0^2*f4*f6 - 8*f0*f1*f3*f6 + 16*f0*f2^2*f6 - 4*f1^2*f2*f6)*x1^2*y2^2 +
    (16*f0^2*f5*f6 + 16*f0*f2*f3*f6 - 4*f1^2*f3*f6)*x1^2*y2*y3 + (8*f0*f2*f5 -
    2*f1^2*f5)*x1^2*y2*y4 + (16*f0^2*f6^2 + 32*f0*f2*f4*f6 - 8*f0*f2*f5^2 -
    4*f0*f3^2*f6 - 8*f1^2*f4*f6 + 2*f1^2*f5^2)*x1^2*y3^2 + (16*f0*f2*f6 -
    4*f1^2*f6)*x1^2*y3*y4 + (-16*f0^2*f3*f6 + 16*f0^2*f4*f5 + 16*f0*f1*f2*f6 -
    8*f0*f1*f3*f5 + 16*f0*f2^2*f5 - 4*f1^3*f6 - 4*f1^2*f2*f5)*x1*x2*y1^2 +
    (16*f0^2*f5^2 - 8*f0*f1*f3*f6 + 32*f0*f2^2*f6 + 8*f0*f2*f3*f5 - 8*f1^2*f2*f6
    - 2*f1^2*f3*f5)*x1*x2*y1*y2 + (16*f0^2*f5*f6 - 16*f0*f1*f4*f6 + 8*f0*f1*f5^2
    + 16*f0*f2*f3*f6 + 4*f0*f3^2*f5)*x1*x2*y1*y3 + (16*f0*f2*f5 -
    4*f1^2*f5)*x1*x2*y1*y4 + (16*f0^2*f5*f6 + 16*f0*f2*f3*f6 -
    4*f1^2*f3*f6)*x1*x2*y2^2 + (32*f0^2*f6^2 + 8*f0*f1*f5*f6 +
    16*f0*f3^2*f6)*x1*x2*y2*y3 + (16*f0*f2*f6 + 4*f0*f3*f5 -
    4*f1^2*f6)*x1*x2*y2*y4 + (16*f0*f1*f6^2 + 16*f0*f3*f4*f6 -
    4*f0*f3*f5^2)*x1*x2*y3^2 + 16*f0*f3*f6*x1*x2*y3*y4 + (-32*f0^2*f4*f6 +
    16*f0^2*f5^2 + 8*f0*f1*f3*f6 + 8*f0*f2*f3*f5 - 2*f1^2*f3*f5)*x1*x3*y1^2 +
    (16*f0^2*f5*f6 - 16*f0*f1*f4*f6 + 8*f0*f1*f5^2 + 16*f0*f2*f3*f6 +
    4*f0*f3^2*f5)*x1*x3*y1*y2 + (32*f0^2*f6^2 + 32*f0*f2*f4*f6 - 16*f0*f2*f5^2 -
    8*f0*f3^2*f6 + 8*f0*f3*f4*f5 - 16*f1^2*f4*f6 + 8*f1^2*f5^2 +
    8*f1*f2*f3*f6)*x1*x3*y1*y3 + 8*f0*f3*f5*x1*x3*y1*y4 + (8*f0*f1*f5*f6 +
    8*f0*f3^2*f6)*x1*x3*y2^2 + (16*f0*f1*f6^2 - 16*f0*f2*f5*f6 + 16*f0*f3*f4*f6
    + 8*f1^2*f5*f6 + 4*f1*f3^2*f6)*x1*x3*y2*y3 + (8*f0*f3*f6 +
    2*f1*f3*f5)*x1*x3*y2*y4 + (-32*f0*f2*f6^2 + 8*f0*f3*f5*f6 + 16*f1^2*f6^2 +
    8*f1*f3*f4*f6 - 2*f1*f3*f5^2)*x1*x3*y3^2 + 8*f1*f3*f6*x1*x3*y3*y4 +
    (16*f0*f2*f4 - 4*f0*f3^2 - 4*f1^2*f4)*x1*x4*y1^2 + (16*f0*f2*f5 -
    4*f1^2*f5)*x1*x4*y1*y2 + 8*f0*f3*f5*x1*x4*y1*y3 + (8*f0*f4 -
    2*f1*f3)*x1*x4*y1*y4 + (16*f0*f2*f6 - 4*f1^2*f6)*x1*x4*y2^2 +
    16*f0*f3*f6*x1*x4*y2*y3 + 4*f0*f5*x1*x4*y2*y4 + (16*f0*f4*f6 -
    4*f0*f5^2)*x1*x4*y3^2 + 8*f0*f6*x1*x4*y3*y4 + (16*f0^2*f4*f6 - 8*f0*f1*f3*f6
    + 16*f0*f2^2*f6 - 4*f1^2*f2*f6)*x2^2*y1^2 + (16*f0^2*f5*f6 + 16*f0*f2*f3*f6
    - 4*f1^2*f3*f6)*x2^2*y1*y2 + (8*f0*f1*f5*f6 + 8*f0*f3^2*f6)*x2^2*y1*y3 +
    (16*f0*f2*f6 - 4*f1^2*f6)*x2^2*y1*y4 + (16*f0^2*f6^2 + 16*f0*f2*f4*f6 -
    4*f0*f2*f5^2 - 4*f1^2*f4*f6 + f1^2*f5^2)*x2^2*y2^2 + (16*f0*f1*f6^2 +
    16*f0*f3*f4*f6 - 4*f0*f3*f5^2)*x2^2*y2*y3 + 8*f0*f3*f6*x2^2*y2*y4 +
    (16*f0*f2*f6^2 - 8*f0*f3*f5*f6 + 16*f0*f4^2*f6 - 4*f0*f4*f5^2)*x2^2*y3^2 +
    (16*f0*f4*f6 - 4*f0*f5^2)*x2^2*y3*y4 + (16*f0^2*f5*f6 + 16*f0*f2*f3*f6 -
    4*f1^2*f3*f6)*x2*x3*y1^2 + (32*f0^2*f6^2 + 8*f0*f1*f5*f6 +
    16*f0*f3^2*f6)*x2*x3*y1*y2 + (16*f0*f1*f6^2 - 16*f0*f2*f5*f6 +
    16*f0*f3*f4*f6 + 8*f1^2*f5*f6 + 4*f1*f3^2*f6)*x2*x3*y1*y3 +
    16*f0*f3*f6*x2*x3*y1*y4 + (16*f0*f1*f6^2 + 16*f0*f3*f4*f6 -
    4*f0*f3*f5^2)*x2*x3*y2^2 + (-8*f0*f3*f5*f6 + 32*f0*f4^2*f6 - 8*f0*f4*f5^2 +
    16*f1^2*f6^2 + 8*f1*f3*f4*f6 - 2*f1*f3*f5^2)*x2*x3*y2*y3 + (16*f0*f4*f6 -
    4*f0*f5^2 + 4*f1*f3*f6)*x2*x3*y2*y4 + (-16*f0*f3*f6^2 + 16*f0*f4*f5*f6 -
    4*f0*f5^3 + 16*f1*f2*f6^2 - 8*f1*f3*f5*f6 + 16*f1*f4^2*f6 -
    4*f1*f4*f5^2)*x2*x3*y3^2 + (16*f1*f4*f6 - 4*f1*f5^2)*x2*x3*y3*y4 +
    (8*f0*f2*f5 - 2*f1^2*f5)*x2*x4*y1^2 + (16*f0*f2*f6 + 4*f0*f3*f5 -
    4*f1^2*f6)*x2*x4*y1*y2 + (8*f0*f3*f6 + 2*f1*f3*f5)*x2*x4*y1*y3 +
    4*f0*f5*x2*x4*y1*y4 + 8*f0*f3*f6*x2*x4*y2^2 + (16*f0*f4*f6 - 4*f0*f5^2 +
    4*f1*f3*f6)*x2*x4*y2*y3 + 8*f0*f6*x2*x4*y2*y4 + (8*f1*f4*f6 -
    2*f1*f5^2)*x2*x4*y3^2 + 4*f1*f6*x2*x4*y3*y4 + (16*f0^2*f6^2 + 32*f0*f2*f4*f6
    - 8*f0*f2*f5^2 - 4*f0*f3^2*f6 - 8*f1^2*f4*f6 + 2*f1^2*f5^2)*x3^2*y1^2 +
    (16*f0*f1*f6^2 + 16*f0*f3*f4*f6 - 4*f0*f3*f5^2)*x3^2*y1*y2 + (-32*f0*f2*f6^2
    + 8*f0*f3*f5*f6 + 16*f1^2*f6^2 + 8*f1*f3*f4*f6 - 2*f1*f3*f5^2)*x3^2*y1*y3 +
    (16*f0*f4*f6 - 4*f0*f5^2)*x3^2*y1*y4 + (16*f0*f2*f6^2 - 8*f0*f3*f5*f6 +
    16*f0*f4^2*f6 - 4*f0*f4*f5^2)*x3^2*y2^2 + (-16*f0*f3*f6^2 + 16*f0*f4*f5*f6 -
    4*f0*f5^3 + 16*f1*f2*f6^2 - 8*f1*f3*f5*f6 + 16*f1*f4^2*f6 -
    4*f1*f4*f5^2)*x3^2*y2*y3 + (8*f1*f4*f6 - 2*f1*f5^2)*x3^2*y2*y4 +
    (16*f0*f4*f6^2 - 4*f0*f5^2*f6 - 16*f1*f3*f6^2 + 8*f1*f4*f5*f6 - 2*f1*f5^3 +
    16*f2^2*f6^2 - 8*f2*f3*f5*f6 + 16*f2*f4^2*f6 - 4*f2*f4*f5^2 - 4*f3^2*f4*f6 +
    f3^2*f5^2)*x3^2*y3^2 + (16*f2*f4*f6 - 4*f2*f5^2 - 4*f3^2*f6)*x3^2*y3*y4 +
    (16*f0*f2*f6 - 4*f1^2*f6)*x3*x4*y1^2 + 16*f0*f3*f6*x3*x4*y1*y2 +
    8*f1*f3*f6*x3*x4*y1*y3 + 8*f0*f6*x3*x4*y1*y4 + (16*f0*f4*f6 -
    4*f0*f5^2)*x3*x4*y2^2 + (16*f1*f4*f6 - 4*f1*f5^2)*x3*x4*y2*y3 +
    4*f1*f6*x3*x4*y2*y4 + (16*f2*f4*f6 - 4*f2*f5^2 - 4*f3^2*f6)*x3*x4*y3^2 +
    (8*f2*f6 - 2*f3*f5)*x3*x4*y3*y4 + x4^2*y4^2
                        else
    16*f0^2*f2*f6*x1^2*y1^2 + 4*f0^2*f2*h3^2*x1^2*y1^2 - 16*f0^2*f3*f5*x1^2*y1^2 - 16*f0^2*f3*f6*x1^2*y1*y2 - 16*f0^2*f3*f6*x1*x2*y1^2 -
    8*f0^2*f3*h2*h3*x1^2*y1^2 - 4*f0^2*f3*h3^2*x1^2*y1*y2 - 4*f0^2*f3*h3^2*x1*x2*y1^2 + 16*f0^2*f4^2*x1^2*y1^2 + 16*f0^2*f4*f5*x1^2*y1*y2 +
    16*f0^2*f4*f5*x1*x2*y1^2 - 32*f0^2*f4*f6*x1^2*y1*y3 + 16*f0^2*f4*f6*x1^2*y2^2 - 32*f0^2*f4*f6*x1*x3*y1^2 + 16*f0^2*f4*f6*x2^2*y1^2 +
    8*f0^2*f4*h1*h3*x1^2*y1^2 + 8*f0^2*f4*h2^2*x1^2*y1^2 + 8*f0^2*f4*h2*h3*x1^2*y1*y2 + 8*f0^2*f4*h2*h3*x1*x2*y1^2 - 8*f0^2*f4*h3^2*x1^2*y1*y3 +
    4*f0^2*f4*h3^2*x1^2*y2^2 - 8*f0^2*f4*h3^2*x1*x3*y1^2 + 4*f0^2*f4*h3^2*x2^2*y1^2 + 16*f0^2*f5^2*x1^2*y1*y3 + 16*f0^2*f5^2*x1*x2*y1*y2 +
    16*f0^2*f5^2*x1*x3*y1^2 + 16*f0^2*f5*f6*x1^2*y2*y3 + 16*f0^2*f5*f6*x1*x2*y1*y3 + 16*f0^2*f5*f6*x1*x2*y2^2 + 16*f0^2*f5*f6*x1*x3*y1*y2 +
    16*f0^2*f5*f6*x2^2*y1*y2 + 16*f0^2*f5*f6*x2*x3*y1^2 - 8*f0^2*f5*h1*h2*x1^2*y1^2 + 4*f0^2*f5*h2^2*x1^2*y1*y2 + 4*f0^2*f5*h2^2*x1*x2*y1^2 +
    16*f0^2*f5*h2*h3*x1^2*y1*y3 + 16*f0^2*f5*h2*h3*x1*x2*y1*y2 + 16*f0^2*f5*h2*h3*x1*x3*y1^2 + 4*f0^2*f5*h3^2*x1^2*y2*y3 + 4*f0^2*f5*h3^2*x1*x2*y1*y3 +
    4*f0^2*f5*h3^2*x1*x2*y2^2 + 4*f0^2*f5*h3^2*x1*x3*y1*y2 + 4*f0^2*f5*h3^2*x2^2*y1*y2 + 4*f0^2*f5*h3^2*x2*x3*y1^2 + 16*f0^2*f6^2*x1^2*y3^2 +
    32*f0^2*f6^2*x1*x2*y2*y3 + 32*f0^2*f6^2*x1*x3*y1*y3 + 16*f0^2*f6^2*x2^2*y2^2 + 32*f0^2*f6^2*x2*x3*y1*y2 + 16*f0^2*f6^2*x3^2*y1^2 +
    4*f0^2*f6*h1^2*x1^2*y1^2 - 8*f0^2*f6*h1*h2*x1^2*y1*y2 - 8*f0^2*f6*h1*h2*x1*x2*y1^2 - 8*f0^2*f6*h1*h3*x1^2*y1*y3 - 8*f0^2*f6*h1*h3*x1*x2*y1*y2 -
    8*f0^2*f6*h1*h3*x1*x3*y1^2 - 8*f0^2*f6*h2^2*x1^2*y1*y3 + 4*f0^2*f6*h2^2*x1^2*y2^2 - 8*f0^2*f6*h2^2*x1*x3*y1^2 + 4*f0^2*f6*h2^2*x2^2*y1^2 +
    8*f0^2*f6*h2*h3*x1^2*y2*y3 + 8*f0^2*f6*h2*h3*x1*x2*y1*y3 + 8*f0^2*f6*h2*h3*x1*x2*y2^2 + 8*f0^2*f6*h2*h3*x1*x3*y1*y2 + 8*f0^2*f6*h2*h3*x2^2*y1*y2 +
    8*f0^2*f6*h2*h3*x2*x3*y1^2 + 8*f0^2*f6*h3^2*x1^2*y3^2 + 16*f0^2*f6*h3^2*x1*x2*y2*y3 + 16*f0^2*f6*h3^2*x1*x3*y1*y3 + 8*f0^2*f6*h3^2*x2^2*y2^2 +
    16*f0^2*f6*h3^2*x2*x3*y1*y2 + 8*f0^2*f6*h3^2*x3^2*y1^2 + f0^2*h1^2*h3^2*x1^2*y1^2 - 2*f0^2*h1*h2^2*h3*x1^2*y1^2 - 2*f0^2*h1*h2*h3^2*x1^2*y1*y2 -
    2*f0^2*h1*h2*h3^2*x1*x2*y1^2 - 2*f0^2*h1*h3^3*x1^2*y1*y3 - 2*f0^2*h1*h3^3*x1*x2*y1*y2 - 2*f0^2*h1*h3^3*x1*x3*y1^2 + f0^2*h2^4*x1^2*y1^2 +
    2*f0^2*h2^3*h3*x1^2*y1*y2 + 2*f0^2*h2^3*h3*x1*x2*y1^2 + 2*f0^2*h2^2*h3^2*x1^2*y1*y3 + f0^2*h2^2*h3^2*x1^2*y2^2 + 4*f0^2*h2^2*h3^2*x1*x2*y1*y2 +
    2*f0^2*h2^2*h3^2*x1*x3*y1^2 + f0^2*h2^2*h3^2*x2^2*y1^2 + 2*f0^2*h2*h3^3*x1^2*y2*y3 + 2*f0^2*h2*h3^3*x1*x2*y1*y3 + 2*f0^2*h2*h3^3*x1*x2*y2^2 +
    2*f0^2*h2*h3^3*x1*x3*y1*y2 + 2*f0^2*h2*h3^3*x2^2*y1*y2 + 2*f0^2*h2*h3^3*x2*x3*y1^2 + f0^2*h3^4*x1^2*y3^2 + 2*f0^2*h3^4*x1*x2*y2*y3 +
    2*f0^2*h3^4*x1*x3*y1*y3 + f0^2*h3^4*x2^2*y2^2 + 2*f0^2*h3^4*x2*x3*y1*y2 + f0^2*h3^4*x3^2*y1^2 - 4*f0*f1^2*f6*x1^2*y1^2 - f0*f1^2*h3^2*x1^2*y1^2 +
    8*f0*f1*f2*f5*x1^2*y1^2 + 16*f0*f1*f2*f6*x1^2*y1*y2 + 16*f0*f1*f2*f6*x1*x2*y1^2 + 4*f0*f1*f2*h2*h3*x1^2*y1^2 + 4*f0*f1*f2*h3^2*x1^2*y1*y2 +
    4*f0*f1*f2*h3^2*x1*x2*y1^2 - 8*f0*f1*f3*f4*x1^2*y1^2 - 8*f0*f1*f3*f5*x1^2*y1*y2 - 8*f0*f1*f3*f5*x1*x2*y1^2 + 8*f0*f1*f3*f6*x1^2*y1*y3 -
    8*f0*f1*f3*f6*x1^2*y2^2 - 8*f0*f1*f3*f6*x1*x2*y1*y2 + 8*f0*f1*f3*f6*x1*x3*y1^2 - 8*f0*f1*f3*f6*x2^2*y1^2 - 2*f0*f1*f3*h2^2*x1^2*y1^2 -
    4*f0*f1*f3*h2*h3*x1^2*y1*y2 - 4*f0*f1*f3*h2*h3*x1*x2*y1^2 + 2*f0*f1*f3*h3^2*x1^2*y1*y3 - 2*f0*f1*f3*h3^2*x1^2*y2^2 - 2*f0*f1*f3*h3^2*x1*x2*y1*y2 +
    2*f0*f1*f3*h3^2*x1*x3*y1^2 - 2*f0*f1*f3*h3^2*x2^2*y1^2 - 16*f0*f1*f4*f6*x1*x2*y1*y3 - 16*f0*f1*f4*f6*x1*x3*y1*y2 - 4*f0*f1*f4*h0*h3*x1^2*y1^2 -
    4*f0*f1*f4*h1*h2*x1^2*y1^2 - 4*f0*f1*f4*h3^2*x1*x2*y1*y3 - 4*f0*f1*f4*h3^2*x1*x3*y1*y2 + 8*f0*f1*f5^2*x1*x2*y1*y3 + 8*f0*f1*f5^2*x1*x3*y1*y2 +
    8*f0*f1*f5*f6*x1*x2*y2*y3 + 8*f0*f1*f5*f6*x1*x3*y2^2 + 8*f0*f1*f5*f6*x2^2*y1*y3 + 8*f0*f1*f5*f6*x2*x3*y1*y2 + 4*f0*f1*f5*h0*h2*x1^2*y1^2 +
    2*f0*f1*f5*h1^2*x1^2*y1^2 - 4*f0*f1*f5*h1*h2*x1^2*y1*y2 - 4*f0*f1*f5*h1*h2*x1*x2*y1^2 - 4*f0*f1*f5*h1*h3*x1^2*y1*y3 - 4*f0*f1*f5*h1*h3*x1*x2*y1*y2 -
    4*f0*f1*f5*h1*h3*x1*x3*y1^2 + 8*f0*f1*f5*h2*h3*x1*x2*y1*y3 + 8*f0*f1*f5*h2*h3*x1*x3*y1*y2 + 2*f0*f1*f5*h3^2*x1*x2*y2*y3 + 2*f0*f1*f5*h3^2*x1*x3*y2^2 +
    2*f0*f1*f5*h3^2*x2^2*y1*y3 + 2*f0*f1*f5*h3^2*x2*x3*y1*y2 + 16*f0*f1*f6^2*x1*x2*y3^2 + 16*f0*f1*f6^2*x1*x3*y2*y3 + 16*f0*f1*f6^2*x2^2*y2*y3 +
    16*f0*f1*f6^2*x2*x3*y1*y3 + 16*f0*f1*f6^2*x2*x3*y2^2 + 16*f0*f1*f6^2*x3^2*y1*y2 - 4*f0*f1*f6*h0*h1*x1^2*y1^2 + 4*f0*f1*f6*h0*h2*x1^2*y1*y2 +
    4*f0*f1*f6*h0*h2*x1*x2*y1^2 + 4*f0*f1*f6*h0*h3*x1^2*y1*y3 + 4*f0*f1*f6*h0*h3*x1*x2*y1*y2 + 4*f0*f1*f6*h0*h3*x1*x3*y1^2 + 4*f0*f1*f6*h1^2*x1^2*y1*y2 +
    4*f0*f1*f6*h1^2*x1*x2*y1^2 + 4*f0*f1*f6*h1*h2*x1^2*y1*y3 - 4*f0*f1*f6*h1*h2*x1^2*y2^2 - 4*f0*f1*f6*h1*h2*x1*x2*y1*y2 + 4*f0*f1*f6*h1*h2*x1*x3*y1^2 -
    4*f0*f1*f6*h1*h2*x2^2*y1^2 - 4*f0*f1*f6*h1*h3*x1^2*y2*y3 - 8*f0*f1*f6*h1*h3*x1*x2*y1*y3 - 4*f0*f1*f6*h1*h3*x1*x2*y2^2 - 8*f0*f1*f6*h1*h3*x1*x3*y1*y2 -
    4*f0*f1*f6*h1*h3*x2^2*y1*y2 - 4*f0*f1*f6*h1*h3*x2*x3*y1^2 - 4*f0*f1*f6*h2^2*x1*x2*y1*y3 - 4*f0*f1*f6*h2^2*x1*x3*y1*y2 + 4*f0*f1*f6*h2*h3*x1*x2*y2*y3 +
    4*f0*f1*f6*h2*h3*x1*x3*y2^2 + 4*f0*f1*f6*h2*h3*x2^2*y1*y3 + 4*f0*f1*f6*h2*h3*x2*x3*y1*y2 + 8*f0*f1*f6*h3^2*x1*x2*y3^2 + 8*f0*f1*f6*h3^2*x1*x3*y2*y3 +
    8*f0*f1*f6*h3^2*x2^2*y2*y3 + 8*f0*f1*f6*h3^2*x2*x3*y1*y3 + 8*f0*f1*f6*h3^2*x2*x3*y2^2 + 8*f0*f1*f6*h3^2*x3^2*y1*y2 - f0*f1*h0*h1*h3^2*x1^2*y1^2 +
    f0*f1*h0*h2^2*h3*x1^2*y1^2 + f0*f1*h0*h2*h3^2*x1^2*y1*y2 + f0*f1*h0*h2*h3^2*x1*x2*y1^2 + f0*f1*h0*h3^3*x1^2*y1*y3 + f0*f1*h0*h3^3*x1*x2*y1*y2 +
    f0*f1*h0*h3^3*x1*x3*y1^2 + f0*f1*h1^2*h2*h3*x1^2*y1^2 + f0*f1*h1^2*h3^2*x1^2*y1*y2 + f0*f1*h1^2*h3^2*x1*x2*y1^2 - f0*f1*h1*h2^3*x1^2*y1^2 -
    2*f0*f1*h1*h2^2*h3*x1^2*y1*y2 - 2*f0*f1*h1*h2^2*h3*x1*x2*y1^2 - f0*f1*h1*h2*h3^2*x1^2*y1*y3 - f0*f1*h1*h2*h3^2*x1^2*y2^2 - 3*f0*f1*h1*h2*h3^2*x1*x2*y1*y2
    - f0*f1*h1*h2*h3^2*x1*x3*y1^2 - f0*f1*h1*h2*h3^2*x2^2*y1^2 - f0*f1*h1*h3^3*x1^2*y2*y3 - 2*f0*f1*h1*h3^3*x1*x2*y1*y3 - f0*f1*h1*h3^3*x1*x2*y2^2 -
    2*f0*f1*h1*h3^3*x1*x3*y1*y2 - f0*f1*h1*h3^3*x2^2*y1*y2 - f0*f1*h1*h3^3*x2*x3*y1^2 + f0*f1*h2^2*h3^2*x1*x2*y1*y3 + f0*f1*h2^2*h3^2*x1*x3*y1*y2 +
    f0*f1*h2*h3^3*x1*x2*y2*y3 + f0*f1*h2*h3^3*x1*x3*y2^2 + f0*f1*h2*h3^3*x2^2*y1*y3 + f0*f1*h2*h3^3*x2*x3*y1*y2 + f0*f1*h3^4*x1*x2*y3^2 +
    f0*f1*h3^4*x1*x3*y2*y3 + f0*f1*h3^4*x2^2*y2*y3 + f0*f1*h3^4*x2*x3*y1*y3 + f0*f1*h3^4*x2*x3*y2^2 + f0*f1*h3^4*x3^2*y1*y2 + 16*f0*f2^2*f4*x1^2*y1^2 +
    16*f0*f2^2*f5*x1^2*y1*y2 + 16*f0*f2^2*f5*x1*x2*y1^2 + 16*f0*f2^2*f6*x1^2*y2^2 + 32*f0*f2^2*f6*x1*x2*y1*y2 + 16*f0*f2^2*f6*x2^2*y1^2 +
    4*f0*f2^2*h2^2*x1^2*y1^2 + 8*f0*f2^2*h2*h3*x1^2*y1*y2 + 8*f0*f2^2*h2*h3*x1*x2*y1^2 + 4*f0*f2^2*h3^2*x1^2*y2^2 + 8*f0*f2^2*h3^2*x1*x2*y1*y2 +
    4*f0*f2^2*h3^2*x2^2*y1^2 - 4*f0*f2*f3^2*x1^2*y1^2 + 8*f0*f2*f3*f5*x1^2*y1*y3 + 8*f0*f2*f3*f5*x1*x2*y1*y2 + 8*f0*f2*f3*f5*x1*x3*y1^2 +
    16*f0*f2*f3*f6*x1^2*y2*y3 + 16*f0*f2*f3*f6*x1*x2*y1*y3 + 16*f0*f2*f3*f6*x1*x2*y2^2 + 16*f0*f2*f3*f6*x1*x3*y1*y2 + 16*f0*f2*f3*f6*x2^2*y1*y2 +
    16*f0*f2*f3*f6*x2*x3*y1^2 - 4*f0*f2*f3*h1*h2*x1^2*y1^2 - 4*f0*f2*f3*h1*h3*x1^2*y1*y2 - 4*f0*f2*f3*h1*h3*x1*x2*y1^2 + 4*f0*f2*f3*h2*h3*x1^2*y1*y3 +
    4*f0*f2*f3*h2*h3*x1*x2*y1*y2 + 4*f0*f2*f3*h2*h3*x1*x3*y1^2 + 4*f0*f2*f3*h3^2*x1^2*y2*y3 + 4*f0*f2*f3*h3^2*x1*x2*y1*y3 + 4*f0*f2*f3*h3^2*x1*x2*y2^2 +
    4*f0*f2*f3*h3^2*x1*x3*y1*y2 + 4*f0*f2*f3*h3^2*x2^2*y1*y2 + 4*f0*f2*f3*h3^2*x2*x3*y1^2 + 32*f0*f2*f4*f6*x1^2*y3^2 + 32*f0*f2*f4*f6*x1*x3*y1*y3 +
    16*f0*f2*f4*f6*x2^2*y2^2 + 32*f0*f2*f4*f6*x3^2*y1^2 - 8*f0*f2*f4*h0*h2*x1^2*y1^2 - 8*f0*f2*f4*h0*h3*x1^2*y1*y2 - 8*f0*f2*f4*h0*h3*x1*x2*y1^2 +
    8*f0*f2*f4*h1^2*x1^2*y1^2 - 8*f0*f2*f4*h1*h3*x1^2*y1*y3 - 8*f0*f2*f4*h1*h3*x1*x2*y1*y2 - 8*f0*f2*f4*h1*h3*x1*x3*y1^2 + 8*f0*f2*f4*h3^2*x1^2*y3^2 +
    8*f0*f2*f4*h3^2*x1*x3*y1*y3 + 4*f0*f2*f4*h3^2*x2^2*y2^2 + 8*f0*f2*f4*h3^2*x3^2*y1^2 + 16*f0*f2*f4*x1^2*y1*y4 + 16*f0*f2*f4*x1*x4*y1^2 -
    8*f0*f2*f5^2*x1^2*y3^2 - 16*f0*f2*f5^2*x1*x3*y1*y3 - 4*f0*f2*f5^2*x2^2*y2^2 - 8*f0*f2*f5^2*x3^2*y1^2 - 16*f0*f2*f5*f6*x1*x3*y2*y3 -
    16*f0*f2*f5*f6*x2*x3*y1*y3 + 4*f0*f2*f5*h0*h1*x1^2*y1^2 - 4*f0*f2*f5*h0*h2*x1^2*y1*y2 - 4*f0*f2*f5*h0*h2*x1*x2*y1^2 - 4*f0*f2*f5*h0*h3*x1^2*y1*y3 -
    4*f0*f2*f5*h0*h3*x1^2*y2^2 - 12*f0*f2*f5*h0*h3*x1*x2*y1*y2 - 4*f0*f2*f5*h0*h3*x1*x3*y1^2 - 4*f0*f2*f5*h0*h3*x2^2*y1^2 + 8*f0*f2*f5*h1^2*x1^2*y1*y2 +
    8*f0*f2*f5*h1^2*x1*x2*y1^2 + 4*f0*f2*f5*h1*h2*x1^2*y1*y3 + 4*f0*f2*f5*h1*h2*x1*x2*y1*y2 + 4*f0*f2*f5*h1*h2*x1*x3*y1^2 - 4*f0*f2*f5*h1*h3*x1^2*y2*y3 -
    8*f0*f2*f5*h1*h3*x1*x2*y1*y3 - 4*f0*f2*f5*h1*h3*x1*x2*y2^2 - 8*f0*f2*f5*h1*h3*x1*x3*y1*y2 - 4*f0*f2*f5*h1*h3*x2^2*y1*y2 - 4*f0*f2*f5*h1*h3*x2*x3*y1^2 -
    8*f0*f2*f5*h2*h3*x1^2*y3^2 - 16*f0*f2*f5*h2*h3*x1*x3*y1*y3 - 4*f0*f2*f5*h2*h3*x2^2*y2^2 - 8*f0*f2*f5*h2*h3*x3^2*y1^2 - 4*f0*f2*f5*h3^2*x1*x3*y2*y3 -
    4*f0*f2*f5*h3^2*x2*x3*y1*y3 + 8*f0*f2*f5*x1^2*y2*y4 + 16*f0*f2*f5*x1*x2*y1*y4 + 16*f0*f2*f5*x1*x4*y1*y2 + 8*f0*f2*f5*x2*x4*y1^2 -
    32*f0*f2*f6^2*x1*x3*y3^2 + 16*f0*f2*f6^2*x2^2*y3^2 - 32*f0*f2*f6^2*x3^2*y1*y3 + 16*f0*f2*f6^2*x3^2*y2^2 + 8*f0*f2*f6*h0^2*x1^2*y1^2 +
    8*f0*f2*f6*h0*h1*x1^2*y1*y2 + 8*f0*f2*f6*h0*h1*x1*x2*y1^2 - 8*f0*f2*f6*h0*h3*x1^2*y2*y3 - 8*f0*f2*f6*h0*h3*x1*x2*y2^2 - 8*f0*f2*f6*h0*h3*x2^2*y1*y2 -
    8*f0*f2*f6*h0*h3*x2*x3*y1^2 + 8*f0*f2*f6*h1^2*x1^2*y2^2 + 16*f0*f2*f6*h1^2*x1*x2*y1*y2 + 8*f0*f2*f6*h1^2*x2^2*y1^2 + 8*f0*f2*f6*h1*h2*x1^2*y2*y3 +
    8*f0*f2*f6*h1*h2*x1*x2*y1*y3 + 8*f0*f2*f6*h1*h2*x1*x2*y2^2 + 8*f0*f2*f6*h1*h2*x1*x3*y1*y2 + 8*f0*f2*f6*h1*h2*x2^2*y1*y2 + 8*f0*f2*f6*h1*h2*x2*x3*y1^2 -
    8*f0*f2*f6*h1*h3*x1*x2*y2*y3 + 8*f0*f2*f6*h1*h3*x1*x3*y1*y3 - 8*f0*f2*f6*h1*h3*x1*x3*y2^2 - 8*f0*f2*f6*h1*h3*x2^2*y1*y3 - 8*f0*f2*f6*h1*h3*x2*x3*y1*y2 +
    8*f0*f2*f6*h2^2*x1^2*y3^2 + 8*f0*f2*f6*h2^2*x1*x3*y1*y3 + 4*f0*f2*f6*h2^2*x2^2*y2^2 + 8*f0*f2*f6*h2^2*x3^2*y1^2 - 8*f0*f2*f6*h2*h3*x1*x3*y2*y3 -
    8*f0*f2*f6*h2*h3*x2*x3*y1*y3 - 16*f0*f2*f6*h3^2*x1*x3*y3^2 + 8*f0*f2*f6*h3^2*x2^2*y3^2 - 16*f0*f2*f6*h3^2*x3^2*y1*y3 + 8*f0*f2*f6*h3^2*x3^2*y2^2 +
    16*f0*f2*f6*x1^2*y3*y4 + 16*f0*f2*f6*x1*x2*y2*y4 + 16*f0*f2*f6*x1*x4*y2^2 + 16*f0*f2*f6*x2^2*y1*y4 + 16*f0*f2*f6*x2*x4*y1*y2 + 16*f0*f2*f6*x3*x4*y1^2 +
    f0*f2*h0^2*h3^2*x1^2*y1^2 - 2*f0*f2*h0*h2^3*x1^2*y1^2 - 4*f0*f2*h0*h2^2*h3*x1^2*y1*y2 - 4*f0*f2*h0*h2^2*h3*x1*x2*y1^2 - 2*f0*f2*h0*h2*h3^2*x1^2*y1*y3 -
    2*f0*f2*h0*h2*h3^2*x1^2*y2^2 - 6*f0*f2*h0*h2*h3^2*x1*x2*y1*y2 - 2*f0*f2*h0*h2*h3^2*x1*x3*y1^2 - 2*f0*f2*h0*h2*h3^2*x2^2*y1^2 - 2*f0*f2*h0*h3^3*x1^2*y2*y3
    - 2*f0*f2*h0*h3^3*x1*x2*y2^2 - 2*f0*f2*h0*h3^3*x2^2*y1*y2 - 2*f0*f2*h0*h3^3*x2*x3*y1^2 + f0*f2*h1^2*h2^2*x1^2*y1^2 + 2*f0*f2*h1^2*h2*h3*x1^2*y1*y2 +
    2*f0*f2*h1^2*h2*h3*x1*x2*y1^2 + f0*f2*h1^2*h3^2*x1^2*y2^2 + 2*f0*f2*h1^2*h3^2*x1*x2*y1*y2 + f0*f2*h1^2*h3^2*x2^2*y1^2 - 2*f0*f2*h1*h2*h3^2*x1*x2*y1*y3 -
    2*f0*f2*h1*h2*h3^2*x1*x3*y1*y2 - 2*f0*f2*h1*h3^3*x1*x2*y2*y3 + 2*f0*f2*h1*h3^3*x1*x3*y1*y3 - 2*f0*f2*h1*h3^3*x1*x3*y2^2 - 2*f0*f2*h1*h3^3*x2^2*y1*y3 -
    2*f0*f2*h1*h3^3*x2*x3*y1*y2 - 2*f0*f2*h2^2*h3^2*x1*x3*y1*y3 + 4*f0*f2*h2^2*x1^2*y1*y4 + 4*f0*f2*h2^2*x1*x4*y1^2 - 2*f0*f2*h2*h3^3*x1*x3*y2*y3 -
    2*f0*f2*h2*h3^3*x2*x3*y1*y3 + 4*f0*f2*h2*h3*x1^2*y2*y4 + 8*f0*f2*h2*h3*x1*x2*y1*y4 + 8*f0*f2*h2*h3*x1*x4*y1*y2 + 4*f0*f2*h2*h3*x2*x4*y1^2 -
    2*f0*f2*h3^4*x1*x3*y3^2 + f0*f2*h3^4*x2^2*y3^2 - 2*f0*f2*h3^4*x3^2*y1*y3 + f0*f2*h3^4*x3^2*y2^2 + 4*f0*f2*h3^2*x1^2*y3*y4 + 4*f0*f2*h3^2*x1*x2*y2*y4 +
    4*f0*f2*h3^2*x1*x4*y2^2 + 4*f0*f2*h3^2*x2^2*y1*y4 + 4*f0*f2*h3^2*x2*x4*y1*y2 + 4*f0*f2*h3^2*x3*x4*y1^2 + 4*f0*f3^2*f5*x1*x2*y1*y3 +
    4*f0*f3^2*f5*x1*x3*y1*y2 - 4*f0*f3^2*f6*x1^2*y3^2 + 16*f0*f3^2*f6*x1*x2*y2*y3 - 8*f0*f3^2*f6*x1*x3*y1*y3 + 8*f0*f3^2*f6*x1*x3*y2^2 +
    8*f0*f3^2*f6*x2^2*y1*y3 + 16*f0*f3^2*f6*x2*x3*y1*y2 - 4*f0*f3^2*f6*x3^2*y1^2 + 4*f0*f3^2*h0*h2*x1^2*y1^2 + 4*f0*f3^2*h0*h3*x1^2*y1*y2 +
    4*f0*f3^2*h0*h3*x1*x2*y1^2 - f0*f3^2*h1^2*x1^2*y1^2 + 2*f0*f3^2*h2*h3*x1*x2*y1*y3 + 2*f0*f3^2*h2*h3*x1*x3*y1*y2 - f0*f3^2*h3^2*x1^2*y3^2 +
    4*f0*f3^2*h3^2*x1*x2*y2*y3 - 2*f0*f3^2*h3^2*x1*x3*y1*y3 + 2*f0*f3^2*h3^2*x1*x3*y2^2 + 2*f0*f3^2*h3^2*x2^2*y1*y3 + 4*f0*f3^2*h3^2*x2*x3*y1*y2 -
    f0*f3^2*h3^2*x3^2*y1^2 - 4*f0*f3^2*x1^2*y1*y4 - 4*f0*f3^2*x1*x4*y1^2 + 8*f0*f3*f4*f5*x1*x3*y1*y3 + 16*f0*f3*f4*f6*x1*x2*y3^2 + 16*f0*f3*f4*f6*x1*x3*y2*y3
    + 16*f0*f3*f4*f6*x2^2*y2*y3 + 16*f0*f3*f4*f6*x2*x3*y1*y3 + 16*f0*f3*f4*f6*x2*x3*y2^2 + 16*f0*f3*f4*f6*x3^2*y1*y2 - 4*f0*f3*f4*h0*h1*x1^2*y1^2 +
    4*f0*f3*f4*h0*h3*x1^2*y1*y3 + 4*f0*f3*f4*h0*h3*x1*x2*y1*y2 + 4*f0*f3*f4*h0*h3*x1*x3*y1^2 - 4*f0*f3*f4*h1*h3*x1*x2*y1*y3 - 4*f0*f3*f4*h1*h3*x1*x3*y1*y2 +
    4*f0*f3*f4*h2*h3*x1*x3*y1*y3 + 4*f0*f3*f4*h3^2*x1*x2*y3^2 + 4*f0*f3*f4*h3^2*x1*x3*y2*y3 + 4*f0*f3*f4*h3^2*x2^2*y2*y3 + 4*f0*f3*f4*h3^2*x2*x3*y1*y3 +
    4*f0*f3*f4*h3^2*x2*x3*y2^2 + 4*f0*f3*f4*h3^2*x3^2*y1*y2 - 4*f0*f3*f5^2*x1*x2*y3^2 - 4*f0*f3*f5^2*x2^2*y2*y3 - 4*f0*f3*f5^2*x2*x3*y2^2 -
    4*f0*f3*f5^2*x3^2*y1*y2 + 8*f0*f3*f5*f6*x1*x3*y3^2 - 8*f0*f3*f5*f6*x2^2*y3^2 - 8*f0*f3*f5*f6*x2*x3*y2*y3 + 8*f0*f3*f5*f6*x3^2*y1*y3 -
    8*f0*f3*f5*f6*x3^2*y2^2 - 8*f0*f3*f5*h0^2*x1^2*y1^2 - 4*f0*f3*f5*h0*h1*x1^2*y1*y2 - 4*f0*f3*f5*h0*h1*x1*x2*y1^2 - 4*f0*f3*f5*h0*h2*x1^2*y1*y3 -
    4*f0*f3*f5*h0*h2*x1*x2*y1*y2 - 4*f0*f3*f5*h0*h2*x1*x3*y1^2 - 8*f0*f3*f5*h0*h3*x1*x2*y1*y3 - 8*f0*f3*f5*h0*h3*x1*x3*y1*y2 + 2*f0*f3*f5*h1^2*x1^2*y1*y3 +
    2*f0*f3*f5*h1^2*x1*x2*y1*y2 + 2*f0*f3*f5*h1^2*x1*x3*y1^2 + 4*f0*f3*f5*h1*h2*x1*x2*y1*y3 + 4*f0*f3*f5*h1*h2*x1*x3*y1*y2 + 2*f0*f3*f5*h1*h3*x1^2*y3^2 -
    6*f0*f3*f5*h1*h3*x1*x2*y2*y3 + 4*f0*f3*f5*h1*h3*x1*x3*y1*y3 - 2*f0*f3*f5*h1*h3*x1*x3*y2^2 - 2*f0*f3*f5*h1*h3*x2^2*y1*y3 - 6*f0*f3*f5*h1*h3*x2*x3*y1*y2 +
    2*f0*f3*f5*h1*h3*x3^2*y1^2 + 2*f0*f3*f5*h2^2*x1*x3*y1*y3 - 4*f0*f3*f5*h2*h3*x1*x2*y3^2 - 4*f0*f3*f5*h2*h3*x2^2*y2*y3 - 4*f0*f3*f5*h2*h3*x2*x3*y2^2 -
    4*f0*f3*f5*h2*h3*x3^2*y1*y2 + 2*f0*f3*f5*h3^2*x1*x3*y3^2 - 2*f0*f3*f5*h3^2*x2^2*y3^2 - 2*f0*f3*f5*h3^2*x2*x3*y2*y3 + 2*f0*f3*f5*h3^2*x3^2*y1*y3 -
    2*f0*f3*f5*h3^2*x3^2*y2^2 + 4*f0*f3*f5*x1*x2*y2*y4 + 8*f0*f3*f5*x1*x3*y1*y4 + 8*f0*f3*f5*x1*x4*y1*y3 + 4*f0*f3*f5*x2*x4*y1*y2 - 16*f0*f3*f6^2*x2*x3*y3^2
    - 16*f0*f3*f6^2*x3^2*y2*y3 - 8*f0*f3*f6*h0^2*x1^2*y1*y2 - 8*f0*f3*f6*h0^2*x1*x2*y1^2 + 4*f0*f3*f6*h0*h1*x1^2*y1*y3 - 4*f0*f3*f6*h0*h1*x1^2*y2^2 -
    4*f0*f3*f6*h0*h1*x1*x2*y1*y2 + 4*f0*f3*f6*h0*h1*x1*x3*y1^2 - 4*f0*f3*f6*h0*h1*x2^2*y1^2 - 4*f0*f3*f6*h0*h2*x1^2*y2*y3 - 4*f0*f3*f6*h0*h2*x1*x2*y2^2 -
    4*f0*f3*f6*h0*h2*x2^2*y1*y2 - 4*f0*f3*f6*h0*h2*x2*x3*y1^2 - 4*f0*f3*f6*h0*h3*x1^2*y3^2 - 12*f0*f3*f6*h0*h3*x1*x2*y2*y3 - 12*f0*f3*f6*h0*h3*x1*x3*y1*y3 -
    4*f0*f3*f6*h0*h3*x1*x3*y2^2 - 4*f0*f3*f6*h0*h3*x2^2*y1*y3 - 4*f0*f3*f6*h0*h3*x2^2*y2^2 - 12*f0*f3*f6*h0*h3*x2*x3*y1*y2 - 4*f0*f3*f6*h0*h3*x3^2*y1^2 +
    4*f0*f3*f6*h1^2*x1^2*y2*y3 + 4*f0*f3*f6*h1^2*x1*x2*y1*y3 + 4*f0*f3*f6*h1^2*x1*x2*y2^2 + 4*f0*f3*f6*h1^2*x1*x3*y1*y2 + 4*f0*f3*f6*h1^2*x2^2*y1*y2 +
    4*f0*f3*f6*h1^2*x2*x3*y1^2 - 4*f0*f3*f6*h1*h2*x1^2*y3^2 + 16*f0*f3*f6*h1*h2*x1*x2*y2*y3 - 8*f0*f3*f6*h1*h2*x1*x3*y1*y3 + 8*f0*f3*f6*h1*h2*x1*x3*y2^2 +
    8*f0*f3*f6*h1*h2*x2^2*y1*y3 + 16*f0*f3*f6*h1*h2*x2*x3*y1*y2 - 4*f0*f3*f6*h1*h2*x3^2*y1^2 - 4*f0*f3*f6*h1*h3*x1*x2*y3^2 - 4*f0*f3*f6*h1*h3*x2^2*y2*y3 -
    4*f0*f3*f6*h1*h3*x2*x3*y2^2 - 4*f0*f3*f6*h1*h3*x3^2*y1*y2 + 4*f0*f3*f6*h2^2*x1*x2*y3^2 + 4*f0*f3*f6*h2^2*x1*x3*y2*y3 + 4*f0*f3*f6*h2^2*x2^2*y2*y3 +
    4*f0*f3*f6*h2^2*x2*x3*y1*y3 + 4*f0*f3*f6*h2^2*x2*x3*y2^2 + 4*f0*f3*f6*h2^2*x3^2*y1*y2 + 4*f0*f3*f6*h2*h3*x1*x3*y3^2 - 4*f0*f3*f6*h2*h3*x2^2*y3^2 -
    4*f0*f3*f6*h2*h3*x2*x3*y2*y3 + 4*f0*f3*f6*h2*h3*x3^2*y1*y3 - 4*f0*f3*f6*h2*h3*x3^2*y2^2 - 8*f0*f3*f6*h3^2*x2*x3*y3^2 - 8*f0*f3*f6*h3^2*x3^2*y2*y3 +
    16*f0*f3*f6*x1*x2*y3*y4 + 8*f0*f3*f6*x1*x3*y2*y4 + 16*f0*f3*f6*x1*x4*y2*y3 + 8*f0*f3*f6*x2^2*y2*y4 + 16*f0*f3*f6*x2*x3*y1*y4 + 8*f0*f3*f6*x2*x4*y1*y3 +
    8*f0*f3*f6*x2*x4*y2^2 + 16*f0*f3*f6*x3*x4*y1*y2 - 2*f0*f3*h0^2*h2*h3*x1^2*y1^2 - f0*f3*h0^2*h3^2*x1^2*y1*y2 - f0*f3*h0^2*h3^2*x1*x2*y1^2 +
    3*f0*f3*h0*h1*h2^2*x1^2*y1^2 + 4*f0*f3*h0*h1*h2*h3*x1^2*y1*y2 + 4*f0*f3*h0*h1*h2*h3*x1*x2*y1^2 + f0*f3*h0*h1*h3^2*x1^2*y1*y3 + f0*f3*h0*h1*h3^2*x1^2*y2^2
    + 3*f0*f3*h0*h1*h3^2*x1*x2*y1*y2 + f0*f3*h0*h1*h3^2*x1*x3*y1^2 + f0*f3*h0*h1*h3^2*x2^2*y1^2 - f0*f3*h0*h2^2*h3*x1^2*y1*y3 - f0*f3*h0*h2^2*h3*x1*x2*y1*y2
    - f0*f3*h0*h2^2*h3*x1*x3*y1^2 - f0*f3*h0*h2*h3^2*x1^2*y2*y3 - 4*f0*f3*h0*h2*h3^2*x1*x2*y1*y3 - f0*f3*h0*h2*h3^2*x1*x2*y2^2 -
    4*f0*f3*h0*h2*h3^2*x1*x3*y1*y2 - f0*f3*h0*h2*h3^2*x2^2*y1*y2 - f0*f3*h0*h2*h3^2*x2*x3*y1^2 - f0*f3*h0*h3^3*x1^2*y3^2 - 3*f0*f3*h0*h3^3*x1*x2*y2*y3 -
    3*f0*f3*h0*h3^3*x1*x3*y1*y3 - f0*f3*h0*h3^3*x1*x3*y2^2 - f0*f3*h0*h3^3*x2^2*y1*y3 - f0*f3*h0*h3^3*x2^2*y2^2 - 3*f0*f3*h0*h3^3*x2*x3*y1*y2 -
    f0*f3*h0*h3^3*x3^2*y1^2 - f0*f3*h1^3*h2*x1^2*y1^2 - f0*f3*h1^3*h3*x1^2*y1*y2 - f0*f3*h1^3*h3*x1*x2*y1^2 + f0*f3*h1^2*h2*h3*x1^2*y1*y3 +
    f0*f3*h1^2*h2*h3*x1*x2*y1*y2 + f0*f3*h1^2*h2*h3*x1*x3*y1^2 + f0*f3*h1^2*h3^2*x1^2*y2*y3 + 2*f0*f3*h1^2*h3^2*x1*x2*y1*y3 + f0*f3*h1^2*h3^2*x1*x2*y2^2 +
    2*f0*f3*h1^2*h3^2*x1*x3*y1*y2 + f0*f3*h1^2*h3^2*x2^2*y1*y2 + f0*f3*h1^2*h3^2*x2*x3*y1^2 + f0*f3*h1*h2^2*h3*x1*x2*y1*y3 + f0*f3*h1*h2^2*h3*x1*x3*y1*y2 +
    f0*f3*h1*h2*h3^2*x1*x2*y2*y3 + f0*f3*h1*h2*h3^2*x1*x3*y2^2 + f0*f3*h1*h2*h3^2*x2^2*y1*y3 + f0*f3*h1*h2*h3^2*x2*x3*y1*y2 - 4*f0*f3*h1*h2*x1^2*y1*y4 -
    4*f0*f3*h1*h2*x1*x4*y1^2 - f0*f3*h1*h3^3*x1*x2*y3^2 - f0*f3*h1*h3^3*x2^2*y2*y3 - f0*f3*h1*h3^3*x2*x3*y2^2 - f0*f3*h1*h3^3*x3^2*y1*y2 -
    2*f0*f3*h1*h3*x1^2*y2*y4 - 4*f0*f3*h1*h3*x1*x2*y1*y4 - 4*f0*f3*h1*h3*x1*x4*y1*y2 - 2*f0*f3*h1*h3*x2*x4*y1^2 + f0*f3*h2^3*h3*x1*x3*y1*y3 +
    f0*f3*h2^2*h3^2*x1*x3*y2*y3 + f0*f3*h2^2*h3^2*x2*x3*y1*y3 + f0*f3*h2*h3^3*x1*x3*y3^2 - f0*f3*h2*h3^3*x2^2*y3^2 - f0*f3*h2*h3^3*x2*x3*y2*y3 +
    f0*f3*h2*h3^3*x3^2*y1*y3 - f0*f3*h2*h3^3*x3^2*y2^2 + 2*f0*f3*h2*h3*x1*x2*y2*y4 + 4*f0*f3*h2*h3*x1*x3*y1*y4 + 4*f0*f3*h2*h3*x1*x4*y1*y3 +
    2*f0*f3*h2*h3*x2*x4*y1*y2 - f0*f3*h3^4*x2*x3*y3^2 - f0*f3*h3^4*x3^2*y2*y3 + 4*f0*f3*h3^2*x1*x2*y3*y4 + 2*f0*f3*h3^2*x1*x3*y2*y4 +
    4*f0*f3*h3^2*x1*x4*y2*y3 + 2*f0*f3*h3^2*x2^2*y2*y4 + 4*f0*f3*h3^2*x2*x3*y1*y4 + 2*f0*f3*h3^2*x2*x4*y1*y3 + 2*f0*f3*h3^2*x2*x4*y2^2 +
    4*f0*f3*h3^2*x3*x4*y1*y2 + 16*f0*f4^2*f6*x2^2*y3^2 + 32*f0*f4^2*f6*x2*x3*y2*y3 + 16*f0*f4^2*f6*x3^2*y2^2 + 8*f0*f4^2*h0^2*x1^2*y1^2 +
    8*f0*f4^2*h0*h3*x1*x2*y1*y3 + 8*f0*f4^2*h0*h3*x1*x3*y1*y2 - 8*f0*f4^2*h1*h3*x1*x3*y1*y3 + 4*f0*f4^2*h3^2*x2^2*y3^2 + 8*f0*f4^2*h3^2*x2*x3*y2*y3 +
    4*f0*f4^2*h3^2*x3^2*y2^2 - 4*f0*f4*f5^2*x2^2*y3^2 - 8*f0*f4*f5^2*x2*x3*y2*y3 - 4*f0*f4*f5^2*x3^2*y2^2 + 16*f0*f4*f5*f6*x2*x3*y3^2 +
    16*f0*f4*f5*f6*x3^2*y2*y3 + 8*f0*f4*f5*h0^2*x1^2*y1*y2 + 8*f0*f4*f5*h0^2*x1*x2*y1^2 - 4*f0*f4*f5*h0*h2*x1*x2*y1*y3 - 4*f0*f4*f5*h0*h2*x1*x3*y1*y2 +
    4*f0*f4*f5*h0*h3*x1*x2*y2*y3 + 4*f0*f4*f5*h0*h3*x1*x3*y1*y3 + 4*f0*f4*f5*h0*h3*x1*x3*y2^2 + 4*f0*f4*f5*h0*h3*x2^2*y1*y3 + 4*f0*f4*f5*h0*h3*x2*x3*y1*y2 +
    4*f0*f4*f5*h1*h2*x1*x3*y1*y3 - 4*f0*f4*f5*h1*h3*x1*x3*y2*y3 - 4*f0*f4*f5*h1*h3*x2*x3*y1*y3 - 4*f0*f4*f5*h2*h3*x2^2*y3^2 - 8*f0*f4*f5*h2*h3*x2*x3*y2*y3 -
    4*f0*f4*f5*h2*h3*x3^2*y2^2 + 4*f0*f4*f5*h3^2*x2*x3*y3^2 + 4*f0*f4*f5*h3^2*x3^2*y2*y3 + 16*f0*f4*f6^2*x3^2*y3^2 - 16*f0*f4*f6*h0^2*x1^2*y1*y3 +
    8*f0*f4*f6*h0^2*x1^2*y2^2 - 16*f0*f4*f6*h0^2*x1*x3*y1^2 + 8*f0*f4*f6*h0^2*x2^2*y1^2 - 8*f0*f4*f6*h0*h1*x1*x2*y1*y3 - 8*f0*f4*f6*h0*h1*x1*x3*y1*y2 -
    8*f0*f4*f6*h0*h2*x1*x2*y2*y3 + 8*f0*f4*f6*h0*h2*x1*x3*y1*y3 - 8*f0*f4*f6*h0*h2*x1*x3*y2^2 - 8*f0*f4*f6*h0*h2*x2^2*y1*y3 - 8*f0*f4*f6*h0*h2*x2*x3*y1*y2 -
    8*f0*f4*f6*h0*h3*x1*x2*y3^2 - 8*f0*f4*f6*h0*h3*x2^2*y2*y3 - 8*f0*f4*f6*h0*h3*x2*x3*y2^2 - 8*f0*f4*f6*h0*h3*x3^2*y1*y2 + 8*f0*f4*f6*h1^2*x1^2*y3^2 +
    8*f0*f4*f6*h1^2*x1*x3*y1*y3 + 4*f0*f4*f6*h1^2*x2^2*y2^2 + 8*f0*f4*f6*h1^2*x3^2*y1^2 + 8*f0*f4*f6*h1*h2*x1*x2*y3^2 + 8*f0*f4*f6*h1*h2*x1*x3*y2*y3 +
    8*f0*f4*f6*h1*h2*x2^2*y2*y3 + 8*f0*f4*f6*h1*h2*x2*x3*y1*y3 + 8*f0*f4*f6*h1*h2*x2*x3*y2^2 + 8*f0*f4*f6*h1*h2*x3^2*y1*y2 + 8*f0*f4*f6*h2^2*x2^2*y3^2 +
    16*f0*f4*f6*h2^2*x2*x3*y2*y3 + 8*f0*f4*f6*h2^2*x3^2*y2^2 + 8*f0*f4*f6*h2*h3*x2*x3*y3^2 + 8*f0*f4*f6*h2*h3*x3^2*y2*y3 + 8*f0*f4*f6*h3^2*x3^2*y3^2 +
    16*f0*f4*f6*x1*x4*y3^2 + 16*f0*f4*f6*x2^2*y3*y4 + 16*f0*f4*f6*x2*x3*y2*y4 + 16*f0*f4*f6*x2*x4*y2*y3 + 16*f0*f4*f6*x3^2*y1*y4 + 16*f0*f4*f6*x3*x4*y2^2 +
    2*f0*f4*h0^2*h1*h3*x1^2*y1^2 + 2*f0*f4*h0^2*h2^2*x1^2*y1^2 + 2*f0*f4*h0^2*h2*h3*x1^2*y1*y2 + 2*f0*f4*h0^2*h2*h3*x1*x2*y1^2 - 2*f0*f4*h0^2*h3^2*x1^2*y1*y3
    + f0*f4*h0^2*h3^2*x1^2*y2^2 - 2*f0*f4*h0^2*h3^2*x1*x3*y1^2 + f0*f4*h0^2*h3^2*x2^2*y1^2 - 4*f0*f4*h0*h1^2*h2*x1^2*y1^2 - 2*f0*f4*h0*h1^2*h3*x1^2*y1*y2 -
    2*f0*f4*h0*h1^2*h3*x1*x2*y1^2 + 4*f0*f4*h0*h1*h2*h3*x1^2*y1*y3 + 4*f0*f4*h0*h1*h2*h3*x1*x2*y1*y2 + 4*f0*f4*h0*h1*h2*h3*x1*x3*y1^2 +
    2*f0*f4*h0*h1*h3^2*x1^2*y2*y3 + 4*f0*f4*h0*h1*h3^2*x1*x2*y1*y3 + 2*f0*f4*h0*h1*h3^2*x1*x2*y2^2 + 4*f0*f4*h0*h1*h3^2*x1*x3*y1*y2 +
    2*f0*f4*h0*h1*h3^2*x2^2*y1*y2 + 2*f0*f4*h0*h1*h3^2*x2*x3*y1^2 + 2*f0*f4*h0*h2^2*h3*x1*x2*y1*y3 + 2*f0*f4*h0*h2^2*h3*x1*x3*y1*y2 +
    4*f0*f4*h0*h2*h3^2*x1*x3*y1*y3 - 2*f0*f4*h0*h3^3*x1*x2*y3^2 - 2*f0*f4*h0*h3^3*x2^2*y2*y3 - 2*f0*f4*h0*h3^3*x2*x3*y2^2 - 2*f0*f4*h0*h3^3*x3^2*y1*y2 +
    f0*f4*h1^4*x1^2*y1^2 - 2*f0*f4*h1^3*h3*x1^2*y1*y3 - 2*f0*f4*h1^3*h3*x1*x2*y1*y2 - 2*f0*f4*h1^3*h3*x1*x3*y1^2 - 2*f0*f4*h1^2*h2*h3*x1*x2*y1*y3 -
    2*f0*f4*h1^2*h2*h3*x1*x3*y1*y2 + f0*f4*h1^2*h3^2*x1^2*y3^2 + 2*f0*f4*h1^2*h3^2*x1*x2*y2*y3 + 2*f0*f4*h1^2*h3^2*x1*x3*y1*y3 + f0*f4*h1^2*h3^2*x2^2*y2^2 +
    2*f0*f4*h1^2*h3^2*x2*x3*y1*y2 + f0*f4*h1^2*h3^2*x3^2*y1^2 + 4*f0*f4*h1^2*x1^2*y1*y4 + 4*f0*f4*h1^2*x1*x4*y1^2 - 2*f0*f4*h1*h2^2*h3*x1*x3*y1*y3 +
    2*f0*f4*h1*h2*h3^2*x1*x2*y3^2 + 2*f0*f4*h1*h2*h3^2*x2^2*y2*y3 + 2*f0*f4*h1*h2*h3^2*x2*x3*y2^2 + 2*f0*f4*h1*h2*h3^2*x3^2*y1*y2 - 4*f0*f4*h1*h3*x1*x2*y2*y4
    - 8*f0*f4*h1*h3*x1*x3*y1*y4 - 8*f0*f4*h1*h3*x1*x4*y1*y3 - 4*f0*f4*h1*h3*x2*x4*y1*y2 + f0*f4*h2^2*h3^2*x2^2*y3^2 + 2*f0*f4*h2^2*h3^2*x2*x3*y2*y3 +
    f0*f4*h2^2*h3^2*x3^2*y2^2 + 2*f0*f4*h2*h3^3*x2*x3*y3^2 + 2*f0*f4*h2*h3^3*x3^2*y2*y3 + f0*f4*h3^4*x3^2*y3^2 + 4*f0*f4*h3^2*x1*x4*y3^2 +
    4*f0*f4*h3^2*x2^2*y3*y4 + 4*f0*f4*h3^2*x2*x3*y2*y4 + 4*f0*f4*h3^2*x2*x4*y2*y3 + 4*f0*f4*h3^2*x3^2*y1*y4 + 4*f0*f4*h3^2*x3*x4*y2^2 + 8*f0*f4*x1*x4*y1*y4 -
    4*f0*f5^3*x2*x3*y3^2 - 4*f0*f5^3*x3^2*y2*y3 - 4*f0*f5^2*f6*x3^2*y3^2 + 8*f0*f5^2*h0^2*x1^2*y1*y3 + 8*f0*f5^2*h0^2*x1*x2*y1*y2 + 8*f0*f5^2*h0^2*x1*x3*y1^2
    + 4*f0*f5^2*h0*h1*x1*x2*y1*y3 + 4*f0*f5^2*h0*h1*x1*x3*y1*y2 - 4*f0*f5^2*h0*h2*x1*x3*y1*y3 + 4*f0*f5^2*h0*h3*x1*x2*y3^2 + 4*f0*f5^2*h0*h3*x1*x3*y2*y3 +
    4*f0*f5^2*h0*h3*x2^2*y2*y3 + 4*f0*f5^2*h0*h3*x2*x3*y1*y3 + 4*f0*f5^2*h0*h3*x2*x3*y2^2 + 4*f0*f5^2*h0*h3*x3^2*y1*y2 - 2*f0*f5^2*h1^2*x1^2*y3^2 -
    4*f0*f5^2*h1^2*x1*x3*y1*y3 - f0*f5^2*h1^2*x2^2*y2^2 - 2*f0*f5^2*h1^2*x3^2*y1^2 - 2*f0*f5^2*h1*h2*x1*x2*y3^2 - 2*f0*f5^2*h1*h2*x2^2*y2*y3 -
    2*f0*f5^2*h1*h2*x2*x3*y2^2 - 2*f0*f5^2*h1*h2*x3^2*y1*y2 - 2*f0*f5^2*h1*h3*x1*x3*y3^2 + 2*f0*f5^2*h1*h3*x2^2*y3^2 + 2*f0*f5^2*h1*h3*x2*x3*y2*y3 -
    2*f0*f5^2*h1*h3*x3^2*y1*y3 + 2*f0*f5^2*h1*h3*x3^2*y2^2 - f0*f5^2*h2^2*x2^2*y3^2 - 2*f0*f5^2*h2^2*x2*x3*y2*y3 - f0*f5^2*h2^2*x3^2*y2^2 -
    6*f0*f5^2*h2*h3*x2*x3*y3^2 - 6*f0*f5^2*h2*h3*x3^2*y2*y3 - f0*f5^2*h3^2*x3^2*y3^2 - 4*f0*f5^2*x1*x4*y3^2 - 4*f0*f5^2*x2^2*y3*y4 - 4*f0*f5^2*x2*x3*y2*y4 -
    4*f0*f5^2*x2*x4*y2*y3 - 4*f0*f5^2*x3^2*y1*y4 - 4*f0*f5^2*x3*x4*y2^2 + 8*f0*f5*f6*h0^2*x1^2*y2*y3 + 8*f0*f5*f6*h0^2*x1*x2*y1*y3 +
    8*f0*f5*f6*h0^2*x1*x2*y2^2 + 8*f0*f5*f6*h0^2*x1*x3*y1*y2 + 8*f0*f5*f6*h0^2*x2^2*y1*y2 + 8*f0*f5*f6*h0^2*x2*x3*y1^2 + 4*f0*f5*f6*h0*h1*x1*x2*y2*y3 +
    4*f0*f5*f6*h0*h1*x1*x3*y2^2 + 4*f0*f5*f6*h0*h1*x2^2*y1*y3 + 4*f0*f5*f6*h0*h1*x2*x3*y1*y2 - 4*f0*f5*f6*h0*h2*x1*x2*y3^2 - 8*f0*f5*f6*h0*h2*x1*x3*y2*y3 -
    4*f0*f5*f6*h0*h2*x2^2*y2*y3 - 8*f0*f5*f6*h0*h2*x2*x3*y1*y3 - 4*f0*f5*f6*h0*h2*x2*x3*y2^2 - 4*f0*f5*f6*h0*h2*x3^2*y1*y2 + 4*f0*f5*f6*h0*h3*x1*x3*y3^2 +
    4*f0*f5*f6*h0*h3*x2*x3*y2*y3 + 4*f0*f5*f6*h0*h3*x3^2*y1*y3 - 4*f0*f5*f6*h1^2*x1*x3*y2*y3 - 4*f0*f5*f6*h1^2*x2*x3*y1*y3 + 4*f0*f5*f6*h1*h2*x1*x3*y3^2 -
    4*f0*f5*f6*h1*h2*x2^2*y3^2 - 4*f0*f5*f6*h1*h2*x2*x3*y2*y3 + 4*f0*f5*f6*h1*h2*x3^2*y1*y3 - 4*f0*f5*f6*h1*h2*x3^2*y2^2 + 4*f0*f5*f6*h1*h3*x2*x3*y3^2 +
    4*f0*f5*f6*h1*h3*x3^2*y2*y3 + 4*f0*f5*f6*h2^2*x2*x3*y3^2 + 4*f0*f5*f6*h2^2*x3^2*y2*y3 - 4*f0*f5*f6*h2*h3*x3^2*y3^2 - 2*f0*f5*h0^2*h1*h2*x1^2*y1^2 +
    f0*f5*h0^2*h2^2*x1^2*y1*y2 + f0*f5*h0^2*h2^2*x1*x2*y1^2 + 4*f0*f5*h0^2*h2*h3*x1^2*y1*y3 + 4*f0*f5*h0^2*h2*h3*x1*x2*y1*y2 + 4*f0*f5*h0^2*h2*h3*x1*x3*y1^2
    + f0*f5*h0^2*h3^2*x1^2*y2*y3 + f0*f5*h0^2*h3^2*x1*x2*y1*y3 + f0*f5*h0^2*h3^2*x1*x2*y2^2 + f0*f5*h0^2*h3^2*x1*x3*y1*y2 + f0*f5*h0^2*h3^2*x2^2*y1*y2 +
    f0*f5*h0^2*h3^2*x2*x3*y1^2 + f0*f5*h0*h1^3*x1^2*y1^2 - 3*f0*f5*h0*h1^2*h2*x1^2*y1*y2 - 3*f0*f5*h0*h1^2*h2*x1*x2*y1^2 - 3*f0*f5*h0*h1^2*h3*x1^2*y1*y3 -
    f0*f5*h0*h1^2*h3*x1^2*y2^2 - 5*f0*f5*h0*h1^2*h3*x1*x2*y1*y2 - 3*f0*f5*h0*h1^2*h3*x1*x3*y1^2 - f0*f5*h0*h1^2*h3*x2^2*y1^2 - 2*f0*f5*h0*h1*h2^2*x1^2*y1*y3
    - 2*f0*f5*h0*h1*h2^2*x1*x2*y1*y2 - 2*f0*f5*h0*h1*h2^2*x1*x3*y1^2 + 2*f0*f5*h0*h1*h3^2*x1^2*y3^2 + 5*f0*f5*h0*h1*h3^2*x1*x2*y2*y3 +
    4*f0*f5*h0*h1*h3^2*x1*x3*y1*y3 + f0*f5*h0*h1*h3^2*x1*x3*y2^2 + f0*f5*h0*h1*h3^2*x2^2*y1*y3 + 2*f0*f5*h0*h1*h3^2*x2^2*y2^2 +
    5*f0*f5*h0*h1*h3^2*x2*x3*y1*y2 + 2*f0*f5*h0*h1*h3^2*x3^2*y1^2 - f0*f5*h0*h2^3*x1*x2*y1*y3 - f0*f5*h0*h2^3*x1*x3*y1*y2 + f0*f5*h0*h2^2*h3*x1*x2*y2*y3 -
    3*f0*f5*h0*h2^2*h3*x1*x3*y1*y3 + f0*f5*h0*h2^2*h3*x1*x3*y2^2 + f0*f5*h0*h2^2*h3*x2^2*y1*y3 + f0*f5*h0*h2^2*h3*x2*x3*y1*y2 + 3*f0*f5*h0*h2*h3^2*x1*x2*y3^2
    + 2*f0*f5*h0*h2*h3^2*x1*x3*y2*y3 + 3*f0*f5*h0*h2*h3^2*x2^2*y2*y3 + 2*f0*f5*h0*h2*h3^2*x2*x3*y1*y3 + 3*f0*f5*h0*h2*h3^2*x2*x3*y2^2 +
    3*f0*f5*h0*h2*h3^2*x3^2*y1*y2 + f0*f5*h0*h3^3*x1*x3*y3^2 + f0*f5*h0*h3^3*x2*x3*y2*y3 + f0*f5*h0*h3^3*x3^2*y1*y3 + f0*f5*h1^4*x1^2*y1*y2 +
    f0*f5*h1^4*x1*x2*y1^2 + f0*f5*h1^3*h2*x1^2*y1*y3 + f0*f5*h1^3*h2*x1*x2*y1*y2 + f0*f5*h1^3*h2*x1*x3*y1^2 - f0*f5*h1^3*h3*x1^2*y2*y3 -
    2*f0*f5*h1^3*h3*x1*x2*y1*y3 - f0*f5*h1^3*h3*x1*x2*y2^2 - 2*f0*f5*h1^3*h3*x1*x3*y1*y2 - f0*f5*h1^3*h3*x2^2*y1*y2 - f0*f5*h1^3*h3*x2*x3*y1^2 +
    f0*f5*h1^2*h2^2*x1*x2*y1*y3 + f0*f5*h1^2*h2^2*x1*x3*y1*y2 - f0*f5*h1^2*h2*h3*x1^2*y3^2 - 3*f0*f5*h1^2*h2*h3*x1*x2*y2*y3 - 2*f0*f5*h1^2*h2*h3*x1*x3*y1*y3
    - f0*f5*h1^2*h2*h3*x1*x3*y2^2 - f0*f5*h1^2*h2*h3*x2^2*y1*y3 - f0*f5*h1^2*h2*h3*x2^2*y2^2 - 3*f0*f5*h1^2*h2*h3*x2*x3*y1*y2 - f0*f5*h1^2*h2*h3*x3^2*y1^2 +
    f0*f5*h1^2*h3^2*x1*x2*y3^2 + f0*f5*h1^2*h3^2*x2^2*y2*y3 + f0*f5*h1^2*h3^2*x2*x3*y2^2 + f0*f5*h1^2*h3^2*x3^2*y1*y2 + 2*f0*f5*h1^2*x1^2*y2*y4 +
    4*f0*f5*h1^2*x1*x2*y1*y4 + 4*f0*f5*h1^2*x1*x4*y1*y2 + 2*f0*f5*h1^2*x2*x4*y1^2 + f0*f5*h1*h2^3*x1*x3*y1*y3 - 2*f0*f5*h1*h2^2*h3*x1*x2*y3^2 -
    f0*f5*h1*h2^2*h3*x1*x3*y2*y3 - 2*f0*f5*h1*h2^2*h3*x2^2*y2*y3 - f0*f5*h1*h2^2*h3*x2*x3*y1*y3 - 2*f0*f5*h1*h2^2*h3*x2*x3*y2^2 -
    2*f0*f5*h1*h2^2*h3*x3^2*y1*y2 - f0*f5*h1*h2*h3^2*x1*x3*y3^2 + f0*f5*h1*h2*h3^2*x2^2*y3^2 + f0*f5*h1*h2*h3^2*x2*x3*y2*y3 - f0*f5*h1*h2*h3^2*x3^2*y1*y3 +
    f0*f5*h1*h2*h3^2*x3^2*y2^2 + 2*f0*f5*h1*h2*x1*x2*y2*y4 + 4*f0*f5*h1*h2*x1*x3*y1*y4 + 4*f0*f5*h1*h2*x1*x4*y1*y3 + 2*f0*f5*h1*h2*x2*x4*y1*y2 +
    f0*f5*h1*h3^3*x2*x3*y3^2 + f0*f5*h1*h3^3*x3^2*y2*y3 - 4*f0*f5*h1*h3*x1*x2*y3*y4 - 2*f0*f5*h1*h3*x1*x3*y2*y4 - 4*f0*f5*h1*h3*x1*x4*y2*y3 -
    2*f0*f5*h1*h3*x2^2*y2*y4 - 4*f0*f5*h1*h3*x2*x3*y1*y4 - 2*f0*f5*h1*h3*x2*x4*y1*y3 - 2*f0*f5*h1*h3*x2*x4*y2^2 - 4*f0*f5*h1*h3*x3*x4*y1*y2 -
    f0*f5*h2^3*h3*x2^2*y3^2 - 2*f0*f5*h2^3*h3*x2*x3*y2*y3 - f0*f5*h2^3*h3*x3^2*y2^2 - 2*f0*f5*h2^2*h3^2*x2*x3*y3^2 - 2*f0*f5*h2^2*h3^2*x3^2*y2*y3 -
    f0*f5*h2*h3^3*x3^2*y3^2 - 4*f0*f5*h2*h3*x1*x4*y3^2 - 4*f0*f5*h2*h3*x2^2*y3*y4 - 4*f0*f5*h2*h3*x2*x3*y2*y4 - 4*f0*f5*h2*h3*x2*x4*y2*y3 -
    4*f0*f5*h2*h3*x3^2*y1*y4 - 4*f0*f5*h2*h3*x3*x4*y2^2 + 4*f0*f5*x1*x4*y2*y4 + 4*f0*f5*x2*x4*y1*y4 + 8*f0*f6^2*h0^2*x1^2*y3^2 + 16*f0*f6^2*h0^2*x1*x2*y2*y3
    + 16*f0*f6^2*h0^2*x1*x3*y1*y3 + 8*f0*f6^2*h0^2*x2^2*y2^2 + 16*f0*f6^2*h0^2*x2*x3*y1*y2 + 8*f0*f6^2*h0^2*x3^2*y1^2 + 8*f0*f6^2*h0*h1*x1*x2*y3^2 +
    8*f0*f6^2*h0*h1*x1*x3*y2*y3 + 8*f0*f6^2*h0*h1*x2^2*y2*y3 + 8*f0*f6^2*h0*h1*x2*x3*y1*y3 + 8*f0*f6^2*h0*h1*x2*x3*y2^2 + 8*f0*f6^2*h0*h1*x3^2*y1*y2 -
    8*f0*f6^2*h0*h2*x1*x3*y3^2 - 8*f0*f6^2*h0*h2*x2*x3*y2*y3 - 8*f0*f6^2*h0*h2*x3^2*y1*y3 - 8*f0*f6^2*h1^2*x1*x3*y3^2 + 4*f0*f6^2*h1^2*x2^2*y3^2 -
    8*f0*f6^2*h1^2*x3^2*y1*y3 + 4*f0*f6^2*h1^2*x3^2*y2^2 - 8*f0*f6^2*h1*h2*x2*x3*y3^2 - 8*f0*f6^2*h1*h2*x3^2*y2*y3 + 4*f0*f6^2*h2^2*x3^2*y3^2 +
    f0*f6*h0^2*h1^2*x1^2*y1^2 - 2*f0*f6*h0^2*h1*h2*x1^2*y1*y2 - 2*f0*f6*h0^2*h1*h2*x1*x2*y1^2 - 2*f0*f6*h0^2*h1*h3*x1^2*y1*y3 -
    2*f0*f6*h0^2*h1*h3*x1*x2*y1*y2 - 2*f0*f6*h0^2*h1*h3*x1*x3*y1^2 - 2*f0*f6*h0^2*h2^2*x1^2*y1*y3 + f0*f6*h0^2*h2^2*x1^2*y2^2 - 2*f0*f6*h0^2*h2^2*x1*x3*y1^2
    + f0*f6*h0^2*h2^2*x2^2*y1^2 + 2*f0*f6*h0^2*h2*h3*x1^2*y2*y3 + 2*f0*f6*h0^2*h2*h3*x1*x2*y1*y3 + 2*f0*f6*h0^2*h2*h3*x1*x2*y2^2 +
    2*f0*f6*h0^2*h2*h3*x1*x3*y1*y2 + 2*f0*f6*h0^2*h2*h3*x2^2*y1*y2 + 2*f0*f6*h0^2*h2*h3*x2*x3*y1^2 + 2*f0*f6*h0^2*h3^2*x1^2*y3^2 +
    4*f0*f6*h0^2*h3^2*x1*x2*y2*y3 + 4*f0*f6*h0^2*h3^2*x1*x3*y1*y3 + 2*f0*f6*h0^2*h3^2*x2^2*y2^2 + 4*f0*f6*h0^2*h3^2*x2*x3*y1*y2 + 2*f0*f6*h0^2*h3^2*x3^2*y1^2
    + 2*f0*f6*h0*h1^3*x1^2*y1*y2 + 2*f0*f6*h0*h1^3*x1*x2*y1^2 + 2*f0*f6*h0*h1^2*h2*x1^2*y1*y3 - 2*f0*f6*h0*h1^2*h2*x1^2*y2^2 - 2*f0*f6*h0*h1^2*h2*x1*x2*y1*y2
    + 2*f0*f6*h0*h1^2*h2*x1*x3*y1^2 - 2*f0*f6*h0*h1^2*h2*x2^2*y1^2 - 4*f0*f6*h0*h1^2*h3*x1^2*y2*y3 - 4*f0*f6*h0*h1^2*h3*x1*x2*y1*y3 -
    4*f0*f6*h0*h1^2*h3*x1*x2*y2^2 - 4*f0*f6*h0*h1^2*h3*x1*x3*y1*y2 - 4*f0*f6*h0*h1^2*h3*x2^2*y1*y2 - 4*f0*f6*h0*h1^2*h3*x2*x3*y1^2 -
    2*f0*f6*h0*h1*h2^2*x1^2*y2*y3 - 2*f0*f6*h0*h1*h2^2*x1*x2*y1*y3 - 2*f0*f6*h0*h1*h2^2*x1*x2*y2^2 - 2*f0*f6*h0*h1*h2^2*x1*x3*y1*y2 -
    2*f0*f6*h0*h1*h2^2*x2^2*y1*y2 - 2*f0*f6*h0*h1*h2^2*x2*x3*y1^2 - 4*f0*f6*h0*h1*h2*h3*x1^2*y3^2 - 8*f0*f6*h0*h1*h2*h3*x1*x2*y2*y3 -
    8*f0*f6*h0*h1*h2*h3*x1*x3*y1*y3 - 4*f0*f6*h0*h1*h2*h3*x2^2*y2^2 - 8*f0*f6*h0*h1*h2*h3*x2*x3*y1*y2 - 4*f0*f6*h0*h1*h2*h3*x3^2*y1^2 +
    2*f0*f6*h0*h1*h3^2*x1*x2*y3^2 + 2*f0*f6*h0*h1*h3^2*x1*x3*y2*y3 + 2*f0*f6*h0*h1*h3^2*x2^2*y2*y3 + 2*f0*f6*h0*h1*h3^2*x2*x3*y1*y3 +
    2*f0*f6*h0*h1*h3^2*x2*x3*y2^2 + 2*f0*f6*h0*h1*h3^2*x3^2*y1*y2 - 2*f0*f6*h0*h2^3*x1*x2*y2*y3 + 2*f0*f6*h0*h2^3*x1*x3*y1*y3 - 2*f0*f6*h0*h2^3*x1*x3*y2^2 -
    2*f0*f6*h0*h2^3*x2^2*y1*y3 - 2*f0*f6*h0*h2^3*x2*x3*y1*y2 - 4*f0*f6*h0*h2^2*h3*x1*x2*y3^2 - 4*f0*f6*h0*h2^2*h3*x1*x3*y2*y3 - 4*f0*f6*h0*h2^2*h3*x2^2*y2*y3
    - 4*f0*f6*h0*h2^2*h3*x2*x3*y1*y3 - 4*f0*f6*h0*h2^2*h3*x2*x3*y2^2 - 4*f0*f6*h0*h2^2*h3*x3^2*y1*y2 - 2*f0*f6*h0*h2*h3^2*x1*x3*y3^2 -
    2*f0*f6*h0*h2*h3^2*x2*x3*y2*y3 - 2*f0*f6*h0*h2*h3^2*x3^2*y1*y3 + f0*f6*h1^4*x1^2*y2^2 + 2*f0*f6*h1^4*x1*x2*y1*y2 + f0*f6*h1^4*x2^2*y1^2 +
    2*f0*f6*h1^3*h2*x1^2*y2*y3 + 2*f0*f6*h1^3*h2*x1*x2*y1*y3 + 2*f0*f6*h1^3*h2*x1*x2*y2^2 + 2*f0*f6*h1^3*h2*x1*x3*y1*y2 + 2*f0*f6*h1^3*h2*x2^2*y1*y2 +
    2*f0*f6*h1^3*h2*x2*x3*y1^2 - 2*f0*f6*h1^3*h3*x1*x2*y2*y3 + 2*f0*f6*h1^3*h3*x1*x3*y1*y3 - 2*f0*f6*h1^3*h3*x1*x3*y2^2 - 2*f0*f6*h1^3*h3*x2^2*y1*y3 -
    2*f0*f6*h1^3*h3*x2*x3*y1*y2 + f0*f6*h1^2*h2^2*x1^2*y3^2 + 4*f0*f6*h1^2*h2^2*x1*x2*y2*y3 + 2*f0*f6*h1^2*h2^2*x1*x3*y2^2 + 2*f0*f6*h1^2*h2^2*x2^2*y1*y3 +
    f0*f6*h1^2*h2^2*x2^2*y2^2 + 4*f0*f6*h1^2*h2^2*x2*x3*y1*y2 + f0*f6*h1^2*h2^2*x3^2*y1^2 - 2*f0*f6*h1^2*h2*h3*x1*x2*y3^2 - 2*f0*f6*h1^2*h2*h3*x1*x3*y2*y3 -
    2*f0*f6*h1^2*h2*h3*x2^2*y2*y3 - 2*f0*f6*h1^2*h2*h3*x2*x3*y1*y3 - 2*f0*f6*h1^2*h2*h3*x2*x3*y2^2 - 2*f0*f6*h1^2*h2*h3*x3^2*y1*y2 -
    2*f0*f6*h1^2*h3^2*x1*x3*y3^2 + f0*f6*h1^2*h3^2*x2^2*y3^2 - 2*f0*f6*h1^2*h3^2*x3^2*y1*y3 + f0*f6*h1^2*h3^2*x3^2*y2^2 + 4*f0*f6*h1^2*x1^2*y3*y4 +
    4*f0*f6*h1^2*x1*x2*y2*y4 + 4*f0*f6*h1^2*x1*x4*y2^2 + 4*f0*f6*h1^2*x2^2*y1*y4 + 4*f0*f6*h1^2*x2*x4*y1*y2 + 4*f0*f6*h1^2*x3*x4*y1^2 +
    2*f0*f6*h1*h2^3*x1*x2*y3^2 + 2*f0*f6*h1*h2^3*x1*x3*y2*y3 + 2*f0*f6*h1*h2^3*x2^2*y2*y3 + 2*f0*f6*h1*h2^3*x2*x3*y1*y3 + 2*f0*f6*h1*h2^3*x2*x3*y2^2 +
    2*f0*f6*h1*h2^3*x3^2*y1*y2 + 2*f0*f6*h1*h2^2*h3*x1*x3*y3^2 - 2*f0*f6*h1*h2^2*h3*x2^2*y3^2 - 2*f0*f6*h1*h2^2*h3*x2*x3*y2*y3 +
    2*f0*f6*h1*h2^2*h3*x3^2*y1*y3 - 2*f0*f6*h1*h2^2*h3*x3^2*y2^2 - 2*f0*f6*h1*h2*h3^2*x2*x3*y3^2 - 2*f0*f6*h1*h2*h3^2*x3^2*y2*y3 + 8*f0*f6*h1*h2*x1*x2*y3*y4
    + 4*f0*f6*h1*h2*x1*x3*y2*y4 + 8*f0*f6*h1*h2*x1*x4*y2*y3 + 4*f0*f6*h1*h2*x2^2*y2*y4 + 8*f0*f6*h1*h2*x2*x3*y1*y4 + 4*f0*f6*h1*h2*x2*x4*y1*y3 +
    4*f0*f6*h1*h2*x2*x4*y2^2 + 8*f0*f6*h1*h2*x3*x4*y1*y2 + f0*f6*h2^4*x2^2*y3^2 + 2*f0*f6*h2^4*x2*x3*y2*y3 + f0*f6*h2^4*x3^2*y2^2 +
    2*f0*f6*h2^3*h3*x2*x3*y3^2 + 2*f0*f6*h2^3*h3*x3^2*y2*y3 + f0*f6*h2^2*h3^2*x3^2*y3^2 + 4*f0*f6*h2^2*x1*x4*y3^2 + 4*f0*f6*h2^2*x2^2*y3*y4 +
    4*f0*f6*h2^2*x2*x3*y2*y4 + 4*f0*f6*h2^2*x2*x4*y2*y3 + 4*f0*f6*h2^2*x3^2*y1*y4 + 4*f0*f6*h2^2*x3*x4*y2^2 + 8*f0*f6*x1*x4*y3*y4 + 8*f0*f6*x2*x4*y2*y4 +
    8*f0*f6*x3*x4*y1*y4 - 2*f0*h1*h3*x1*x4*y1*y4 + 2*f0*h2^2*x1*x4*y1*y4 + 2*f0*h2*h3*x1*x4*y2*y4 + 2*f0*h2*h3*x2*x4*y1*y4 + 2*f0*h3^2*x1*x4*y3*y4 +
    2*f0*h3^2*x2*x4*y2*y4 + 2*f0*h3^2*x3*x4*y1*y4 - 2*f1^3*f5*x1^2*y1^2 - 4*f1^3*f6*x1^2*y1*y2 - 4*f1^3*f6*x1*x2*y1^2 - f1^3*h2*h3*x1^2*y1^2 -
    f1^3*h3^2*x1^2*y1*y2 - f1^3*h3^2*x1*x2*y1^2 - 4*f1^2*f2*f4*x1^2*y1^2 - 4*f1^2*f2*f5*x1^2*y1*y2 - 4*f1^2*f2*f5*x1*x2*y1^2 - 4*f1^2*f2*f6*x1^2*y2^2 -
    8*f1^2*f2*f6*x1*x2*y1*y2 - 4*f1^2*f2*f6*x2^2*y1^2 - f1^2*f2*h2^2*x1^2*y1^2 - 2*f1^2*f2*h2*h3*x1^2*y1*y2 - 2*f1^2*f2*h2*h3*x1*x2*y1^2 -
    f1^2*f2*h3^2*x1^2*y2^2 - 2*f1^2*f2*h3^2*x1*x2*y1*y2 - f1^2*f2*h3^2*x2^2*y1^2 + f1^2*f3^2*x1^2*y1^2 - 2*f1^2*f3*f5*x1^2*y1*y3 - 2*f1^2*f3*f5*x1*x2*y1*y2 -
    2*f1^2*f3*f5*x1*x3*y1^2 - 4*f1^2*f3*f6*x1^2*y2*y3 - 4*f1^2*f3*f6*x1*x2*y2^2 - 4*f1^2*f3*f6*x2^2*y1*y2 - 4*f1^2*f3*f6*x2*x3*y1^2 + f1^2*f3*h1*h2*x1^2*y1^2
    + f1^2*f3*h1*h3*x1^2*y1*y2 + f1^2*f3*h1*h3*x1*x2*y1^2 - f1^2*f3*h2*h3*x1^2*y1*y3 - f1^2*f3*h2*h3*x1*x2*y1*y2 - f1^2*f3*h2*h3*x1*x3*y1^2 -
    f1^2*f3*h3^2*x1^2*y2*y3 - f1^2*f3*h3^2*x1*x2*y2^2 - f1^2*f3*h3^2*x2^2*y1*y2 - f1^2*f3*h3^2*x2*x3*y1^2 - 8*f1^2*f4*f6*x1^2*y3^2 -
    16*f1^2*f4*f6*x1*x3*y1*y3 - 4*f1^2*f4*f6*x2^2*y2^2 - 8*f1^2*f4*f6*x3^2*y1^2 + 4*f1^2*f4*h0*h2*x1^2*y1^2 + 2*f1^2*f4*h0*h3*x1^2*y1*y2 +
    2*f1^2*f4*h0*h3*x1*x2*y1^2 - f1^2*f4*h1^2*x1^2*y1^2 + 2*f1^2*f4*h1*h3*x1^2*y1*y3 + 2*f1^2*f4*h1*h3*x1*x2*y1*y2 + 2*f1^2*f4*h1*h3*x1*x3*y1^2 -
    2*f1^2*f4*h3^2*x1^2*y3^2 - 4*f1^2*f4*h3^2*x1*x3*y1*y3 - f1^2*f4*h3^2*x2^2*y2^2 - 2*f1^2*f4*h3^2*x3^2*y1^2 - 4*f1^2*f4*x1^2*y1*y4 - 4*f1^2*f4*x1*x4*y1^2 +
    2*f1^2*f5^2*x1^2*y3^2 + 8*f1^2*f5^2*x1*x3*y1*y3 + f1^2*f5^2*x2^2*y2^2 + 2*f1^2*f5^2*x3^2*y1^2 + 8*f1^2*f5*f6*x1*x3*y2*y3 + 8*f1^2*f5*f6*x2*x3*y1*y3 -
    3*f1^2*f5*h0*h1*x1^2*y1^2 + 3*f1^2*f5*h0*h2*x1^2*y1*y2 + 3*f1^2*f5*h0*h2*x1*x2*y1^2 + 3*f1^2*f5*h0*h3*x1^2*y1*y3 + f1^2*f5*h0*h3*x1^2*y2^2 +
    5*f1^2*f5*h0*h3*x1*x2*y1*y2 + 3*f1^2*f5*h0*h3*x1*x3*y1^2 + f1^2*f5*h0*h3*x2^2*y1^2 - f1^2*f5*h1^2*x1^2*y1*y2 - f1^2*f5*h1^2*x1*x2*y1^2 -
    f1^2*f5*h1*h2*x1^2*y1*y3 - f1^2*f5*h1*h2*x1*x2*y1*y2 - f1^2*f5*h1*h2*x1*x3*y1^2 + f1^2*f5*h1*h3*x1^2*y2*y3 + f1^2*f5*h1*h3*x1*x2*y2^2 +
    f1^2*f5*h1*h3*x2^2*y1*y2 + f1^2*f5*h1*h3*x2*x3*y1^2 + 2*f1^2*f5*h2*h3*x1^2*y3^2 + 8*f1^2*f5*h2*h3*x1*x3*y1*y3 + f1^2*f5*h2*h3*x2^2*y2^2 +
    2*f1^2*f5*h2*h3*x3^2*y1^2 + 2*f1^2*f5*h3^2*x1*x3*y2*y3 + 2*f1^2*f5*h3^2*x2*x3*y1*y3 - 2*f1^2*f5*x1^2*y2*y4 - 4*f1^2*f5*x1*x2*y1*y4 -
    4*f1^2*f5*x1*x4*y1*y2 - 2*f1^2*f5*x2*x4*y1^2 + 16*f1^2*f6^2*x1*x3*y3^2 + 16*f1^2*f6^2*x2*x3*y2*y3 + 16*f1^2*f6^2*x3^2*y1*y3 - f1^2*f6*h0^2*x1^2*y1^2 -
    6*f1^2*f6*h0*h1*x1^2*y1*y2 - 6*f1^2*f6*h0*h1*x1*x2*y1^2 - 2*f1^2*f6*h0*h2*x1^2*y1*y3 + 2*f1^2*f6*h0*h2*x1^2*y2^2 + 2*f1^2*f6*h0*h2*x1*x2*y1*y2 -
    2*f1^2*f6*h0*h2*x1*x3*y1^2 + 2*f1^2*f6*h0*h2*x2^2*y1^2 + 4*f1^2*f6*h0*h3*x1^2*y2*y3 + 4*f1^2*f6*h0*h3*x1*x2*y1*y3 + 4*f1^2*f6*h0*h3*x1*x2*y2^2 +
    4*f1^2*f6*h0*h3*x1*x3*y1*y2 + 4*f1^2*f6*h0*h3*x2^2*y1*y2 + 4*f1^2*f6*h0*h3*x2*x3*y1^2 - f1^2*f6*h1^2*x1^2*y2^2 - 2*f1^2*f6*h1^2*x1*x2*y1*y2 -
    f1^2*f6*h1^2*x2^2*y1^2 - 2*f1^2*f6*h1*h2*x1^2*y2*y3 - 2*f1^2*f6*h1*h2*x1*x2*y2^2 - 2*f1^2*f6*h1*h2*x2^2*y1*y2 - 2*f1^2*f6*h1*h2*x2*x3*y1^2 -
    4*f1^2*f6*h1*h3*x1*x3*y1*y3 - 2*f1^2*f6*h2^2*x1^2*y3^2 - 4*f1^2*f6*h2^2*x1*x3*y1*y3 - f1^2*f6*h2^2*x2^2*y2^2 - 2*f1^2*f6*h2^2*x3^2*y1^2 +
    4*f1^2*f6*h2*h3*x1*x3*y2*y3 + 4*f1^2*f6*h2*h3*x2*x3*y1*y3 + 8*f1^2*f6*h3^2*x1*x3*y3^2 + 8*f1^2*f6*h3^2*x2*x3*y2*y3 + 8*f1^2*f6*h3^2*x3^2*y1*y3 -
    4*f1^2*f6*x1^2*y3*y4 - 4*f1^2*f6*x1*x2*y2*y4 - 4*f1^2*f6*x1*x4*y2^2 - 4*f1^2*f6*x2^2*y1*y4 - 4*f1^2*f6*x2*x4*y1*y2 - 4*f1^2*f6*x3*x4*y1^2 -
    f1^2*h0*h1*h2*h3*x1^2*y1^2 - f1^2*h0*h1*h3^2*x1^2*y1*y2 - f1^2*h0*h1*h3^2*x1*x2*y1^2 + f1^2*h0*h2^3*x1^2*y1^2 + 2*f1^2*h0*h2^2*h3*x1^2*y1*y2 +
    2*f1^2*h0*h2^2*h3*x1*x2*y1^2 + f1^2*h0*h2*h3^2*x1^2*y1*y3 + f1^2*h0*h2*h3^2*x1^2*y2^2 + 3*f1^2*h0*h2*h3^2*x1*x2*y1*y2 + f1^2*h0*h2*h3^2*x1*x3*y1^2 +
    f1^2*h0*h2*h3^2*x2^2*y1^2 + f1^2*h0*h3^3*x1^2*y2*y3 + f1^2*h0*h3^3*x1*x2*y1*y3 + f1^2*h0*h3^3*x1*x2*y2^2 + f1^2*h0*h3^3*x1*x3*y1*y2 +
    f1^2*h0*h3^3*x2^2*y1*y2 + f1^2*h0*h3^3*x2*x3*y1^2 - f1^2*h1*h3^3*x1*x3*y1*y3 + f1^2*h2^2*h3^2*x1*x3*y1*y3 - f1^2*h2^2*x1^2*y1*y4 - f1^2*h2^2*x1*x4*y1^2 +
    f1^2*h2*h3^3*x1*x3*y2*y3 + f1^2*h2*h3^3*x2*x3*y1*y3 - f1^2*h2*h3*x1^2*y2*y4 - 2*f1^2*h2*h3*x1*x2*y1*y4 - 2*f1^2*h2*h3*x1*x4*y1*y2 - f1^2*h2*h3*x2*x4*y1^2
    + f1^2*h3^4*x1*x3*y3^2 + f1^2*h3^4*x2*x3*y2*y3 + f1^2*h3^4*x3^2*y1*y3 - f1^2*h3^2*x1^2*y3*y4 - f1^2*h3^2*x1*x2*y2*y4 - f1^2*h3^2*x1*x4*y2^2 -
    f1^2*h3^2*x2^2*y1*y4 - f1^2*h3^2*x2*x4*y1*y2 - f1^2*h3^2*x3*x4*y1^2 + 8*f1*f2*f3*f6*x1*x3*y1*y3 + 2*f1*f2*f3*h3^2*x1*x3*y1*y3 -
    4*f1*f2*f4*h0*h1*x1^2*y1^2 + 2*f1*f2*f5*h0^2*x1^2*y1^2 - 4*f1*f2*f5*h0*h1*x1^2*y1*y2 - 4*f1*f2*f5*h0*h1*x1*x2*y1^2 + 4*f1*f2*f5*h0*h3*x1*x2*y1*y3 +
    4*f1*f2*f5*h0*h3*x1*x3*y1*y2 - 4*f1*f2*f5*h1*h3*x1*x3*y1*y3 + 16*f1*f2*f6^2*x2*x3*y3^2 + 16*f1*f2*f6^2*x3^2*y2*y3 + 4*f1*f2*f6*h0^2*x1^2*y1*y2 +
    4*f1*f2*f6*h0^2*x1*x2*y1^2 - 4*f1*f2*f6*h0*h1*x1^2*y2^2 - 8*f1*f2*f6*h0*h1*x1*x2*y1*y2 - 4*f1*f2*f6*h0*h1*x2^2*y1^2 - 4*f1*f2*f6*h0*h2*x1*x2*y1*y3 -
    4*f1*f2*f6*h0*h2*x1*x3*y1*y2 + 4*f1*f2*f6*h0*h3*x1*x2*y2*y3 + 4*f1*f2*f6*h0*h3*x1*x3*y1*y3 + 4*f1*f2*f6*h0*h3*x1*x3*y2^2 + 4*f1*f2*f6*h0*h3*x2^2*y1*y3 +
    4*f1*f2*f6*h0*h3*x2*x3*y1*y2 + 4*f1*f2*f6*h1*h2*x1*x3*y1*y3 - 4*f1*f2*f6*h1*h3*x1*x3*y2*y3 - 4*f1*f2*f6*h1*h3*x2*x3*y1*y3 + 8*f1*f2*f6*h3^2*x2*x3*y3^2 +
    8*f1*f2*f6*h3^2*x3^2*y2*y3 + f1*f2*h0^2*h2*h3*x1^2*y1^2 + f1*f2*h0^2*h3^2*x1^2*y1*y2 + f1*f2*h0^2*h3^2*x1*x2*y1^2 - f1*f2*h0*h1*h2^2*x1^2*y1^2 -
    2*f1*f2*h0*h1*h2*h3*x1^2*y1*y2 - 2*f1*f2*h0*h1*h2*h3*x1*x2*y1^2 - f1*f2*h0*h1*h3^2*x1^2*y2^2 - 2*f1*f2*h0*h1*h3^2*x1*x2*y1*y2 -
    f1*f2*h0*h1*h3^2*x2^2*y1^2 + f1*f2*h0*h2*h3^2*x1*x2*y1*y3 + f1*f2*h0*h2*h3^2*x1*x3*y1*y2 + f1*f2*h0*h3^3*x1*x2*y2*y3 + f1*f2*h0*h3^3*x1*x3*y1*y3 +
    f1*f2*h0*h3^3*x1*x3*y2^2 + f1*f2*h0*h3^3*x2^2*y1*y3 + f1*f2*h0*h3^3*x2*x3*y1*y2 - f1*f2*h1*h2*h3^2*x1*x3*y1*y3 - f1*f2*h1*h3^3*x1*x3*y2*y3 -
    f1*f2*h1*h3^3*x2*x3*y1*y3 + f1*f2*h3^4*x2*x3*y3^2 + f1*f2*h3^4*x3^2*y2*y3 + 4*f1*f3^2*f6*x1*x3*y2*y3 + 4*f1*f3^2*f6*x2*x3*y1*y3 + f1*f3^2*h0*h1*x1^2*y1^2
    + f1*f3^2*h3^2*x1*x3*y2*y3 + f1*f3^2*h3^2*x2*x3*y1*y3 + 8*f1*f3*f4*f6*x1*x3*y3^2 + 8*f1*f3*f4*f6*x2*x3*y2*y3 + 8*f1*f3*f4*f6*x3^2*y1*y3 -
    2*f1*f3*f4*h0^2*x1^2*y1^2 + 2*f1*f3*f4*h3^2*x1*x3*y3^2 + 2*f1*f3*f4*h3^2*x2*x3*y2*y3 + 2*f1*f3*f4*h3^2*x3^2*y1*y3 - 2*f1*f3*f5^2*x1*x3*y3^2 -
    2*f1*f3*f5^2*x2*x3*y2*y3 - 2*f1*f3*f5^2*x3^2*y1*y3 - 8*f1*f3*f5*f6*x2*x3*y3^2 - 8*f1*f3*f5*f6*x3^2*y2*y3 - 2*f1*f3*f5*h0^2*x1^2*y1*y2 -
    2*f1*f3*f5*h0^2*x1*x2*y1^2 - 2*f1*f3*f5*h0*h1*x1^2*y1*y3 - 2*f1*f3*f5*h0*h1*x1*x2*y1*y2 - 2*f1*f3*f5*h0*h1*x1*x3*y1^2 - 2*f1*f3*f5*h0*h2*x1*x2*y1*y3 -
    2*f1*f3*f5*h0*h2*x1*x3*y1*y2 - f1*f3*f5*h0*h3*x1^2*y3^2 + f1*f3*f5*h0*h3*x1*x2*y2*y3 - 8*f1*f3*f5*h0*h3*x1*x3*y1*y3 - f1*f3*f5*h0*h3*x1*x3*y2^2 -
    f1*f3*f5*h0*h3*x2^2*y1*y3 + f1*f3*f5*h0*h3*x2*x3*y1*y2 - f1*f3*f5*h0*h3*x3^2*y1^2 - 2*f1*f3*f5*h1*h3*x1*x3*y2*y3 - 2*f1*f3*f5*h1*h3*x2*x3*y1*y3 -
    2*f1*f3*f5*h2*h3*x1*x3*y3^2 - 2*f1*f3*f5*h2*h3*x2*x3*y2*y3 - 2*f1*f3*f5*h2*h3*x3^2*y1*y3 - 2*f1*f3*f5*h3^2*x2*x3*y3^2 - 2*f1*f3*f5*h3^2*x3^2*y2*y3 +
    2*f1*f3*f5*x1*x3*y2*y4 + 2*f1*f3*f5*x2*x4*y1*y3 - 16*f1*f3*f6^2*x3^2*y3^2 + 2*f1*f3*f6*h0^2*x1^2*y1*y3 - 2*f1*f3*f6*h0^2*x1^2*y2^2 -
    2*f1*f3*f6*h0^2*x1*x2*y1*y2 + 2*f1*f3*f6*h0^2*x1*x3*y1^2 - 2*f1*f3*f6*h0^2*x2^2*y1^2 - 4*f1*f3*f6*h0*h1*x1^2*y2*y3 - 4*f1*f3*f6*h0*h1*x1*x2*y2^2 -
    4*f1*f3*f6*h0*h1*x2^2*y1*y2 - 4*f1*f3*f6*h0*h1*x2*x3*y1^2 + 2*f1*f3*f6*h0*h2*x1^2*y3^2 - 6*f1*f3*f6*h0*h2*x1*x2*y2*y3 + 4*f1*f3*f6*h0*h2*x1*x3*y1*y3 -
    2*f1*f3*f6*h0*h2*x1*x3*y2^2 - 2*f1*f3*f6*h0*h2*x2^2*y1*y3 - 6*f1*f3*f6*h0*h2*x2*x3*y1*y2 + 2*f1*f3*f6*h0*h2*x3^2*y1^2 - 8*f1*f3*f6*h0*h3*x1*x3*y2*y3 -
    8*f1*f3*f6*h0*h3*x2*x3*y1*y3 + 2*f1*f3*f6*h1^2*x1*x3*y1*y3 + 4*f1*f3*f6*h1*h2*x1*x3*y2*y3 + 4*f1*f3*f6*h1*h2*x2*x3*y1*y3 - 4*f1*f3*f6*h1*h3*x1*x3*y3^2 -
    4*f1*f3*f6*h1*h3*x2*x3*y2*y3 - 4*f1*f3*f6*h1*h3*x3^2*y1*y3 + 2*f1*f3*f6*h2^2*x1*x3*y3^2 + 2*f1*f3*f6*h2^2*x2*x3*y2*y3 + 2*f1*f3*f6*h2^2*x3^2*y1*y3 -
    4*f1*f3*f6*h2*h3*x2*x3*y3^2 - 4*f1*f3*f6*h2*h3*x3^2*y2*y3 - 8*f1*f3*f6*h3^2*x3^2*y3^2 + 8*f1*f3*f6*x1*x3*y3*y4 + 4*f1*f3*f6*x2*x3*y2*y4 +
    4*f1*f3*f6*x2*x4*y2*y3 + 8*f1*f3*f6*x3*x4*y1*y3 - 2*f1*f3*h0^2*h2^2*x1^2*y1^2 - 3*f1*f3*h0^2*h2*h3*x1^2*y1*y2 - 3*f1*f3*h0^2*h2*h3*x1*x2*y1^2 -
    f1*f3*h0^2*h3^2*x1^2*y2^2 - 2*f1*f3*h0^2*h3^2*x1*x2*y1*y2 - f1*f3*h0^2*h3^2*x2^2*y1^2 + f1*f3*h0*h1^2*h2*x1^2*y1^2 + f1*f3*h0*h1^2*h3*x1^2*y1*y2 +
    f1*f3*h0*h1^2*h3*x1*x2*y1^2 - f1*f3*h0*h1*h2*h3*x1^2*y1*y3 - f1*f3*h0*h1*h2*h3*x1*x2*y1*y2 - f1*f3*h0*h1*h2*h3*x1*x3*y1^2 - f1*f3*h0*h1*h3^2*x1^2*y2*y3 -
    f1*f3*h0*h1*h3^2*x1*x2*y1*y3 - f1*f3*h0*h1*h3^2*x1*x2*y2^2 - f1*f3*h0*h1*h3^2*x1*x3*y1*y2 - f1*f3*h0*h1*h3^2*x2^2*y1*y2 - f1*f3*h0*h1*h3^2*x2*x3*y1^2 -
    f1*f3*h0*h2^2*h3*x1*x2*y1*y3 - f1*f3*h0*h2^2*h3*x1*x3*y1*y2 - f1*f3*h0*h2*h3^2*x1*x2*y2*y3 - 3*f1*f3*h0*h2*h3^2*x1*x3*y1*y3 - f1*f3*h0*h2*h3^2*x1*x3*y2^2
    - f1*f3*h0*h2*h3^2*x2^2*y1*y3 - f1*f3*h0*h2*h3^2*x2*x3*y1*y2 + 2*f1*f3*h0*h2*x1^2*y1*y4 + 2*f1*f3*h0*h2*x1*x4*y1^2 - 2*f1*f3*h0*h3^3*x1*x3*y2*y3 -
    2*f1*f3*h0*h3^3*x2*x3*y1*y3 + f1*f3*h0*h3*x1^2*y2*y4 + 2*f1*f3*h0*h3*x1*x2*y1*y4 + 2*f1*f3*h0*h3*x1*x4*y1*y2 + f1*f3*h0*h3*x2*x4*y1^2 +
    f1*f3*h1^2*h3^2*x1*x3*y1*y3 - f1*f3*h1*h3^3*x1*x3*y3^2 - f1*f3*h1*h3^3*x2*x3*y2*y3 - f1*f3*h1*h3^3*x3^2*y1*y3 - f1*f3*h2*h3^3*x2*x3*y3^2 -
    f1*f3*h2*h3^3*x3^2*y2*y3 + f1*f3*h2*h3*x1*x3*y2*y4 + f1*f3*h2*h3*x2*x4*y1*y3 - f1*f3*h3^4*x3^2*y3^2 + 2*f1*f3*h3^2*x1*x3*y3*y4 + f1*f3*h3^2*x2*x3*y2*y4 +
    f1*f3*h3^2*x2*x4*y2*y3 + 2*f1*f3*h3^2*x3*x4*y1*y3 - 2*f1*f3*x1*x4*y1*y4 + 16*f1*f4^2*f6*x2*x3*y3^2 + 16*f1*f4^2*f6*x3^2*y2*y3 +
    8*f1*f4^2*h0*h3*x1*x3*y1*y3 + 4*f1*f4^2*h3^2*x2*x3*y3^2 + 4*f1*f4^2*h3^2*x3^2*y2*y3 - 4*f1*f4*f5^2*x2*x3*y3^2 - 4*f1*f4*f5^2*x3^2*y2*y3 +
    8*f1*f4*f5*f6*x3^2*y3^2 - 4*f1*f4*f5*h0*h2*x1*x3*y1*y3 + 4*f1*f4*f5*h0*h3*x1*x3*y2*y3 + 4*f1*f4*f5*h0*h3*x2*x3*y1*y3 - 4*f1*f4*f5*h2*h3*x2*x3*y3^2 -
    4*f1*f4*f5*h2*h3*x3^2*y2*y3 + 2*f1*f4*f5*h3^2*x3^2*y3^2 - 4*f1*f4*f6*h0^2*x1*x2*y1*y3 - 4*f1*f4*f6*h0^2*x1*x3*y1*y2 - 8*f1*f4*f6*h0*h1*x1^2*y3^2 -
    16*f1*f4*f6*h0*h1*x1*x3*y1*y3 - 4*f1*f4*f6*h0*h1*x2^2*y2^2 - 8*f1*f4*f6*h0*h1*x3^2*y1^2 - 4*f1*f4*f6*h0*h2*x1*x2*y3^2 - 8*f1*f4*f6*h0*h2*x1*x3*y2*y3 -
    4*f1*f4*f6*h0*h2*x2^2*y2*y3 - 8*f1*f4*f6*h0*h2*x2*x3*y1*y3 - 4*f1*f4*f6*h0*h2*x2*x3*y2^2 - 4*f1*f4*f6*h0*h2*x3^2*y1*y2 - 4*f1*f4*f6*h0*h3*x1*x3*y3^2 -
    4*f1*f4*f6*h0*h3*x2^2*y3^2 - 12*f1*f4*f6*h0*h3*x2*x3*y2*y3 - 4*f1*f4*f6*h0*h3*x3^2*y1*y3 - 4*f1*f4*f6*h0*h3*x3^2*y2^2 + 4*f1*f4*f6*h1*h2*x1*x3*y3^2 +
    4*f1*f4*f6*h1*h2*x2*x3*y2*y3 + 4*f1*f4*f6*h1*h2*x3^2*y1*y3 - 4*f1*f4*f6*h1*h3*x2*x3*y3^2 - 4*f1*f4*f6*h1*h3*x3^2*y2*y3 + 8*f1*f4*f6*h2^2*x2*x3*y3^2 +
    8*f1*f4*f6*h2^2*x3^2*y2*y3 + 4*f1*f4*f6*h2*h3*x3^2*y3^2 + 16*f1*f4*f6*x2*x3*y3*y4 + 8*f1*f4*f6*x2*x4*y3^2 + 8*f1*f4*f6*x3^2*y2*y4 +
    16*f1*f4*f6*x3*x4*y2*y3 - f1*f4*h0^3*h3*x1^2*y1^2 + 3*f1*f4*h0^2*h1*h2*x1^2*y1^2 + 2*f1*f4*h0^2*h1*h3*x1^2*y1*y2 + 2*f1*f4*h0^2*h1*h3*x1*x2*y1^2 -
    2*f1*f4*h0^2*h2*h3*x1^2*y1*y3 - 2*f1*f4*h0^2*h2*h3*x1*x2*y1*y2 - 2*f1*f4*h0^2*h2*h3*x1*x3*y1^2 - f1*f4*h0^2*h3^2*x1^2*y2*y3 -
    3*f1*f4*h0^2*h3^2*x1*x2*y1*y3 - f1*f4*h0^2*h3^2*x1*x2*y2^2 - 3*f1*f4*h0^2*h3^2*x1*x3*y1*y2 - f1*f4*h0^2*h3^2*x2^2*y1*y2 - f1*f4*h0^2*h3^2*x2*x3*y1^2 -
    f1*f4*h0*h1^3*x1^2*y1^2 + 2*f1*f4*h0*h1^2*h3*x1^2*y1*y3 + 2*f1*f4*h0*h1^2*h3*x1*x2*y1*y2 + 2*f1*f4*h0*h1^2*h3*x1*x3*y1^2 +
    2*f1*f4*h0*h1*h2*h3*x1*x2*y1*y3 + 2*f1*f4*h0*h1*h2*h3*x1*x3*y1*y2 - f1*f4*h0*h1*h3^2*x1^2*y3^2 - f1*f4*h0*h1*h3^2*x1*x2*y2*y3 -
    2*f1*f4*h0*h1*h3^2*x1*x3*y1*y3 + f1*f4*h0*h1*h3^2*x1*x3*y2^2 + f1*f4*h0*h1*h3^2*x2^2*y1*y3 - f1*f4*h0*h1*h3^2*x2^2*y2^2 - f1*f4*h0*h1*h3^2*x2*x3*y1*y2 -
    f1*f4*h0*h1*h3^2*x3^2*y1^2 - 4*f1*f4*h0*h1*x1^2*y1*y4 - 4*f1*f4*h0*h1*x1*x4*y1^2 + 2*f1*f4*h0*h2^2*h3*x1*x3*y1*y3 - f1*f4*h0*h2*h3^2*x1*x2*y3^2 -
    f1*f4*h0*h2*h3^2*x2^2*y2*y3 - f1*f4*h0*h2*h3^2*x2*x3*y2^2 - f1*f4*h0*h2*h3^2*x3^2*y1*y2 - f1*f4*h0*h3^3*x1*x3*y3^2 - f1*f4*h0*h3^3*x2^2*y3^2 -
    3*f1*f4*h0*h3^3*x2*x3*y2*y3 - f1*f4*h0*h3^3*x3^2*y1*y3 - f1*f4*h0*h3^3*x3^2*y2^2 + 2*f1*f4*h0*h3*x1*x2*y2*y4 + 4*f1*f4*h0*h3*x1*x3*y1*y4 +
    4*f1*f4*h0*h3*x1*x4*y1*y3 + 2*f1*f4*h0*h3*x2*x4*y1*y2 + f1*f4*h1^2*h3^2*x1*x3*y2*y3 + f1*f4*h1^2*h3^2*x2*x3*y1*y3 + f1*f4*h1*h2*h3^2*x1*x3*y3^2 +
    f1*f4*h1*h2*h3^2*x2*x3*y2*y3 + f1*f4*h1*h2*h3^2*x3^2*y1*y3 - f1*f4*h1*h3^3*x2*x3*y3^2 - f1*f4*h1*h3^3*x3^2*y2*y3 - 2*f1*f4*h1*h3*x1*x3*y2*y4 -
    2*f1*f4*h1*h3*x2*x4*y1*y3 + f1*f4*h2^2*h3^2*x2*x3*y3^2 + f1*f4*h2^2*h3^2*x3^2*y2*y3 + f1*f4*h2*h3^3*x3^2*y3^2 + 4*f1*f4*h3^2*x2*x3*y3*y4 +
    2*f1*f4*h3^2*x2*x4*y3^2 + 2*f1*f4*h3^2*x3^2*y2*y4 + 4*f1*f4*h3^2*x3*x4*y2*y3 - 2*f1*f5^3*x3^2*y3^2 + 2*f1*f5^2*h0^2*x1*x2*y1*y3 +
    2*f1*f5^2*h0^2*x1*x3*y1*y2 + 2*f1*f5^2*h0*h1*x1^2*y3^2 + 8*f1*f5^2*h0*h1*x1*x3*y1*y3 + f1*f5^2*h0*h1*x2^2*y2^2 + 2*f1*f5^2*h0*h1*x3^2*y1^2 +
    f1*f5^2*h0*h2*x1*x2*y3^2 + f1*f5^2*h0*h2*x2^2*y2*y3 + f1*f5^2*h0*h2*x2*x3*y2^2 + f1*f5^2*h0*h2*x3^2*y1*y2 + 3*f1*f5^2*h0*h3*x1*x3*y3^2 +
    f1*f5^2*h0*h3*x2^2*y3^2 + 5*f1*f5^2*h0*h3*x2*x3*y2*y3 + 3*f1*f5^2*h0*h3*x3^2*y1*y3 + f1*f5^2*h0*h3*x3^2*y2^2 - f1*f5^2*h1*h2*x1*x3*y3^2 -
    f1*f5^2*h1*h2*x2*x3*y2*y3 - f1*f5^2*h1*h2*x3^2*y1*y3 + 3*f1*f5^2*h1*h3*x2*x3*y3^2 + 3*f1*f5^2*h1*h3*x3^2*y2*y3 - f1*f5^2*h2^2*x2*x3*y3^2 -
    f1*f5^2*h2^2*x3^2*y2*y3 - 3*f1*f5^2*h2*h3*x3^2*y3^2 - 4*f1*f5^2*x2*x3*y3*y4 - 2*f1*f5^2*x2*x4*y3^2 - 2*f1*f5^2*x3^2*y2*y4 - 4*f1*f5^2*x3*x4*y2*y3 +
    2*f1*f5*f6*h0^2*x1*x2*y2*y3 + 2*f1*f5*f6*h0^2*x1*x3*y2^2 + 2*f1*f5*f6*h0^2*x2^2*y1*y3 + 2*f1*f5*f6*h0^2*x2*x3*y1*y2 + 8*f1*f5*f6*h0*h1*x1*x3*y2*y3 +
    8*f1*f5*f6*h0*h1*x2*x3*y1*y3 - 4*f1*f5*f6*h0*h2*x1*x3*y3^2 - 4*f1*f5*f6*h0*h2*x2*x3*y2*y3 - 4*f1*f5*f6*h0*h2*x3^2*y1*y3 - 4*f1*f5*f6*h1*h2*x2*x3*y3^2 -
    4*f1*f5*f6*h1*h2*x3^2*y2*y3 + 4*f1*f5*f6*h1*h3*x3^2*y3^2 + 2*f1*f5*f6*h2^2*x3^2*y3^2 + f1*f5*h0^3*h2*x1^2*y1^2 - f1*f5*h0^2*h1^2*x1^2*y1^2 +
    2*f1*f5*h0^2*h1*h2*x1^2*y1*y2 + 2*f1*f5*h0^2*h1*h2*x1*x2*y1^2 + 2*f1*f5*h0^2*h1*h3*x1^2*y1*y3 + f1*f5*h0^2*h1*h3*x1^2*y2^2 +
    4*f1*f5*h0^2*h1*h3*x1*x2*y1*y2 + 2*f1*f5*h0^2*h1*h3*x1*x3*y1^2 + f1*f5*h0^2*h1*h3*x2^2*y1^2 + f1*f5*h0^2*h2^2*x1^2*y1*y3 + f1*f5*h0^2*h2^2*x1*x2*y1*y2 +
    f1*f5*h0^2*h2^2*x1*x3*y1^2 + 2*f1*f5*h0^2*h2*h3*x1*x2*y1*y3 + 2*f1*f5*h0^2*h2*h3*x1*x3*y1*y2 - f1*f5*h0^2*h3^2*x1^2*y3^2 - 2*f1*f5*h0^2*h3^2*x1*x2*y2*y3
    - 2*f1*f5*h0^2*h3^2*x1*x3*y1*y3 - f1*f5*h0^2*h3^2*x2^2*y2^2 - 2*f1*f5*h0^2*h3^2*x2*x3*y1*y2 - f1*f5*h0^2*h3^2*x3^2*y1^2 - f1*f5*h0*h1^3*x1^2*y1*y2 -
    f1*f5*h0*h1^3*x1*x2*y1^2 - f1*f5*h0*h1^2*h2*x1^2*y1*y3 - f1*f5*h0*h1^2*h2*x1*x2*y1*y2 - f1*f5*h0*h1^2*h2*x1*x3*y1^2 + f1*f5*h0*h1^2*h3*x1^2*y2*y3 +
    f1*f5*h0*h1^2*h3*x1*x2*y1*y3 + f1*f5*h0*h1^2*h3*x1*x2*y2^2 + f1*f5*h0*h1^2*h3*x1*x3*y1*y2 + f1*f5*h0*h1^2*h3*x2^2*y1*y2 + f1*f5*h0*h1^2*h3*x2*x3*y1^2 -
    f1*f5*h0*h1*h2^2*x1*x2*y1*y3 - f1*f5*h0*h1*h2^2*x1*x3*y1*y2 + f1*f5*h0*h1*h2*h3*x1^2*y3^2 + 2*f1*f5*h0*h1*h2*h3*x1*x2*y2*y3 +
    4*f1*f5*h0*h1*h2*h3*x1*x3*y1*y3 + f1*f5*h0*h1*h2*h3*x2^2*y2^2 + 2*f1*f5*h0*h1*h2*h3*x2*x3*y1*y2 + f1*f5*h0*h1*h2*h3*x3^2*y1^2 +
    2*f1*f5*h0*h1*h3^2*x1*x3*y2*y3 + 2*f1*f5*h0*h1*h3^2*x2*x3*y1*y3 - 2*f1*f5*h0*h1*x1^2*y2*y4 - 4*f1*f5*h0*h1*x1*x2*y1*y4 - 4*f1*f5*h0*h1*x1*x4*y1*y2 -
    2*f1*f5*h0*h1*x2*x4*y1^2 - f1*f5*h0*h2^3*x1*x3*y1*y3 + f1*f5*h0*h2^2*h3*x1*x2*y3^2 + f1*f5*h0*h2^2*h3*x1*x3*y2*y3 + f1*f5*h0*h2^2*h3*x2^2*y2*y3 +
    f1*f5*h0*h2^2*h3*x2*x3*y1*y3 + f1*f5*h0*h2^2*h3*x2*x3*y2^2 + f1*f5*h0*h2^2*h3*x3^2*y1*y2 + 2*f1*f5*h0*h2*h3^2*x1*x3*y3^2 + f1*f5*h0*h2*h3^2*x2^2*y3^2 +
    4*f1*f5*h0*h2*h3^2*x2*x3*y2*y3 + 2*f1*f5*h0*h2*h3^2*x3^2*y1*y3 + f1*f5*h0*h2*h3^2*x3^2*y2^2 - f1*f5*h0*h2*x1*x2*y2*y4 - 2*f1*f5*h0*h2*x1*x3*y1*y4 -
    2*f1*f5*h0*h2*x1*x4*y1*y3 - f1*f5*h0*h2*x2*x4*y1*y2 + 2*f1*f5*h0*h3*x1*x2*y3*y4 + f1*f5*h0*h3*x1*x3*y2*y4 + 2*f1*f5*h0*h3*x1*x4*y2*y3 +
    f1*f5*h0*h3*x2^2*y2*y4 + 2*f1*f5*h0*h3*x2*x3*y1*y4 + f1*f5*h0*h3*x2*x4*y1*y3 + f1*f5*h0*h3*x2*x4*y2^2 + 2*f1*f5*h0*h3*x3*x4*y1*y2 -
    f1*f5*h1^3*h3*x1*x3*y1*y3 - f1*f5*h1^2*h2*h3*x1*x3*y2*y3 - f1*f5*h1^2*h2*h3*x2*x3*y1*y3 + f1*f5*h1^2*h3^2*x1*x3*y3^2 + f1*f5*h1^2*h3^2*x2*x3*y2*y3 +
    f1*f5*h1^2*h3^2*x3^2*y1*y3 - f1*f5*h1*h2^2*h3*x1*x3*y3^2 - f1*f5*h1*h2^2*h3*x2*x3*y2*y3 - f1*f5*h1*h2^2*h3*x3^2*y1*y3 + 2*f1*f5*h1*h2*h3^2*x2*x3*y3^2 +
    2*f1*f5*h1*h2*h3^2*x3^2*y2*y3 + f1*f5*h1*h2*x1*x3*y2*y4 + f1*f5*h1*h2*x2*x4*y1*y3 + f1*f5*h1*h3^3*x3^2*y3^2 - 2*f1*f5*h1*h3*x1*x3*y3*y4 -
    f1*f5*h1*h3*x2*x3*y2*y4 - f1*f5*h1*h3*x2*x4*y2*y3 - 2*f1*f5*h1*h3*x3*x4*y1*y3 - f1*f5*h2^3*h3*x2*x3*y3^2 - f1*f5*h2^3*h3*x3^2*y2*y3 -
    f1*f5*h2^2*h3^2*x3^2*y3^2 - 4*f1*f5*h2*h3*x2*x3*y3*y4 - 2*f1*f5*h2*h3*x2*x4*y3^2 - 2*f1*f5*h2*h3*x3^2*y2*y4 - 4*f1*f5*h2*h3*x3*x4*y2*y3 +
    4*f1*f6^2*h0^2*x1*x2*y3^2 + 4*f1*f6^2*h0^2*x1*x3*y2*y3 + 4*f1*f6^2*h0^2*x2^2*y2*y3 + 4*f1*f6^2*h0^2*x2*x3*y1*y3 + 4*f1*f6^2*h0^2*x2*x3*y2^2 +
    4*f1*f6^2*h0^2*x3^2*y1*y2 + 16*f1*f6^2*h0*h1*x1*x3*y3^2 + 16*f1*f6^2*h0*h1*x2*x3*y2*y3 + 16*f1*f6^2*h0*h1*x3^2*y1*y3 + 4*f1*f6^2*h1^2*x2*x3*y3^2 +
    4*f1*f6^2*h1^2*x3^2*y2*y3 - 8*f1*f6^2*h1*h2*x3^2*y3^2 - f1*f6*h0^3*h1*x1^2*y1^2 + f1*f6*h0^3*h2*x1^2*y1*y2 + f1*f6*h0^3*h2*x1*x2*y1^2 +
    f1*f6*h0^3*h3*x1^2*y1*y3 + f1*f6*h0^3*h3*x1*x2*y1*y2 + f1*f6*h0^3*h3*x1*x3*y1^2 - 2*f1*f6*h0^2*h1^2*x1^2*y1*y2 - 2*f1*f6*h0^2*h1^2*x1*x2*y1^2 -
    f1*f6*h0^2*h1*h2*x1^2*y1*y3 + f1*f6*h0^2*h1*h2*x1^2*y2^2 + f1*f6*h0^2*h1*h2*x1*x2*y1*y2 - f1*f6*h0^2*h1*h2*x1*x3*y1^2 + f1*f6*h0^2*h1*h2*x2^2*y1^2 +
    3*f1*f6*h0^2*h1*h3*x1^2*y2*y3 + 2*f1*f6*h0^2*h1*h3*x1*x2*y1*y3 + 3*f1*f6*h0^2*h1*h3*x1*x2*y2^2 + 2*f1*f6*h0^2*h1*h3*x1*x3*y1*y2 +
    3*f1*f6*h0^2*h1*h3*x2^2*y1*y2 + 3*f1*f6*h0^2*h1*h3*x2*x3*y1^2 + f1*f6*h0^2*h2^2*x1^2*y2*y3 + f1*f6*h0^2*h2^2*x1*x2*y2^2 + f1*f6*h0^2*h2^2*x2^2*y1*y2 +
    f1*f6*h0^2*h2^2*x2*x3*y1^2 + 2*f1*f6*h0^2*h2*h3*x1^2*y3^2 + 5*f1*f6*h0^2*h2*h3*x1*x2*y2*y3 + 4*f1*f6*h0^2*h2*h3*x1*x3*y1*y3 + f1*f6*h0^2*h2*h3*x1*x3*y2^2
    + f1*f6*h0^2*h2*h3*x2^2*y1*y3 + 2*f1*f6*h0^2*h2*h3*x2^2*y2^2 + 5*f1*f6*h0^2*h2*h3*x2*x3*y1*y2 + 2*f1*f6*h0^2*h2*h3*x3^2*y1^2 + f1*f6*h0^2*h3^2*x1*x2*y3^2
    + f1*f6*h0^2*h3^2*x1*x3*y2*y3 + f1*f6*h0^2*h3^2*x2^2*y2*y3 + f1*f6*h0^2*h3^2*x2*x3*y1*y3 + f1*f6*h0^2*h3^2*x2*x3*y2^2 + f1*f6*h0^2*h3^2*x3^2*y1*y2 -
    f1*f6*h0*h1^3*x1^2*y2^2 - 2*f1*f6*h0*h1^3*x1*x2*y1*y2 - f1*f6*h0*h1^3*x2^2*y1^2 - 2*f1*f6*h0*h1^2*h2*x1^2*y2*y3 - f1*f6*h0*h1^2*h2*x1*x2*y1*y3 -
    2*f1*f6*h0*h1^2*h2*x1*x2*y2^2 - f1*f6*h0*h1^2*h2*x1*x3*y1*y2 - 2*f1*f6*h0*h1^2*h2*x2^2*y1*y2 - 2*f1*f6*h0*h1^2*h2*x2*x3*y1^2 +
    f1*f6*h0*h1^2*h3*x1*x2*y2*y3 - 3*f1*f6*h0*h1^2*h3*x1*x3*y1*y3 + f1*f6*h0*h1^2*h3*x1*x3*y2^2 + f1*f6*h0*h1^2*h3*x2^2*y1*y3 + f1*f6*h0*h1^2*h3*x2*x3*y1*y2
    - f1*f6*h0*h1*h2^2*x1^2*y3^2 - 3*f1*f6*h0*h1*h2^2*x1*x2*y2*y3 - 2*f1*f6*h0*h1*h2^2*x1*x3*y1*y3 - f1*f6*h0*h1*h2^2*x1*x3*y2^2 -
    f1*f6*h0*h1*h2^2*x2^2*y1*y3 - f1*f6*h0*h1*h2^2*x2^2*y2^2 - 3*f1*f6*h0*h1*h2^2*x2*x3*y1*y2 - f1*f6*h0*h1*h2^2*x3^2*y1^2 + 4*f1*f6*h0*h1*h3^2*x1*x3*y3^2 +
    4*f1*f6*h0*h1*h3^2*x2*x3*y2*y3 + 4*f1*f6*h0*h1*h3^2*x3^2*y1*y3 - 4*f1*f6*h0*h1*x1^2*y3*y4 - 4*f1*f6*h0*h1*x1*x2*y2*y4 - 4*f1*f6*h0*h1*x1*x4*y2^2 -
    4*f1*f6*h0*h1*x2^2*y1*y4 - 4*f1*f6*h0*h1*x2*x4*y1*y2 - 4*f1*f6*h0*h1*x3*x4*y1^2 - f1*f6*h0*h2^3*x1*x2*y3^2 - 2*f1*f6*h0*h2^3*x1*x3*y2*y3 -
    f1*f6*h0*h2^3*x2^2*y2*y3 - 2*f1*f6*h0*h2^3*x2*x3*y1*y3 - f1*f6*h0*h2^3*x2*x3*y2^2 - f1*f6*h0*h2^3*x3^2*y1*y2 - 3*f1*f6*h0*h2^2*h3*x1*x3*y3^2 -
    f1*f6*h0*h2^2*h3*x2^2*y3^2 - 5*f1*f6*h0*h2^2*h3*x2*x3*y2*y3 - 3*f1*f6*h0*h2^2*h3*x3^2*y1*y3 - f1*f6*h0*h2^2*h3*x3^2*y2^2 - 4*f1*f6*h0*h2*x1*x2*y3*y4 -
    2*f1*f6*h0*h2*x1*x3*y2*y4 - 4*f1*f6*h0*h2*x1*x4*y2*y3 - 2*f1*f6*h0*h2*x2^2*y2*y4 - 4*f1*f6*h0*h2*x2*x3*y1*y4 - 2*f1*f6*h0*h2*x2*x4*y1*y3 -
    2*f1*f6*h0*h2*x2*x4*y2^2 - 4*f1*f6*h0*h2*x3*x4*y1*y2 + f1*f6*h1^3*h2*x1*x3*y1*y3 - f1*f6*h1^3*h3*x1*x3*y2*y3 - f1*f6*h1^3*h3*x2*x3*y1*y3 +
    f1*f6*h1^2*h2^2*x1*x3*y2*y3 + f1*f6*h1^2*h2^2*x2*x3*y1*y3 - 2*f1*f6*h1^2*h2*h3*x1*x3*y3^2 - 2*f1*f6*h1^2*h2*h3*x2*x3*y2*y3 -
    2*f1*f6*h1^2*h2*h3*x3^2*y1*y3 + f1*f6*h1^2*h3^2*x2*x3*y3^2 + f1*f6*h1^2*h3^2*x3^2*y2*y3 + f1*f6*h1*h2^3*x1*x3*y3^2 + f1*f6*h1*h2^3*x2*x3*y2*y3 +
    f1*f6*h1*h2^3*x3^2*y1*y3 - 3*f1*f6*h1*h2^2*h3*x2*x3*y3^2 - 3*f1*f6*h1*h2^2*h3*x3^2*y2*y3 - 2*f1*f6*h1*h2*h3^2*x3^2*y3^2 + 4*f1*f6*h1*h2*x1*x3*y3*y4 +
    2*f1*f6*h1*h2*x2*x3*y2*y4 + 2*f1*f6*h1*h2*x2*x4*y2*y3 + 4*f1*f6*h1*h2*x3*x4*y1*y3 + f1*f6*h2^4*x2*x3*y3^2 + f1*f6*h2^4*x3^2*y2*y3 +
    f1*f6*h2^3*h3*x3^2*y3^2 + 4*f1*f6*h2^2*x2*x3*y3*y4 + 2*f1*f6*h2^2*x2*x4*y3^2 + 2*f1*f6*h2^2*x3^2*y2*y4 + 4*f1*f6*h2^2*x3*x4*y2*y3 + 4*f1*f6*x2*x4*y3*y4 +
    4*f1*f6*x3*x4*y2*y4 + f1*h0*h3*x1*x4*y1*y4 - f1*h1*h2*x1*x4*y1*y4 - f1*h1*h3*x1*x4*y2*y4 - f1*h1*h3*x2*x4*y1*y4 + f1*h3^2*x2*x4*y3*y4 +
    f1*h3^2*x3*x4*y2*y4 + 4*f2^2*f4*h0^2*x1^2*y1^2 + 4*f2^2*f5*h0^2*x1^2*y1*y2 + 4*f2^2*f5*h0^2*x1*x2*y1^2 + 8*f2^2*f5*h0*h3*x1*x3*y1*y3 +
    16*f2^2*f6^2*x3^2*y3^2 + 4*f2^2*f6*h0^2*x1^2*y2^2 + 8*f2^2*f6*h0^2*x1*x2*y1*y2 + 4*f2^2*f6*h0^2*x2^2*y1^2 - 8*f2^2*f6*h0*h2*x1*x3*y1*y3 +
    8*f2^2*f6*h0*h3*x1*x3*y2*y3 + 8*f2^2*f6*h0*h3*x2*x3*y1*y3 + 8*f2^2*f6*h3^2*x3^2*y3^2 + f2^2*h0^2*h2^2*x1^2*y1^2 + 2*f2^2*h0^2*h2*h3*x1^2*y1*y2 +
    2*f2^2*h0^2*h2*h3*x1*x2*y1^2 + f2^2*h0^2*h3^2*x1^2*y2^2 + 2*f2^2*h0^2*h3^2*x1*x2*y1*y2 + f2^2*h0^2*h3^2*x2^2*y1^2 + 2*f2^2*h0*h2*h3^2*x1*x3*y1*y3 +
    2*f2^2*h0*h3^3*x1*x3*y2*y3 + 2*f2^2*h0*h3^3*x2*x3*y1*y3 + f2^2*h3^4*x3^2*y3^2 - f2*f3^2*h0^2*x1^2*y1^2 - 4*f2*f3*f4*h0*h3*x1*x3*y1*y3 -
    8*f2*f3*f5*f6*x3^2*y3^2 + 2*f2*f3*f5*h0^2*x1^2*y1*y3 + 2*f2*f3*f5*h0^2*x1*x2*y1*y2 + 2*f2*f3*f5*h0^2*x1*x3*y1^2 - 2*f2*f3*f5*h3^2*x3^2*y3^2 +
    4*f2*f3*f6*h0^2*x1^2*y2*y3 + 4*f2*f3*f6*h0^2*x1*x2*y1*y3 + 4*f2*f3*f6*h0^2*x1*x2*y2^2 + 4*f2*f3*f6*h0^2*x1*x3*y1*y2 + 4*f2*f3*f6*h0^2*x2^2*y1*y2 +
    4*f2*f3*f6*h0^2*x2*x3*y1^2 + 4*f2*f3*f6*h0*h1*x1*x3*y1*y3 - 4*f2*f3*f6*h0*h2*x1*x3*y2*y3 - 4*f2*f3*f6*h0*h2*x2*x3*y1*y3 + 4*f2*f3*f6*h0*h3*x1*x3*y3^2 +
    4*f2*f3*f6*h0*h3*x2*x3*y2*y3 + 4*f2*f3*f6*h0*h3*x3^2*y1*y3 - 4*f2*f3*f6*h2*h3*x3^2*y3^2 - f2*f3*h0^2*h1*h2*x1^2*y1^2 - f2*f3*h0^2*h1*h3*x1^2*y1*y2 -
    f2*f3*h0^2*h1*h3*x1*x2*y1^2 + f2*f3*h0^2*h2*h3*x1^2*y1*y3 + f2*f3*h0^2*h2*h3*x1*x2*y1*y2 + f2*f3*h0^2*h2*h3*x1*x3*y1^2 + f2*f3*h0^2*h3^2*x1^2*y2*y3 +
    f2*f3*h0^2*h3^2*x1*x2*y1*y3 + f2*f3*h0^2*h3^2*x1*x2*y2^2 + f2*f3*h0^2*h3^2*x1*x3*y1*y2 + f2*f3*h0^2*h3^2*x2^2*y1*y2 + f2*f3*h0^2*h3^2*x2*x3*y1^2 -
    f2*f3*h0*h1*h3^2*x1*x3*y1*y3 - f2*f3*h0*h2^2*h3*x1*x3*y1*y3 - f2*f3*h0*h2*h3^2*x1*x3*y2*y3 - f2*f3*h0*h2*h3^2*x2*x3*y1*y3 + f2*f3*h0*h3^3*x1*x3*y3^2 +
    f2*f3*h0*h3^3*x2*x3*y2*y3 + f2*f3*h0*h3^3*x3^2*y1*y3 - f2*f3*h2*h3^3*x3^2*y3^2 + 16*f2*f4^2*f6*x3^2*y3^2 + 4*f2*f4^2*h3^2*x3^2*y3^2 -
    4*f2*f4*f5^2*x3^2*y3^2 - 4*f2*f4*f5*h2*h3*x3^2*y3^2 + 8*f2*f4*f6*h0^2*x1^2*y3^2 + 8*f2*f4*f6*h0^2*x1*x3*y1*y3 + 4*f2*f4*f6*h0^2*x2^2*y2^2 +
    8*f2*f4*f6*h0^2*x3^2*y1^2 - 8*f2*f4*f6*h0*h2*x1*x3*y3^2 - 8*f2*f4*f6*h0*h2*x2*x3*y2*y3 - 8*f2*f4*f6*h0*h2*x3^2*y1*y3 - 8*f2*f4*f6*h0*h3*x2*x3*y3^2 -
    8*f2*f4*f6*h0*h3*x3^2*y2*y3 - 8*f2*f4*f6*h1*h3*x3^2*y3^2 + 8*f2*f4*f6*h2^2*x3^2*y3^2 + 16*f2*f4*f6*x3^2*y3*y4 + 16*f2*f4*f6*x3*x4*y3^2 -
    2*f2*f4*h0^3*h2*x1^2*y1^2 - 2*f2*f4*h0^3*h3*x1^2*y1*y2 - 2*f2*f4*h0^3*h3*x1*x2*y1^2 + f2*f4*h0^2*h1^2*x1^2*y1^2 - 2*f2*f4*h0^2*h1*h3*x1^2*y1*y3 -
    2*f2*f4*h0^2*h1*h3*x1*x2*y1*y2 - 2*f2*f4*h0^2*h1*h3*x1*x3*y1^2 - 2*f2*f4*h0^2*h2*h3*x1*x2*y1*y3 - 2*f2*f4*h0^2*h2*h3*x1*x3*y1*y2 +
    f2*f4*h0^2*h3^2*x1^2*y3^2 - 2*f2*f4*h0^2*h3^2*x1*x3*y2^2 - 2*f2*f4*h0^2*h3^2*x2^2*y1*y3 + f2*f4*h0^2*h3^2*x2^2*y2^2 + f2*f4*h0^2*h3^2*x3^2*y1^2 +
    4*f2*f4*h0^2*x1^2*y1*y4 + 4*f2*f4*h0^2*x1*x4*y1^2 - 2*f2*f4*h0*h1*h3^2*x1*x3*y2*y3 - 2*f2*f4*h0*h1*h3^2*x2*x3*y1*y3 - 2*f2*f4*h0*h2*h3^2*x1*x3*y3^2 -
    2*f2*f4*h0*h2*h3^2*x2*x3*y2*y3 - 2*f2*f4*h0*h2*h3^2*x3^2*y1*y3 - 2*f2*f4*h0*h3^3*x2*x3*y3^2 - 2*f2*f4*h0*h3^3*x3^2*y2*y3 + 4*f2*f4*h0*h3*x1*x3*y2*y4 +
    4*f2*f4*h0*h3*x2*x4*y1*y3 - 2*f2*f4*h1*h3^3*x3^2*y3^2 + f2*f4*h2^2*h3^2*x3^2*y3^2 + 4*f2*f4*h3^2*x3^2*y3*y4 + 4*f2*f4*h3^2*x3*x4*y3^2 -
    2*f2*f5^2*h0^2*x1^2*y3^2 - 4*f2*f5^2*h0^2*x1*x3*y1*y3 - f2*f5^2*h0^2*x2^2*y2^2 - 2*f2*f5^2*h0^2*x3^2*y1^2 + 2*f2*f5^2*h0*h2*x1*x3*y3^2 +
    2*f2*f5^2*h0*h2*x2*x3*y2*y3 + 2*f2*f5^2*h0*h2*x3^2*y1*y3 + 2*f2*f5^2*h0*h3*x2*x3*y3^2 + 2*f2*f5^2*h0*h3*x3^2*y2*y3 + 4*f2*f5^2*h1*h3*x3^2*y3^2 -
    f2*f5^2*h2^2*x3^2*y3^2 - 4*f2*f5^2*x3^2*y3*y4 - 4*f2*f5^2*x3*x4*y3^2 - 4*f2*f5*f6*h0^2*x1*x3*y2*y3 - 4*f2*f5*f6*h0^2*x2*x3*y1*y3 -
    4*f2*f5*f6*h0*h3*x3^2*y3^2 - 4*f2*f5*f6*h1*h2*x3^2*y3^2 + f2*f5*h0^3*h1*x1^2*y1^2 - f2*f5*h0^3*h2*x1^2*y1*y2 - f2*f5*h0^3*h2*x1*x2*y1^2 -
    f2*f5*h0^3*h3*x1^2*y1*y3 - f2*f5*h0^3*h3*x1^2*y2^2 - 3*f2*f5*h0^3*h3*x1*x2*y1*y2 - f2*f5*h0^3*h3*x1*x3*y1^2 - f2*f5*h0^3*h3*x2^2*y1^2 +
    f2*f5*h0^2*h1^2*x1^2*y1*y2 + f2*f5*h0^2*h1^2*x1*x2*y1^2 + f2*f5*h0^2*h1*h2*x1^2*y1*y3 + f2*f5*h0^2*h1*h2*x1*x2*y1*y2 + f2*f5*h0^2*h1*h2*x1*x3*y1^2 -
    f2*f5*h0^2*h1*h3*x1^2*y2*y3 - f2*f5*h0^2*h1*h3*x1*x2*y2^2 - f2*f5*h0^2*h1*h3*x2^2*y1*y2 - f2*f5*h0^2*h1*h3*x2*x3*y1^2 + f2*f5*h0^2*h2^2*x1*x2*y1*y3 +
    f2*f5*h0^2*h2^2*x1*x3*y1*y2 - f2*f5*h0^2*h2*h3*x1^2*y3^2 - f2*f5*h0^2*h2*h3*x1*x2*y2*y3 - 2*f2*f5*h0^2*h2*h3*x1*x3*y1*y3 + f2*f5*h0^2*h2*h3*x1*x3*y2^2 +
    f2*f5*h0^2*h2*h3*x2^2*y1*y3 - f2*f5*h0^2*h2*h3*x2^2*y2^2 - f2*f5*h0^2*h2*h3*x2*x3*y1*y2 - f2*f5*h0^2*h2*h3*x3^2*y1^2 - f2*f5*h0^2*h3^2*x1*x2*y3^2 -
    3*f2*f5*h0^2*h3^2*x1*x3*y2*y3 - f2*f5*h0^2*h3^2*x2^2*y2*y3 - 3*f2*f5*h0^2*h3^2*x2*x3*y1*y3 - f2*f5*h0^2*h3^2*x2*x3*y2^2 - f2*f5*h0^2*h3^2*x3^2*y1*y2 +
    2*f2*f5*h0^2*x1^2*y2*y4 + 4*f2*f5*h0^2*x1*x2*y1*y4 + 4*f2*f5*h0^2*x1*x4*y1*y2 + 2*f2*f5*h0^2*x2*x4*y1^2 + 2*f2*f5*h0*h1^2*h3*x1*x3*y1*y3 +
    2*f2*f5*h0*h1*h2*h3*x1*x3*y2*y3 + 2*f2*f5*h0*h1*h2*h3*x2*x3*y1*y3 - 2*f2*f5*h0*h1*h3^2*x1*x3*y3^2 - 2*f2*f5*h0*h1*h3^2*x2*x3*y2*y3 -
    2*f2*f5*h0*h1*h3^2*x3^2*y1*y3 + 2*f2*f5*h0*h2^2*h3*x1*x3*y3^2 + 2*f2*f5*h0*h2^2*h3*x2*x3*y2*y3 + 2*f2*f5*h0*h2^2*h3*x3^2*y1*y3 +
    2*f2*f5*h0*h2*h3^2*x2*x3*y3^2 + 2*f2*f5*h0*h2*h3^2*x3^2*y2*y3 - 2*f2*f5*h0*h2*x1*x3*y2*y4 - 2*f2*f5*h0*h2*x2*x4*y1*y3 - f2*f5*h0*h3^3*x3^2*y3^2 +
    4*f2*f5*h0*h3*x1*x3*y3*y4 + 2*f2*f5*h0*h3*x2*x3*y2*y4 + 2*f2*f5*h0*h3*x2*x4*y2*y3 + 4*f2*f5*h0*h3*x3*x4*y1*y3 + 3*f2*f5*h1*h2*h3^2*x3^2*y3^2 -
    f2*f5*h2^3*h3*x3^2*y3^2 - 4*f2*f5*h2*h3*x3^2*y3*y4 - 4*f2*f5*h2*h3*x3*x4*y3^2 - 8*f2*f6^2*h0^2*x1*x3*y3^2 + 4*f2*f6^2*h0^2*x2^2*y3^2 -
    8*f2*f6^2*h0^2*x3^2*y1*y3 + 4*f2*f6^2*h0^2*x3^2*y2^2 + 8*f2*f6^2*h0*h1*x2*x3*y3^2 + 8*f2*f6^2*h0*h1*x3^2*y2*y3 + 8*f2*f6^2*h0*h2*x3^2*y3^2 +
    8*f2*f6^2*h1^2*x3^2*y3^2 + f2*f6*h0^4*x1^2*y1^2 + 2*f2*f6*h0^3*h1*x1^2*y1*y2 + 2*f2*f6*h0^3*h1*x1*x2*y1^2 - 2*f2*f6*h0^3*h3*x1^2*y2*y3 -
    2*f2*f6*h0^3*h3*x1*x2*y2^2 - 2*f2*f6*h0^3*h3*x2^2*y1*y2 - 2*f2*f6*h0^3*h3*x2*x3*y1^2 + f2*f6*h0^2*h1^2*x1^2*y2^2 + 2*f2*f6*h0^2*h1^2*x1*x2*y1*y2 +
    f2*f6*h0^2*h1^2*x2^2*y1^2 + 2*f2*f6*h0^2*h1*h2*x1^2*y2*y3 + 2*f2*f6*h0^2*h1*h2*x1*x2*y2^2 + 2*f2*f6*h0^2*h1*h2*x2^2*y1*y2 + 2*f2*f6*h0^2*h1*h2*x2*x3*y1^2
    + 4*f2*f6*h0^2*h1*h3*x1*x3*y1*y3 + f2*f6*h0^2*h2^2*x1^2*y3^2 + 2*f2*f6*h0^2*h2^2*x1*x2*y2*y3 + 2*f2*f6*h0^2*h2^2*x1*x3*y1*y3 + f2*f6*h0^2*h2^2*x2^2*y2^2
    + 2*f2*f6*h0^2*h2^2*x2*x3*y1*y2 + f2*f6*h0^2*h2^2*x3^2*y1^2 + 2*f2*f6*h0^2*h2*h3*x1*x2*y3^2 + 4*f2*f6*h0^2*h2*h3*x1*x3*y2*y3 +
    2*f2*f6*h0^2*h2*h3*x2^2*y2*y3 + 4*f2*f6*h0^2*h2*h3*x2*x3*y1*y3 + 2*f2*f6*h0^2*h2*h3*x2*x3*y2^2 + 2*f2*f6*h0^2*h2*h3*x3^2*y1*y2 -
    2*f2*f6*h0^2*h3^2*x1*x3*y3^2 + f2*f6*h0^2*h3^2*x2^2*y3^2 - 2*f2*f6*h0^2*h3^2*x3^2*y1*y3 + f2*f6*h0^2*h3^2*x3^2*y2^2 + 4*f2*f6*h0^2*x1^2*y3*y4 +
    4*f2*f6*h0^2*x1*x2*y2*y4 + 4*f2*f6*h0^2*x1*x4*y2^2 + 4*f2*f6*h0^2*x2^2*y1*y4 + 4*f2*f6*h0^2*x2*x4*y1*y2 + 4*f2*f6*h0^2*x3*x4*y1^2 -
    2*f2*f6*h0*h1^2*h2*x1*x3*y1*y3 + 2*f2*f6*h0*h1^2*h3*x1*x3*y2*y3 + 2*f2*f6*h0*h1^2*h3*x2*x3*y1*y3 - 2*f2*f6*h0*h1*h2^2*x1*x3*y2*y3 -
    2*f2*f6*h0*h1*h2^2*x2*x3*y1*y3 + 4*f2*f6*h0*h1*h2*h3*x1*x3*y3^2 + 4*f2*f6*h0*h1*h2*h3*x2*x3*y2*y3 + 4*f2*f6*h0*h1*h2*h3*x3^2*y1*y3 +
    2*f2*f6*h0*h1*h3^2*x2*x3*y3^2 + 2*f2*f6*h0*h1*h3^2*x3^2*y2*y3 - 2*f2*f6*h0*h2^3*x1*x3*y3^2 - 2*f2*f6*h0*h2^3*x2*x3*y2*y3 - 2*f2*f6*h0*h2^3*x3^2*y1*y3 -
    2*f2*f6*h0*h2^2*h3*x2*x3*y3^2 - 2*f2*f6*h0*h2^2*h3*x3^2*y2*y3 + 2*f2*f6*h0*h2*h3^2*x3^2*y3^2 - 8*f2*f6*h0*h2*x1*x3*y3*y4 - 4*f2*f6*h0*h2*x2*x3*y2*y4 -
    4*f2*f6*h0*h2*x2*x4*y2*y3 - 8*f2*f6*h0*h2*x3*x4*y1*y3 + 2*f2*f6*h1^2*h3^2*x3^2*y3^2 - 4*f2*f6*h1*h2^2*h3*x3^2*y3^2 + f2*f6*h2^4*x3^2*y3^2 +
    4*f2*f6*h2^2*x3^2*y3*y4 + 4*f2*f6*h2^2*x3*x4*y3^2 + 8*f2*f6*x3*x4*y3*y4 + 2*f2*h0*h2*x1*x4*y1*y4 + 2*f2*h0*h3*x1*x4*y2*y4 + 2*f2*h0*h3*x2*x4*y1*y4 +
    2*f2*h3^2*x3*x4*y3*y4 + f3^3*h0*h3*x1*x3*y1*y3 - 4*f3^2*f4*f6*x3^2*y3^2 - f3^2*f4*h3^2*x3^2*y3^2 + f3^2*f5^2*x3^2*y3^2 + f3^2*f5*h0^2*x1*x2*y1*y3 +
    f3^2*f5*h0^2*x1*x3*y1*y2 + f3^2*f5*h2*h3*x3^2*y3^2 - f3^2*f6*h0^2*x1^2*y3^2 + 4*f3^2*f6*h0^2*x1*x2*y2*y3 - 2*f3^2*f6*h0^2*x1*x3*y1*y3 +
    2*f3^2*f6*h0^2*x1*x3*y2^2 + 2*f3^2*f6*h0^2*x2^2*y1*y3 + 4*f3^2*f6*h0^2*x2*x3*y1*y2 - f3^2*f6*h0^2*x3^2*y1^2 + 2*f3^2*f6*h0*h1*x1*x3*y2*y3 +
    2*f3^2*f6*h0*h1*x2*x3*y1*y3 + 4*f3^2*f6*h0*h3*x2*x3*y3^2 + 4*f3^2*f6*h0*h3*x3^2*y2*y3 + 4*f3^2*f6*h1*h3*x3^2*y3^2 - f3^2*f6*h2^2*x3^2*y3^2 -
    4*f3^2*f6*x3^2*y3*y4 - 4*f3^2*f6*x3*x4*y3^2 + f3^2*h0^3*h2*x1^2*y1^2 + f3^2*h0^3*h3*x1^2*y1*y2 + f3^2*h0^3*h3*x1*x2*y1^2 + f3^2*h0^2*h2*h3*x1*x2*y1*y3 +
    f3^2*h0^2*h2*h3*x1*x3*y1*y2 + f3^2*h0^2*h3^2*x1*x2*y2*y3 + f3^2*h0^2*h3^2*x1*x3*y1*y3 + f3^2*h0^2*h3^2*x1*x3*y2^2 + f3^2*h0^2*h3^2*x2^2*y1*y3 +
    f3^2*h0^2*h3^2*x2*x3*y1*y2 - f3^2*h0^2*x1^2*y1*y4 - f3^2*h0^2*x1*x4*y1^2 + f3^2*h0*h1*h2*h3*x1*x3*y1*y3 + f3^2*h0*h1*h3^2*x1*x3*y2*y3 +
    f3^2*h0*h1*h3^2*x2*x3*y1*y3 + f3^2*h0*h3^3*x2*x3*y3^2 + f3^2*h0*h3^3*x3^2*y2*y3 - f3^2*h0*h3*x1*x3*y2*y4 - f3^2*h0*h3*x2*x4*y1*y3 +
    f3^2*h1*h3^3*x3^2*y3^2 - f3^2*h3^2*x3^2*y3*y4 - f3^2*h3^2*x3*x4*y3^2 + 2*f3*f4*f5*h0^2*x1*x3*y1*y3 + 4*f3*f4*f6*h0^2*x1*x2*y3^2 +
    4*f3*f4*f6*h0^2*x1*x3*y2*y3 + 4*f3*f4*f6*h0^2*x2^2*y2*y3 + 4*f3*f4*f6*h0^2*x2*x3*y1*y3 + 4*f3*f4*f6*h0^2*x2*x3*y2^2 + 4*f3*f4*f6*h0^2*x3^2*y1*y2 +
    4*f3*f4*f6*h0*h1*x1*x3*y3^2 + 4*f3*f4*f6*h0*h1*x2*x3*y2*y3 + 4*f3*f4*f6*h0*h1*x3^2*y1*y3 - 4*f3*f4*f6*h0*h2*x2*x3*y3^2 - 4*f3*f4*f6*h0*h2*x3^2*y2*y3 -
    4*f3*f4*f6*h1*h2*x3^2*y3^2 - f3*f4*h0^3*h1*x1^2*y1^2 + f3*f4*h0^3*h3*x1^2*y1*y3 + f3*f4*h0^3*h3*x1*x2*y1*y2 + f3*f4*h0^3*h3*x1*x3*y1^2 -
    f3*f4*h0^2*h1*h3*x1*x2*y1*y3 - f3*f4*h0^2*h1*h3*x1*x3*y1*y2 - f3*f4*h0^2*h2*h3*x1*x3*y1*y3 + f3*f4*h0^2*h3^2*x1*x2*y3^2 + f3*f4*h0^2*h3^2*x1*x3*y2*y3 +
    f3*f4*h0^2*h3^2*x2^2*y2*y3 + f3*f4*h0^2*h3^2*x2*x3*y1*y3 + f3*f4*h0^2*h3^2*x2*x3*y2^2 + f3*f4*h0^2*h3^2*x3^2*y1*y2 - f3*f4*h0*h1^2*h3*x1*x3*y1*y3 +
    f3*f4*h0*h1*h3^2*x1*x3*y3^2 + f3*f4*h0*h1*h3^2*x2*x3*y2*y3 + f3*f4*h0*h1*h3^2*x3^2*y1*y3 - f3*f4*h0*h2*h3^2*x2*x3*y3^2 - f3*f4*h0*h2*h3^2*x3^2*y2*y3 -
    f3*f4*h1*h2*h3^2*x3^2*y3^2 - f3*f5^2*h0^2*x1*x2*y3^2 - f3*f5^2*h0^2*x2^2*y2*y3 - f3*f5^2*h0^2*x2*x3*y2^2 - f3*f5^2*h0^2*x3^2*y1*y2 -
    f3*f5^2*h0*h1*x1*x3*y3^2 - f3*f5^2*h0*h1*x2*x3*y2*y3 - f3*f5^2*h0*h1*x3^2*y1*y3 + f3*f5^2*h0*h2*x2*x3*y3^2 + f3*f5^2*h0*h2*x3^2*y2*y3 +
    f3*f5^2*h1*h2*x3^2*y3^2 + 2*f3*f5*f6*h0^2*x1*x3*y3^2 - 2*f3*f5*f6*h0^2*x2^2*y3^2 - 2*f3*f5*f6*h0^2*x2*x3*y2*y3 + 2*f3*f5*f6*h0^2*x3^2*y1*y3 -
    2*f3*f5*f6*h0^2*x3^2*y2^2 - 4*f3*f5*f6*h0*h1*x2*x3*y3^2 - 4*f3*f5*f6*h0*h1*x3^2*y2*y3 - 2*f3*f5*f6*h1^2*x3^2*y3^2 - f3*f5*h0^4*x1^2*y1^2 -
    f3*f5*h0^3*h1*x1^2*y1*y2 - f3*f5*h0^3*h1*x1*x2*y1^2 - f3*f5*h0^3*h2*x1^2*y1*y3 - f3*f5*h0^3*h2*x1*x2*y1*y2 - f3*f5*h0^3*h2*x1*x3*y1^2 -
    2*f3*f5*h0^3*h3*x1*x2*y1*y3 - 2*f3*f5*h0^3*h3*x1*x3*y1*y2 - f3*f5*h0^2*h1*h3*x1*x2*y2*y3 - 3*f3*f5*h0^2*h1*h3*x1*x3*y1*y3 - f3*f5*h0^2*h1*h3*x1*x3*y2^2 -
    f3*f5*h0^2*h1*h3*x2^2*y1*y3 - f3*f5*h0^2*h1*h3*x2*x3*y1*y2 + f3*f5*h0^2*h2^2*x1*x3*y1*y3 - f3*f5*h0^2*h2*h3*x1*x2*y3^2 - f3*f5*h0^2*h2*h3*x1*x3*y2*y3 -
    f3*f5*h0^2*h2*h3*x2^2*y2*y3 - f3*f5*h0^2*h2*h3*x2*x3*y1*y3 - f3*f5*h0^2*h2*h3*x2*x3*y2^2 - f3*f5*h0^2*h2*h3*x3^2*y1*y2 - f3*f5*h0^2*h3^2*x2^2*y3^2 -
    2*f3*f5*h0^2*h3^2*x2*x3*y2*y3 - f3*f5*h0^2*h3^2*x3^2*y2^2 + f3*f5*h0^2*x1*x2*y2*y4 + 2*f3*f5*h0^2*x1*x3*y1*y4 + 2*f3*f5*h0^2*x1*x4*y1*y3 +
    f3*f5*h0^2*x2*x4*y1*y2 - f3*f5*h0*h1^2*h3*x1*x3*y2*y3 - f3*f5*h0*h1^2*h3*x2*x3*y1*y3 - f3*f5*h0*h1*h2*h3*x1*x3*y3^2 - f3*f5*h0*h1*h2*h3*x2*x3*y2*y3 -
    f3*f5*h0*h1*h2*h3*x3^2*y1*y3 - 3*f3*f5*h0*h1*h3^2*x2*x3*y3^2 - 3*f3*f5*h0*h1*h3^2*x3^2*y2*y3 + f3*f5*h0*h1*x1*x3*y2*y4 + f3*f5*h0*h1*x2*x4*y1*y3 +
    f3*f5*h0*h2^2*h3*x2*x3*y3^2 + f3*f5*h0*h2^2*h3*x3^2*y2*y3 + 2*f3*f5*h0*h3*x2*x3*y3*y4 + f3*f5*h0*h3*x2*x4*y3^2 + f3*f5*h0*h3*x3^2*y2*y4 +
    2*f3*f5*h0*h3*x3*x4*y2*y3 - 2*f3*f5*h1^2*h3^2*x3^2*y3^2 + f3*f5*h1*h2^2*h3*x3^2*y3^2 + 2*f3*f5*h1*h3*x3^2*y3*y4 + 2*f3*f5*h1*h3*x3*x4*y3^2 -
    2*f3*f5*x3*x4*y3*y4 - 4*f3*f6^2*h0^2*x2*x3*y3^2 - 4*f3*f6^2*h0^2*x3^2*y2*y3 - 8*f3*f6^2*h0*h1*x3^2*y3^2 - f3*f6*h0^4*x1^2*y1*y2 - f3*f6*h0^4*x1*x2*y1^2 +
    f3*f6*h0^3*h1*x1^2*y1*y3 - f3*f6*h0^3*h1*x1^2*y2^2 - f3*f6*h0^3*h1*x1*x2*y1*y2 + f3*f6*h0^3*h1*x1*x3*y1^2 - f3*f6*h0^3*h1*x2^2*y1^2 -
    f3*f6*h0^3*h2*x1^2*y2*y3 - f3*f6*h0^3*h2*x1*x2*y2^2 - f3*f6*h0^3*h2*x2^2*y1*y2 - f3*f6*h0^3*h2*x2*x3*y1^2 - f3*f6*h0^3*h3*x1^2*y3^2 -
    3*f3*f6*h0^3*h3*x1*x2*y2*y3 - 3*f3*f6*h0^3*h3*x1*x3*y1*y3 - f3*f6*h0^3*h3*x1*x3*y2^2 - f3*f6*h0^3*h3*x2^2*y1*y3 - f3*f6*h0^3*h3*x2^2*y2^2 -
    3*f3*f6*h0^3*h3*x2*x3*y1*y2 - f3*f6*h0^3*h3*x3^2*y1^2 + f3*f6*h0^2*h1^2*x1*x2*y1*y3 + f3*f6*h0^2*h1^2*x1*x3*y1*y2 + f3*f6*h0^2*h1*h2*x1*x2*y2*y3 +
    f3*f6*h0^2*h1*h2*x1*x3*y2^2 + f3*f6*h0^2*h1*h2*x2^2*y1*y3 + f3*f6*h0^2*h1*h2*x2*x3*y1*y2 - f3*f6*h0^2*h1*h3*x1*x2*y3^2 - 4*f3*f6*h0^2*h1*h3*x1*x3*y2*y3 -
    f3*f6*h0^2*h1*h3*x2^2*y2*y3 - 4*f3*f6*h0^2*h1*h3*x2*x3*y1*y3 - f3*f6*h0^2*h1*h3*x2*x3*y2^2 - f3*f6*h0^2*h1*h3*x3^2*y1*y2 + f3*f6*h0^2*h2^2*x1*x2*y3^2 +
    2*f3*f6*h0^2*h2^2*x1*x3*y2*y3 + f3*f6*h0^2*h2^2*x2^2*y2*y3 + 2*f3*f6*h0^2*h2^2*x2*x3*y1*y3 + f3*f6*h0^2*h2^2*x2*x3*y2^2 + f3*f6*h0^2*h2^2*x3^2*y1*y2 +
    f3*f6*h0^2*h2*h3*x1*x3*y3^2 + f3*f6*h0^2*h2*h3*x2^2*y3^2 + 3*f3*f6*h0^2*h2*h3*x2*x3*y2*y3 + f3*f6*h0^2*h2*h3*x3^2*y1*y3 + f3*f6*h0^2*h2*h3*x3^2*y2^2 -
    f3*f6*h0^2*h3^2*x2*x3*y3^2 - f3*f6*h0^2*h3^2*x3^2*y2*y3 + 4*f3*f6*h0^2*x1*x2*y3*y4 + 2*f3*f6*h0^2*x1*x3*y2*y4 + 4*f3*f6*h0^2*x1*x4*y2*y3 +
    2*f3*f6*h0^2*x2^2*y2*y4 + 4*f3*f6*h0^2*x2*x3*y1*y4 + 2*f3*f6*h0^2*x2*x4*y1*y3 + 2*f3*f6*h0^2*x2*x4*y2^2 + 4*f3*f6*h0^2*x3*x4*y1*y2 +
    f3*f6*h0*h1^3*x1*x3*y1*y3 + f3*f6*h0*h1^2*h2*x1*x3*y2*y3 + f3*f6*h0*h1^2*h2*x2*x3*y1*y3 - f3*f6*h0*h1^2*h3*x1*x3*y3^2 - f3*f6*h0*h1^2*h3*x2*x3*y2*y3 -
    f3*f6*h0*h1^2*h3*x3^2*y1*y3 + f3*f6*h0*h1*h2^2*x1*x3*y3^2 + f3*f6*h0*h1*h2^2*x2*x3*y2*y3 + f3*f6*h0*h1*h2^2*x3^2*y1*y3 + 4*f3*f6*h0*h1*h2*h3*x2*x3*y3^2 +
    4*f3*f6*h0*h1*h2*h3*x3^2*y2*y3 - 2*f3*f6*h0*h1*h3^2*x3^2*y3^2 + 4*f3*f6*h0*h1*x1*x3*y3*y4 + 2*f3*f6*h0*h1*x2*x3*y2*y4 + 2*f3*f6*h0*h1*x2*x4*y2*y3 +
    4*f3*f6*h0*h1*x3*x4*y1*y3 - f3*f6*h0*h2^3*x2*x3*y3^2 - f3*f6*h0*h2^3*x3^2*y2*y3 - 4*f3*f6*h0*h2*x2*x3*y3*y4 - 2*f3*f6*h0*h2*x2*x4*y3^2 -
    2*f3*f6*h0*h2*x3^2*y2*y4 - 4*f3*f6*h0*h2*x3*x4*y2*y3 + 3*f3*f6*h1^2*h2*h3*x3^2*y3^2 - f3*f6*h1*h2^3*x3^2*y3^2 - 4*f3*f6*h1*h2*x3^2*y3*y4 -
    4*f3*f6*h1*h2*x3*x4*y3^2 - f3*h0*h1*x1*x4*y1*y4 + f3*h0*h3*x1*x4*y3*y4 + f3*h0*h3*x2*x4*y2*y4 + f3*h0*h3*x3*x4*y1*y4 - f3*h2*h3*x3*x4*y3*y4 +
    4*f4^2*f6*h0^2*x2^2*y3^2 + 8*f4^2*f6*h0^2*x2*x3*y2*y3 + 4*f4^2*f6*h0^2*x3^2*y2^2 + 8*f4^2*f6*h0*h1*x2*x3*y3^2 + 8*f4^2*f6*h0*h1*x3^2*y2*y3 +
    4*f4^2*f6*h1^2*x3^2*y3^2 + f4^2*h0^4*x1^2*y1^2 + 2*f4^2*h0^3*h3*x1*x2*y1*y3 + 2*f4^2*h0^3*h3*x1*x3*y1*y2 + 2*f4^2*h0^2*h1*h3*x1*x3*y1*y3 +
    f4^2*h0^2*h3^2*x2^2*y3^2 + 2*f4^2*h0^2*h3^2*x2*x3*y2*y3 + f4^2*h0^2*h3^2*x3^2*y2^2 + 2*f4^2*h0*h1*h3^2*x2*x3*y3^2 + 2*f4^2*h0*h1*h3^2*x3^2*y2*y3 +
    f4^2*h1^2*h3^2*x3^2*y3^2 - f4*f5^2*h0^2*x2^2*y3^2 - 2*f4*f5^2*h0^2*x2*x3*y2*y3 - f4*f5^2*h0^2*x3^2*y2^2 - 2*f4*f5^2*h0*h1*x2*x3*y3^2 -
    2*f4*f5^2*h0*h1*x3^2*y2*y3 - f4*f5^2*h1^2*x3^2*y3^2 + 4*f4*f5*f6*h0^2*x2*x3*y3^2 + 4*f4*f5*f6*h0^2*x3^2*y2*y3 + 4*f4*f5*f6*h0*h1*x3^2*y3^2 +
    f4*f5*h0^4*x1^2*y1*y2 + f4*f5*h0^4*x1*x2*y1^2 - f4*f5*h0^3*h2*x1*x2*y1*y3 - f4*f5*h0^3*h2*x1*x3*y1*y2 + f4*f5*h0^3*h3*x1*x2*y2*y3 +
    f4*f5*h0^3*h3*x1*x3*y1*y3 + f4*f5*h0^3*h3*x1*x3*y2^2 + f4*f5*h0^3*h3*x2^2*y1*y3 + f4*f5*h0^3*h3*x2*x3*y1*y2 - f4*f5*h0^2*h1*h2*x1*x3*y1*y3 +
    f4*f5*h0^2*h1*h3*x1*x3*y2*y3 + f4*f5*h0^2*h1*h3*x2*x3*y1*y3 - f4*f5*h0^2*h2*h3*x2^2*y3^2 - 2*f4*f5*h0^2*h2*h3*x2*x3*y2*y3 - f4*f5*h0^2*h2*h3*x3^2*y2^2 +
    f4*f5*h0^2*h3^2*x2*x3*y3^2 + f4*f5*h0^2*h3^2*x3^2*y2*y3 - 2*f4*f5*h0*h1*h2*h3*x2*x3*y3^2 - 2*f4*f5*h0*h1*h2*h3*x3^2*y2*y3 + f4*f5*h0*h1*h3^2*x3^2*y3^2 -
    f4*f5*h1^2*h2*h3*x3^2*y3^2 + 4*f4*f6^2*h0^2*x3^2*y3^2 - 2*f4*f6*h0^4*x1^2*y1*y3 + f4*f6*h0^4*x1^2*y2^2 - 2*f4*f6*h0^4*x1*x3*y1^2 + f4*f6*h0^4*x2^2*y1^2 -
    2*f4*f6*h0^3*h1*x1*x2*y1*y3 - 2*f4*f6*h0^3*h1*x1*x3*y1*y2 - 2*f4*f6*h0^3*h2*x1*x2*y2*y3 + 2*f4*f6*h0^3*h2*x1*x3*y1*y3 - 2*f4*f6*h0^3*h2*x1*x3*y2^2 -
    2*f4*f6*h0^3*h2*x2^2*y1*y3 - 2*f4*f6*h0^3*h2*x2*x3*y1*y2 - 2*f4*f6*h0^3*h3*x1*x2*y3^2 - 2*f4*f6*h0^3*h3*x2^2*y2*y3 - 2*f4*f6*h0^3*h3*x2*x3*y2^2 -
    2*f4*f6*h0^3*h3*x3^2*y1*y2 - 2*f4*f6*h0^2*h1^2*x1*x3*y1*y3 - 2*f4*f6*h0^2*h1*h2*x1*x3*y2*y3 - 2*f4*f6*h0^2*h1*h2*x2*x3*y1*y3 -
    2*f4*f6*h0^2*h1*h3*x1*x3*y3^2 - 2*f4*f6*h0^2*h1*h3*x2^2*y3^2 - 6*f4*f6*h0^2*h1*h3*x2*x3*y2*y3 - 2*f4*f6*h0^2*h1*h3*x3^2*y1*y3 -
    2*f4*f6*h0^2*h1*h3*x3^2*y2^2 + f4*f6*h0^2*h2^2*x2^2*y3^2 + 2*f4*f6*h0^2*h2^2*x2*x3*y2*y3 + f4*f6*h0^2*h2^2*x3^2*y2^2 + f4*f6*h0^2*h3^2*x3^2*y3^2 +
    4*f4*f6*h0^2*x1*x4*y3^2 + 4*f4*f6*h0^2*x2^2*y3*y4 + 4*f4*f6*h0^2*x2*x3*y2*y4 + 4*f4*f6*h0^2*x2*x4*y2*y3 + 4*f4*f6*h0^2*x3^2*y1*y4 +
    4*f4*f6*h0^2*x3*x4*y2^2 - 4*f4*f6*h0*h1^2*h3*x2*x3*y3^2 - 4*f4*f6*h0*h1^2*h3*x3^2*y2*y3 + 2*f4*f6*h0*h1*h2^2*x2*x3*y3^2 + 2*f4*f6*h0*h1*h2^2*x3^2*y2*y3 +
    8*f4*f6*h0*h1*x2*x3*y3*y4 + 4*f4*f6*h0*h1*x2*x4*y3^2 + 4*f4*f6*h0*h1*x3^2*y2*y4 + 8*f4*f6*h0*h1*x3*x4*y2*y3 - 2*f4*f6*h1^3*h3*x3^2*y3^2 +
    f4*f6*h1^2*h2^2*x3^2*y3^2 + 4*f4*f6*h1^2*x3^2*y3*y4 + 4*f4*f6*h1^2*x3*x4*y3^2 + 2*f4*h0^2*x1*x4*y1*y4 + 2*f4*h0*h3*x2*x4*y3*y4 + 2*f4*h0*h3*x3*x4*y2*y4 +
    2*f4*h1*h3*x3*x4*y3*y4 - f5^3*h0^2*x2*x3*y3^2 - f5^3*h0^2*x3^2*y2*y3 - f5^3*h0*h1*x3^2*y3^2 - f5^2*f6*h0^2*x3^2*y3^2 + f5^2*h0^4*x1^2*y1*y3 +
    f5^2*h0^4*x1*x2*y1*y2 + f5^2*h0^4*x1*x3*y1^2 + f5^2*h0^3*h1*x1*x2*y1*y3 + f5^2*h0^3*h1*x1*x3*y1*y2 - f5^2*h0^3*h2*x1*x3*y1*y3 + f5^2*h0^3*h3*x1*x2*y3^2 +
    f5^2*h0^3*h3*x1*x3*y2*y3 + f5^2*h0^3*h3*x2^2*y2*y3 + f5^2*h0^3*h3*x2*x3*y1*y3 + f5^2*h0^3*h3*x2*x3*y2^2 + f5^2*h0^3*h3*x3^2*y1*y2 +
    f5^2*h0^2*h1^2*x1*x3*y1*y3 + f5^2*h0^2*h1*h3*x1*x3*y3^2 + f5^2*h0^2*h1*h3*x2^2*y3^2 + 3*f5^2*h0^2*h1*h3*x2*x3*y2*y3 + f5^2*h0^2*h1*h3*x3^2*y1*y3 +
    f5^2*h0^2*h1*h3*x3^2*y2^2 - f5^2*h0^2*h2*h3*x2*x3*y3^2 - f5^2*h0^2*h2*h3*x3^2*y2*y3 - f5^2*h0^2*x1*x4*y3^2 - f5^2*h0^2*x2^2*y3*y4 - f5^2*h0^2*x2*x3*y2*y4
    - f5^2*h0^2*x2*x4*y2*y3 - f5^2*h0^2*x3^2*y1*y4 - f5^2*h0^2*x3*x4*y2^2 + 2*f5^2*h0*h1^2*h3*x2*x3*y3^2 + 2*f5^2*h0*h1^2*h3*x3^2*y2*y3 -
    f5^2*h0*h1*h2*h3*x3^2*y3^2 - 2*f5^2*h0*h1*x2*x3*y3*y4 - f5^2*h0*h1*x2*x4*y3^2 - f5^2*h0*h1*x3^2*y2*y4 - 2*f5^2*h0*h1*x3*x4*y2*y3 + f5^2*h1^3*h3*x3^2*y3^2
    - f5^2*h1^2*x3^2*y3*y4 - f5^2*h1^2*x3*x4*y3^2 + f5*f6*h0^4*x1^2*y2*y3 + f5*f6*h0^4*x1*x2*y1*y3 + f5*f6*h0^4*x1*x2*y2^2 + f5*f6*h0^4*x1*x3*y1*y2 +
    f5*f6*h0^4*x2^2*y1*y2 + f5*f6*h0^4*x2*x3*y1^2 + f5*f6*h0^3*h1*x1*x2*y2*y3 + f5*f6*h0^3*h1*x1*x3*y2^2 + f5*f6*h0^3*h1*x2^2*y1*y3 +
    f5*f6*h0^3*h1*x2*x3*y1*y2 - f5*f6*h0^3*h2*x1*x2*y3^2 - 2*f5*f6*h0^3*h2*x1*x3*y2*y3 - f5*f6*h0^3*h2*x2^2*y2*y3 - 2*f5*f6*h0^3*h2*x2*x3*y1*y3 -
    f5*f6*h0^3*h2*x2*x3*y2^2 - f5*f6*h0^3*h2*x3^2*y1*y2 + f5*f6*h0^3*h3*x1*x3*y3^2 + f5*f6*h0^3*h3*x2*x3*y2*y3 + f5*f6*h0^3*h3*x3^2*y1*y3 +
    f5*f6*h0^2*h1^2*x1*x3*y2*y3 + f5*f6*h0^2*h1^2*x2*x3*y1*y3 - f5*f6*h0^2*h1*h2*x1*x3*y3^2 - f5*f6*h0^2*h1*h2*x2^2*y3^2 - 3*f5*f6*h0^2*h1*h2*x2*x3*y2*y3 -
    f5*f6*h0^2*h1*h2*x3^2*y1*y3 - f5*f6*h0^2*h1*h2*x3^2*y2^2 + f5*f6*h0^2*h1*h3*x2*x3*y3^2 + f5*f6*h0^2*h1*h3*x3^2*y2*y3 + f5*f6*h0^2*h2^2*x2*x3*y3^2 +
    f5*f6*h0^2*h2^2*x3^2*y2*y3 - f5*f6*h0^2*h2*h3*x3^2*y3^2 - 2*f5*f6*h0*h1^2*h2*x2*x3*y3^2 - 2*f5*f6*h0*h1^2*h2*x3^2*y2*y3 + f5*f6*h0*h1^2*h3*x3^2*y3^2 +
    f5*f6*h0*h1*h2^2*x3^2*y3^2 - f5*f6*h1^3*h2*x3^2*y3^2 + f5*h0^2*x1*x4*y2*y4 + f5*h0^2*x2*x4*y1*y4 - f5*h0*h2*x2*x4*y3*y4 - f5*h0*h2*x3*x4*y2*y4 +
    f5*h0*h3*x3*x4*y3*y4 - f5*h1*h2*x3*x4*y3*y4 + f6^2*h0^4*x1^2*y3^2 + 2*f6^2*h0^4*x1*x2*y2*y3 + 2*f6^2*h0^4*x1*x3*y1*y3 + f6^2*h0^4*x2^2*y2^2 +
    2*f6^2*h0^4*x2*x3*y1*y2 + f6^2*h0^4*x3^2*y1^2 + 2*f6^2*h0^3*h1*x1*x2*y3^2 + 2*f6^2*h0^3*h1*x1*x3*y2*y3 + 2*f6^2*h0^3*h1*x2^2*y2*y3 +
    2*f6^2*h0^3*h1*x2*x3*y1*y3 + 2*f6^2*h0^3*h1*x2*x3*y2^2 + 2*f6^2*h0^3*h1*x3^2*y1*y2 - 2*f6^2*h0^3*h2*x1*x3*y3^2 - 2*f6^2*h0^3*h2*x2*x3*y2*y3 -
    2*f6^2*h0^3*h2*x3^2*y1*y3 + 2*f6^2*h0^2*h1^2*x1*x3*y3^2 + f6^2*h0^2*h1^2*x2^2*y3^2 + 4*f6^2*h0^2*h1^2*x2*x3*y2*y3 + 2*f6^2*h0^2*h1^2*x3^2*y1*y3 +
    f6^2*h0^2*h1^2*x3^2*y2^2 - 2*f6^2*h0^2*h1*h2*x2*x3*y3^2 - 2*f6^2*h0^2*h1*h2*x3^2*y2*y3 + f6^2*h0^2*h2^2*x3^2*y3^2 + 2*f6^2*h0*h1^3*x2*x3*y3^2 +
    2*f6^2*h0*h1^3*x3^2*y2*y3 - 2*f6^2*h0*h1^2*h2*x3^2*y3^2 + f6^2*h1^4*x3^2*y3^2 + 2*f6*h0^2*x1*x4*y3*y4 + 2*f6*h0^2*x2*x4*y2*y4 + 2*f6*h0^2*x3*x4*y1*y4 +
    2*f6*h0*h1*x2*x4*y3*y4 + 2*f6*h0*h1*x3*x4*y2*y4 - 2*f6*h0*h2*x3*x4*y3*y4 + 2*f6*h1^2*x3*x4*y3*y4 + x4^2*y4^2

    where f0 := Coefficient(f, 0)
    where f1 := Coefficient(f, 1)
    where f2 := Coefficient(f, 2)
    where f3 := Coefficient(f, 3)
    where f4 := Coefficient(f, 4)
    where f5 := Coefficient(f, 5)
    where f6 := Coefficient(f, 6)
    where h0 := Coefficient(h, 0)
    where h1 := Coefficient(h, 1)
    where h2 := Coefficient(h, 2)
    where h3 := Coefficient(h, 3)
    where x1 := x[1] where x2 := x[2] where x3 := x[3] where x4 := x[4]
    where y1 := y[1] where y2 := y[2] where y3 := y[3] where y4 := y[4] >;


// This returns a list L with
// + L[1] = poly in 2 vars showing up in formula for fourth coordinate
// + L[2] = sequence of coeffs of f
// + L[3],L[4],L[5] = polynomials in 4 vars used to test if a point lifts to J
// + L[6] = sequence of coeffs of h
// + L[7],L[8] = polynomials in 4 vars used to test if a point lifts to J
aux := func< f,h |
    [* 2*f6*s2^3 + f5*s1*s2^2 + 2*f4*s2^2 + f3*s1*s2 + 2*f2*s2 + f1*s1 + 2*f0,
       [f0,f1,f2,f3,f4,f5,f6],
       k1^3*k4 + f2*k1^4 + f3*k1^3*k2 + f4*k1^2*k2^2 + f5*k1*k2*(k2^2-k1*k3)
        + f6*(k2^2-k1*k3)^2,
    /* 2*(2*f0*k1^4 + f1*k1^3*k2 + 2*f2*k1^3*k3 + f3*k1^2*k2*k3 + 2*f4*k1^2*k3^2
        + f5*k1*k2*k3^2 + 2*f6*k1*k3^3), */
       -k1^2*k2*k4 + 2*f6*k2*k3*(k1*k3-k2^2) + f5*k1*k3*(k1*k3-2*k2^2)
        - 2*f4*k1^2*k2*k3 - f3*k1^3*k3 + f1*k1^4,
       k1^2*k3*k4 + f0*k1^4 + f4*k1^2*k3^2 + f5*k1*k2*k3^2 + f6*k2^2*k3^2,
       [h0,h1,h2,h3],
       h1*k1^2 + h2*k1*k2 + h3*(k2^2 - k1*k3),
       h0*k1^2 - h2*k1*k3 - h3*k2*k3 *]
    where f0 := Coefficient(f, 0)
    where f1 := Coefficient(f, 1)
    where f2 := Coefficient(f, 2)
    where f3 := Coefficient(f, 3)
    where f4 := Coefficient(f, 4)
    where f5 := Coefficient(f, 5)
    where f6 := Coefficient(f, 6)
    where h0 := Coefficient(h, 0)
    where h1 := Coefficient(h, 1)
    where h2 := Coefficient(h, 2)
    where h3 := Coefficient(h, 3)
    where k1 := P4.1 where k2 := P4.2 where k3 := P4.3 where k4 := P4.4
    where P4 := PolynomialRing(CoefficientRing(Parent(f)), 4)
    where s1 := P2.1 where s2 := P2.2
    where P2 := PolynomialRing(CoefficientRing(Parent(f)), 2) >;

//////////////// normalization of points ////////////////

function NormalizeRat(K, xs)
    // First step: Clear denominators.
    a := LCM([Denominator(x) : x in xs]);
    xs1 := [Integers() | a*x : x in xs];
    // Second step: Cancel common factors.
    g := GCD(xs1);
    xs1 := [ x div g : x in xs1 ];
    // Third step: Normalize sign.
    i := 1; while xs1[i] eq 0 do i +:= 1; end while;
    if xs1[i] lt 0 then
      xs1 := [ -x : x in xs1 ];
    end if;
    return KummerSurfacePointRaw(K, xs1);
end function;

function SelectRat(xs)
    // Take coordinate of least absolute value
    min := 0;
    for i := 1 to 4 do
      if xs[i] ne 0 and (min eq 0 or Abs(xs[i]) lt min) then
        min := Abs(xs[i]); index := i;
      end if;
    end for;
    return index;
end function;

function NormalizeFunRat(K, xs)
    // First step: Clear denominators.
    a := LCM([Denominator(x) : x in xs]);
    xs1 := [ Numerator(a*x) : x in xs ];
    // Second step: Cancel common factors.
    g := GCD(xs1);
    xs1 := [ ExactQuotient(x, g) : x in xs1 ];
    // Third step: Normalize leading coeff.
    i := 1; while xs1[i] eq 0 do i +:= 1; end while;
    lcf := LeadingCoefficient(xs1[i]);
    xs1 := [ (1/lcf)*x : x in xs1 ];
    return KummerSurfacePointRaw(K, xs1);
end function;

function SelectFunRat(xs)
    // Take coordinate of least positive degree
    min := 0;
    deg := Type(xs[1]) eq FldFunRatMElt select TotalDegree else Degree;
    for i := 1 to 4 do
      if xs[i] ne 0 and (min eq 0 or deg(xs[i]) lt min) then
        min := deg(xs[i]); index := i;
      end if;
    end for;
    return index;
end function;

function NormalizePAdic(K, xs)
    // Normalize such that coordinates are integral, with one being a unit,
    // and such that the first unit is 1.
    // First step: Make miminal valuation zero.
    prec := Precision(Universe(xs));
    v := Min([ Min(Valuation(x),prec) : x in xs | x ne 0 ]);
    //Z<p> := IntegerRing(BaseField(K));
    a := UniformizingElement(BaseField(K))^(-v);
    xs1 := [a*x : x in xs];
    // xs1 := [ Z | Integers()!x : x in xs1 ]; // otherwise problems...
    // Second step: Normalize first unit.
    i := 1; while Valuation(xs1[i]) gt 0 do i +:= 1; end while;
    xs1 := [x/xs1[i] : x in xs1];
    return KummerSurfacePointRaw(K, xs1);
end function;

function SelectPAdic(xs)
    // Take first coordinate that is a unit
    i := 1; while Valuation(xs[i]) gt 0 do i +:= 1; end while;
    return i;
end function;

function NormalizeDefault(K, xs)
    // Normalize first non-zero coordinate to 1.
    i := 1; while xs[i] eq 0 do i +:= 1; end while;
    xs1 := [ x/xs[i] : x in xs ];
    return KummerSurfacePointRaw(K, xs1);
end function;

function SelectDefault(xs)
    // Take first non-zero coordinate
    i := 1; while xs[i] eq 0 do i +:= 1; end while;
    return i;
end function;


procedure FillInData(K : LastOnly := false)
    // Fills in the data needed for computations.
    if assigned K`AuxPolynomials then return; end if;
    R := CoefficientRing(K);
    // Assign generators to a sequence x:
    P<[x]> := PolynomialRing(R, 4);
    // Then give generators standard names:
    AssignNames(~P,["x1","x2","x3","x4"]);
    C := Curve(Jacobian(K));
    f,h := HyperellipticPolynomials(C);
    if not LastOnly then
      ds := deltas(f, h, x);
      K`Equation := ds[5];
      K`DEquation := [ Derivative(ds[5], i) : i in [1..4] ];
      K`Delta := ds[[1..4]];
      PP<[z]> := PolynomialRing(R, 8);
      K`BBMatrix := BBM(f, h, z[[1..4]], z[[5..8]]);
    end if;
    K`AuxPolynomials := aux(f, h);
    if Type(R) eq FldRat then
      K`NormalizePoint := NormalizeRat;
      K`SelectCoordinate := SelectRat;
    elif Type(R) eq FldPad then
      K`NormalizePoint := NormalizePAdic;
      K`SelectCoordinate := SelectPAdic;
    elif Type(R) eq FldFunRat then
      K`NormalizePoint := NormalizeFunRat;
      K`SelectCoordinate := SelectFunRat;
    else
      K`NormalizePoint := NormalizeDefault;
      K`SelectCoordinate := SelectDefault;
    end if;
    return;
end procedure;

/////////////////
//             //
//  Creation   //
//             //
/////////////////

// We now store the KummerSurface on J, since creating it takes time
// and we definitely don't want loops where it gets created/deleted.
// Without this, KummerSurface(J) is retrieved by structure_create
// if it exists, but could of course be deleted while J still exists.
// (The circular reference J -> K -> J is of course now handled.)
//  -- March 2011, SRD

declare attributes JacHyp : KummerSurface;

intrinsic KummerSurface(J::JacHyp) -> SrfKum
{ Returns the Kummer surface of the Jacobian J of a genus 2 curve. }
    if assigned J`KummerSurface then
      return J`KummerSurface;
    end if;
    C := Curve(J);
    require Genus(C) eq 2:
       "Kummer surface is only defined for Jacobians of genus 2 curves.";
    f, h := HyperellipticPolynomials(C);
    K := KummerSurfaceRaw(J);
    FillInData(K);
    J`KummerSurface := K;
    return K;
end intrinsic;

//////////////
//          //
//  Points  //
//          //
//////////////

// Points are given by their projective coordinates, normalized depending
// on the base field.

intrinsic Point(K::SrfKum, P::SrfKumPt) -> BoolElt, SrfKumPt
{The point on K specified by the coordinates of P.}
    return Point(K, Eltseq(P));
end intrinsic;

// Create a function that tests whether an element is zero.
// For a local or Laurent series field of unspecified precision,
//  this checks whether the element is O(power of uniformiser).
// For a local or Laurent series field of finite precision,
//  this checks whether the element is zero up to that (absolute) precision.
function MakeIsZero(R)
  if (Type(R) eq RngSerLaur) then
    if ((R!1) - (R!1) eq 0) then
      return func< z | z eq 0 or RelativePrecision(z) eq 0 >;
    else
      return func< z | z eq 0 or Valuation(z) ge prec >
             where prec := AbsolutePrecision(R!1);
    end if;
  elif Type(R) eq FldPad then
    return func< z | IsWeaklyZero(z)>;
  else
    return func< z | z eq R!0 >;
  end if;
end function;

intrinsic Point(K::SrfKum, s::[RngElt]) -> BoolElt, SrfKumPt
{The point on K specified by the sequence of coordinates.}
    require #s eq 4: "I need 4 coordinates for a point on a Kummer surface.";
    R := CoefficientRing(K);
    iszero := MakeIsZero(R);
    s1 := ChangeUniverse(s, R);
    require not &and[ iszero(c) : c in s1]: "Some coordinate must be nonzero.";
    require iszero(Evaluate(DefiningPolynomial(K),s1)):
            "Point is not on Kummer surface.";
    return K`NormalizePoint(K, s1);
end intrinsic;

intrinsic Point(K::SrfKum,zero::RngIntElt) -> BoolElt, SrfKumPt
{The origin on K, where zero is 0.}
    require zero eq 0: "Can't coerce ",zero," to be a point on K.";
    R := CoefficientRing(K);
    return K`NormalizePoint(K, [R | 0, 0, 0, 1]);
end intrinsic;

intrinsic Point(K::SrfKum, P::JacHypPt) -> BoolElt, SrfKumPt
{The image of P on K.}
    require Jacobian(K) eq Parent(P): "Point is on wrong Jacobian.";
    R := CoefficientRing(K);
    iszero := MakeIsZero(R);
    a, b, d := Components(P);
    d1 := Degree(a);
    case d1:
      when 2:
        sa := [1, -Coefficient(a, 1), Coefficient(a, 0)];
        disc := Discriminant(a);
        if iszero(disc) then
          return Points(K, sa)[1];
        else
          b0 := Coefficient(b, 0); b1 := Coefficient(b, 1);
          yy := b1^2*sa[3] + b0*b1*sa[2] + b0^2; //y1*y2
          simplified := &and[iszero(hi): hi in K`AuxPolynomials[6]];
          if simplified or (iszero(yy) and iszero(b1))  then
            h12 := 0;  // in this case we have h(x1)*y1+h(x2)*y1=0
          elif not iszero(yy) then
            f0,f1,f2,f3,f4,f5,f6 := Explode(K`AuxPolynomials[2]);
            h0,h1,h2,h3 := Explode(K`AuxPolynomials[6]);
            hx1x2 := h0*h3*sa[2]^3 + h1*h3*sa[2]^2*sa[3] + h0*h2*sa[2]^2 + h2*h3*sa[2]*sa[3]^2 + (-3*h0*h3 +
            h1*h2)*sa[2]*sa[3] + h0*h1*sa[2] + h3^2*sa[3]^3 + (-2*h1*h3 + h2^2)*sa[3]^2 + (-2*h0*h2 +
            h1^2)*sa[3] + h0^2; //h(x1)*h(x2)
            fx1x2 := f0*f6*sa[2]^6 + f1*f6*sa[2]^5*sa[3] + f0*f5*sa[2]^5 + f2*f6*sa[2]^4*sa[3]^2 + (-6*f0*f6 +
            f1*f5)*sa[2]^4*sa[3] + f0*f4*sa[2]^4 + f3*f6*sa[2]^3*sa[3]^3 + (-5*f1*f6 + f2*f5)*sa[2]^3*sa[3]^2
            + (-5*f0*f5 + f1*f4)*sa[2]^3*sa[3] + f0*f3*sa[2]^3 + f4*f6*sa[2]^2*sa[3]^4 + (-4*f2*f6 +
            f3*f5)*sa[2]^2*sa[3]^3 + (9*f0*f6 - 4*f1*f5 + f2*f4)*sa[2]^2*sa[3]^2 + (-4*f0*f4 +
            f1*f3)*sa[2]^2*sa[3] + f0*f2*sa[2]^2 + f5*f6*sa[2]*sa[3]^5 + (-3*f3*f6 + f4*f5)*sa[2]*sa[3]^4 +
            (5*f1*f6 - 3*f2*f5 + f3*f4)*sa[2]*sa[3]^3 + (5*f0*f5 - 3*f1*f4 + f2*f3)*sa[2]*sa[3]^2 +
            (-3*f0*f3 + f1*f2)*sa[2]*sa[3] + f0*f1*sa[2] + f6^2*sa[3]^6 + (-2*f4*f6 + f5^2)*sa[3]^5 +
            (2*f2*f6 - 2*f3*f5 + f4^2)*sa[3]^4 + (-2*f0*f6 + 2*f1*f5 - 2*f2*f4 + f3^2)*sa[3]^3
            + (2*f0*f4 - 2*f1*f3 + f2^2)*sa[3]^2 + (-2*f0*f2 + f1^2)*sa[3] + f0^2;   //f(x1)*f(x2)
            h12 := fx1x2/yy - yy - hx1x2; //h(x1)*y2+h(x2)*y1 when y1 and y2 are nonzero
          else
            x1 := -b0/b1;
            h0,h1,h2,h3 := Explode(K`AuxPolynomials[6]);
            hx1 := h0 + h1*x1 + h2*x1^2 + h3*x1^3;
            x2 := sa[2]-x1;
            y2 := Evaluate(b,x2);
            h12 := hx1*y2;  //h(x1)*y2+h(x2)*y1 when y1=0 or y2=0, but not both
          end if;
          return K!(sa cat
             [(Evaluate(K`AuxPolynomials[1], [sa[2],sa[3]]) - 2*yy - h12)/disc]);
        end if;
      when 1:
        x := -Coefficient(a, 0);
        if d eq 1 then
          return Points(K, [0, 1, x])[1];
        else
          f5 := K`AuxPolynomials[2,6];
          f6 := K`AuxPolynomials[2,7];
          yinf := Coefficient(b, 3);
          y := Evaluate(b,x);
          yyinf := yinf*y;
          simplified := &and[iszero(hi) : hi in K`AuxPolynomials[6]];
          if simplified or (iszero(y) and iszero(yinf)) then
            h12 := 0;
          elif not iszero(yyinf)  then
            h3 := K`AuxPolynomials[6,4];
            hx1x2 := h3*&+[K`AuxPolynomials[6,i]*x^(i-1) : i in [1..4]];
            fx1x2 := f6*&+[K`AuxPolynomials[2,i]*x^(i-1) : i in [1..7]];
            h12 := fx1x2/yyinf - yyinf - hx1x2;
          elif not iszero(yinf)  then
            h12 := yinf*&+[K`AuxPolynomials[6,i]*x^(i-1) : i in [1..4]];
          else
            h3 := K`AuxPolynomials[6,4];
            h12 := h3*y;
          end if;
          return K![0, 1, x, f5*x^2 + 2*f6*x^3 - 2*yyinf - h12];
        end if;
      when 0:
        if d eq 0 then
          return K!0;
        else
          return Points(K, [0, 0, 1])[1];
        end if;
    end case;
end intrinsic;

intrinsic IsPoint(K::SrfKum, s::[RngElt]) -> BoolElt, SrfKumPt
{Check if point specified by the homogeneous coordinates s is on K.
If so, return corresponding SrfKumPt as a second value.}
    require #s eq 4: "I need 4 coordinates for a point on a Kummer surface.";
    R := CoefficientRing(K);
    iszero :=MakeIsZero(R);
    s1 := ChangeUniverse(s, R);
    if &and[ iszero(c) : c in s1] then return false; end if;
    if iszero(Evaluate(DefiningPolynomial(K),s1)) then
      return true, K`NormalizePoint(K, s1);
    else
      return false, _;
    end if;
end intrinsic;

intrinsic RationalPoints(K::SrfKum, s::[RngElt]) -> SetIndx
    {Return the indexed set of points on K with first three
    coordinates given by s.}

    require #s eq 3: "Argument 2 must have exactly 3 coordinates.";
    return Points(K,s);
end intrinsic;

intrinsic Points(K::SrfKum, s::[RngElt]) -> SetIndx
    {Return the indexed set of points on K with first three
    coordinates given by s.}

    require #s eq 3: "Argument 2 must have exactly 3 coordinates.";
    R := CoefficientRing(K);
    iszero := MakeIsZero(R);
    P := PolynomialRing(R : Global := false); z := P.1;
    if &and[ iszero(c) : c in s ] then return {@ K!0 @}; end if;
    pol := Evaluate(DefiningPolynomial(K), s cat [z]);
    if not iszero(Coefficient(pol,2)) then
      if Characteristic(R) ne 2 then
        disc := Discriminant(pol);
        if iszero(disc) then
          return {@ K!(s cat [-Coefficient(pol,1)/(2*Coefficient(pol,2))]) @};
        else
          flag, sqrt := IsSquare(disc);
          if flag then
            re := -Coefficient(pol,1)/(2*Coefficient(pol,2));
            im := sqrt/(2*Coefficient(pol,2));
            return {@ K | s cat [re+im], s cat [re-im] @};
          else
            return {@ K | @};
          end if;
        end if;
      else
        roots := Roots(pol);
        case #roots:
          when 2:
            return {@ K | s cat [roots[1,1]], s cat [roots[2,1]] @};
          when 1:
            return {@ K | s cat [roots[1,1]] @};
          when 0:
            return {@ K | @};
        end case;
      end if;
    elif not iszero(Coefficient(pol, 1)) then
      return {@ K!(s cat [-Coefficient(pol,0)/Coefficient(pol,1)]) @};
    else
      return {@ K | @};
    end if;
end intrinsic;

////////////////// lift points from K to J /////////////////////////

intrinsic RationalPoints(J::JacHyp, P::SrfKumPt) -> SetIndx
    {Return the indexed set of points on J mapping to P on
    Kummer surface of J.}
    require Jacobian(Parent(P)) eq J:
       "Kummer surface of point does not belong to Jacobian given.";
    return Points(J,P);
end intrinsic;

intrinsic Points(J::JacHyp, P::SrfKumPt) -> SetIndx
    {Return the indexed set of points on J mapping to P on
    Kummer surface of J.}
    require Jacobian(Parent(P)) eq J:
       "Kummer surface of point does not belong to Jacobian given.";
    s0 := Eltseq(P);
    aux := Parent(P)`AuxPolynomials;
    R := CoefficientRing(J);
    iszero := MakeIsZero(R);
    PR := PolynomialRing(R : Global := false); z := PR.1;
    if not iszero(s0[1])  then
      // point on J must have form <x^2 - t*x + n, a*x + b, 2>
      // with s1 = [1, t, n, c]
      s1 := [ c/s0[1] : c in s0 ];
      pola := PR![s1[3], -s1[2], s1[1]];
      G0 := Evaluate(aux[3], s1);
      H0 := Evaluate(aux[7], s1);
      H1 := Evaluate(aux[8], s1);
      p1 := PR![-G0,H0,1];// a is a root of p1
      if Characteristic(R) ne 2 then
        disc1 := Discriminant(p1);
        if iszero(disc1) then // unique value for a
          a := -H0/2;
          G1 := Evaluate(aux[5], s1);
          p2 := PR![-G1,H1,1]; // b is a root of p2
          disc2 := Discriminant(p2);
          if iszero(disc2) then // unique value for b
            b := -H1/2;
            return {@ elt< J | pola, PR![b,a] > @};
          else // disc2 ne 0
            test, sqrt := IsSquare(disc2);
            if test then // two values for b
              re := -Coefficient(p2,1)/2;
              im := sqrt/2;
              return {@ elt< J | pola, PR![re+im,a], 2 >,
                        elt< J | pola, PR![re-im,a], 2 > @};
            else
              return {@ @};
            end if;
          end if;
        else // disc ne 0
          test, sqrt := IsSquare(disc1);
          if test then // two values for a
            re := -Coefficient(p1,1)/2;
            im := sqrt/2;
            a1 := re + im;
            a2 := re - im;
            G2 :=  Evaluate(aux[4], s1);
            b1,b2 := Explode([(G2 - H1*a)/(2*a + H0) : a in [a1,a2]]) ; // have 2*a*b+H0*b+H1*a-G2=0.
           // the denominator can't vanish, because disc1 doesn't
            return {@ elt< J | pola, PR![b1,a1], 2 >,
                      elt< J | pola, PR![b2,a2], 2 > @};
          else
            return {@ @};
          end if;
        end if;
      else  // characteristic 2
        roots1 := Roots(p1);
        G2 :=  Evaluate(aux[4], s1);
        case #roots1:
          when 2:  // two values for a
             a1 := roots1[1,1];
             a2 := roots1[2,1];
             return {@ elt< J | pola, PR![(G2-H1*a1)/H0,a1], 2 >,
                        elt< J | pola, PR![(G2-H1*a2)/H0,a2], 2 > @}; // 2 roots means H0 ne 0

          when 1: // unique value for a
            G1 := Evaluate(aux[5], s1);
            a := roots1[1,1];
            p2 := PR![-G1,H1,1]; // b is a root of p2
            roots2 := Roots(p2);
            case #roots2:
              when 2:  // two values for b
                return {@ elt< J | pola, PR![roots2[1,1],a], 2 >,
                        elt< J | pola, PR![roots2[2,1],a], 2 > @};
              when 1: // unique value for b
                return {@ elt< J | pola, PR![roots2[1,1],a], 2 > @};
              when 0:
                return {@ @};
            end case;
          when 0:
            return {@ @};
        end case;
      end if;

    elif not iszero(s0[2]) then
      // point has form <x - t, a*x^3 + b, 2> with s1 = [0, 1, t, c]
      f6 := aux[2,7]; // aux[2,7] = f6 = leading coeff. of f
      h3 := aux[6,4]; // aux[6,4] = h3 = leading coeff. of h
      t := s0[3]/s0[2];
      pola := PR![-t,1];
      p1:= PR![-f6,h3,1];
      if Characteristic(R) ne 2 then
        disc1 := Discriminant(p1); //disc1 = 4*f6 + h3^2
        if iszero(disc1) then  // a=0
          p2 := PR![-Evaluate(PR!aux[2], t), Evaluate(PR!aux[6], t), 1]; // y^2+h(t)y-f(t)
          disc2 := Discriminant(p2);
          if iszero(disc2) then  // unique value for b
            return {@ J ! [ pola, -Coefficient(p2,1)/2] @};
          else
            test, sqrt := IsSquare(disc2);
            if test then // two values for b
              re := -Coefficient(p2, 1)/2;
              im := sqrt/2;
              return {@ J | [pola,  re + im], [ pola, re - im] @};
            else
              return {@ @};
            end if; // test
          end if;
        else // 4*f6 + h3^2 ne 0
          test, sqrt := IsSquare(disc1);
          if test then // two values for a
            re := -Coefficient(p1,1)/2;
            im := sqrt/2;
            a1 := re + im;
            a2 := re - im;
            c := s0[4]/s0[2]; // c = 2*f6*t^3 + f5*t^2 - 2*y*a - h(t)*a - y*h3
            f5 := aux[2,6];
            b1,b2 := Explode([(f5*t^2 + h3*a*t^3 - Evaluate(PR!aux[6],t)*a - c)/(2*a+h3):a in [a1,a2]]); // y = a*t^3 + b, a^2+ h3*a = f6
            return {@ elt< J | pola, PR![b1,0,0,a1], 2 >,
                    elt< J | pola, PR![b2,0,0,a2], 2 > @};
          else
            return {@ @};
          end if;
        end if;
      else   // characteristic 2
        roots1 := Roots(p1);
        case #roots1:
          when 2:  // two values for a
            a1 := roots1[1,1];
            a2 := roots1[2,1];
            c := s0[4]/s0[2]; // c =  f5*t^2 - h(t)*a - y*h3
            f5 := aux[2,6];
            b1,b2 := Explode([(f5*t^2 + h3*a*t^3 - Evaluate(PR!aux[6],t)*a - c)/h3:a in [a1,a2]]); // y = a*t^3 + b, a^2+ h3*a = f6
            return {@ elt< J | pola, PR![b1,0,0,a1], 2 >,
                    elt< J | pola, PR![b2,0,0,a2], 2 > @};
          when 1: // unique value for a
            a := roots1[1,1];
            p2 := PR![-Evaluate(PR!aux[2], t), Evaluate(PR!aux[6], t), 1]; // y^2+h(t)y-f(t)
            roots2 := Roots(p2);
            case #roots2:
              when 2:  // two values for b
                return {@ elt< J | pola, PR![roots2[1,1],0,0,0], 1 >,
                        elt< J | pola, PR![roots2[2,1],0,0,0], 1 > @};
              when 1: // unique value for b
                return {@ elt< J | pola, PR![roots2[1,1],0,0,0], 1 > @};
              when 0:
                return {@ @};
            end case;
          when 0:
            return {@ @};
        end case;
      end if;
    elif not iszero(s0[3]) then
      // point has form <1, a*x^3 + b*x^2, 2> , 4*f6 + h3^2 cannot be zero in this case
      f6 := aux[2,7];
      h3 := aux[6,4];
      p:= PR![-f6,h3,1];
      if Characteristic(R) ne 2 then
        disc := Discriminant(p); //disc1 = 4*f6 + h3^2
        test, sqrt := IsSquare(disc);
        if test then // 2 different points at infinity
          re := -Coefficient(p,1)/2;
          im := sqrt/2;
          a1 := re + im;
          a2 := re - im;
          b1,b2 := Explode([(aux[2,6] - aux[6,3]*a)/(2*a + h3): a in [a1,a2]]);
          return {@ elt< J | 1, PR![0,0,b1,a1], 2 >,
                  elt< J | 1, PR![0,0,b2,a2], 2 > @};
        else
          return {@ @};
        end if;
      else  // characteristic 2
        roots := Roots(p);
        if #roots eq 2 then
          a1 := roots[1,1];
          a2 := roots[2,1];
          b1,b2 := Explode([(aux[2,6] - aux[6,3]*a)/h3: a in [a1,a2]]);
          return {@ elt< J | 1, PR![0,0,b1,a1], 2 >,
                        elt< J | 1, PR![0,0,b2,a2], 2 > @};
        else
          return {@ @};
        end if;
      end if;
    else
      return {@ J!0 @};
    end if;
end intrinsic;


////////////////// arithmetic //////////////////////////////

intrinsic '-'(P::SrfKumPt) -> SrfKumPt
{Returns the negation of P, equal to P itself.}
    return P;
end intrinsic;

intrinsic Double(P::SrfKumPt) -> SrfKumPt
{Returns the double of the point P.}
    K := Parent(P);
    L := Eltseq(P);
    s := [ Evaluate(d, L) : d in K`Delta ];
    return K`NormalizePoint(K, s);
end intrinsic;

intrinsic PseudoAdd(P1::SrfKumPt, P2::SrfKumPt, P3::SrfKumPt) -> SrfKumPt
{Given the images on the Kummer surface of points P, Q, P-Q on the
Jacobian, returns the image of P+Q.}
    K := Parent(P1);
    require K cmpeq Parent(P2) and K cmpeq Parent(P3):
            "Points are on different Kummer surfaces.";
    L12 := Eltseq(P1) cat Eltseq(P2);
    L3 := Eltseq(P3);
    i := K`SelectCoordinate(L3);
    BB := K`BBMatrix;
    c1 := L3[i]; c2 := Evaluate(BB[i,i], L12);
    L := [ c1*Evaluate(BB[i,j], L12) - L3[j]*c2 : j in [1..4] ];
    L[i] := c1*c2;
    return K!L;
    // Check if point really is on K here, since third argument might
    // not be image of P-Q.
end intrinsic;

intrinsic '*'(n::RngIntElt, P::SrfKumPt) -> SrfKumPt
{The n-th multiple of P on the Kummer surface K.}
    K := Parent(P);
    if n eq 0 then return K!0; end if;
    m := Abs(n);
    Px := K!0; Py := P; Pz := P;
    // invariants: Px = ax*P, Py = ay*P, Pz = az*P with
    //  ax + ay = az  and  ax + m*az = n .
    while true do
      if IsOdd(m) then
        Px := PseudoAdd(Px, Pz, Py);
      else
        Py := PseudoAdd(Py, Pz, Px);
      end if;
      m div:= 2;
      if m eq 0 then return Px; end if;
      Pz := Double(Pz);
    end while;
end intrinsic;

intrinsic '*'(P::SrfKumPt, n::RngIntElt) -> SrfKumPt
{The n-th multiple of P on the Kummer surface K.}
    return n*P;
end intrinsic;

intrinsic PseudoAddMultiple(P1::SrfKumPt, P2::SrfKumPt,
                            P3::SrfKumPt, n::RngIntElt) -> SrfKumPt
{Given the images on the Kummer surface of points P, Q, P-Q on the
Jacobian, returns the image of P+n*Q.}

    require Parent(P1) eq Parent(P2) and Parent(P1) eq Parent(P3):
            "Points must lie on the same Kummer surface.";
    if n lt 0 then
      P3 := PseudoAdd(P1, P2, P3); n := -n;
    end if;
    while true do
      // This is a variant of the multiplication algorithm above.
      if IsOdd(n) then
        P1 := PseudoAdd(P1, P2, P3);
      else
        P3 := PseudoAdd(P3, P2, P1);
      end if;
      n div:= 2;
      if n eq 0 then return P1; end if;
      P2 := Double(P2);
    end while;
end intrinsic;


//////////////////////////
//                      //
//   Transformations    //
//                      //
//////////////////////////


function KummerTransformation(K,t,e,u,k)
  // [t,e,u] is a transformation of genus 2 curves, where
  // t is an element of GL2, e is a unit and u is a polynomial of degree at most 3
  // this gives a linear map on Kummer coordinates
  f0,f1,f2,f3,f4,f5,f6 := Explode(K`AuxPolynomials[2]);
  h0,h1,h2,h3 := Explode(K`AuxPolynomials[6]);
  a,b,c,d := Explode(t);
  esq := e*e;
  det := a*d-b*c;
  u0 := Coefficient(u,0);
  u1 := Coefficient(u,1);
  u2 := Coefficient(u,2);
  u3 := Coefficient(u,3);
  l11 := -esq*(4*a^3*b*c*d^3*f2-2*f1*a^3*b*c^2*d^2-2*f1*a^2*b^2*c^3*d-3*f3*a^2*b^2*c*d^3-4*f5*a*b^3*d^4-f3*a^3*b*d^4-4*f5*b^4*c*d^3+2*f4*a^2*b^2*d^4+2*
f4*b^4*c^2*d^2-3*f3*a*b^3*c^2*d^2-f3*b^4*c^3*d-2*f1*a^4*c*d^3-2*f1*a*b^3*c^4+4*f4*a*b^3*c*d^3+4*a*b^3*c^3*d*f2+8*b^4*d^4*f6+6*a^4*c^2*d^2*f0+6*a^2*b^2*c^4*
f0-4*a^3*b*c^3*d*f0)/det^4;
  l12 := -e*(-b^4*c^3*d*u0*h3-4*b^4*c*d^3*u2*h3-4*a*b^3*d^4*u2*h3+6*a^2*b^2*c^4*u0*h0-2*a*b^3*c^4*u1*h0-3*a*b^3*c^2*d^2*u3*h0-4*a^3*b*c^3*d*u0*h0-2*a^3*b*c
^2*d^2*u1*h0-b^4*c^3*d*u3*h0+6*a^2*b^2*c^2*d^2*u2*h0+2*b^4*c^2*d^2*u1*h3-a^3*b*d^4*u0*h3-2*a^4*c*d^3*u1*h0-3*a*b^3*c^2*d^2*u0*h3-2*a^2*b^2*c^3*d*u1*h0+4*h1*
a*b^3*c^3*d*u1-3*h1*a*b^3*c^2*d^2*u2-2*h1*a^2*b^2*c^3*d*u0+4*h2*a*b^3*c*d^3*u2-3*h2*a^2*b^2*c*d^3*u1+6*h2*a^2*b^2*c^2*d^2*u0+4*h1*a*b^3*c*d^3*u3-3*h2*a*b^3*
c^2*d^2*u1+4*h1*a^3*b*c*d^3*u1+2*h2*b^4*c^2*d^2*u2-4*h2*b^4*c*d^3*u3-h2*a^3*b*d^4*u1+2*h2*a^2*b^2*d^4*u2+h2*b^4*c^4*u0-4*h2*a*b^3*d^4*u3-h2*b^4*c^3*d*u1+2*
h1*b^4*c^2*d^2*u3-2*h1*a*b^3*c^4*u0-h1*b^4*c^3*d*u2-3*h1*a^2*b^2*c*d^3*u2-2*h1*a^3*b*c^2*d^2*u0-2*h1*a^4*c*d^3*u0-h1*a^3*b*d^4*u2+2*h1*a^2*b^2*d^4*u3+h2*a^4
*d^4*u0+b^4*c^4*u2*h0+a^4*d^4*u2*h0+2*a^2*b^2*d^4*u1*h3-a^3*b*d^4*u3*h0+6*a^4*c^2*d^2*u0*h0-3*a^2*b^2*c*d^3*u3*h0-3*a^2*b^2*c*d^3*u0*h3+4*a*b^3*c*d^3*u1*h3+
8*b^4*d^4*u3*h3)/det^4;
  l13 := 2*(3*a^4*c^2*d^2*u0^2+3*a^2*b^2*c^4*u0^2+a^4*d^4*u0*u2+a^2*b^2*d^4*u2^2+b^4*c^4*u0*u2+b^4*c^2*d^2*u2^2+4*b^4*d^4*u3^2-3*a^2*b^2*c*d^3*u1*u2-3*a^2*
b^2*c*d^3*u0*u3-3*a*b^3*c^2*d^2*u0*u3+2*a^3*b*c*d^3*u1^2-2*a^3*b*c^2*d^2*u0*u1-3*a*b^3*c^2*d^2*u1*u2-a^3*b*d^4*u0*u3+2*a*b^3*c*d^3*u2^2+2*a*b^3*c^3*d*u1^2-2
*a^3*b*c^3*d*u0^2-2*a^4*c*d^3*u0*u1-4*a*b^3*d^4*u2*u3-2*a^2*b^2*c^3*d*u0*u1+6*a^2*b^2*c^2*d^2*u0*u2+4*a*b^3*c*d^3*u1*u3-2*a*b^3*c^4*u0*u1+2*a^2*b^2*d^4*u1*
u3-a^3*b*d^4*u1*u2-b^4*c^3*d*u0*u3-b^4*c^3*d*u1*u2+2*b^4*c^2*d^2*u1*u3-4*b^4*c*d^3*u2*u3)/det^4;
  l21 := esq*(-4*f2*a^2*b^2*c^3*d+6*f1*a^3*b*c^3*d-4*f4*a^2*b^2*c*d^3+f1*a^2*b^2*c^4+6*f5*a*b^3*c*d^3+f3*a^3*b*c*d^3+f5*b^4*c^2*d^2+f1*a^4*c^2*d^2-4*a^3*b*c^4*f0-4*a^4*c^3*d*f0+6*f3*a^2*b^2*c^2*d^2+f5*a^2*b^2*d^4-4*f2*a^3*b*c^2*d^2-4*f4*a*b^3*c^2*d^2+f3*a*b^3*c^3*d-4*b^4*c*d^3*f6-4*a*b^3*d^4*f6)/det^4;
  l22 := e*(h1*a^4*c^2*d^2*u0+h1*a^3*b*c*d^3*u2+h1*a^2*b^2*c^4*u0+h2*b^4*c^2*d^2*u3+h1*a*b^3*c^3*d*u2+h2*a^3*b*c*d^3*u1+h2*a^2*b^2*d^4*u3+h2*a*b^3*c^3*d*u1+6*h2*a*b^3*c
*d^3*u3+6*h1*a^3*b*c^3*d*u0-4*h1*a^3*b*c^2*d^2*u1-4*h1*a^2*b^2*c^3*d*u1+6*h1*a^2*b^2*c^2*d^2*u2-4*h1*a^2*b^2*c*d^3*u3-4*h1*a*b^3*c^2*d^2*u3-4*h2*a^3*b*c^2*d
^2*u0-4*h2*a^2*b^2*c^3*d*u0+6*h2*a^2*b^2*c^2*d^2*u1-4*h2*a^2*b^2*c*d^3*u2-4*h2*a*b^3*c^2*d^2*u2-a^4*d^4*u3*h0-b^4*c^4*u3*h0+a^4*c^2*d^2*u1*h0-4*a^4*c^3*d*u0
*h0+6*a^3*b*c^3*d*u1*h0-4*a^3*b*c^4*u0*h0-4*a^2*b^2*c^3*d*u2*h0+5*a*b^3*c^3*d*u3*h0+a^2*b^2*c^4*u1*h0-4*a^3*b*c^2*d^2*u2*h0+5*a^3*b*c*d^3*u3*h0+b^4*c^2*d^2*
u2*h3+a^2*b^2*d^4*u2*h3+5*a^3*b*c*d^3*u0*h3+6*a*b^3*c*d^3*u2*h3-4*a^2*b^2*c*d^3*u1*h3+5*a*b^3*c^3*d*u0*h3-4*a*b^3*c^2*d^2*u1*h3-4*a*b^3*d^4*u3*h3-4*b^4*c*d^
3*u3*h3-a^4*d^4*u0*h3-b^4*c^4*u0*h3)/det^4;
  l23 := (4*a^4*c^3*d*u0^2+2*a^4*d^4*u0*u3+4*a^3*b*c^4*u0^2+4*a*b^3*d^4*u3^2+2*b^4*c^4*u0*u3+4*b^4*c*d^3*u3^2-2*a^4*c^2*d^2*u0*u1-12*a^3*b*c^3*d*u0*u1+8*a^3*b*c^2*d^2
*u0*u2+4*a^3*b*c^2*d^2*u1^2-10*a^3*b*c*d^3*u0*u3-2*a^3*b*c*d^3*u1*u2-2*a^2*b^2*c^4*u0*u1+8*a^2*b^2*c^3*d*u0*u2+4*a^2*b^2*c^3*d*u1^2-12*a^2*b^2*c^2*d^2*u1*u2
+8*a^2*b^2*c*d^3*u1*u3+4*a^2*b^2*c*d^3*u2^2-2*a^2*b^2*d^4*u2*u3-10*a*b^3*c^3*d*u0*u3-2*a*b^3*c^3*d*u1*u2+8*a*b^3*c^2*d^2*u1*u3+4*a*b^3*c^2*d^2*u2^2-12*a*b^3
*c*d^3*u2*u3-2*b^4*c^2*d^2*u2*u3)/det^4;
  l31 := -esq*(6*b^4*c^2*d^2*f6-4*a*b^3*c*d^3*f6+6*a^2*b^2*d^4*f6-2*f5*a^2*b^2*c*d^3+4*a*b^3*c^3*d*f4-2*f5*a*b^3*c^2*d^2-f3*a*b^3*c^4+8*a^4*c^4*f0-2*f5*
a^3*b*d^4-3*f3*a^3*b*c^2*d^2+4*f2*a^3*b*c^3*d+2*f2*a^2*b^2*c^4-3*f3*a^2*b^2*c^3*d-f3*a^4*c*d^3+4*a^3*b*c*d^3*f4-4*f1*a^3*b*c^4-4*f1*a^4*c^3*d+2*f2*a^4*c^2*d
^2-2*f5*b^4*c^3*d)/det^4;
  l32 := -e*(-4*h1*a^3*b*c^4*u0-2*a^3*b*d^4*u2*h3+2*h2*a^2*b^2*c^4*u0-4*h1*a^4*c^3*d*u0+2*a^2*b^2*c^4*u2*h0+2*a^4*c^2*d^2*u2*h0-4*a^4*c^3*d*u1*h0-a*b^3*c^4
*u3*h0-4*a^3*b*c^4*u1*h0-a^4*c*d^3*u3*h0-3*a^2*b^2*c^3*d*u3*h0+4*a^3*b*c^3*d*u2*h0-3*a^3*b*c^2*d^2*u3*h0-2*h2*a*b^3*c^2*d^2*u3-2*h2*a^3*b*d^4*u3-2*h2*b^4*c^
3*d*u3+4*h2*a*b^3*c^3*d*u2-h1*a*b^3*c^4*u2-2*h2*a^2*b^2*c*d^3*u3-h2*a*b^3*c^4*u1-h1*a^4*c*d^3*u2-3*h2*a^3*b*c^2*d^2*u1+8*a^4*c^4*u0*h0+6*a^2*b^2*d^4*u3*h3-a
^4*c*d^3*u0*h3-a*b^3*c^4*u0*h3-2*a*b^3*c^2*d^2*u2*h3-4*a*b^3*c*d^3*u3*h3+b^4*c^4*u1*h3+a^4*d^4*u1*h3-h2*a^4*c*d^3*u1+4*h1*a^3*b*c^3*d*u1-3*a^3*b*c^2*d^2*u0*
h3-2*a^2*b^2*c*d^3*u2*h3-3*a^2*b^2*c^3*d*u0*h3+6*a^2*b^2*c^2*d^2*u1*h3-2*b^4*c^3*d*u2*h3+6*b^4*c^2*d^2*u3*h3+4*h2*a^3*b*c^3*d*u0+4*h2*a^3*b*c*d^3*u2-3*h1*a^
3*b*c^2*d^2*u2-3*h1*a^2*b^2*c^3*d*u2+6*h1*a^2*b^2*c^2*d^2*u3+h1*a^4*d^4*u3+2*h1*a^4*c^2*d^2*u1+2*h1*a^2*b^2*c^4*u1+2*h2*a^4*c^2*d^2*u0-3*h2*a^2*b^2*c^3*d*u1
+h1*b^4*c^4*u3)/det^4;
  l33 := 2*(3*b^4*c^2*d^2*u3^2+b^4*c^4*u1*u3+a^4*d^4*u1*u3+a^4*c^2*d^2*u1^2+a^2*b^2*c^4*u1^2+3*a^2*b^2*d^4*u3^2+4*a^4*c^4*u0^2-3*a^3*b*c^2*d^2*u1*u2-3*a^3*
b*c^2*d^2*u0*u3-3*a^2*b^2*c^3*d*u0*u3-3*a^2*b^2*c^3*d*u1*u2+6*a^2*b^2*c^2*d^2*u1*u3-2*a^2*b^2*c*d^3*u2*u3-4*a^4*c^3*d*u0*u1-2*a^3*b*d^4*u2*u3+2*a^3*b*c*d^3*
u2^2+2*a^3*b*c^3*d*u1^2+2*a^2*b^2*c^4*u0*u2+4*a^3*b*c^3*d*u0*u2-2*a*b^3*c*d^3*u3^2+2*a^4*c^2*d^2*u0*u2-2*b^4*c^3*d*u2*u3+2*a*b^3*c^3*d*u2^2-a*b^3*c^4*u0*u3-
a*b^3*c^4*u1*u2-2*a*b^3*c^2*d^2*u2*u3-4*a^3*b*c^4*u0*u1-a^4*c*d^3*u1*u2-a^4*c*d^3*u0*u3)/det^4;
 s := [d^2*k[1]+c*d*k[2]+c^2*k[3], 2*b*d*k[1]+(a*d+b*c)*k[2]+2*a*c*k[3],b^2*k[1]+a*b*k[2]+a^2*k[3],
       (esq*k[4]+(l11+l12+l13)*k[1]+(l21+l22+l23)*k[2]+(l31+l32+l33)*k[3])/det^2];
 return [s[i]/det:i in [1..4]];
end function;


intrinsic Evaluate(f::MapIsoSch,P::SrfKumPt) -> SrfKumPt
    {The image of P under the map of Kummer surfaces induced by f.}

    K1 := KummerSurface(Jacobian(Domain(f)));
    K2 := KummerSurface(Jacobian(Codomain(f)));
    require K1 eq Parent(P) :  "Argument 2 must be a point of the " *
        "Kummer surface of the Jacobian of the domain of argument 1.";
    t,e,u := IsomorphismData(f);
    k := Eltseq(P);
    return K2!KummerTransformation(K1,t,e,u,k);
end intrinsic;


//////////////////////////
//                      //
// change base field    //
//                      //
//////////////////////////

// NOTE: BaseChange = BaseExtend at bind level, so do not define both here!

intrinsic BaseExtend(K::SrfKum, F::Rng) -> SrfKum
    {Extends the base field of the Kummer surface K to F.}
    K1 := KummerSurfaceRaw(BaseExtend(Jacobian(K), F));
    R := CoefficientRing(K1);
    P1 := ChangeRing(Parent(K`Equation), R);
    K1`Equation := P1!(K`Equation);
    K1`DEquation := [ P1!pol : pol in K`DEquation ];
    K1`Delta := [ P1!pol : pol in K`Delta ];
    P2 := ChangeRing(Universe(K`BBMatrix[1]), R);
    K1`BBMatrix := [ [ P2!pol : pol in b ] : b in K`BBMatrix ];
    FillInData(K1 : LastOnly := true);
    return K1;
end intrinsic;

intrinsic BaseExtend(K::SrfKum, j::Map) -> SrfKum
    {Extends the base field of the Kummer surface K by applying j.}
    return KummerSurface(BaseExtend(Jacobian(K), j));
end intrinsic;

intrinsic BaseExtend(K::SrfKum, n::RngIntElt) -> SrfKum
    {Extends the finite base field of the Kummer surface K to
    its degree n extension.}
    K1 := KummerSurfaceRaw(BaseExtend(Jacobian(K),n));
    R := CoefficientRing(K1);
    P1 := ChangeRing(Parent(K`Equation), R);
    K1`Equation := P1!(K`Equation);
    K1`DEquation := [ P1!pol : pol in K`DEquation ];
    K1`Delta := [ P1!pol : pol in K`Delta ];
    P2 := ChangeRing(Universe(K`BBMatrix[1]), R);
    K1`BBMatrix := [ [ P2!pol : pol in b ] : b in K`BBMatrix ];
    FillInData(K1 : LastOnly := true);
    return K1;
end intrinsic;

////////////////// various functions //////////////////////////////

intrinsic BaseField(K::SrfKum) -> Fld
    {The base field of the Kummer surface K. }
    return BaseField(Jacobian(K));
end intrinsic;

intrinsic BaseRing(K::SrfKum) -> Fld
    {The base field of the Kummer surface K. }
    return BaseRing(Jacobian(K));
end intrinsic;

intrinsic DefiningPolynomial(K::SrfKum) -> RngMPolElt
    {The homogeneous defining polynomial for K. }
    return K`Equation;
end intrinsic;
