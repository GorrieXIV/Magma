freeze;

intrinsic ConstaCyclicCode(n::RngIntElt, f::RngUPolElt, c::FldFinElt) -> Code
{Return the length n code generated by consta-cyclic shifts by c of the
coefficients of f};

    // check for c in the right field, (with f) and n being longer than f
    F := BaseRing(f);
    require Type(F) eq FldFin : "f must be over a finite field";
    require IsCoercible(F, c) : "c must lie in the same field as f";
    require c ne 0 : "The constant c must be non-zero";

    // reduce f by x^n - c
    f := GCD(f, (Parent(f).1)^n - c);
 
    coeffs := Coefficients(f);
    coeffs cat:= [0 : i in [1 .. n - #coeffs]];

    // cyclic shifter
    gen := Matrix([ Rotate(coeffs, i) : i in [0 .. n - 1 - Degree(f)] ]);
 
    return LinearCode(gen);
end intrinsic;

