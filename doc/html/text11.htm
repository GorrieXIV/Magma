<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Conditional Statements and  Expressions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text12.htm">[Next]</A><A  HREF = "text10.htm">[Prev]</A> <A  HREF = "text12.htm">[Right]</A> <A  HREF = "text10.htm">[Left]</A> <A  HREF = "text3.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "56">Conditional Statements and  Expressions</A></H3>

<P>
<P>
<P>
The conditional statement has the usual form 
<TT>if ... then ... else ... end if;</TT>. 
It has several variants. Within the statement, a special prompt
will appear, indicating that the statement has yet to be closed. 
Conditional statements may be nested.
<P>
The conditional expression, <TT>select ... else</TT>, is used for in-line conditionals.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text11.htm#57">The Simple Conditional Statement</A>
<LI> <A  HREF = "text11.htm#61">The Simple Conditional Expression</A>
<LI> <A  HREF = "text11.htm#63">The Case Statement</A>
<LI> <A  HREF = "text11.htm#66">The Case Expression</A>
</UL>
<H4><A NAME = "57">The Simple Conditional Statement</A></H4>



<H5><A NAME = "58">if boolexpr<sub>1</sub> then statements<sub>1</sub> else statements<sub>2</sub> end if : -&gt;</A></H5>
<H5>if boolexpr<sub>1</sub> then statements end if : -&gt;</H5>
<BLOCKQUOTE>
The standard conditional statement: the value of the Boolean expression
is evaluated. If the result is {<TT>true</TT>}, the first block of statements
is executed, if the result is {<TT>false</TT>} the second block of statements
is executed. If no action is desired in the latter case, the construction
may be abbreviated to the second form above.
</BLOCKQUOTE>
<H5><A NAME = "59">if boolexpr<sub>1</sub> then statements<sub>1</sub> elif boolexpr<sub>2</sub> then statements<sub>2</sub> else statements<sub>3</sub> end if : -&gt;</A></H5>
<BLOCKQUOTE>
Since nested conditions occur frequently, <TT>elif</TT> provides a convenient
abbreviation for <TT>else if</TT>, which also restricts the `level':
<P>
<P>
<P>
<PRE>
if boolexpr then
   statments1
elif boolxpr2 then
   statments2
else
   statments3
end if;
</PRE>
is equivalent to
<P>
<P>
<PRE>
if boolxpr1 then
    statments1
else 
    if boolxpr2 then
       statments2
    else
       statments3
    end if;
end if;
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "60">Example <TT>State_if (H1E10)</TT></A></H3>
<P>
<P>
<PRE>
&gt; m := Random(2, 10000);
&gt; if IsPrime(m) then
&gt;     m, "is prime";
&gt; else
&gt;     Factorization(m);
&gt; end if;
[ &lt;23, 1&gt;, &lt;37, 1&gt; ]
</PRE>
<HR>
<H4><A NAME = "61">The Simple Conditional Expression</A></H4>



<HR>
<H3><A NAME = "62">Example <TT>State_InLineConditional (H1E11)</TT></A></H3>
Using the <TT>select ... else</TT> construction, we wish to assign the 
sign of y to the variable s.
<P>
<P>
<PRE>
&gt; y := 11;
&gt; s := (y gt 0) select 1 else -1;
&gt; s;
1
</PRE>
This is not quite right (when y = 0), but
fortunately we can nest <TT>select ... else </TT> constructions:
<P>
<P>
<PRE>
&gt; y := -3;
&gt; s := (y gt 0) select 1 else (y eq 0 select 0 else -1);
&gt; s;
-1
&gt; y := 0;
&gt; s := (y gt 0) select 1 else (y eq 0 select 0 else -1);
&gt; s;
0
</PRE>
The <TT>select ... else </TT> construction is particularly important in building
sets and sequences, because it enables in-line <TT>if</TT> constructions.
Here is a sequence containing the first 100 entries of the Fibonacci
sequence:
<P>
<P>
<PRE>
&gt;  f := [ i gt 2 select Self(i-1)+Self(i-2) else 1 : i in [1..100] ];
</PRE>
<HR>
<H4><A NAME = "63">The Case Statement</A></H4>



<H5><A NAME = "64">case expr : when expr<sub>i</sub> : statements end case : -&gt;</A></H5>
<BLOCKQUOTE>
The expression following <TT>case</TT> is evaluated. 
The statements following the first expression whose value equals
this value are executed, and then the <TT>case</TT> statement has finished.
If none of the values of the expressions equal the value of the <TT>case</TT> expression,
then the statements following <TT>else</TT> are executed. 
If no action is desired in the latter case, the construction
may be abbreviated to the second form above.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "65">Example <TT>State_case (H1E12)</TT></A></H3>
<P>
<P>
<PRE>
&gt; x := 73; 
&gt; case Sign(x):
&gt;    when 1: 
&gt;       x, "is positive";
&gt;    when 0: 
&gt;       x, "is zero";    
&gt;    when -1:
&gt;       x, "is negative";
&gt; end case;
73 is positive
</PRE>
<HR>
<H4><A NAME = "66">The Case Expression</A></H4>



<H5><A NAME = "67">case&lt; expr | expr<sub>left, 1</sub> : expr_((right), 1), ..., expr_((left), n) : expr_((right), n), default : expr<sub>def</sub>&gt; : -&gt;</A></H5>
<BLOCKQUOTE>
This is the expression form of <TT>case</TT>.
The expr is evaluated to the value v. Then each of the left-hand expressions
expr_((left), i) is evaluated until one is found whose value
equals v; if this happens the value of the corresponding right-hand
expression expr_((right), i) is returned. If no left-hand expression
with value v is found the value of the default expression
expr<sub>def</sub> is returned.
<P>
The default case cannot be omitted, and must come last.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text12.htm">[Next]</A><A  HREF = "text10.htm">[Prev]</A> <A  HREF = "text12.htm">[Right]</A> <A  HREF = "text10.htm">[Left]</A> <A  HREF = "text3.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>