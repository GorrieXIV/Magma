<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Basic Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text619.htm">[Next]</A><A  HREF = "text617.htm">[Prev]</A> <A  HREF = "text619.htm">[Right]</A> <A  HREF = "text617.htm">[Left]</A> <A  HREF = "text612.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "6683">Basic Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text618.htm#6684">Accessing Group Information</A>
<LI> <A  HREF = "text618.htm#6693">Names of Finite Groups</A>
</UL>
<H4><A NAME = "6684">Accessing Group Information</A></H4>

<P>
<P>
The functions in this group provide access to basic information 
stored for a group G.


<H5><A NAME = "6685">G . i : Grp, RngIntElt -&gt; GrpElt</A></H5>
<BLOCKQUOTE>
The i-th defining generator for G, if i&gt;0. If i&lt;0, then the
inverse of the -i-th defining generator is returned.
The generator <TT>G.0</TT> is equivalent to <TT>Identity(G)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "6686">Generators(G) : Grp -&gt; { GrpFinElt }</A></H5>
<BLOCKQUOTE>
A set containing the defining generators for G.
</BLOCKQUOTE>
<H5><A NAME = "6687">NumberOfGenerators(G) : Grp -&gt; RngIntElt</A></H5>
<H5>Ngens(G) : Grp -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of defining generators for G.
</BLOCKQUOTE>
<H5><A NAME = "6688">Generic(G) : Grp -&gt; Grp</A></H5>
<BLOCKQUOTE>
Given a group G in the category <A  HREF = "text630.htm#GrpPerm"> <TT>GrpPerm</TT></A> or <A  HREF = "text654.htm#GrpMat"> <TT>GrpMat</TT></A>, return the
generic group containing G, i.e., the largest group in which G
is naturally embedded. The precise definition of generic group
depends upon the category to which G belongs.
</BLOCKQUOTE>
<H5><A NAME = "6689">Parent(g) : GrpElt -&gt; Grp</A></H5>
<BLOCKQUOTE>
The parent group G for the group element g.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "6690">Example <TT>Grp_Generators (H62E13)</TT></A></H3>
The Suzuki simple group G=Sz(8) is constructed.
Its generic group is GL(4, K),
where K is the finite field with 8 elements.
The field K is constructed first,
so that its generator may be given the printname z.
Then the three generators of G are printed,
in the standard order of indexing.
<P>
<P>
<PRE>
&gt; K&lt;z&gt; := GF(2, 3);
&gt; G := SuzukiGroup(8);         
&gt; Generic(G);
GL(4, GF(2, 3))
&gt; Ngens(G);
3
&gt; for i in [1..3] do
&gt;    print "generator", i, G.i;                      
&gt;    print "order", Order(G.i), "\r";
&gt; end for;
generator 1 
[  0   0   0   1]
[  0   0   1   0]
[  0   1   0   0]
[  1   0   0   0]
order 2 


generator 2 
[z^2   0   0   0]
[  0 z^6   0   0]
[  0   0   z   0]
[  0   0   0 z^5]
order 7 


generator 3 
[  1   0   0   0]
[z^2   1   0   0]
[  0   z   1   0]
[z^5 z^3 z^2   1]
order 4 
</PRE>
<HR>
<H5><A NAME = "6691">Orbit(G, M, x) : Grp, Any, Any -&gt; Any</A></H5>
<BLOCKQUOTE>
Given a finitely generated group G that acts on the parent structure
of x through the map (or user defined function) M, compute the 
orbit of x under G. Thus, for every generator g of G, 
M(g) must return a function that can be applied to x or any
other element in the parent of x.
<P>
If the orbit is infinite, this process will
eventually run out of memory.
</BLOCKQUOTE>
<H5><A NAME = "6692">OrbitClosure(G, M, S) : Grp, Any, Any -&gt; Any</A></H5>
<BLOCKQUOTE>
Given a finitely generated group G acting on the universe of S through
the map or user defined function M, compute the smallest subset T 
containing S that is G-invariant.
Thus, for every generator g of G, 
M(g) must return a function that can be applied to an arbitrary element
in the universe of S.
<P>
If the orbit closure is infinite, this process will
eventually run out of memory.
</BLOCKQUOTE>
<H4><A NAME = "6693">Names of Finite Groups</A></H4>



<P>
<P>
Small groups (of order &lt;512, not divisible by 128) have a unique
name each, and <TT>Group(GroupName(G))</TT> always returns a group isomorphic 
to G. For larger groups, Magma attempts to recognize direct products, wreath 
products and split extensions, and uses chief series if that fails.  
With <TT>TeX:=true</TT>, the returned string is in LaTeX format.
<P>
<P>
<P>
<P>
Here is a list of notation used by <TT>GroupName</TT>. See also example below.
<P>
<P>
<P>
<P>
halign{<TT>#</TT>hfil&amp;#hfil cr
        &amp; <B>Basic groups</B>cr
  C n  &amp; Cyclic group C<sub>n</sub>, e.g. <TT>C48</TT>cr
  D n  &amp; Dihedral group D<sub>n</sub> of order 2n cr
  S n  &amp; Symmetric group S<sub>n</sub> cr
  A n  &amp; Alternating group A<sub>n</sub> cr
      &amp; <B>Operators, high to low precedence</B>cr
  ^ &amp; power, e.g <TT>C2^2</TT>cr
  wr     &amp; wreath product, e.g. <TT>C2wrC2=C2^2:C2=D4</TT>cr
 : &amp; semidirect product, i.e. a split extension cr
  .      &amp; (generally) non-split extension cr
  *      &amp; direct product cr
         &amp; <B>Other standard groups</B>cr
  F q  &amp; Frobenius group F<sub>q</sub>:F<sub>q</sub><sup> x </sup> cr
  He p &amp; Heisenberg group of order p<sup>3</sup>cr
  Q n  &amp; (Generalized) quaternion group, n=2<sup>k</sup>cr
  SD n &amp; Semi-dihedral group C_(2<sup>k - 1</sup>):C<sub>2</sub> (n=2<sup>k</sup>) with C<sub>2</sub> 
          acting as 2<sup>k - 2</sup> - 1cr
  OD n &amp; Other-dihedral group C_(2<sup>k - 1</sup>):C<sub>2</sub> (n=2<sup>k</sup>) with C<sub>2</sub> 
          acting as 2<sup>k - 2</sup> + 1cr
         &amp; <B>Simple, almost-simple and linear groups</B>cr
  M n  &amp; Matthieu group (n&isin;{11, 12, 21, 22, 23, 24})cr
  GL(n,q) &amp; general linear group; also SL,AGL,ASL,AGammaL,ASigmaL,PGL,cr
          &amp; PSL (=L),PGammaL,PSigmaL,SU,PSU,PGammaU,PSigmaU,O (=GO),SO,cr
          &amp; PSO,PGO,PGO+,PGO-,POmega,POmega+,POmega-,Sp,PSp,PSigmaSp cr
  B(n,q)  &amp; simple group of Lie type, also C,D,E,F,G,2A,2B,2D,2E,2F,2G,3D cr
  Sz(n)   &amp; Suzuki simple group, n=2<sup>k</sup>cr
  J1      &amp; sporadic simple group; also Mn (see above),J2,J3,J4,HS,McL,Suz,cr
          &amp; Co1,Co2,Co3,HE,Fi22,Fi23,Fi24,Ly,Ru,ON,TH,HN,BM,M cr
}
<H5><A NAME = "6694">GroupName(G) : Grp -&gt; MonStgElt</A></H5>

<PRE>    TeX: BoolElt                        Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Short name of a finite group G, as an abstract group.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "6695">Example <TT>Grp_grp-groupname (H62E14)</TT></A></H3>
<P>
<P>
<PRE>
&gt; [GroupName(G): G in SmallGroups(24)];
[ C3:C8, C24, SL(2,3), C3:Q8, C4*S3, D12, C2*C3:C4, C3:D4, C2*C12, C3*D4,
   C3*Q8, S4, C2*A4, C2^2*S3, C2^2*C6 ]
&gt; GroupName(AlternatingGroup(10): TeX:=true);
A_{10}
</PRE>
<HR>
<H5><A NAME = "6696">Group(s) : MonStgElt -&gt; Grp</A></H5>
<BLOCKQUOTE>
A finite group from its name. See <TT>GroupName</TT> and the example below.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "6697">Example <TT>Grp_grp-group (H62E15)</TT></A></H3>
<P>
<P>
<PRE>
&gt; G0:=Group("C10^2*C3");    // cyclic and abelian
&gt; G1:=Group("D5");          // dihedral Dn of order 2n
&gt; G2:=Group("A5");          // alternating
&gt; G3:=Group("S5");          // symmetric
&gt; 
&gt; G4:=Group("SL(2,3)");     // linear: GL, SL, AGL, ASL, AGammaL, ASigmaL, PGL, 
&gt; G5:=Group("SL(2,F3)");    //   PSL (=L), PGammaL, PSigmaL, SU, PSU, PGammaU, 
&gt; G6:=Group("SL_2(3)");     //   PSigmaU, O (=GO), SO, PSO, PGO, PGO+, PGO-, 
&gt; G7:=Group("SL2(3)");      //   POmega, POmega+, POmega-, Sp, PSp, PSigmaSp
&gt; 
&gt; G8:=Group("S3*GL(4,2)");  // Products 
&gt; G9:=Group("C41:C40");     // Split extensions that are not direct products,
&gt;                           // [usually with largest action of the quotient group]
&gt; G10:=Group("A5wrC2");     // Wreath products
&gt; 
&gt; G11:=Group("C2^3.C4");             // unique names returned by GroupName 
&gt;                                    // when |G|&lt;512, not multiple of 128
&gt; G12:=Group("A5*A_5*A_{5}*Alt(5)"); // name variations
&gt; G13:=Group("D10:C8.C2*C3");        // operator order ^ &gt; wr &gt; : &gt; . &gt; *
&gt;                                    // (so read left to right in this example)
&gt;                                  
&gt; G14:=Group("&lt;12,1&gt;");        // Small group database (C3:C4)
&gt; G14:=Group("g12n1");         //   same group
&gt; G15:=Group("T&lt;12,48&gt;");      // Transitive group database (C2^2*S4)
&gt; G15:=Group("t12n48");        //   same group
&gt;                              // Simple groups: Lie Type A,B,C,D,E,F,G, returned
&gt; G16:=Group("C(4,2)");        //   as matrix groups via standard representation
Warning: Projective representation
&gt; G17:=Group("Sz(32)");        // Simple groups: Suzuki
&gt; G18:=Group("J1*Co3*M11");    // Simple groups: sporadic
&gt; G19:=Group("PGL(4,3)`2");    // Names from the almost simple group database 
&gt; 
&gt; G20:=Group("He11");          // Heisenberg
&gt; G21:=Group("F13");           // Frobenius group Fn of order n(n-1)
&gt; G22:=Group("Q8");            // Quasi-cyclic groups of normal 2-rank one:
&gt; G23:=Group("SD16");          //   Dihedral, (generalized) quaternion,
&gt; G24:=Group("OD16");          //   semi-dihedral, the `other-dihedral' one.
&gt;                                    
&gt; [GroupName(eval "G"*Sprint(n)): n in [1..24]];     // back to names
[ D5, A5, S5, SL(2,3), SL(2,3), SL(2,3), SL(2,3), S3*A8, F41, A5wrC2, C2^3.C4,
   A5^4, C3*D10:C8.C2, C3:C4, C2^2*S4, C(4,2), 2B(2,32), J1*Co3*M11,
   PSL(4,3).C2^2, He11, F13, Q8, SD16, OD16 ]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text619.htm">[Next]</A><A  HREF = "text617.htm">[Prev]</A> <A  HREF = "text619.htm">[Right]</A> <A  HREF = "text617.htm">[Left]</A> <A  HREF = "text612.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>