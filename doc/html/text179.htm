<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Dirichlet Characters</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text181.htm">[Next]</A><A  HREF = "text178.htm">[Prev]</A> [_____] <A  HREF = "text178.htm">[Left]</A> <A  HREF = "text171.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1432">Dirichlet Characters</A></H3>

<P>
<P>
<P>
Let R be a ring.  Then a <I>Dirichlet character 
over R of modulus N</I> is a homomorphism 
&epsilon; : (Z/NZ)<sup> * </sup> -&gt; R<sup> * </sup>,
where R<sup> * </sup> is the group of invertible elements of R.  
We extend &epsilon; to a set theoretic map on the whole
of Z by defining &epsilon;(x) = 0 if gcd(x, N) != 1.
The <I>conductor</I> of &epsilon; is the smallest positive
integer M such that the homomorphism 
(Z/NZ)<sup> * </sup> -&gt; R<sup> * </sup>
factors through (Z/MZ)<sup> * </sup> via the natural
map (Z/NZ)<sup> * </sup> -&gt; (Z/MZ)<sup> * </sup>.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text179.htm#1433">Creation</A>
<LI> <A  HREF = "text179.htm#1440">Element Creation</A>
<LI> <A  HREF = "text179.htm#1446">Attributes of Dirichlet Groups</A>
<LI> <A  HREF = "text179.htm#1456">Attributes of Elements</A>
<LI> <A  HREF = "text179.htm#1471">Evaluation</A>
<LI> <A  HREF = "text179.htm#1476">Arithmetic</A>
<LI> <A  HREF = "text179.htm#1481">Example</A>
</UL>
<H4><A NAME = "1433">Creation</A></H4>



<H5><A NAME = "1434">DirichletGroup(N) : RngIntElt -&gt; GrpDrch</A></H5>
<BLOCKQUOTE>
The group of Dirichlet characters modulo N with values
in <TT>RationalField()</TT>.
(Note that this is a group of exponent at most 2.)
</BLOCKQUOTE>
<H5><A NAME = "1435">FullDirichletGroup(N) : RngIntElt -&gt; GrpDrch</A></H5>
<BLOCKQUOTE>
The group of Dirichlet characters modulo N taking values
in the mth cyclotomic field, where m is the exponent of the 
unit group modulo N.
</BLOCKQUOTE>
<H5><A NAME = "1436">DirichletGroup(N,R) : RngIntElt, Rng -&gt; GrpDrch</A></H5>
<BLOCKQUOTE>
The group of Dirichlet characters modulo N with values in the ring R.
Here R can be the integers, rationals, a number field or a finite field.
(Note that this group may be smaller than the full Dirichlet group.)
</BLOCKQUOTE>
<H5><A NAME = "1437">DirichletGroup(N,R,z,r) : RngIntElt, Rng, RngElt, RngIntElt -&gt; GrpDrch</A></H5>
<BLOCKQUOTE>
The group of Dirichlet characters mod N with values in the 
cyclic subgroup generated by the root of unity z in the ring R. 
Here z must be an element of R of exact order r
(where r may be smaller than the exponent of the full Dirichlet group).
</BLOCKQUOTE>
<H5><A NAME = "1438">BaseExtend(G, R) : GrpDrch, Rng -&gt; GrpDrch</A></H5>
<H5>BaseExtend(G, R, z) : GrpDrch, Rng, RngElt -&gt; GrpDrch</H5>
<BLOCKQUOTE>
The group of Dirichlet characters corresponding to G with values
in the ring R. In the second form, the distinguished
root of unity of the base ring of G is identified with the 
given element z.
</BLOCKQUOTE>
<H5><A NAME = "1439">AssignNames(~G, S) : GrpDrch, [MonStgElt] -&gt;</A></H5>
<BLOCKQUOTE>
Assign names to the generators of the Dirichlet group G.
</BLOCKQUOTE>
<H4><A NAME = "1440">Element Creation</A></H4>



<H5><A NAME = "1441">Elements(G) : GrpDrch -&gt; [GrpDrchElt]</A></H5>
<BLOCKQUOTE>
A sequence containing all Dirichlet characters in the Dirichlet group G.
</BLOCKQUOTE>
<H5><A NAME = "1442">Random(G) : GrpDrch -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
A random element of the Dirichlet group G.
</BLOCKQUOTE>
<H5><A NAME = "1443">G . i : GrpDrch, RngIntElt -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
The ith generator of the group G.
</BLOCKQUOTE>
<H5><A NAME = "1444">G ! x : GrpDrch, Any -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
This coerces the given element x into the Dirichlet group G.
Here x may be a Dirichlet character belonging to a different 
group, or a sequence of integers specifying an element of the
<TT>AbelianGroup</TT> of G.
</BLOCKQUOTE>
<H5><A NAME = "1445">KroneckerCharacter(D) : RngIntElt -&gt; GrpDrchElt</A></H5>
<H5>KroneckerCharacter(D, R) : RngIntElt, Rng -&gt; GrpDrchElt</H5>
<BLOCKQUOTE>
The Kronecker character n |-&gt; (d/n), where d is the 
fundamental discriminant associated to the integer D.
<P>
When a ring R is given, this is returned as a character
with values in R.
</BLOCKQUOTE>
<H4><A NAME = "1446">Attributes of Dirichlet Groups</A></H4>



<H5><A NAME = "1447">BaseRing(G) : GrpDrch -&gt; Rng</A></H5>
<BLOCKQUOTE>
The ring in which characters in G take values.
</BLOCKQUOTE>
<H5><A NAME = "1448">Modulus(G) : GrpDrch -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integer N such that G is a group of Dirichlet characters
on Z/N.
</BLOCKQUOTE>
<H5><A NAME = "1449">Order(G) : GrpDrch -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The order of the Dirichlet group G.
</BLOCKQUOTE>
<H5><A NAME = "1450">Exponent(G) : GrpDrch -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The exponent of the Dirichlet group G.
</BLOCKQUOTE>
<H5><A NAME = "1451">NumberOfGenerators(G) : GrpDrch -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of generators of the Dirichlet group G.
</BLOCKQUOTE>
<H5><A NAME = "1452">Generators(G) : GrpDrch -&gt; [GrpDrchElt]</A></H5>
<BLOCKQUOTE>
A sequence containing generators for the Dirichlet group G.
</BLOCKQUOTE>
<H5><A NAME = "1453">UnitGenerators(G) : GrpDrch -&gt; [RngIntElt]</A></H5>
<BLOCKQUOTE>
This returns an ordered sequence of integers that reduce to
"canonical" generators of the unit group of Z/N, 
where N is the modulus of G.
</BLOCKQUOTE>
<H5><A NAME = "1454">GaloisConjugacyRepresentatives(G) : GrpDrch -&gt; [GrpDrchElt]</A></H5>
<H5>GaloisConjugacyRepresentatives(seq) : [GrpDrchElt] -&gt; [GrpDrchElt]</H5>
<BLOCKQUOTE>
This returns a sequence containing one representative from each 
Galois conjugacy class (over Q) of characters corresponding 
to a character in the given group or the given sequence.
</BLOCKQUOTE>
<H5><A NAME = "1455">AbelianGroup(G) : GrpDrch -&gt; GrpAb, Map</A></H5>
<BLOCKQUOTE>
This returns a finite abelian group isomorphic to the given group G of 
Dirichlet characters (as an abstract group), and secondly returns a map
from the abstract group to G.
<P>
It is necessary to use this function in order to make group theoretic
constructions involving G.
</BLOCKQUOTE>
<H4><A NAME = "1456">Attributes of Elements</A></H4>



<H5><A NAME = "1457">BaseRing(chi) : GrpDrchElt -&gt; Rng</A></H5>
<BLOCKQUOTE>
The ring in which the Dirichlet character &chi; takes values.
</BLOCKQUOTE>
<H5><A NAME = "1458">Modulus(chi) : GrpDrchElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The modulus of the group of Dirichlet characters that contains &chi;.
</BLOCKQUOTE>
<H5><A NAME = "1459">Conductor(chi) : GrpDrchElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The minimal conductor of the Dirichlet character &chi;.
(That is, the smallest integer M such that <TT>chi</TT> is 
well-defined on the unit group of Z/M.)
</BLOCKQUOTE>
<H5><A NAME = "1460">ElementToSequence(chi) : GrpDrchElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence of integers specifying the Dirichlet character &chi;
(in terms of generators of the group containing &chi;).
</BLOCKQUOTE>
<H5><A NAME = "1461">x eq y : GrpDrchElt, GrpDrchElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> iff the given characters have the same modulus and values.
</BLOCKQUOTE>
<H5><A NAME = "1462">Order(chi) : GrpDrchElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The order of the given element &chi; in a group of Dirichlet characters.
</BLOCKQUOTE>
<H5><A NAME = "1463">IsTrivial(chi) : GrpDrchElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the Dirichlet character &chi; has order 1.
</BLOCKQUOTE>
<H5><A NAME = "1464">IsPrimitive(chi) : GrpDrchElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> iff the Dirichlet character &chi; is primitive
(equivalently, if its conductor equals its modulus).
</BLOCKQUOTE>
<H5><A NAME = "1465">AssociatedPrimitiveCharacter(chi) : GrpDrchElt -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
The primitive character modulo the conductor of &chi; which takes
the same values (on units) as &chi;.
</BLOCKQUOTE>
<H5><A NAME = "1466">IsEven(chi) : GrpDrchElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if <TT>Evaluate(chi,-1)</TT> is equal to 1.  
Note that in characteristic 0, 
the space of modular forms of weight k and character &chi;
is zero if &chi; is even and k is odd.
</BLOCKQUOTE>
<H5><A NAME = "1467">IsOdd(chi) : GrpDrchElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if <TT>Evaluate(chi,-1)</TT> is equal to -1.  
Note that in characteristic 0, the space of modular 
forms of weight k and character &chi; is zero if &chi; 
is odd and k is even.
</BLOCKQUOTE>
<H5><A NAME = "1468">IsTotallyEven(chi) : GrpDrchElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
For a Dirichlet character &chi;, this is <TT>true</TT> if and only if
every character in the <TT>Decomposition</TT> of &chi; (into prime power
components) is even.
</BLOCKQUOTE>
<H5><A NAME = "1469">Decomposition(chi) : GrpDrchElt -&gt; List</A></H5>
<BLOCKQUOTE>
This decomposes the Dirichlet character &chi; as a product
of characters with prime power moduli. The function returns
a list (not a sequence) containing these characters (which
do not belong to the same group).
</BLOCKQUOTE>
<H5><A NAME = "1470">MinimalBaseRingCharacter(chi) : GrpDrchElt -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
The returns a character which is the same as &chi;, except which takes 
values in the smallest possible subring of the base ring of &chi;.
</BLOCKQUOTE>
<H4><A NAME = "1471">Evaluation</A></H4>



<H5><A NAME = "1472">Evaluate(chi,n) : GrpDrchElt, RngIntElt -&gt; RngElt</A></H5>
<H5>chi(n) : GrpDrchElt, RngIntElt -&gt; RngElt</H5>
<BLOCKQUOTE>
The value of the Dirichlet character &chi; at the integer n.
</BLOCKQUOTE>
<H5><A NAME = "1473">ValueList(chi) : GrpDrchElt -&gt; [RngElt]</A></H5>
<BLOCKQUOTE>
A sequence containing the values [&chi;(1), .., &chi;(N)]
of the given character &chi;, where N is the modulus of &chi;.
<P>
The list of values is stored; then in later calls to <TT>Evaluate</TT>,
the stored value is returned.
</BLOCKQUOTE>
<H5><A NAME = "1474">ValuesOnUnitGenerators(chi) : GrpDrchElt -&gt; [RngElt]</A></H5>
<BLOCKQUOTE>
A sequence containing the values of &chi; on the ordered
sequence of elements of Z/m given by <TT>UnitGenerators(Parent(chi))</TT>,
where m is the modulus of &chi;.
</BLOCKQUOTE>
<H5><A NAME = "1475">OrderOfRootOfUnity(r, n) : RngElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given an element r of some ring which is <I>assumed</I> to satisfy r<sup>n</sup> = 1, 
this returns the smallest integer m such that r<sup>m</sup> = 1. 
<P>
(This provides a convenient way to calculate the order of values of 
non-real characters.)
</BLOCKQUOTE>
<H4><A NAME = "1476">Arithmetic</A></H4>



<H5><A NAME = "1477">x * y : GrpDrchElt, GrpDrchElt -&gt; GrpDrchElt</A></H5>
<H5>x / y : GrpDrchElt, GrpDrchElt -&gt; GrpDrchElt</H5>
<BLOCKQUOTE>
The product or quotient (respectively) of the Dirichlet characters x and y.  
This is a Dirichlet character of modulus equal to the least common multiple 
of the moduli of x and y.  The base rings and chosen roots of unity of 
the parents of x and y are equal.  
</BLOCKQUOTE>
<H5><A NAME = "1478">x ^ n : GrpDrchElt, RngIntElt -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
The Dirichlet character x raised to the power of n, where n is any integer.
</BLOCKQUOTE>
<H5><A NAME = "1479">x ^ phi : GrpDrchElt, Map -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
The image of the Dirichlet character x under the automorphism &phi;.
</BLOCKQUOTE>
<H5><A NAME = "1480">Sqrt(x) : GrpDrchElt -&gt; GrpDrchElt</A></H5>
<BLOCKQUOTE>
Given a Dirichlet character x of odd order, this returns a square root
of x (in the same group).
</BLOCKQUOTE>
<H4><A NAME = "1481">Example</A></H4>



<HR>
<H3><A NAME = "1482">Example <TT>RngIntRes_Dirichlet (H19E7)</TT></A></H3>
We begin by constructing the group of characters
(Z/5Z)<sup> * </sup> -&gt; Q<sup> * </sup>.
<P>
<P>
<PRE>
&gt; G&lt;a&gt; := DirichletGroup(5);  G;  // The default base field is Q.
Group of Dirichlet characters of modulus 5 over Rational Field
&gt; #G;    
2
&gt; [Evaluate(a, n) : n in [1..5]];
[ 1, -1, -1, 1, 0 ]
&gt; Eltseq(a);
[ 2 ]
&gt; a eq G![2];
true
&gt; IsEven(a);
true
&gt; IsOdd(a);
false
&gt; IsTrivial(a);
false
</PRE>
Next we create a character by building it up "locally".
<P>
<P>
<PRE>
&gt; G1&lt;a4&gt; := DirichletGroup(4);
&gt; Conductor(a4);
4
&gt; G2&lt;a5&gt; := DirichletGroup(25);
&gt; Conductor(a5);
5
&gt; eps := a4*a5;
&gt; Modulus(eps);
100
&gt; Conductor(eps);
20
&gt; Evaluate(eps,7) eq Evaluate(a4,7)*Evaluate(a5,7);
true
</PRE>
Characters can be constructed over various fields.
<P>
<P>
<PRE>
&gt; G&lt;a&gt; := DirichletGroup(7,GF(7));
&gt; #G;
6
&gt; Evaluate(a,2);
2
&gt; 
&gt; G&lt;a3,a5&gt; := DirichletGroup(15,CyclotomicField(EulerPhi(15)));
&gt; G;
Group of Dirichlet characters of modulus 15 over Cyclotomic Field of 
order 8 and degree 4
&gt; #G;
8
&gt; Conductor(a3);
3
&gt; Conductor(a5);
5
&gt; Order(a5);
4
&gt; Evaluate(a5,2);
zeta_8^2
</PRE>
If D is a fundamental discriminant, then <TT>KroneckerCharacter(D)</TT>
is the quadratic Dirichlet character corresponding to the quadratic 
field Q(Sqrt(D)).  The following code verifies that
<TT>KroneckerCharacter</TT> and <TT>KroneckerSymbol</TT> agree
in the case D=209.
<P>
<P>
<PRE>
&gt; chi := KroneckerCharacter(209);
&gt; for n in [1..209] do 
&gt;    assert Evaluate(chi,n) eq KroneckerSymbol(209,n);
&gt; end for;
</PRE>
If E is an elliptic curve with newform f<sub>E</sub>, then the twist E<sub>D</sub>
corresponds to f<sub>E</sub> twisted by this character, as illustrated below.
<P>
<P>
<PRE>
&gt; E := EllipticCurve(CremonaDatabase(),"11A");
&gt; f := qEigenform(E,8); f;
q - 2*q^2 - q^3 + 2*q^4 + q^5 + 2*q^6 - 2*q^7 + O(q^8)
&gt; chi := KroneckerCharacter(-7);
&gt; qEigenform(QuadraticTwist(E,-7),8);
q - 2*q^2 + q^3 + 2*q^4 - q^5 - 2*q^6 + O(q^8)
&gt; R&lt;q&gt; := Parent(f);
&gt; &amp;+[Evaluate(chi,n)*Coefficient(f,n)*q^n : n in [1..7]] + O(q^8);
q - 2*q^2 + q^3 + 2*q^4 - q^5 - 2*q^6 + O(q^8)
</PRE>
<PRE></PRE> <A  HREF = "text181.htm">[Next]</A><A  HREF = "text178.htm">[Prev]</A> [_____] <A  HREF = "text178.htm">[Left]</A> <A  HREF = "text171.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>