<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Modular Arithmetic</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text168.htm">[Next]</A><A  HREF = "text166.htm">[Prev]</A> <A  HREF = "text168.htm">[Right]</A> <A  HREF = "text166.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1299">Modular Arithmetic</A></H3>

<P>
<P>
In this section we describe some functions that make it possible to
perform modular arithmetic without conversions to residue class rings.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text167.htm#1300">Arithmetic Operations</A>
<LI> <A  HREF = "text167.htm#1308">The Solution of Modular Equations</A>
</UL>
<H4><A NAME = "1300">Arithmetic Operations</A></H4>



<H5><A NAME = "1301">Modexp(n, k, m) : RngIntElt, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The modular power n<sup>k</sup> mod m, where n is an integer,
k is an integer and m is an integer greater
than one. If k is negative, n must have an inverse i modulo m, and
the result is then i<sup> - k</sup> mod m.
The result is always an integer r with 0&le;r&lt; m.
</BLOCKQUOTE>
<H5><A NAME = "1302">n mod m : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Remainder upon dividing the integer n by the integer m. The result 
always has the same sign as m. An error results if m is zero.
</BLOCKQUOTE>
<H5><A NAME = "1303">Modinv(n, m) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<H5>InverseMod(n, m) : RngIntElt, RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given an integer n and a positive integer m, such that n and
m are coprime, return an inverse u of n modulo m, that is,
return an integer 1&le;u&lt;m such that u.n &equiv; 1 mod m.
</BLOCKQUOTE>
<H5><A NAME = "1304">Modsqrt(n, m) : RngIntElt, RngIntElt -&gt; BoolElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Given an integer n and an integer m &ge;2, this function returns 
an integer b such that 0 &le;b &lt; m and b<sup>2</sup> &equiv; n mod m if such 
b exists; an error results if no such root exists.
</BLOCKQUOTE>
<H5><A NAME = "1305">Modorder(n, m) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
For integers n and m, m &gt; 1, the function returns
the least integer k &ge;1 such that n<sup>k</sup> &equiv; 1 mod m, or zero 
if gcd(n, m) != 1.
</BLOCKQUOTE>
<H5><A NAME = "1306">IsPrimitive(n, m) : RngIntElt, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if n is a primitive root for m, <TT>false</TT> otherwise (0 &lt; n &lt; m).
</BLOCKQUOTE>
<H5><A NAME = "1307">PrimitiveRoot(m) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given an integer m &gt; 1, this function returns an integer value 
defined as follows: If Z/mZ has a primitive root and the function is 
successful in finding it, the root a is returned. If Z/mZ has a
primitive root but the algorithm does not succeed in finding it,
or Z/mZ does not possess a primitive root, then
zero is returned.
</BLOCKQUOTE>
<H4><A NAME = "1308">The Solution of Modular Equations</A></H4>

<P>
<P>
The functions described here can be used if an occasional modular operation
is required; the results are integers again. For more extensive modular
arithmetic it is preferable to convert to residue class ring arithmetic.
See section <A  HREF = "text175.htm#1382">Residue Class Rings</A> for details.


<H5><A NAME = "1309">Solution(a, b, m) : RngIntElt, RngIntElt, RngIntElt -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
If a solution exists to the linear congruence ax &equiv; b mod m, then
returns x0, k such that x = x0 + i * k represents the complete
set of solutions, where i can be any integer.
Otherwise, returns -1.
</BLOCKQUOTE>
<H5><A NAME = "1310">ChineseRemainderTheorem(X, N) : [RngIntElt], [RngIntElt] -&gt; RngIntElt</A></H5>
<H5>CRT(X, N) : [RngIntElt], [RngIntElt] -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Apply the Chinese Remainder Theorem to the integer sequences X and N.
The sequences must have the same length, k say.  The function returns the
unique integer x in the range 0 &le;x &lt; LCM(N[1].... .N[k])
such that x &equiv; X[i] mod N[i].  The elements of N must all be
positive integers greater than one.  If there is no solution, then -1 is
returned.
</BLOCKQUOTE>
<H5><A NAME = "1311">Solution(A, B, N) : [RngIntElt], [RngIntElt],[RngIntElt] -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Return a solution x to the system of simultaneous 
linear congruences defined by the integer sequences 
A, B and N. Each of these sequences must have the same 
number of terms, k say. The elements of N must all be 
positive integers greater than one.  The i-th 
congruence is A[i] .x &equiv; B[i] mod N[i]. The solution 
x will satisfy 0 &le;x &lt; LCM(N[1].... .N[k]).
If no solution exists, -1 is returned.
</BLOCKQUOTE>
<H5><A NAME = "1312">NormEquation(d, m) : RngIntElt, RngIntElt -&gt; BoolElt, RngIntElt, RngIntElt</A></H5>
<H5>NormEquation(d, m:  parameters)) : RngIntElt, RngIntElt -&gt; BoolElt, RngIntElt, RngIntElt</H5>

<PRE>    Factorization: [&lt;RngIntElt, RngIntElt&gt;] Default: [ ]</PRE>
<BLOCKQUOTE>
Given a positive integer d and a non-negative integer m, return <TT>true</TT>
and two non-negative integers x and y, such that x<sup>2</sup> + y<sup>2</sup>d = m, if such
a solution exists. If such a solution does not exists only the value <TT>false</TT>
is returned. If the factorization of m is known, it may be supplied
as the value of the parameter <TT>Factorization</TT> to speed up the
computation.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1313">Example <TT>RngInt_norm-equation (H18E9)</TT></A></H3>
<P>
<P>
<PRE>
&gt; d := 957440000095744000002277749760;
&gt; m := 5102197760510219776012138128480644;
&gt; time NormEquation(d, m);
true 98 73
Time: 2.990
&gt; time f := Factorization(m);
Time: 4.670
&gt; f;
[ &lt;2, 2&gt;, &lt;19, 1&gt;, &lt;67134181059344997052791291164219, 1&gt; ]
&gt; time NormEquation(d, m: Factorization := f);
true 98 73
Time: 0.420
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text168.htm">[Next]</A><A  HREF = "text166.htm">[Prev]</A> <A  HREF = "text168.htm">[Right]</A> <A  HREF = "text166.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>