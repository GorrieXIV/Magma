<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Words</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1747.htm">[Next]</A><A  HREF = "text1745.htm">[Prev]</A> <A  HREF = "text1747.htm">[Right]</A> <A  HREF = "text1745.htm">[Left]</A> <A  HREF = "text1743.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19244">Words</A></H3>

<P>
<P>
In this and following sections, words are considered to be elements
of some <I>ordered</I> monoid, that is
a free monoid whose generators have an explicit ordering.  The most
important example is the monoid of words generated
by the positive integers, though Magma also allows the creation
of finitely generated ordered monoids.
The words in this section are developed in connection with the theory of
Young tableaux (see section <A  HREF = "text1747.htm#19282">Tableaux</A>), which are 
defined over some ordered set of labels (generators of an ordered monoid
in Magma).
<P>
The importance of the ordering on the generators is in the definition of 
an equivalence 
known as <I>Knuth</I> equivalence.
Knuth equivalence is defined by the two relations 
<P>
yzx = yxz when x &lt; y &lt;= z and xzy = zxy when x &lt;= y &lt; z.
<P>
<P>
<P>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>yzx</i> &sim; <i>yxz</i>&nbsp;&nbsp;&nbsp;&nbsp;<i>x</i> &lt; <i>y</i> &le; <i>z</i><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i>xzy</i> &sim; <i>zxy</i>&nbsp;&nbsp;&nbsp;&nbsp;<i>x</i> &le; <i>y</i> &lt; <i>z</i>
<P>
<P>
The <I>plactic</I> monoid is the quotient of
an ordered monoid with respect to
Knuth equivalence. This plactic monoid is in fact isomorphic to
the monoid of tableaux over the same generators. Elements of the
plactic monoid are represented by a canonical representative from
the Knuth equivalence class of the ordered monoid. This canonical
representative is in fact the <I>row word</I> of the corresponding
tableau (see section <A  HREF = "text1747.htm#19282">Tableaux</A>).



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1746.htm#19245">Ordered Monoids</A>
<LI> <A  HREF = "text1746.htm#19265">Plactic Monoids</A>
</UL>
<H4><A NAME = "19245">Ordered Monoids</A></H4>

<P>
<P>
An ordered monoid is a free monoid with an ordered basis.
Magma has two different types of ordered monoids.
The first is the 
monoid of words over the positive integers, which retain their natural ordering.
The second are finitely generated monoids, whose generators may be assigned
names.


<H5><A NAME = "19246">OrderedMonoid(n) : RngIntElt -&gt; MonOrd</A></H5>
<BLOCKQUOTE>
Given a positive integer n, return the monoid with n ordered
generators.
</BLOCKQUOTE>
<H5><A NAME = "19247">OrderedIntegerMonoid() : -&gt; MonOrd</A></H5>
<BLOCKQUOTE>
Return the ordered monoid of words over the positive integers.
</BLOCKQUOTE>
<H5><A NAME = "19248">Id(O) : MonOrd -&gt; MonOrdElt</A></H5>
<H5>O ! 1 : MonOrd, RngInt -&gt; MonOrdElt</H5>
<BLOCKQUOTE>
Given an ordered monoid O, return its
identity element. i.e., the null word.
</BLOCKQUOTE>
<H5><A NAME = "19249">O . i : MonOrd, RngIntElt -&gt; MonOrdElt</A></H5>
<BLOCKQUOTE>
Given an ordered monoid O and a positive integer i, return
the ith generator of O.
</BLOCKQUOTE>
<H5><A NAME = "19250">O ! [w<sub>1</sub>, ..., w<sub>n</sub>] : MonOrd, [MonOrdElt] -&gt; MonOrdElt</A></H5>
<BLOCKQUOTE>
Given an ordered monoid O, and a sequence of elements from
O, return the word w<sub>1</sub> ... w<sub>n</sub>.
</BLOCKQUOTE>
<H5><A NAME = "19251">O ! [i<sub>1</sub>, ..., i<sub>n</sub>] : MonOrd, [RngIntElt] -&gt; MonOrdElt</A></H5>
<BLOCKQUOTE>
Given the ordered monoid O over the positive integers,
and a sequence of integers, return the word i<sub>1</sub> ... i<sub>n</sub>.
</BLOCKQUOTE>
<H5><A NAME = "19252">w1 eq w2 : MonOrdElt, MonOrdElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given two words w<sub>1</sub> and w<sub>2</sub> from the same ordered monoid, return
<TT>true</TT> if they are equal.
</BLOCKQUOTE>
<H5><A NAME = "19253">w1 * w2 : MonOrdElt, MonOrdElt -&gt; MonOrdElt</A></H5>
<BLOCKQUOTE>
Given two words w<sub>1</sub> and w<sub>2</sub> from the same ordered monoid, return
their product under word concatenation.
</BLOCKQUOTE>
<H5><A NAME = "19254">IsKnuthEquivalent(w1, w2) : MonOrdElt, MonOrdElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Two words w<sub>1</sub> and w<sub>2</sub> from the same monoid are Knuth equivalent
if they can be transformed into one another using elementary
Knuth transformations, (defined in the introduction to this section).
</BLOCKQUOTE>
<H5><A NAME = "19255">w[i] : MonOrdElt, RngIntElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a word w from an ordered monoid, expressed as a product of
generators, return the ith generator in the product.
</BLOCKQUOTE>
<H5><A NAME = "19256">ElementToSequence(w) : MonOrdElt -&gt; SeqEnum</A></H5>
<H5>Eltseq(w) : MonOrdElt -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Given a word w from the ordered monoid of positive integers,
return w as a sequence of integers.
</BLOCKQUOTE>
<H5><A NAME = "19257">Length(w) : MonOrdElt -&gt; RngIntElt</A></H5>
<H5># w : MonOrdElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a word w from an ordered monoid,
return its length.
</BLOCKQUOTE>
<H5><A NAME = "19258">Content(w) : MonOrdElt -&gt; SeqEnum[RngIntElt]</A></H5>
<BLOCKQUOTE>
Given a word w from an ordered monoid,
return a sequence of non-negative integers denoting its content.
The content of a word is a sequence where the ith position denotes the
number of occurrences of the ith generator in the word.
</BLOCKQUOTE>
<H5><A NAME = "19259">IsReverseLatticeWord(w) : MonOrdElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
A word w from an ordered monoid is said to be a reverse lattice word
(or Yamanouchi word) if
for any n&gt;0, the last n letters of w have a content which
is a partition.
</BLOCKQUOTE>
<H5><A NAME = "19260">MaximalIncreasingSequence(w) : MonOrdElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a word w from an ordered monoid, return a weakly increasing 
subsubsequence
 of w of maximal length. This sequence is not necessarily unique.
</BLOCKQUOTE>
<H5><A NAME = "19261">MaximalIncreasingSequences(w, k) : SeqEnum,RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a word w from an ordered monoid and some positive integer k,
return a sequence of k distinct increasing subsequences of the word w,
such that the maximal number of entries from w is used.
Empty sequences are returned if all entries from w are used.
These sequences are not necessarily unique.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19262">Example <TT>Tableau_OrderedMonoid-Creation (H151E3)</TT></A></H3>
We create the ordered monoid over the positive integers and look at a few
elements.
<P>
<P>
<PRE>
&gt; O := OrderedIntegerMonoid();
&gt; O;
The monoid of words over the positive integers
&gt; 
&gt; w1 := O ! [3,5,2,8];
&gt; w1;
3 5 2 8 
&gt; w2 := O ! [6,7,2,4];
&gt; w2;
6 7 2 4 
&gt;
&gt; w2[3];
2
&gt; Eltseq(w1);
[ 3, 5, 2, 8 ]
&gt; 
&gt; w1*w2;
3 5 2 8 6 7 2 4 
</PRE>
<HR>
<H3><A NAME = "19263">Example <TT>Tableau_orderedmon--fingen (H151E4)</TT></A></H3>
We create a finitely generated ordered monoid and create an element.
<P>
<P>
<P>
<PRE>
&gt; O&lt;a,b,c,d&gt; := OrderedMonoid(4);
&gt; O;
The monoid of words over 4 generators: a b c d
&gt; 
&gt; w := a*b*a*d*c;
&gt; w;
a b a d c 
</PRE>
<HR>
<H3><A NAME = "19264">Example <TT>Tableau_OrderedMonoid-longest (H151E5)</TT></A></H3>
We take a word of integers and look at
weakly increasing subsequences of maximal length.
<P>
<P>
<P>
<PRE>
&gt; O := OrderedIntegerMonoid();
&gt; w := O ! [1,3,4,2,3,4,1,2,2,3,3,2];
&gt;
&gt; MaximalIncreasingSequence(w);
1 1 2 2 2 3
&gt; MaximalIncreasingSequences(w,2);
[ 1 1 2 2 2 3 , 2 3 3  ]
&gt; MaximalIncreasingSequences(w,3);
[ 1 1 2 2 2 3 , 2 3 3 , 3 4 4  ]
&gt; MaximalIncreasingSequences(w,4);
[ 1 1 2 2 2 3 , 2 3 3 , 3 4 4 , Id(O) ]
</PRE>
<HR>
<H4><A NAME = "19265">Plactic Monoids</A></H4>

<P>
<P>
The <I>plactic monoid</I> of an ordered monoid is the quotient defined
by Knuth equivalence. Elements of a plactic monoid
are equivalence classes of words from the original ordered monoid, 
and are represented by a canonical representative. 


<H5><A NAME = "19266">PlacticMonoid(O) : MonOrd -&gt; MonOrd</A></H5>
<BLOCKQUOTE>
Given an ordered monoid O, return the plactic monoid obtained
by factoring O by Knuth equivalence.
</BLOCKQUOTE>
<H5><A NAME = "19267">PlacticIntegerMonoid() : -&gt; MonOrd</A></H5>
<BLOCKQUOTE>
Return the plactic monoid obtained
by factoring the ordered monoid over the positive integers
by Knuth equivalence.
</BLOCKQUOTE>
<H5><A NAME = "19268">OrderedMonoid(P) : MonPlc -&gt; MonOrd</A></H5>
<BLOCKQUOTE>
Given a plactic monoid P, return the ordered monoid on which P is
based.
</BLOCKQUOTE>
<H5><A NAME = "19269">Id(P) : MonPlc -&gt; MonPlcElt</A></H5>
<H5>P ! 1 : MonPlc, RngIntElt -&gt; MonPlcElt</H5>
<BLOCKQUOTE>
Given a plactic monoid P, return its
identity element which is the null word.
</BLOCKQUOTE>
<H5><A NAME = "19270">P . i : MonPlc, RngIntElt -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given a plactic monoid P and a positive integer i, return 
the ith generator of P.
</BLOCKQUOTE>
<H5><A NAME = "19271">P ! [u<sub>1</sub>, ..., u<sub>n</sub>] : MonPlc, [MonPlcElt] -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given a plactic monoid P, and a sequence of elements from
P, return the product u<sub>1</sub> ... u<sub>n</sub>.   
</BLOCKQUOTE>
<H5><A NAME = "19272">P ! [i<sub>1</sub>, ..., i<sub>n</sub>] : MonPlc, [RngIntElt] -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given the plactic monoid P over the positive integers, 
and a sequence of integers, return the 
element of P corresponding to the Knuth equivalence class
of i<sub>1</sub> ... i<sub>n</sub>.   
</BLOCKQUOTE>
<H5><A NAME = "19273">P ! w : MonPlc, MonOrdElt -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given a plactic monoid P, and a word w from
the ordered monoid that its based on, 
return the element of P corresponding to the
Knuth equivalence class of w.
</BLOCKQUOTE>
<H5><A NAME = "19274">P ! [w<sub>1</sub>, ..., w<sub>n</sub>] : MonPlc, [MonOrdElt] -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given a plactic monoid P, and a sequence of elements from
the ordered monoid that its based on, 
return the element of P corresponding to the
Knuth equivalence class of  w<sub>1</sub> ... w<sub>n</sub>.
</BLOCKQUOTE>
<H5><A NAME = "19275">P ! t : MonPlc, Tbl -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given a plactic monoid P and a tableau t which are both associated with
the same ordered monoid, return the element of P which is uniquely
associated to t.
</BLOCKQUOTE>
<H5><A NAME = "19276">u1 eq u2 : MonPlcElt, MonPlcElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given two elements u<sub>1</sub> and u<sub>2</sub> from the same plactic monoid, return
<TT>true</TT> if they are equal.
</BLOCKQUOTE>
<H5><A NAME = "19277">u1 * u2 : MonPlcElt, MonPlcElt -&gt; MonPlcElt</A></H5>
<BLOCKQUOTE>
Given two elements u<sub>1</sub> and u<sub>2</sub> belonging to the same plactic monoid, return
their product which is inherited from word concatenation in the
ordered monoid.
</BLOCKQUOTE>
<H5><A NAME = "19278">Length(u) : MonPlcElt -&gt; RngIntElt</A></H5>
<H5># u : MonPlcElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a element u from a plactic monoid,
return its length.
The length of a word is invariant under Knuth equivalence and so is
well defined for elements of the plactic monoid.
</BLOCKQUOTE>
<H5><A NAME = "19279">Content(u) : MonPlcElt -&gt; SeqEnum[RngIntElt]</A></H5>
<BLOCKQUOTE>
Given a word u from a plactic monoid,
return a sequence of non-negative integers denoting its content.
The content of a word is a sequence where the ith position denotes the 
number of occurrences of the ith generator in the word.
The content of a word is invariant under Knuth equivalence and so is 
well defined for elements of the plactic monoid.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19280">Example <TT>Tableau_OrderedMonoid-basic (H151E6)</TT></A></H3>
We create both the ordered monoid and plactic monoid over the integers and 
look at several elements.
<P>
<P>
<P>
<PRE>
&gt; O := OrderedIntegerMonoid();
&gt; P := PlacticIntegerMonoid();
&gt; 
&gt; w1 := O ! [2,7,4,8,1,5,9];
&gt; w1;
2 7 4 8 1 5 9 
&gt; P!w1;
7 2 8 1 4 5 9 
</PRE>
First we look at a word that is Knuth equivalent to w<sub>1</sub>,
<P>
<P>
<PRE>
&gt; w2 := O ! [7,2,1,8,4,5,9];
&gt; w2;
7 2 1 8 4 5 9 
&gt; 
&gt; IsKnuthEquivalent(w1,w2);
true
&gt; (P!w1) eq (P!w2);
true
</PRE>
and then one that is not Knuth equivalent.
<P>
<P>
<PRE>
&gt; w3 := O ! [7,1,5,8,2,9,4];
&gt; w3;
&gt; 
7 1 5 8 2 9 4 
&gt; IsKnuthEquivalent(w1,w3);
false
&gt; (P!w1) eq (P!w3);
false
&gt; P!w3;
7 5 8 1 2 4 9 
</PRE>
<HR>
<H3><A NAME = "19281">Example <TT>Tableau_OrderedMonoid-fingen (H151E7)</TT></A></H3>
We create a finitely generated ordered monoid, its associated plactic monoid,
and look at some properties which are invariant under Knuth equivalence.
<P>
<P>
<P>
<PRE>
&gt; O&lt;a,b,c,d,e&gt; := OrderedMonoid(5);
&gt; P := PlacticMonoid(O);
&gt; P;
The plactic monoid of words over 5 generators: a b c d e
&gt; 
&gt; w := b*c*e*e*a*d*a*d;
&gt; w;
b c e e a d a d 
&gt; Length(w);
8
&gt; Content(w);
[ 2, 1, 1, 2, 2 ]
&gt; 
&gt; u := P!w;
&gt; u;
a a b c d d e e 
&gt; Length(u);
8
&gt; Content(u);
[ 2, 1, 1, 2, 2 ]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1747.htm">[Next]</A><A  HREF = "text1745.htm">[Prev]</A> <A  HREF = "text1747.htm">[Right]</A> <A  HREF = "text1745.htm">[Left]</A> <A  HREF = "text1743.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>