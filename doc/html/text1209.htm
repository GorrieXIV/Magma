<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Changing Monomial Order</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1210.htm">[Next]</A><A  HREF = "text1208.htm">[Prev]</A> <A  HREF = "text1210.htm">[Right]</A> <A  HREF = "text1208.htm">[Left]</A> <A  HREF = "text1203.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "13525">Changing Monomial Order</A></H3>

<P>
<P>
Often one wishes to change the monomial order of an ideal.  Magma allows
one to do this by use of the <TT>ChangeOrder</TT> function.


<H5><A NAME = "13526"></A><A NAME = "GB:ChangeOrder">ChangeOrder</A>(I, Q) : RngMPol, RngMPol -&gt; RngMPol, Map</H5>
<BLOCKQUOTE>
Given an ideal I of the polynomial ring P = R[x<sub>1</sub>, ..., x<sub>n</sub>],
together with a polynomial ring Q of rank n (with possibly a
different order to that of P),
return the ideal J of Q corresponding to I and the isomorphism f
from P to Q.  The map f simply maps P.i to Q.i for each i.
<P>
The point of the function is that one can change the order on monomials
of I to be that of Q.  When a Gr&ouml;bner basis of J is needed
to be calculated, Magma uses a conversion algorithm starting from a
Gr&ouml;bner basis of I if possible---this usually makes order conversion
much more efficient than by computing a Gr&ouml;bner basis of J from scratch.
</BLOCKQUOTE>
<H5><A NAME = "13527">ChangeOrder(I, order) : RngMPol, ..., -&gt; RngMPol, Map</A></H5>
<BLOCKQUOTE>
Given an ideal I of the polynomial ring P = R[x<sub>1</sub>, ..., x<sub>n</sub>],
together with a monomial order {order} (see
Section <A  HREF = "text1205.htm#13440">Representation and Monomial  Orders</A>), construct the polynomial ring Q =
R[x<sub>1</sub>, ..., x<sub>n</sub>] with order order, and then return the ideal J
of Q corresponding to I and the isomorphism f from P to Q.
See the section on monomial orders for the valid values for the argument
order.  The map f simply maps P.i to Q.i for each i.
</BLOCKQUOTE>
<H5><A NAME = "13528"></A><A NAME = "GB:ChangeOrderTup">ChangeOrder</A>(I, T) : RngMPol, Tup -&gt; RngMPol</H5>
<BLOCKQUOTE>
Given an ideal I of the polynomial ring P = R[x<sub>1</sub>, ..., x<sub>n</sub>],
together with a tuple T, construct the polynomial ring Q =
R[x<sub>1</sub>, ..., x<sub>n</sub>] with the monomial order given by the tuple T
on the monomials, and then return the ideal J of Q corresponding
to I and the isomorphism f from P to Q.  T must be a tuple
whose components match the valid arguments for the monomial orders
in Section <A  HREF = "text1205.htm#13440">Representation and Monomial  Orders</A> (or a tuple returned by the
function <A  HREF = "text1206.htm#GB:MonomialOrder">MonomialOrder</A>).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13529">Example <TT>GB_ChangeOrder (H111E13)</TT></A></H3>
We write a function <TT>univgen</TT> which, given a zero-dimensional ideal
defined over a field,
computes the univariate elimination ideal generator
for a particular variable by changing order to the appropriate
univariate order.  Note that this function is the same as (and is
in fact implemented in exactly the same way as) the intrinsic function
<TT>UnivariateEliminationIdealGenerator</TT>.  We then find the appropriate
univariate polynomials for a particular ideal.
<P>
<P>
<PRE>
&gt; function univgen(I, i)
&gt;    // Make sure I has a Groebner basis so that
&gt;    // the conversion algorithm will be used when
&gt;    // constructing a Groebner basis of J
&gt;    Groebner(I);
&gt;    J := ChangeOrder(I, "univ", i);
&gt;    Groebner(J);
&gt;    return rep{f: f in Basis(J) | IsUnivariate(f, i)};
&gt; end function;
&gt;
&gt; P&lt;x, y, z&gt; := PolynomialRing(RationalField(), 3, "grevlex");
&gt; I := ideal&lt;P |
&gt;     1 - x + x*y^2 - x*z^2,
&gt;     1 - y + y*x^2 + y*z^2,
&gt;     1 - z - z*x^2 + z*y^2 &gt;;
&gt;
&gt; univgen(I, 1);
x^21 - x^20 - 2*x^19 + 4*x^18 - 5/2*x^17 - 5/2*x^16 + 4*x^15 - 
    15/2*x^14 + 129/16*x^13 + 11/16*x^12 - 103/8*x^11 + 
    131/8*x^10 - 49/16*x^9 - 171/16*x^8 + 12*x^7 - 3*x^6 - 
    29/8*x^5 + 15/4*x^4 - 17/16*x^3 - 5/16*x^2 + 5/16*x - 1/16
&gt; univgen(I, 2);
y^14 - y^13 - 13/2*y^12 + 8*y^11 + 53/4*y^10 - 97/4*y^9 - 
    45/8*y^8 + 33*y^7 - 25/2*y^6 - 18*y^5 + 107/8*y^4 + 5/8*y^3 -
    27/8*y^2 + 9/8*y - 1/8
&gt; univgen(I, 3);
z^21 - z^20 - 2*z^19 + 4*z^18 - 5/2*z^17 - 5/2*z^16 + 4*z^15 - 
    15/2*z^14 + 129/16*z^13 + 11/16*z^12 - 103/8*z^11 + 
    131/8*z^10 - 49/16*z^9 - 171/16*z^8 + 12*z^7 - 3*z^6 - 
    29/8*z^5 + 15/4*z^4 - 17/16*z^3 - 5/16*z^2 + 5/16*z - 1/16
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1210.htm">[Next]</A><A  HREF = "text1208.htm">[Prev]</A> <A  HREF = "text1210.htm">[Right]</A> <A  HREF = "text1208.htm">[Left]</A> <A  HREF = "text1203.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>