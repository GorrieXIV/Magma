<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Families of Linear Codes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1892.htm">[Next]</A><A  HREF = "text1890.htm">[Prev]</A> <A  HREF = "text1892.htm">[Right]</A> <A  HREF = "text1890.htm">[Left]</A> <A  HREF = "text1883.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "21083">Families of Linear Codes</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1891.htm#21084">Cyclic Codes</A>
<LI> <A  HREF = "text1891.htm#21089">Quasicyclic Codes</A>
</UL>
<H4><A NAME = "21084">Cyclic Codes</A></H4>

<P>
<P>
<P>
While cyclic linear codes are always generated by a single generating 
polynomial (vector), this is not the case for additive codes.
Cyclic additive codes may be created in Magma using either a single
generator, or a sequence of generators.
<P>
In the important case of GF(2)-additive vectors over GF4, all cyclic 
codes can be described in terms of two generators with one generator taken 
over GF(4) and the other over GF(2). A special function is provided for 
this construction.


<H5><A NAME = "21085">AdditiveCyclicCode(v) : ModTupFldElt -&gt; CodeAdd</A></H5>
<H5>AdditiveCyclicCode(K, v) : FldFin, ModTupFldElt -&gt; CodeAdd</H5>
<H5>AdditiveCyclicCode(Q) : [ModTupFldElt] -&gt; CodeAdd</H5>
<H5>AdditiveCyclicCode(K, Q) : FldFin, [ModTupFldElt] -&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given either a single vector v or sequence of vectors Q over some 
finite field F, return the K-additive code over F generated by 
all shifts of the inputs.  The field K must be a subfield of F and 
if it is the prime subfield of F, it may be omitted.
</BLOCKQUOTE>
<H5><A NAME = "21086">AdditiveCyclicCode(n, f) : RngIntElt, RngUPolElt -&gt; CodeAdd</A></H5>
<H5>AdditiveCyclicCode(K, n, f) : FldFin, RngIntElt, RngUPolElt -&gt; CodeAdd</H5>
<H5>AdditiveCyclicCode(n, Q) : RngIntElt, [RngUPolElt] -&gt; CodeAdd</H5>
<H5>AdditiveCyclicCode(K, n, Q) : FldFin, RngIntElt, [RngUPolElt] -&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given either a single polynomial f or sequence Q of polynomials 
over some finite field F, return the K-additive code of length n
over F generated by all shifts of the inputs.  The field K must be 
a subfield of F, and if it is the prime subfield of F, it may be 
omitted. 
</BLOCKQUOTE>
<H5><A NAME = "21087">AdditiveCyclicCode(v4, v2) : ModTupFldElt, ModTupFldElt -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given two vectors of equal length n, where v<sub>4</sub> is over GF(4) 
and v<sub>2</sub> is over GF(2), return the F<sub>2</sub>--additive code generated 
by all of their cyclic shifts.  Note that for the case of 
GF(2)-additive codes over GF(4), two generators suffice to generate 
any such code.
</BLOCKQUOTE>
<H5><A NAME = "21088">AdditiveCyclicCode(n, f4, f2) : RngIntElt, RngUPolElt, RngUPolElt -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given two polynomials f<sub>4</sub> and f<sub>2</sub>, where f<sub>4</sub> is over GF(4) and 
f<sub>2</sub> is over GF(2), return the F<sub>2</sub>--additive code of length n 
generated by all of their cyclic shifts. The degree of the polynomials 
f<sub>4</sub> and f<sub>2</sub> must not exceed n - 1.  Note that for the case of 
GF(2)-additive codes over GF(4), two generators suffice to generate 
any such code. 
</BLOCKQUOTE>
<H4><A NAME = "21089">Quasicyclic Codes</A></H4>

<P>
<P>
<P>
Quasicyclic codes are a generalisation of cyclic codes.  In Magma
quasicyclic codes consist of horizontally joined cyclic blocks.


<H5><A NAME = "21090">AdditiveQuasiCyclicCode(n, Q) : RngIntElt, SeqEnum[RngUPolElt] -&gt; CodeAdd</A></H5>
<H5>AdditiveQuasiCyclicCode(K, n, Q) : FldFin, RngIntElt, SeqEnum[RngUPolElt] 							-&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given an integer n, and a sequence Q of polynomials over some
finite field F, return the K--additive quasicyclic code,
whose cyclic blocks are generated by the polynomials in Q.
The field K must be a subfield of F, and if it is the prime 
subfield of F, it may be omitted. 
</BLOCKQUOTE>
<H5><A NAME = "21091">AdditiveQuasiCyclicCode(n, Q, h) : RngIntElt, SeqEnum[RngUPolElt], RngIntElt 							    -&gt; CodeAdd</A></H5>
<H5>AdditiveQuasiCyclicCode(K, n, Q, h) : FldFin, RngIntElt, SeqEnum[RngUPolElt], RngIntElt 							-&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given an integer n, and a sequence Q of polynomials over some
finite field F, and an integer h,
then return the K--additive quasicyclic code,
whose cyclic blocks are generated by the polynomials in Q 
and stacked 2-dimensionally of height h.
The field K must be a subfield of F, and if it is the prime 
subfield of F, it may be omitted. 
</BLOCKQUOTE>
<H5><A NAME = "21092">AdditiveQuasiCyclicCode(Q) : SeqEnum[ModTupFldElt] -&gt; CodeAdd</A></H5>
<H5>AdditiveQuasiCyclicCode(K, Q) : FldFin, SeqEnum[ModTupFldElt] -&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given a sequence Q of vectors over some
finite field F, then return the K--additive quasicyclic code,
whose cyclic blocks are generated by the vectors in Q.
The field K must be a subfield of F, and if it is the prime 
subfield of F, it may be omitted. 
</BLOCKQUOTE>
<H5><A NAME = "21093">AdditiveQuasiCyclicCode(Q, h) : SeqEnum[ModTupFldElt], RngIntElt 							    -&gt; CodeAdd</A></H5>
<H5>AdditiveQuasiCyclicCode(K, Q, h) : FldFin, SeqEnum[ModTupFldElt], RngIntElt 							-&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given a sequence Q of vectors over some finite field F, and an 
integer h, then return the K--additive quasicyclic code, whose 
cyclic blocks are generated by the vectors in Q and stacked 
2-dimensionally of height h.
The field K must be a subfield of F, and if it is the prime 
subfield of F, it may be omitted. 
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1892.htm">[Next]</A><A  HREF = "text1890.htm">[Prev]</A> <A  HREF = "text1892.htm">[Right]</A> <A  HREF = "text1890.htm">[Left]</A> <A  HREF = "text1883.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>