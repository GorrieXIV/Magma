<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Operations on Representations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1198.htm">[Next]</A><A  HREF = "text1196.htm">[Prev]</A> <A  HREF = "text1198.htm">[Right]</A> <A  HREF = "text1196.htm">[Left]</A> <A  HREF = "text1192.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "13377">Operations on Representations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1197.htm#13378">Lie Algebras</A>
<LI> <A  HREF = "text1197.htm#13392">Groups of Lie Type</A>
</UL>
<H4><A NAME = "13378">Lie Algebras</A></H4>

<P>
<P>
<P>
<P>
<P>
The functions described in this section are applicable only to modules
of almost reductive structure constant Lie algebras. 


<H5><A NAME = "13379">CharacterMultiset(V) : ModAlg -&gt; LieRepDec</A></H5>
<H5>CharacterMultiset(&rho;) : Map -&gt; LieRepDec</H5>
<BLOCKQUOTE>
The character multiset of the Lie-algebra
module V or representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13380">Weights(V) : ModAlg -&gt; SeqEnum, SeqEnum</A></H5>
<H5>WeightsAndVectors(V) : ModAlg -&gt; SeqEnum, SeqEnum</H5>
<BLOCKQUOTE>
For a module V over a semisimple Lie algebra this returns
two sequences. The first sequence consists of the weights that occur in
V. The second sequence is a sequence of sequences of elements of
V, in bijection with the first sequence. The i-th element of 
the second sequence consists of a basis of the weight space of weight
equal to the i-th weight of the first sequence.
</BLOCKQUOTE>
<H5><A NAME = "13381">Weights(&rho;) : Map -&gt; [ModTupRngElt]</A></H5>
<H5>WeightsAndVectors(&rho;) : Map -&gt; [ModTupRngElt]</H5>
<BLOCKQUOTE>
For a representation &rho; of a semisimple Lie algebra this returns
two sequences. The first sequence consists of the weights of &rho;. 
The second sequence is a sequence of sequences of elements of
the underlying vector space, in bijection with the first sequence. The i-th element of 
the second sequence consists of a basis of the weight space of weight
equal to the i-th weight of the first sequence.
</BLOCKQUOTE>
<H5><A NAME = "13382">DecompositionMultiset(V) : ModAlg -&gt; LieRepDec</A></H5>
<H5>DecompositionMultiset(&rho;) : Map -&gt; LieRepDec</H5>
<BLOCKQUOTE>
The decomposition multiset of the Lie-algebra
module V or representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13383">HighestWeightsAndVectors(V) : ModAlg -&gt; SeqEnum, SeqEnum</A></H5>
<BLOCKQUOTE>
This function is analogous to the previous one. Except
in this case the first sequence consists of highest weights, i.e., 
those weights which occur as highest weights of an irreducible
constituent of V. The second sequence consists of sequences that
contain the corresponding highest weight vectors. So the submodules
generated by the vectors in the second sequence form a direct sum
decomposition of V.
</BLOCKQUOTE>
<H5><A NAME = "13384">DirectSum(U, V) : ModAlg, ModAlg -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The direct sum of the Lie algebra modules U and V.
</BLOCKQUOTE>
<H5><A NAME = "13385">DirectSumDecomposition(V) : ModAlg -&gt; SeqEnum</A></H5>
<H5>IndecomposableSummands(V) : ModAlg -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Given a Lie algebra module V, return the direct sum decomposition of V as
a sequence of submodules whose sum is V and each of which cannot be
further decomposed into a direct sum.
If the Lie algebra is semisimple over a field of characteristic zero, the
summands are known to be irreducible highest weight modules.
</BLOCKQUOTE>
<H5><A NAME = "13386">DirectSum(&rho;, &tau;) : ModAlg, ModAlg -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The direct sum of the Lie algebra representations &rho; and &tau;.
</BLOCKQUOTE>
<H5><A NAME = "13387">DirectSumDecomposition(&rho;) : Map[AlgLie, AlgMatLie] -&gt; SeqEnum</A></H5>
<H5>IndecomposableSummands(&rho;) : Map[AlgLie, AlgMatLie] -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Given a Lie algebra representation &rho;, return the direct sum decomposition 
of &rho; as a sequence of indecomposable subrepresentation.
If the Lie algebra is semisimple over a field of characteristic zero, the
summands are known to be irreducible highest weight representations.
</BLOCKQUOTE>
<H5><A NAME = "13388">TensorProduct(Q) : SeqEnum -&gt; ModAlg, Map</A></H5>
<BLOCKQUOTE>
Given a sequence Q of left-modules over a Lie algebra, 
this function returns the module M that is the tensor
product of the elements of Q. Secondly it returns a map from the
Cartesian product of the elements of Q to M. This maps a tuple 
t to the element of M that is formed by tensoring the elements of t.
</BLOCKQUOTE>
<H5><A NAME = "13389">SymmetricPower(V, n) : ModAlg, RngIntElt -&gt; ModAlg, Map</A></H5>
<BLOCKQUOTE>
Given a left-module V over a Lie algebra, and an
integer n&ge;2,  
this function returns the module M that is the n-th symmetric power
of V. It also returns a map f from the n-fold
Cartesian product of V to M. This map is multilinear and symmetric,
i.e., if two of its arguments are interchanged then the image remains
the same. Furthermore, f has the universal property, i.e., 
any multilinear symmetric map from the n-fold Cartesian product into a vector
space W can be written as the composition of f with a map from
M into W.
<P>
<P>
</BLOCKQUOTE>
<H5><A NAME = "13390">ExteriorPower(V, n) : ModAlg, RngIntElt -&gt; ModAlg, Map</A></H5>
<BLOCKQUOTE>
Given a left-module V over a Lie algebra, and an
integer 2&le;n &le;dim(V),  
this function returns the module M that is the n-th exterior power
of V. It also returns a map f from the n-fold
Cartesian product of V to M. This map is multilinear and antisymmetric,
i.e., if two of its arguments are interchanged then the image is 
multiplied by -1. Furthermore, f has the universal property, i.e., 
any multilinear antisymmetric map from the n-fold Cartesian product 
into a vector space W can be written as the composition of f with a map 
from M into W.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13391">Example <TT>LieReps_LieModules (H110E14)</TT></A></H3>
<P>
<P>
<PRE>
&gt; L:= LieAlgebra("G2", Rationals());
&gt; V1:= HighestWeightModule(L, [1,0]);
&gt; V2:= HighestWeightModule(L, [0,1]);
&gt; T,f:= TensorProduct([V1,V2]);
&gt; HighestWeightsAndVectors(T);
[
    (1 1),
    (2 0),
    (1 0)
]
[
    [
        T: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    ],
    [
        T: (0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 -3 0 0 0 0 0
            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
            0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    ],
    [
        T: (0 0 0 0 0 0 1 2 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0
            0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 -3 0 0 0 0 0 0 0 0 0 0
            0 0 -3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
    ]
]
&gt; DecomposeTensorProduct(RootDatum(L), [1,0], [0,1]);
[
    (1 1),
    (2 0),
    (1 0)
]
[ 1, 1, 1 ]
&gt; f(&lt;V1.2,V2.3&gt;);
T: (0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
</PRE>
So we see that the tensor product T decomposes as a direct sum of three
submodules. This information can also be computed by using 
<TT>DecomposeTensorProduct</TT>. However, in the former case,
the corresponding highest-weight vectors are also given.
<P>
<P>
<P>
<PRE>
&gt; E,h:= ExteriorPower(V1, 3);
&gt; h(&lt;V1.1,V1.3,V1.4&gt;);
E: (0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
&gt; h(&lt;V1.1,V1.4,V1.3&gt;);
E: (0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)
&gt; DecomposeExteriorPower( RootDatum(L), 3, [1,0] );
[
    (2 0),
    (1 0),
    (0 0)
]
[ 1, 1, 1 ]
&gt; HighestWeightsAndVectors(E);
[
    (2 0),
    (1 0),
    (0 0)
]
[
    [
        E: (1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
        0)
    ],
    [
        E: (0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
        0)
    ],
    [
        E: (0 0 0 0 0 0 0 0 0 0 0 1 2 0 0 0 0 0 2 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 
        0)
    ]
]
</PRE>
<HR>
<H4><A NAME = "13392">Groups of Lie Type</A></H4>

<P>
<P>
<P>
<P>
These functions apply to projective representations of groups of Lie type.
Note that modules have not yet been implemented for these groups.
<P>


<H5><A NAME = "13393">DirectSum(&rho;, &tau;) : ModAlg, ModAlg -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The direct sum of the group of Lie type representations &rho; and &tau;.
</BLOCKQUOTE>
<H5><A NAME = "13394">DirectSumDecomposition(&rho;) : Map[GrpLie, GrpMat] -&gt; SeqEnum</A></H5>
<H5>IndecomposableSummands(&rho;) : Map[GrpLie, GrpMat] -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Given a group of Lie type representation &rho;, return the direct sum decomposition 
of &rho; as a sequence of indecomposable subrepresentation.
If the base field has characteristic zero, the
summands are known to be irreducible highest weight representations.
</BLOCKQUOTE>
<H5><A NAME = "13395">CharacterMultiset(V) : ModAlg -&gt; LieRepDec</A></H5>
<H5>CharacterMultiset(&rho;) : Map -&gt; LieRepDec</H5>
<BLOCKQUOTE>
The character weight multiset of the group of Lie type representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13396">Weights(&rho;) : Map -&gt; [LatElt], [ModTupRngElt]</A></H5>
<H5>WeightsAndVectors(&rho;) : Map -&gt; [LatElt], [ModTupRngElt]</H5>
<BLOCKQUOTE>
The weights of the representation &rho;, together with the
corresponding weight vectors.
</BLOCKQUOTE>
<H5><A NAME = "13397">WeightVectors(&rho;) : Map -&gt; [ModTupRngElt]</A></H5>
<BLOCKQUOTE>
A basis of weight vectors of the representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13398">Weight(&rho;, v) : Map, ModTupRngElt -&gt; LatElt</A></H5>
<BLOCKQUOTE>
The  weight corresponding to the  weight vector v of the
representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13399">DecompositionMultiset(V) : ModAlg -&gt; LieRepDec</A></H5>
<H5>DecompositionMultiset(&rho;) : Map -&gt; LieRepDec</H5>
<BLOCKQUOTE>
The decomposition multiset of the group of Lie type representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13400">HighestWeights(&rho;) : Map -&gt; [LatElt], [ModTupRngElt]</A></H5>
<BLOCKQUOTE>
The highest weights of the representation &rho;, together with the
corresponding highest weight vectors.  This function may fail for small finite
fields.
</BLOCKQUOTE>
<H5><A NAME = "13401">HighestWeightVectors(&rho;) : Map -&gt; [ModTupRngElt]</A></H5>
<BLOCKQUOTE>
The highest weight vectors of the representation &rho;.
</BLOCKQUOTE>
<H5><A NAME = "13402">GeneralisedRowReduction(&rho;) : GrpLie, Map -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a projective matrix representation &rho;:G to GL<sub>m</sub>(k),
return its inverse.
This algorithm is based on <A  HREF = "text1191.htm#bib_CohenMurrayTaylor">[CMT04]</A>.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1198.htm">[Next]</A><A  HREF = "text1196.htm">[Prev]</A> <A  HREF = "text1198.htm">[Right]</A> <A  HREF = "text1196.htm">[Left]</A> <A  HREF = "text1192.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>