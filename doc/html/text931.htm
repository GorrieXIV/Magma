<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Element Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text932.htm">[Next]</A><A  HREF = "text930.htm">[Prev]</A> <A  HREF = "text932.htm">[Right]</A> <A  HREF = "text930.htm">[Left]</A> <A  HREF = "text925.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "10498">Element Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text931.htm#10499">Arithmetic Operators</A>
<LI> <A  HREF = "text931.htm#10500">Equality and Membership</A>
<LI> <A  HREF = "text931.htm#10501">Predicates on Algebra Elements</A>
<LI> <A  HREF = "text931.htm#10502">Coefficients, Monomials, Terms and Degree</A>
<LI> <A  HREF = "text931.htm#10517">Evaluation</A>
</UL>
<H4><A NAME = "10499">Arithmetic Operators</A></H4>

<P>
<P>
The usual unary and binary ring operations are available
for noncommutative polynomials, noting that multiplication is associative
but noncommutative, of course.


<H5>+ a : AlgFrElt -&gt; AlgFrElt</H5>

<H5>- a : AlgFrElt -&gt; AlgFrElt</H5><P>

<H5>a + b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5>

<H5>a - b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5>

<H5>a * b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5>

<H5>a ^ k : AlgFrElt, RngIntElt -&gt; AlgFrElt</H5>

<H5>a / b : AlgFrElt, AlgFrElt -&gt; FldFunMElt</H5>

<H5>a div b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5><P>

<H5>a +:= b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5>

<H5>a -:= b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5>

<H5>a *:= b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5>

<H5>a div:= b : AlgFrElt, AlgFrElt -&gt; AlgFrElt</H5><P>


<H4><A NAME = "10500">Equality and Membership</A></H4>



<H5>a eq b : AlgFrElt, AlgFrElt -&gt; BoolElt</H5>

<H5>a ne b : AlgFrElt, AlgFrElt -&gt; BoolElt</H5><P>

<H5>a in R : AlgFrElt, Rng -&gt; BoolElt</H5>

<H5>a notin R : AlgFrElt, Rng -&gt; BoolElt</H5><P>


<H4><A NAME = "10501">Predicates on Algebra Elements</A></H4>



<H5>IsZero(f) : AlgFrElt -&gt; BoolElt</H5>

<H5>IsOne(f) : AlgFrElt -&gt; BoolElt</H5>

<H5>IsMinusOne(f) : AlgFrElt -&gt; BoolElt</H5><P>

<H5>IsNilpotent(f) : AlgFrElt -&gt; BoolElt</H5>

<H5>IsIdempotent(f) : AlgFrElt -&gt; BoolElt</H5><P>

<H5>IsUnit(f) : AlgFrElt -&gt; BoolElt</H5>

<H5>IsZeroDivisor(f) : AlgFrElt -&gt; BoolElt</H5>

<H5>IsRegular(f) : AlgFrElt -&gt; BoolElt</H5><P>

<H5>IsIrreducible(f) : AlgFrElt -&gt; BoolElt</H5>

<H5>IsPrime(f) : AlgFrElt -&gt; BoolElt</H5><P>



<H4><A NAME = "10502">Coefficients, Monomials, Terms and Degree</A></H4>

<P>
<P>
The functions in this subsection allow one to access noncommutative
polynomials.


<H5><A NAME = "10503">Coefficients(f) : AlgFrElt -&gt; [ RngElt ]</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f with coefficients in R, this
function returns a sequence of `base' coefficients, that is, a
sequence of elements of R occurring as
coefficients of the monomials in f. Note that the monomials
are ordered, and that the sequence of coefficients corresponds
exactly to the sequence of monomials returned by <TT>Monomials(f)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "10504">LeadingCoefficient(f) : AlgFrElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f with coefficients in R, this
function returns the leading coefficient of f as an element
of R; this is the coefficient of the leading monomial of f,
that is, the first among the monomials occurring
in f with respect to the ordering of monomials used in F.
</BLOCKQUOTE>
<H5><A NAME = "10505">TrailingCoefficient(f) : AlgFrElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f with coefficients in R, this
function returns the trailing coefficient of f as an element
of R; this is the coefficient of the trailing monomial of f,
that is, the last among the monomials occurring
in f with respect to the ordering of monomials used in F.
</BLOCKQUOTE>
<H5><A NAME = "10506">MonomialCoefficient(f, m) : AlgFrElt, AlgFrElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f and a monomial m, this function
returns the coefficient with which m occurs in f as an element of R.
</BLOCKQUOTE>
<H5><A NAME = "10507">Monomials(f) : AlgFrElt -&gt; [ AlgFrElt ]</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f&isin;F, this function returns a
sequence of the monomials (monoid words) occurring in f. Note that
the monomials in F are ordered, and that the sequence of monomials
corresponds exactly to the sequence of coefficients returned by <TT>Coefficients(f)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "10508">LeadingMonomial(f) : AlgFrElt -&gt; AlgFrElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f&isin;F this function returns
the leading monomial of f, that is, the first monomial element
of F that occurs in f, with respect to the
ordering of monomials used in F.
</BLOCKQUOTE>
<H5><A NAME = "10509">Terms(f) : AlgFrElt -&gt; [ AlgFrElt ]</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f&isin;F, this function returns the sequence
of (non-zero) terms of f as elements of F. The terms are ordered
according to the ordering on the monomials in F. Consequently
the i-th element of this sequence of terms will be equal to
the product of the i-th element of the sequence of coefficients
and the i-th element of the sequence of monomials.
</BLOCKQUOTE>
<H5><A NAME = "10510">LeadingTerm(f) : AlgFrElt -&gt; AlgFrElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f&isin;F, this
function returns the leading term of f as an element
of F; this is the product of the leading monomial and the leading
coefficient
that is, the first among the monomial terms occurring
in f with respect to the ordering of monomials used in F.
</BLOCKQUOTE>
<H5><A NAME = "10511">TrailingTerm(f) : AlgFrElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f&isin;F, this
function returns the trailing term of f as an element
of F; this is
the last among the monomial terms occurring
in f with respect to the ordering of monomials used in F.
</BLOCKQUOTE>
<H5><A NAME = "10512">Length(m) : AlgFrElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative monomial (word) m, return the length of m, i.e.,
the number of letters of m.  Note that this differs from the commutative
case, where the number of terms in a polynomial is returned.
</BLOCKQUOTE>
<H5><A NAME = "10513">m[i] : AlgFrElt, RngIntElt -&gt; AlgFrElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative monomial (word) m of length l, and an integer
i with 1&le;i&le;l, return the i-th letter of m.
</BLOCKQUOTE>
<H5><A NAME = "10514">TotalDegree(f) : AlgFrElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial f, this
function returns the total degree of f, which is the maximum
of the lengths of all monomials that occur in f.
If f is the zero polynomial, the return value is -1.
</BLOCKQUOTE>
<H5><A NAME = "10515">LeadingTotalDegree(f) : AlgFrElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a noncommutative polynomial, this
function returns the leading total degree of f, which is the
length of the leading monomial of f.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10516">Example <TT>AlgFP_Terms (H87E2)</TT></A></H3>
In this example we illustrate the above access functions.
<P>
<P>
<PRE>
&gt; K := RationalField();
&gt; F&lt;x,y,z&gt; := FreeAlgebra(K, 3);
&gt; f := (3*x*y - 2*y*z)*(4*x - 7*z*y) + 23*x*y*z;
&gt; f;
-21*x*y*z*y + 14*y*z^2*y + 12*x*y*x + 23*x*y*z - 8*y*z*x
&gt; TotalDegree(f);
4
&gt; Coefficients(f);
[ -21, 14, 12, 23, -8 ]
&gt; Monomials(f);
[
    x*y*z*y,
    y*z^2*y,
    x*y*x,
    x*y*z,
    y*z*x
]
&gt; Terms(f);
[
    -21*x*y*z*y,
    14*y*z^2*y,
    12*x*y*x,
    23*x*y*z,
    -8*y*z*x
]
&gt; MonomialCoefficient(f, x*y*z);
23
&gt; LeadingTerm(f);
-21*x*y*z*y
&gt; LeadingCoefficient(f);
-21
&gt; m := Monomials(f)[1];
&gt; m;
x*y*z*y
&gt; Length(m);
4
&gt; m[1];
x
&gt; m[2];
y
</PRE>
<HR>
<H4><A NAME = "10517">Evaluation</A></H4>



<H5><A NAME = "10518">Evaluate(f, s) : AlgFrElt, [ RngElt ] -&gt; RngElt</A></H5>
<H5>Evaluate(f, s) : AlgFrElt, &lt; RngElt, ..., RngElt &gt; -&gt; RngElt</H5>
<BLOCKQUOTE>
Given an element f of a free algebra F=R&lt; x<sub>1</sub>, ..., x<sub>n</sub> &gt;
and a sequence or tuple s of ring or algebra elements of length n,
return the value of f at s, that is, the value obtained by
substituting x<sub>i</sub>=s[i].  This behaves in the same way as the <TT>hom</TT>
constructor above.
<P>
If the elements of
s lie in a ring and can be lifted into the coefficient ring R,
then the result will be an element of R.
If the elements of
s cannot be lifted to the coefficient ring, then an attempt is made
to do a generic evaluation of f at s.  In this case, the result will
be of the same type as the elements of s.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10519">Example <TT>AlgFP_Terms (H87E3)</TT></A></H3>
In this example we illustrate the above access functions.
<P>
<P>
<PRE>
&gt; K := RationalField();
&gt; F&lt;x,y,z&gt; := FreeAlgebra(K, 3);
&gt; g := x*y + y*z;
&gt; g;
x*y + y*z
&gt; Evaluate(g, [1,2,3]);
8
&gt; Parent($1);
Rational Field
&gt; Evaluate(g, [y,x,z]);
x*z + y*x
&gt; Parent($1);
Finitely presented algebra of rank 3 over Rational Field
Non-commutative Graded Lexicographical Order
Variables: x, y, z
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text932.htm">[Next]</A><A  HREF = "text930.htm">[Prev]</A> <A  HREF = "text932.htm">[Right]</A> <A  HREF = "text930.htm">[Left]</A> <A  HREF = "text925.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>