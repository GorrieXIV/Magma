<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Low Level Operations on Presentations and Words</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text826.htm">[Next]</A><A  HREF = "text824.htm">[Prev]</A> <A  HREF = "text826.htm">[Right]</A> <A  HREF = "text824.htm">[Left]</A> <A  HREF = "text823.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9462">Low Level Operations on Presentations and Words</A></H3>

<P>
<P>
In this section, we describe some rather low level operations on presentations
and on elements of fp-groups. The main purpose of the functions described here,
is to provide some efficient machinery for manipulating presentations and
elements of fp-groups for user written functions. 



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text825.htm#9463">Modifying Presentations</A>
<LI> <A  HREF = "text825.htm#9478">Low Level Operations on Words</A>
</UL>
<H4><A NAME = "9463">Modifying Presentations</A></H4>

<P>
<P>
The functions described in this section construct a new fp-group from an
existing one by adding or deleting a generator or by adding, deleting or
changing a relation. The new group is created without any relationship to
the existing group. 


<H5><A NAME = "9464">AddGenerator(G) : GrpFP -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G with presentation &lt; X | R &gt;, create a new fp-group 
with presentation &lt; X &cup;{ z } | R &gt;, 
where z is a symbol not in X.
</BLOCKQUOTE>
<H5><A NAME = "9465">AddGenerator(G, w) : GrpFP, GrpFPElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G with presentation &lt; X | R &gt;, 
and given also a word w in the generators X, create a new fp-group
having the presentation
&lt; X &cup;{ z } | R &cup;{ z = w } &gt;,
where z is a symbol not in X.
</BLOCKQUOTE>
<H5><A NAME = "9466">AddRelation(G, r) : GrpFP, RelElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, and a relation r on the generators of G, create a 
new fp-group whose presentation consists of the relations of G together 
with the relation r.
</BLOCKQUOTE>
<H5><A NAME = "9467">AddRelation(G, g) : GrpFP, GrpFPElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, and an element g of G, create a 
new fp-group whose presentation consists of the relations of G together 
with the relation g=(Id)(G).
</BLOCKQUOTE>
<H5><A NAME = "9468">AddRelation(G, r, i) : GrpFP, RelElt, RngIntElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, and a relation r on the generators of G, create 
a new fp-group which has as its presentation the relations of G 
together with the relation r inserted after the i-th existing relation
of G.
</BLOCKQUOTE>
<H5><A NAME = "9469">AddRelation(G, g, i) : GrpFP, GrpFPElt, RngIntElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, and an element g of G, create 
a new fp-group which has as its presentation the relations of G 
together with the relation g=(Id)(G) inserted after the i-th existing relation
of G.
</BLOCKQUOTE>
<H5><A NAME = "9470">DeleteGenerator(G, x) : GrpFP, GrpFPElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G with presentation &lt; X | R &gt;, and given also 
an element z in X, create a new fp-group with presentation 
&lt; X - {z} | R' &gt;, where the relations  R' are obtained from R by 
deleting all relations containing an occurrence of z.
</BLOCKQUOTE>
<H5><A NAME = "9471">DeleteRelation(G, r) : GrpFP, RelElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, which includes the relation r amongst its 
relations, create a new fp-group which has as its presentation
the relations of G with relation r omitted.
</BLOCKQUOTE>
<H5><A NAME = "9472">DeleteRelation(G, g) : GrpFP, GrpFPElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, which includes the relation g=(Id)(G) amongst its 
relations, create a new fp-group which has as its presentation
the relations of G with this relation omitted.
</BLOCKQUOTE>
<H5><A NAME = "9473">DeleteRelation(G, i) : GrpFP, RngIntElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G, create a new fp-group which
has as its presentation the relations for G with the i-th relation deleted.
</BLOCKQUOTE>
<H5><A NAME = "9474">ReplaceRelation(G, s, r) : GrpFP, RelElt, RelElt -&gt; GrpFP</A></H5>
<H5>ReplaceRelation(G, h, r) : GrpFP, GrpFPElt, RelElt -&gt; GrpFP</H5>
<H5>ReplaceRelation(G, s, g) : GrpFP, RelElt, GrpFPElt -&gt; GrpFP</H5>
<H5>ReplaceRelation(G, h, g) : GrpFP, GrpFPElt, GrpFPElt -&gt; GrpFP</H5>
<BLOCKQUOTE>
Given an fp-group G, which includes the relation s or h=(Id)(G) 
amongst its relations, create a new fp-group which has as its presentation the
relations for G with the relation s replaced by the relation r or g=(Id)(G).
</BLOCKQUOTE>
<H5><A NAME = "9475"></A><A NAME = "GrpFP_2:ReplaceRelation">ReplaceRelation</A>(G, i, r) : GrpFP, RngIntElt, RelElt -&gt; GrpFP</H5>
<BLOCKQUOTE>
Given an fp-group G and a relation r in the generators of G, 
create a new fp-group which
has as its presentation the relations for G with relation number i 
replaced by the relation r.
</BLOCKQUOTE>
<H5><A NAME = "9476">ReplaceRelation(G, i, g) : GrpFP, RngIntElt, GrpFPElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Given an fp-group G and an element g of G, create a new fp-group which
has as its presentation the relations for G with relation number i 
replaced by the relation g=(Id)(G).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9477">Example <TT>GrpFP_2_Replace (H76E1)</TT></A></H3>
We use the function <A  HREF = "text825.htm#GrpFP_2:ReplaceRelation">ReplaceRelation</A> to vary a particular
relation in a presentation. The order of the resulting group together with
the index of a particular subgroup is determined.
<P>
<P>
<P>
<PRE>
&gt; G&lt;x,y,z,h,k,a&gt; := Group&lt; x, y, z, h, k, a | 
&gt;    x^2, y^2, z^2, (x,y), (y,z), (x,z), h^3, k^3, (h,k), 
&gt;    (x,k), (y,k), (z,k), x^h*y, y^h*z, z^h*x, a^2, a*x*a*y,
&gt;    a*y*a*x, (a,z), (a,k), (a*h)^2 &gt;;
&gt; for i := 0 to 1 do
&gt;     for j := 0 to 1 do
&gt;         for k := 0 to 1 do
&gt;              for l := 0 to 2 do
&gt;                 rel := G.1^i*G.2^j*G.3^k*G.5^l*(G.6*G.4)^2 = Id(G);
&gt;                 K := ReplaceRelation(G, 21, rel);
&gt;                 print Order(K), Index(K, sub&lt; K | K.6, K.4&gt;);
&gt;             end for;
&gt;         end for;
&gt;     end for;
&gt; end for;

&lt;0, 0, 0, 0&gt; 144 24
&lt;0, 0, 0, 1&gt; 144 8
&lt;0, 0, 0, 2&gt; 144 8
&lt;0, 0, 1, 0&gt; 18 3
&lt;0, 0, 1, 1&gt; 18 1
&lt;0, 0, 1, 2&gt; 18 1
&lt;0, 1, 0, 0&gt; 72 3
&lt;0, 1, 0, 1&gt; 72 1
&lt;0, 1, 0, 2&gt; 72 1
&lt;0, 1, 1, 0&gt; 36 6
&lt;0, 1, 1, 1&gt; 36 2
&lt;0, 1, 1, 2&gt; 36 2
&lt;1, 0, 0, 0&gt; 18 3
&lt;1, 0, 0, 1&gt; 18 1
&lt;1, 0, 0, 2&gt; 18 1
&lt;1, 0, 1, 0&gt; 144 6
&lt;1, 0, 1, 1&gt; 144 2
&lt;1, 0, 1, 2&gt; 144 2
&lt;1, 1, 0, 0&gt; 36 6
&lt;1, 1, 0, 1&gt; 36 2
&lt;1, 1, 0, 2&gt; 36 2
&lt;1, 1, 1, 0&gt; 72 12
&lt;1, 1, 1, 1&gt; 72 4
&lt;1, 1, 1, 2&gt; 72 4
</PRE>
<HR>
<H4><A NAME = "9478">Low Level Operations on Words</A></H4>

<P>
<P>
The functions described in this section perform low level string operations
like substitution, elimination or substring matching on elements of fp-groups.


<H5><A NAME = "9479">Eliminate(u, x, v) : GrpFPElt, GrpFPElt, GrpFPElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given words u and v, and a generator x, all belonging to a group
G, return the word obtained from u by replacing each occurrence
of x by v and each occurrence of x<sup> - 1</sup> by v<sup> - 1</sup>.
</BLOCKQUOTE>
<H5><A NAME = "9480">Eliminate(U, x, v) : { GrpFPElt }, GrpFPElt, GrpFPElt -&gt; { GrpFPElt }</A></H5>
<BLOCKQUOTE>
Given a set of words U, a word v, and a generator x, all
belonging to a group G, return the set of words obtained by
taking each element u of U in turn, and replacing each occurrence
of x in u by v and each occurrence of x<sup> - 1</sup> by v<sup> - 1</sup>.
</BLOCKQUOTE>
<H5><A NAME = "9481">Match(u, v, f) : GrpFPElt, GrpFPElt, RngIntElt -&gt; BoolElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Suppose u and v are words belonging to the same group G, and
that f is an integer such that 1 &le;f &le;# u. The function
seeks the least integer l such that:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>l&ge;f; and
<DT>(b)</DT><DD>v appears as a subword of u, starting at the l-th letter
of u.
<P>
<P>
</DL>
If such an integer l is found <TT>Match</TT> returns the value <TT>true</TT> and l.
If no such l is found, <TT>Match</TT> returns the value <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "9482">RotateWord(u, n) : GrpFPElt, RngIntElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
The word obtained by cyclically permuting the word u by n places.
If n is positive, the rotation is from left to right, while if n
is negative the rotation is from right to left. In the case where n
is zero, the function returns u.
</BLOCKQUOTE>
<H5><A NAME = "9483">Substitute(u, f, n, v) : GrpFPElt, RngIntElt, RngIntElt, GrpFPElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given words u and v belonging to a group G, and non-negative
integers f and n, this function replaces the substring of u of
length n, starting at position f, by the word v. Thus, if u =
x<sub>i<sub>1</sub></sub><sup>e<sub>1</sub></sup> ... x<sub>i<sub>f</sub></sub><sup>e<sub>f</sub></sup> ... x_(i<sub>f + n - 1</sub>)<sup>e<sub>f + n - 1</sub></sup> ... x<sub>i<sub>m</sub></sub><sup>e<sub>m</sub></sup> then the substring x<sub>i<sub>f</sub></sub><sup>e<sub>f</sub></sup> ... x_(i<sub>f + n - 1</sub>)<sup>e<sub>f + n - 1</sub></sup> is replaced by v. If the function is
invoked with v = Id(G), then the substring x<sub>i<sub>f</sub></sub><sup>e<sub>f</sub></sup> ... x_(i<sub>f + n - 1</sub>)<sup>e<sub>f + n - 1</sub></sup> of u is deleted.
</BLOCKQUOTE>
<H5><A NAME = "9484">Subword(u, f, n) : GrpFPElt, RngIntElt, RngIntElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
The subword of the word u comprising the n consecutive letters
commencing at the f-th letter of u.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9485">Example <TT>GrpFP_2_WordOps (H76E2)</TT></A></H3>
We demonstrate some of these operations in the context of the
free group on generators x, y, and z.
<P>
<P>
<PRE>
&gt; F&lt;x, y, z&gt; := FreeGroup(3);
&gt; u := (x, y*z);
&gt; w := u^(x^2*y);
&gt; #w;
12
&gt; w;
y^-1 * x^-3 * z^-1 * y^-1 * x * y * z * x^2 * y
</PRE>
We replace each occurrence of the generator x in w by the word y * z^ - 1.
<P>
<P>
<PRE>
&gt; Eliminate(w, x, y*z^-1);
y^-1 * z * y^-1 * z * y^-1 * z * y^-1 * z^-2 * y * z * y * z^-1 * y * z^-1 * y
</PRE>
We count the number of occurrences of each generator in w.
<P>
<P>
<PRE>
&gt; [ ExponentSum(w, F.i) : i in [1..Ngens(F)] ];
[ 0, 0, 0 ]
&gt; GeneratorNumber(w);
-2
</PRE>
We locate the start of the word u in the word w.
<P>
<P>
<PRE>
&gt; b, p := Match(w, u, 1);
&gt; b, p;
true 4
</PRE>
We now replace the subword u in w by the word y * x.
<P>
<P>
<PRE>
&gt; t := Substitute(w, p, #u, y*x);
&gt; t;
y^-1 * x^-2 * y * x^3 * y
</PRE>
We create the set of all distinct cyclic permutations of the word u.
<P>
<P>
<PRE>
&gt; rots := { RotateWord(u, i) : i in [1 ..#u] };
&gt; rots;
{ y^-1 * x * y * z * x^-1 * z^-1,  x * y * z * x^-1 * z^-1 * y^-1, 
x^-1 * z^-1 * y^-1 * x * y * z,  z * x^-1 * z^-1 * y^-1 * x * y, 
z^-1 * y^-1 * x * y * z * x^-1,  y * z * x^-1 * z^-1 * y^-1 * x }
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text826.htm">[Next]</A><A  HREF = "text824.htm">[Prev]</A> <A  HREF = "text826.htm">[Right]</A> <A  HREF = "text824.htm">[Left]</A> <A  HREF = "text823.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>