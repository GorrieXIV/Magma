<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Isomorphisms</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1422.htm">[Next]</A><A  HREF = "text1420.htm">[Prev]</A> <A  HREF = "text1422.htm">[Right]</A> <A  HREF = "text1420.htm">[Left]</A> <A  HREF = "text1415.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "16057">Isomorphisms</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1421.htm#16058">Isomorphisms with Standard Models</A>
</UL>
<H4><A NAME = "16058">Isomorphisms with Standard Models</A></H4>

<P>
<P>
<P>
<P>
In this section we discuss isomorphisms between heterogeneous types
--- isomorphisms between combinations of curves of type <TT>Crv</TT>,
<TT>CrvCon</TT>, and <TT>CrvRat</TT>, and their parametrisations by a
projective line.
<P>
The first function which we treat here is <TT>Conic</TT>, which is as
much a constructor as an isomorphism.  It takes an arbitrary genus
zero curve C and uses the anti-canonical divisor -K<sub>C</sub> of
degree 2 to construct the Riemann--Roch space.  For a genus zero
curve this is a dimension 3 space of degree 2 functions and
gives a projective embedding of C in P<sup>2</sup> as a conic.
This provides the starting point to make any genus zero curve
amenable to the powerful machinery for point finding and isomorphism
classification of conics.
<P>
An isomorphism --- provided that one exists --- of the projective
line with a conic can be described as follows.
The 2-uple embedding &phi;: P<sup>1</sup> -&gt; P<sup>2</sup> defined
by (u:v) |-&gt; (u<sup>2</sup>:uv:v<sup>2</sup>) gives an isomorphism of P<sup>1</sup>
with the conic C<sub>0</sub> with defining equation y<sup>2</sup> = xz.  The
inverse isomorphism C<sub>0</sub> -&gt; P<sup>1</sup> is defined by the
maps
<P>
matrix(
(x:y:z) |-&gt; (x:y)  on  x &ne;0, cr
(x:y:z) |-&gt; (y:z)  on  z &ne;0, )
<P>
respectively.  Since these open sets cover the conic C<sub>0</sub> this
defines an isomorphism and not just a birational map.  In order to
describe an isomorphism of a conic C<sub>1</sub> with P<sup>1</sup> it is
then necessary and sufficient to give a change of variables which
maps C<sub>0</sub> = &phi;(P<sup>1</sup>) onto the conic C<sub>1</sub>.  This matrix is
called the <I>parametrisation matrix</I> and is stored with C<sub>1</sub>
once a rational point is found.


<H5><A NAME = "16059">Conic(C) : Crv -&gt; MapSch</A></H5>
<BLOCKQUOTE>
Given a curve of genus zero, returns a conic determined by the
anti-canonical embedding of C.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16060">Example <TT>CrvCon_ (H125E10)</TT></A></H3>
We demonstrate the function <TT>Conic</TT> on the curve of
Example <A  HREF = "text1417.htm#16021">H125E2</A> to find a conic model, even though we
know that it admits a rational parametrisation.
<P>
<P>
<PRE>
&gt; P2&lt;x,y,z&gt; := ProjectivePlane(FiniteField(71));
&gt; C0 := Curve(P2, (x^3 + y^2*z)^2 - x^5*z);
&gt; C1, m := Conic(C0);
&gt; C1;
Conic over GF(71) defined by
x^2 + 70*x*z + y^2
&gt; m : Minimal;
(x : y : z) -&gt; (x^3*y*z : 70*x^5 + x^4*z + 70*x^2*y^2*z : x^3*y*z + y^3*z^2)
</PRE>
<HR>
<H5><A NAME = "16061">ParametrizationMatrix(C) : CrvCon -&gt; ModMatRngElt</A></H5>
<BLOCKQUOTE>
This function is an optimised routine for parametrising a conic C defined
over Z or Q. It returns a 3 x 3 matrix M which defines a
parametrisation of C as a projective change of variables from the 2-uple
embedding of a projective line in the projective plane; i.e., for
a point (x<sub>0</sub>:y<sub>0</sub>:z<sub>0</sub>) on C, the point
<P>
(x<sub>1</sub>:y<sub>1</sub>:z<sub>1</sub>) = (x<sub>0</sub>:y<sub>0</sub>:z<sub>0</sub>) M
<P>
satisfies the equation y<sub>1</sub><sup>2</sup> = x<sub>1</sub>z<sub>1</sub>.  Note that as usual in Magma
the action of M is on the right and, consistently, the action of
scheme maps is also on the right.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16062">Example <TT>CrvCon_ (H125E11)</TT></A></H3>
In this example we demonstrate that the parametrisation matrix
determines the precise change of variables to transform the conic
equation into the equation y<sup>2</sup> = xz.  We begin with a singular
plane curve C<sub>0</sub> of genus zero and construct a nonsingular conic
model in the plane.
<P>
<P>
<PRE>
&gt; P2&lt;x,y,z&gt; := ProjectiveSpace(Rationals(), 2);
&gt; C0 := Curve(P2, (x^3 + y^2*z)^2 - x^5*z);
&gt; C1, m := Conic(C0);
&gt; C1;
Conic over Rational Field defined by
x^2 - x*z + y^2
</PRE>
The curve C<sub>1</sub> has obvious points, such as (1 : 0 : 1),
which Magma internally verifies without requiring an
explicit user call to <TT>HasRationalPoint</TT>.
<P>
<P>
<PRE>
&gt; ParametrizationMatrix(C1);
[1 0 1]
[0 1 0]
[0 0 1]
&gt; Evaluate(DefiningPolynomial(C1), [x, y, x+z]);
-x*z + y^2
</PRE>
We note (as is standard in Magma) that the action of matrices, as with
maps of schemes, is a right action on coordinates (x : y : z).
<HR>
<H5><A NAME = "16063">Parametrization(C) : CrvCon -&gt; MapSch</A></H5>
<H5>Parametrization(C, P) : CrvCon, Crv -&gt; MapSch</H5>
<H5>Parametrization(C, p) : Crv, Pt -&gt; MapSch</H5>
<H5>Parametrization(C, p) : Crv, PlcCrvElt -&gt; MapSch</H5>
<H5>Parametrization(C, p, P) : CrvCon, Pt, Crv -&gt; MapSch</H5>
<H5>Parametrization(C, p, P) : CrvRat, Pt, Crv -&gt; MapSch</H5>
<H5>Parametrization(C, p, P) : CrvCon, PlcCrvElt, Crv -&gt; MapSch</H5>
<H5>Parametrization(C, p, P) : CrvRat, PlcCrvElt, Crv -&gt; MapSch</H5>
<BLOCKQUOTE>
Given a conic curve C over a general field, these functions return
a parametrisation as an isomorphism of schemes P -&gt; C.
Here P is a copy of a projective line; it may be specified as one of
the arguments or a new projective line will be created.
Note that it is now required that P is given (or created) as a curve
rather than as an ambient space (as used to be permitted).
This allows the immediate use of pullback/push-forward functionality for the
parametrisation map.
<P>
When a rational point or place is not specified as one of the arguments
then the base field of C must be one of the kinds allowed in
<TT>HasRationalPoint</TT>.
If the conic has no rational points then an error results.
</BLOCKQUOTE>
<H5><A NAME = "16064">ParametrizeOrdinaryCurve(C) : Crv -&gt; MapSch</A></H5>
<H5>ParametrizeOrdinaryCurve(C, p) : Crv, Pt -&gt; MapSch</H5>
<H5>ParametrizeOrdinaryCurve(C, p) : Crv, PlcCrvElt -&gt; MapSch</H5>
<H5>ParametrizeOrdinaryCurve(C, p, I) : Crv, Pt, RngMPol -&gt; MapSch</H5>
<H5>ParametrizeOrdinaryCurve(C, p, I) : Crv, PlcCrvElt, RngMPol -&gt; MapSch</H5>
<H5>ParametrizeRationalNormalCurve(C) : Crv -&gt; MapSch</H5>
<BLOCKQUOTE>
These functions are as above (see <TT>Parametrization</TT>), but use different
algorithms.
<P>
When C is a plane curve with only ordinary singularities (see subsection
<A  HREF = "text1359.htm#14961">Ordinary Plane Curves</A>) then a slightly
different procedure is followed that relies less on the general function
field machinery and tends to be faster and can produce nicer
parametrisations. The variants <TT>ParametrizeOrdinaryCurve</TT> allow
direct calls to these more specialised procedures. The I argument
is the adjoint ideal of C (<I>loc. cit.</I>), which may be passed in
if already computed.
<P>
The final function listed is slightly different; it applies only to
rational normal curves. i.e., non-singular rational curves of degree d
in ordinary d-dimensional projective space for d &ge;1. For the sake
of speed the irreducibility of C is not checked. The function uses
adjoint maps to find either a line or conic parametrisation of C:
If d is odd then an isomorphism from the projective line to C is returned,
and if d is even then an isomorphism from a plane conic is returned. The
method uses no function field machinery and can be much faster than the
general function.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16065">Example <TT>CrvCon_RationalParametrization (H125E12)</TT></A></H3>
In this example we show how to parametrise a projective rational curve
with a map from the one-dimensional projective space.  First we construct
a singular plane curve and verify that it has geometric genus zero.
<P>
<P>
<PRE>
&gt; k := FiniteField(101);
&gt; P2&lt;x,y,z&gt; := ProjectiveSpace(k, 2);
&gt; f := x^7 + 3*x^3*y^2*z^2 + 5*y^4*z^3;
&gt; C := Curve(P2, f);
&gt; Genus(C);
0
</PRE>
In order to parametrise the curve C we need to find a nonsingular point
on it, or at least a point of C over which there exists a
unique degree one place; geometrically, such a point is one at which
C has a cusp.  To find such a point we invoke the intrinsic
<TT>RationalPoints</TT> on C; since C is defined over a finite field
this call returns an indexed
set of all the points of C that are rational over its base field.
<P>
Having done the previous in the background, we demonstrate that the particular
point (2 : 33 : 1) is such a nonsingular rational point.
<P>
<P>
<PRE>
&gt; p := C![2,33,1];
&gt; p;
(2 : 33 : 1)
&gt; IsNonsingular(C, p);
true
</PRE>
The parametrisation function takes a projective line as the third argument;
this will be used as the domain of the parametrisation map.
<P>
<P>
<PRE>
&gt; P1&lt;u,v&gt; := ProjectiveSpace(k, 1);
&gt; phi := Parametrization(C, Place(p), Curve(P1));
&gt; phi;
Mapping from: Prj: P1 to Prj: P2
with equations :
2*u^7 + 5*u^6*v + 81*u^5*v^2 + 80*u^4*v^3 + 13*u^3*v^4
33*u^7 + 88*u^6*v + 90*u^5*v^2 + 73*u^4*v^3 + 25*u^3*v^4 +
    83*u^2*v^5 + 72*u*v^6 + 24*v^7
u^7
</PRE>
Finally we confirm that the map really does parametrise the curve C.
Note that the map is normalised so that the point at infinity on the
projective line P<sub>1</sub> maps to the prescribed point p.
<P>
<P>
<PRE>
&gt; Image(phi);
Scheme over GF(101) defined by
x^7 + 3*x^3*y^2*z^2 + 5*y^4*z^3
&gt; DefiningIdeal(Image(phi)) eq DefiningIdeal(C);
true
&gt; phi(P1![1, 0]);
(2 : 33 : 1)
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1422.htm">[Next]</A><A  HREF = "text1420.htm">[Prev]</A> <A  HREF = "text1422.htm">[Right]</A> <A  HREF = "text1420.htm">[Left]</A> <A  HREF = "text1415.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>