<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Adjacency and Degree</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1795.htm">[Next]</A><A  HREF = "text1793.htm">[Prev]</A> <A  HREF = "text1795.htm">[Right]</A> <A  HREF = "text1793.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19851">Adjacency and Degree</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1794.htm#19852">Adjacency and Degree Functions for a Graph</A>
<LI> <A  HREF = "text1794.htm#19863">Adjacency and Degree Functions for a Digraph</A>
</UL>
<H4><A NAME = "19852">Adjacency and Degree Functions for a Graph</A></H4>



<H5><A NAME = "19853">Degree(u) : GrphVert -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a vertex u of the graph G, return the degree of u, ie
the number of edges incident to u.
</BLOCKQUOTE>
<H5><A NAME = "19854">Alldeg(G, n) : GrphUnd, RngIntElt -&gt; { GrphVert }</A></H5>
<BLOCKQUOTE>
Given a graph G, and a non-negative integer n, return the set of
all vertices of G that have degree equal to n.
</BLOCKQUOTE>
<H5><A NAME = "19855">MaximumDegree(G) : GrphUnd -&gt; RngIntElt, GrphVert</A></H5>
<H5>Maxdeg(G) : GrphUnd -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The maximum of the degrees of the vertices of the graph G. This function
returns two values: the maximum degree, and a vertex of G having
that degree.
</BLOCKQUOTE>
<H5><A NAME = "19856">MinimumDegree(G) : GrphUnd -&gt; RngIntElt, GrphVert</A></H5>
<H5>Mindeg(G) : GrphUnd -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The minimum of the degrees of the vertices of the graph G. This function
returns two values: the minimum degree, and a vertex of G having
that degree.
</BLOCKQUOTE>
<H5><A NAME = "19857">DegreeSequence(G) : Grph -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
Given a graph G such that the maximum degree of any vertex of G
is r, return a sequence D of length r + 1, such that D[i],
1 &le;i &le;r + 1, is the number of vertices in G having
degree i - 1.
</BLOCKQUOTE>
<H5><A NAME = "19858">Valence(G) : GrphUnd -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a regular graph G, return the valence of G (the degree of
any vertex).
</BLOCKQUOTE>
<H5><A NAME = "19859">Neighbours(u) : GrphVert -&gt; { GrphVert }</A></H5>
<H5>Neighbors(u) : GrphVert -&gt; { GrphVert }</H5>
<BLOCKQUOTE>
Given a vertex u of the graph G, return the set of vertices of
G that are adjacent to u.
</BLOCKQUOTE>
<H5><A NAME = "19860">IncidentEdges(u) : GrphVert -&gt; { GrphEdge }</A></H5>
<BLOCKQUOTE>
The set of all edges incident with the vertex u.
</BLOCKQUOTE>
<H5><A NAME = "19861">Bipartition(G) : GrphUnd -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
Given a bipartite graph G, return its two partite sets in the form
of a pair of subsets of V(G).
</BLOCKQUOTE>
<H5><A NAME = "19862">MinimumDominatingSet(G) : GrphUnd -&gt; SetEnum</A></H5>
<BLOCKQUOTE>
A dominating set S of a graph G is such that the vertices of S
  together with the vertices adjacent to vertices 
  in S form the vertex-set of G.
A dominating set S is minimal if no proper subset of S is 
  a dominating set.
A minimum dominating set is a minimal dominating set
  of smallest size.
The algorithm implemented is a backtrack algorithm (see <A  HREF = "text1781.htm#bib_Christo75">[Chr75]</A> p. 41).
</BLOCKQUOTE>
<H4><A NAME = "19863">Adjacency and Degree Functions for a Digraph</A></H4>



<H5><A NAME = "19864">InDegree(u) : GrphVert -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of edges directed into the vertex u belonging to the
directed graph G.
</BLOCKQUOTE>
<H5><A NAME = "19865">OutDegree(u) : GrphVert -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of edges of the form uv where u is a vertex belonging
to the directed graph G.
</BLOCKQUOTE>
<H5><A NAME = "19866">Degree(u) : GrphVert -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a vertex u belonging to the digraph G, return the total
degree of u, i.e. the sum of the in--degree and out--degree for u.
</BLOCKQUOTE>
<H5><A NAME = "19867">Alldeg(G, n) : GrphDir, RngIntElt -&gt; { GrphVert }</A></H5>
<BLOCKQUOTE>
Given a digraph G, and a non--negative integer n, return the set
of all vertices of G that have total degree equal to n.
</BLOCKQUOTE>
<H5><A NAME = "19868">MaximumInDegree(G) : GrphDir -&gt; RngIntElt, GrphVert</A></H5>
<H5>Maxindeg(G) : GrphDir -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The maximum indegree of the vertices of the digraph G. This function
returns two values: the maximum indegree, and the first vertex
of G having that degree.
</BLOCKQUOTE>
<H5><A NAME = "19869">MaximumOutDegree(G) : GrphDir -&gt; RngIntElt, GrphVert</A></H5>
<H5>Maxoutdeg(G) : GrphDir -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The maximum outdegree of the vertices of the digraph G. This function
returns two values: the maximum outdegree, and the first vertex of G
having that degree.
</BLOCKQUOTE>
<H5><A NAME = "19870">MinimumInDegree(G) : GrphDir -&gt; RngIntElt, GrphVert</A></H5>
<H5>Minindeg(G) : GrphDir -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The minimum indegree of the vertices of the digraph G. This function
returns two values: the minimum indegree, and the first vertex of G
having that degree.
</BLOCKQUOTE>
<H5><A NAME = "19871">MinimumOutDegree(G) : GrphDir -&gt; RngIntElt, GrphVert</A></H5>
<H5>Minoutdeg(G) : GrphDir -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The minimum outdegree of the vertices of the digraph G. This function
returns two values: the minimum outdegree, and the first vertex of G
having that degree.
</BLOCKQUOTE>
<H5><A NAME = "19872">MaximumDegree(G) : GrphDir -&gt; RngIntElt, GrphVert</A></H5>
<H5>Maxdeg(G) : GrphDir -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The maximum total degree of the vertices of the digraph G. This
function returns two values: the maximum total degree, and the first
vertex of G having that degree.
</BLOCKQUOTE>
<H5><A NAME = "19873">MinimumDegree(G) : GrphDir -&gt; RngIntElt, GrphVert</A></H5>
<H5>Mindeg(G) : GrphDir -&gt; RngIntElt, GrphVert</H5>
<BLOCKQUOTE>
The minimum total degree of the vertices of the digraph G. This
function returns two values: the minimum total degree, and the first
vertex of G having that degree.
</BLOCKQUOTE>
<H5><A NAME = "19874">DegreeSequence(G) : Grph -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
Given a digraph G such that the maximum degree of any vertex of G
is r, return a sequence D of length r + 1, such that D[i],
1 &le;i &le;r + 1, is the number of vertices in G having
degree i - 1.
</BLOCKQUOTE>
<H5><A NAME = "19875">InNeighbours(u) : GrphVert -&gt; { GrphVert }</A></H5>
<H5>InNeighbors(u) : GrphVert -&gt; { GrphVert }</H5>
<BLOCKQUOTE>
Given a vertex u of the digraph G, return the set containing all
vertices v such that vu is an edge in the digraph, i.e. the starting
points of all edges that are directed into the vertex u.
</BLOCKQUOTE>
<H5><A NAME = "19876">OutNeighbours(u) : GrphVert -&gt; { GrphVert }</A></H5>
<H5>OutNeighbors(u) : GrphVert -&gt; { GrphVert }</H5>
<BLOCKQUOTE>
Given a vertex u of the digraph G, return the set of vertices v
of G such that uv is an edge in the graph G, i.e. the set of
vertices v that are the end vertices of edges directed from u to
v.
</BLOCKQUOTE>
<H5><A NAME = "19877">IncidentEdges(u) : GrphVert -&gt; { GrphEdge }</A></H5>
<BLOCKQUOTE>
The set of all edges incident with the vertex u.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1795.htm">[Next]</A><A  HREF = "text1793.htm">[Prev]</A> <A  HREF = "text1795.htm">[Right]</A> <A  HREF = "text1793.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>