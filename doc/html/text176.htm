<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Elements of Residue Class Rings</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text177.htm">[Next]</A><A  HREF = "text175.htm">[Prev]</A> <A  HREF = "text177.htm">[Right]</A> <A  HREF = "text175.htm">[Left]</A> <A  HREF = "text171.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1403">Elements of Residue Class Rings</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text176.htm#1404">Creation</A>
<LI> <A  HREF = "text176.htm#1408">Arithmetic Operators</A>
<LI> <A  HREF = "text176.htm#1409">Equality and Membership</A>
<LI> <A  HREF = "text176.htm#1410">Parent and Category</A>
<LI> <A  HREF = "text176.htm#1411">Predicates on Ring Elements</A>
<LI> <A  HREF = "text176.htm#1412">Solving Equations over Z/mZ</A>
</UL>
<H4><A NAME = "1404">Creation</A></H4>



<H5>One(R) : RngIntRes -&gt; RngIntResElt</H5>

<H5>Identity(R) : RngIntRes -&gt; RngIntResElt</H5><P>

<H5>Zero(R) : RngIntRes -&gt; RngIntResElt</H5>

<H5>Representative(R) : RngIntRes -&gt; RngIntResElt</H5><P>


These generic functions 
create 1, 1, 0, and 0 respectively, in any Z/mZ.


<H5><A NAME = "1405">elt&lt; R | k &gt; : RngIntRes, RngIntElt -&gt; RngIntResElt</A></H5>
<BLOCKQUOTE>
Create the residue class containing the integer k in residue class ring R.
</BLOCKQUOTE>
<H5><A NAME = "1406">R ! k : RngIntRes, RngIntElt -&gt; RngIntResElt</A></H5>
<BLOCKQUOTE>
Create the residue class containing k in the residue class ring R. Here
k is allowed to be either an integer, or an element of the finite field
F<sub>p</sub> in the case R = Z/pZ, or an element of S = Z/nZ for a multiple
or divisor n of m (with R = Z/mZ).
</BLOCKQUOTE>
<H5><A NAME = "1407">Random(R) : RngIntRes -&gt; RngIntResElt</A></H5>
<BLOCKQUOTE>
Create a "random" residue class in R.
</BLOCKQUOTE>
<H4><A NAME = "1408">Arithmetic Operators</A></H4>



<H5>+ n : RngIntResElt -&gt; RngIntResElt</H5>

<H5>- n : RngIntResElt -&gt; RngIntResElt</H5><P>

<H5>m + n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m - n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m * n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>n ^ k : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m / n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m div n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5><P>

<H5>m +:= n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m -:= n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m *:= n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m /:= n : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>

<H5>m ^:= k : RngIntResElt, RngIntResElt -&gt; RngIntResElt</H5>
<P>

<H4><A NAME = "1409">Equality and Membership</A></H4>



<H5>m eq n : RngIntResElt, RngIntResElt -&gt; BoolElt</H5>

<H5>m ne n : RngIntResElt, RngIntResElt -&gt; BoolElt</H5><P>

<H5>n in R : RngIntResElt, Rng -&gt; BoolElt</H5>

<H5>n notin R : RngIntResElt, Rng -&gt; BoolElt</H5><P>

<H4><A NAME = "1410">Parent and Category</A></H4>



<H5>Parent(n) : RngIntResElt -&gt; RngIntRes</H5>

<H5>Category(n) : RngIntResElt -&gt; Cat</H5><P>

<H4><A NAME = "1411">Predicates on Ring Elements</A></H4>



<H5>IsZero(n) : RngIntResElt -&gt; BoolElt</H5>

<H5>IsOne(n) : RngIntResElt -&gt; BoolElt</H5>

<H5>IsMinusOne(n) : RngIntResElt -&gt; BoolElt</H5><P>

<H5>IsNilpotent(n) : RngIntResElt -&gt; BoolElt</H5>

<H5>IsIdempotent(n) : RngIntResElt -&gt; BoolElt</H5><P>

<H5>IsUnit(n) : RngIntResElt -&gt; BoolElt</H5>

<H5>IsZeroDivisor(n) : RngIntResElt -&gt; BoolElt</H5>

<H5>IsRegular(n) : RngIntRes -&gt; BoolElt</H5><P>

<H5>IsIrreducible(n) : RngIntResElt -&gt; BoolElt</H5>

<H5>IsPrime(n) : RngIntResElt -&gt; BoolElt</H5><P>




<H4><A NAME = "1412">Solving Equations over Z/mZ</A></H4>



<H5><A NAME = "1413">Solution(a, b) : RngIntResElt, RngIntResElt -&gt; RngIntResElt</A></H5>
<BLOCKQUOTE>
Given elements a and b of Z/mZ, return a solution x to the 
linear congruence a.x=b &isin;Z/mZ.
An error is signalled if no solution exists.
</BLOCKQUOTE>
<H5><A NAME = "1414">IsSquare(n) : RngIntResElt -&gt; BoolElt, RngIntResElt</A></H5>

<PRE>    Factorization: [&lt;RngIntElt, RngIntElt&gt;] Default: [ ]</PRE>
<BLOCKQUOTE>
Given an element n&isin;Z/mZ this function returns <TT>true</TT>
if there exists a&isin;Z/mZ such that a<sup>2</sup>=n&isin;Z/mZ, <TT>false</TT>
otherwise. If n is a square, a square root a is also returned.
If m is large and its prime factorization is known,
the computation may be speeded up by assigning the
factorization sequence for m
to the optional argument <TT>Factorization</TT>.
</BLOCKQUOTE>
<H5><A NAME = "1415">Sqrt(a) : RngIntResElt -&gt; RngIntResElt</A></H5>
<H5>SquareRoot(a) : RngIntResElt -&gt; RngIntResElt</H5>

<PRE>    Factorization: [&lt;RngIntElt, RngIntElt&gt;] Default: [ ]</PRE>
<BLOCKQUOTE>
Given an element a of the ring Z/mZ, this function returns 
an element b of Z/mZ such that b<sup>2</sup>=a&isin;Z/mZ, if such 
an element exists, and an error otherwise.
If m is large and its prime factorization is known,
the computation may be speeded up by assigning the
factorization sequence for m
to the optional argument <TT>Factorization</TT>.
</BLOCKQUOTE>
<H5><A NAME = "1416">AllSquareRoots(a) : RngIntResElt -&gt; [ RngIntResElt ]</A></H5>
<H5>AllSqrts(a) : RngIntResElt -&gt; [ RngIntResElt ]</H5>

<PRE>    Factorization: [&lt;RngIntElt, RngIntElt&gt;] Default: [ ]</PRE>
<BLOCKQUOTE>
Return a sequence containing all square roots of the element
a in a residue class ring Z/mZ.
If the modulus m is large and its prime factorization is known,
the computation may be speeded up by assigning the
factorization sequence for m
to the optional argument <TT>Factorization</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1417">Example <TT>RngIntRes_element-ops (H19E4)</TT></A></H3>
We construct the residue class ring having modulus 2340 and find 
all the square roots of 1404.
<P>
<P>
<P>
<PRE>
&gt; R := ResidueClassRing(2340);
Residue class ring of integers modulo 2340
&gt; x := R!1404;
&gt; sqrts := AllSquareRoots(x);
&gt; sqrts;
[ 78, 312, 468, 702, 858, 1092, 1248, 1482, 1638, 
  1872, 2028, 2262 ]
&gt; [ y^2 : y in sqrts ];
[ 1404, 1404, 1404, 1404, 1404, 1404, 1404, 1404, 
  1404, 1404, 1404, 1404 ]
</PRE>
<P>
So 1404 has 12 square roots!
<HR>
<PRE></PRE> <A  HREF = "text177.htm">[Next]</A><A  HREF = "text175.htm">[Prev]</A> <A  HREF = "text177.htm">[Right]</A> <A  HREF = "text175.htm">[Left]</A> <A  HREF = "text171.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>