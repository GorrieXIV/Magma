<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Introduction</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1637.htm">[Next]</A><A  HREF = "text1635.htm">[Prev]</A> <A  HREF = "text1637.htm">[Right]</A> [____] <A  HREF = "text1635.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "18019">Introduction</A></H3>

<P>
<P>
<P>
<P>
This chapter is the reference for the modular abelian varieties
package in Magma.  A <I>modular abelian variety</I> is an abelian
variety that is a quotient of the modular Jacobian J<sub>1</sub>(N), for some
integer N. This package provides extensive functionality for
computing with such abelian varieties, including functions for
enumerating and decomposing modular abelian varieties, isomorphism
testing, computing exact endomorphism and homomorphism rings, doing
arithmetic with finite subgroups and computing information about
torsion subgroups, special values of L-functions and Tamagawa
numbers.
<P>
Essentially none of the algorithms in this package use explicit
defining equations for varieties, and as such work in a great
degree of generality.  For example, many even make sense for
Grothendieck motives attached to modular forms, and we have included
the corresponding functionality, when it makes sense.  
<P>
Magma V2.11 was the first release of the modular abelian varieties package.
The major drawback of the
current version is that complete decomposition into simples is only
implemented over the rational numbers.  Thus the interesting
behavior over number fields, involving extra inner twists, which leads
to Q-curves and associated questions, is not available (much of it
is implemented, but there are some fundamental theoretical
obstructions to overcome).
<P>
Our philosophy for representing modular abelian varieties is perhaps
different than what you might expect, so we describe how we view
an abelian subvariety A over Q contained in the modular Jacobian
J<sub>0</sub>(N).  By the Abel-Jacobi theorem we may view J<sub>0</sub>(N) over the
complex numbers as a complex vector space V modulo the lattice
H<sub>1</sub>(J<sub>0</sub>(N), Z)=H<sub>1</sub>(X<sub>0</sub>(N), Z).  An abelian subvariety A&sub;J<sub>0</sub>(N) and the map i:A to J<sub>0</sub>(N) is completely determined by giving
the image of H<sub>1</sub>(A, Q) in the vector space H<sub>1</sub>(X<sub>0</sub>(N), Q).  At
this point, it might appear that we have to compute lots of floating
point numbers and approximate lattices in the complex numbers, but
this is not the case.  Instead, we use modular symbols to compute
H<sub>1</sub>(X<sub>0</sub>(N), Z) as an abstract abelian group, and use everything we
can from the extensive theory of modular forms to compute things about
the abelian varieties determined by subgroups of H<sub>1</sub>(X<sub>0</sub>(N), Z) and
other related abelian varieties.  Note that even though we work with
homology, which is associated to complex tori, the abelian variety A
over Q is still determined by our defining data (a certain subgroup
of H<sub>1</sub>(X<sub>0</sub>(N), Z)), and our algorithms can often take advantage of
this.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1636.htm#18020">Categories</A>
<LI> <A  HREF = "text1636.htm#18022">Verbose Output</A>
</UL>
<H4><A NAME = "18020">Categories</A></H4>

<P>
<P>
Modular abelian varieties belong to the category <TT>ModAbVar</TT>, and
the elements of modular abelian varieties belong to <TT>ModAbVarElt</TT>.
The category <TT>MapModAbVar</TT> consists of homomorphisms between
modular abelian varieties (sometimes only up to isogeny, i.e.,
with a denominator).
Spaces of homomorphisms between modular abelian varieties
form the category <TT>HomModAbVar</TT>.
Finitely generated subgroups of modular abelian varieties 
form the category <TT>ModAbVarSubGrp</TT>.
Homology of a modular abelian variety is in the category <TT>ModAbVarHomol</TT>.
The L-series of modular abelian varieties are in 
<TT>ModAbVarLSer</TT>.


<HR>
<H3><A NAME = "18021">Example <TT>ModAbVar_Categories (H142E1)</TT></A></H3>
We create an object of each category.
<P>
<P>
<PRE>
&gt; A := JZero(11);
&gt; Type(A);
ModAbVar
&gt; Type(A!0);
ModAbVarElt
&gt; Type(nIsogeny(A,2));
MapModAbVar
&gt; Type(nTorsionSubgroup(A,2));
ModAbVarSubGrp
&gt; Type(End(A));
HomModAbVar
&gt; Type(Homology(A));
ModAbVarHomol
&gt; Type(LSeries(A));
ModAbVarLSer
</PRE>
<HR>
<H4><A NAME = "18022">Verbose Output</A></H4>

<P>
<P>
<P>
The verbosity level is set using the command <TT>SetVerbose("ModAbVar",n)</TT>, where <TT>n</TT> is 0 (silent), 1
(verbose), or 2 (very verbose).  The default verbose level is 0.
<P>
Two additional verbose levels are included in this package.
Level 3 is exactly like level 1, except instead of displaying to
the screen, verbose output is appended to the file <TT>ModAbVar-verbose.log</TT> 
in the directory that Magma was run from.  Verbose level 4 is exactly
like level 2, except verbose output is appended to <TT>ModAbVar-verbose.log</TT>.
On a UNIX-like system, use the shell command <TT>tail -f ModAbVar-verbose.log</TT>
to watch the verbose log in another terminal.


<HR>
<H3><A NAME = "18023">Example <TT>ModAbVar_Verbosity (H142E2)</TT></A></H3>
Using <TT>SetVerbose</TT>, we get some information about what
is happening during computations.
<P>
<P>
<PRE>
&gt; SetVerbose("ModAbVar",1);   // some verbose output
&gt; SetVerbose("ModAbVar",2);   // tons of verbose output
&gt; SetVerbose("ModAbVar",3);   // some verbose output to ModAbVar-verbose.log
&gt; SetVerbose("ModAbVar",4);   // tons of verbose output to ModAbVar-verbose.log
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1637.htm">[Next]</A><A  HREF = "text1635.htm">[Prev]</A> <A  HREF = "text1637.htm">[Right]</A> [____] <A  HREF = "text1635.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>