<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Introduction</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text708.htm">[Next]</A><A  HREF = "text706.htm">[Prev]</A> <A  HREF = "text708.htm">[Right]</A> [____] <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7979">Introduction</A></H3>

<P>
<P>
Any finite soluble group has a subnormal series with cyclic factors.
Such a series gives rise to various polycyclic presentations.  These
polycyclic presentations are useful because the word problem in such
presentations can be solved in an algorithmic fashion. In Magma, we
use the specific form called a <I>power-conjugate presentation
(pc-presentation)</I>, which is described below.  The Magma category of
groups represented by a power-conjugate presentation (pc-groups for
short) is called <A NAME = "GrpPC"><TT>GrpPC</TT></A>.
<P>
<P>
This chapter describes how to use polycyclic presentations to compute 
with p-groups and other finite soluble groups in Magma.  While most 
functions apply to any soluble group, a small number of functions specific 
to p-groups are identified in the text.  
<P>
<P>
Over the past two decades a considerable body of efficient algorithms
has been developed for computing with soluble groups defined in terms of
pc-presentations.  It is recommended that the <TT>GrpPC</TT> representation 
of a soluble group be used whenever intensive calculation with that group 
is necessary.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text707.htm#7980">Power-Conjugate Presentations</A>
</UL>
<H4><A NAME = "7980">Power-Conjugate Presentations</A></H4>

<P>
<P>
Let G be a finite soluble group. A presentation for G of the
form
<P>
&lt; a<sub>1</sub>, ..., a<sub>n</sub> | a<sub>j</sub> <sup>p<sub>j</sub></sup>= w<sub>jj</sub>,   1&le;j &le;n,
  a<sub>j</sub> <sup>a<sub>i</sub></sup>= w<sub>ij</sub>,    1 &le;i &lt; j&le;n &gt; where
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>p<sub>j</sub> is the least prime such that a<sub>j</sub><sup>p<sub>j</sub></sup>
&isin;&lt; a<sub>j + 1</sub>, ...,  a<sub>n</sub>&gt; for j &lt; n, and a<sub>j</sub><sup>p<sub>j</sub></sup> is
the identity for j = n, and
<DT>(ii)</DT><DD>w<sub>ij</sub> is a word in the generators a<sub>i + 1</sub>, ..., a<sub>n</sub>,
<P>
</DL>
will be called a <I>power-conjugate presentation 
(pc-presentation)</I> for G.  The generators of G corresponding 
to a<sub>1</sub>, ..., a<sub>n</sub> in this presentation are known as a
<I>power-conjugate generating sequence (pc-generators)</I> for G.
<P>
<P>
<P>
It is easy to show that every finite soluble group possesses a
pc-presentation.
If such a presentation satisfies a certain additional condition
(the <I>consistency condition</I>) then every element a of G can be
written uniquely
in the <I>normal form</I>
a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>, 0 &le;&alpha;<sub>i</sub> &lt; p<sub>i</sub> for
i = 1, ..., n.
Given such a pc-presentation for G there exists an algorithm
(the <I>collection algorithm</I>), which given an arbitrary word
in the
pc-generators a<sub>1</sub>, ..., a<sub>n</sub>, will
determine the corresponding normal word.  In particular,
collection can be used to compute the normal word which is equal
to the product of two given normal words, thus implementing the
group multiplication.


<PRE></PRE> <A  HREF = "text708.htm">[Next]</A><A  HREF = "text706.htm">[Prev]</A> <A  HREF = "text708.htm">[Right]</A> [____] <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>