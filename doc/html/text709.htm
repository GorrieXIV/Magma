<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Basic Group Properties</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text710.htm">[Next]</A><A  HREF = "text708.htm">[Prev]</A> <A  HREF = "text710.htm">[Right]</A> <A  HREF = "text708.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7995">Basic Group Properties</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text709.htm#7996">Infrastructure</A>
<LI> <A  HREF = "text709.htm#8003">Numerical Invariants</A>
<LI> <A  HREF = "text709.htm#8007">Predicates</A>
</UL>
<H4><A NAME = "7996">Infrastructure</A></H4>

<P>
<P>
The functions described here provide access to basic information stored for a
pc-group G.


<H5><A NAME = "7997">G . i : GrpPC, RngIntElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
The i-th pc-generator for G. A negative subscript indicates that the
inverse of the generator is to be created.  G.0 is <TT>Identity(G)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7998">Generators(G) : GrpPC -&gt; SetEnum</A></H5>
<BLOCKQUOTE>
A set containing the defining generators for G.  If G is
a p-group, this is guaranteed to be a minimal set of generators.
For non-p-groups, this will be the set of pc-generators.
</BLOCKQUOTE>
<H5><A NAME = "7999">NumberOfGenerators(G) : GrpPC -&gt; RngIntElt</A></H5>
<H5>Ngens(G) : GrpPC -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of defining generators for G.
</BLOCKQUOTE>
<H5><A NAME = "8000">PCGenerators(G) : GrpPC -&gt; SetIndx</A></H5>
<BLOCKQUOTE>
An indexed set containing the pc-generators for G.
</BLOCKQUOTE>
<H5><A NAME = "8001">NumberOfPCGenerators(G) : GrpPC -&gt; RngIntElt</A></H5>
<H5>NPCGenerators(G) : GrpPC -&gt; RngIntElt</H5>
<H5>NPCgens(G) : GrpPC -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of pc-generators for G.
</BLOCKQUOTE>
<H5><A NAME = "8002">PCPrimes(G) : GrpPC -&gt; [RngIntElt]</A></H5>
<BLOCKQUOTE>
A sequence [p<sub>1</sub>, ..., p<sub>n</sub>] containing the primes associated with the
pc-generators of G.  The i-th term of the sequence contains the prime
associated with generator a<sub>i</sub> of G for i = 1, ..., n.
</BLOCKQUOTE>
<H4><A NAME = "8003">Numerical Invariants</A></H4>

<P>
<P>
Magma has built-in functions to compute the order
and exponent of a group.


<H5><A NAME = "8004">Order(G) : GrpPC -&gt; RngIntElt</A></H5>
<H5># G : GrpPC -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The order of the group G, returned as an ordinary integer.
</BLOCKQUOTE>
<H5><A NAME = "8005">FactoredOrder(G) : GrpPC -&gt; [&lt;RngIntElt, RngIntElt&gt;]</A></H5>
<BLOCKQUOTE>
The factored order of the group G.
</BLOCKQUOTE>
<H5><A NAME = "8006">Exponent(G) : GrpPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The exponent of the group G.
</BLOCKQUOTE>
<H4><A NAME = "8007">Predicates</A></H4>

<P>
<P>
Magma has built-in functions
to check standard group properties.


<H5><A NAME = "8008">IsAbelian(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is abelian, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8009">IsCyclic(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is cyclic, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8010">IsElementaryAbelian(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is elementary abelian, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8011">IsNilpotent(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is nilpotent, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8012">IsPerfect(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is perfect, <TT>false</TT> otherwise.
A soluble group G is perfect only if it is trivial.
</BLOCKQUOTE>
<H5><A NAME = "8013">IsSimple(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is simple, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8014">IsSoluble(G) : GrpPC -&gt; BoolElt</A></H5>
<H5>IsSolvable(G) : GrpPC -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G is soluble, <TT>false</TT> otherwise. 
It always returns the value <TT>true</TT> for a pc-group.
</BLOCKQUOTE>
<H5><A NAME = "8015">IsTrivial(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the group G has order 1, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8016">IsSpecial(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a p-group G, return <TT>true</TT> if G is special, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8017">IsExtraSpecial(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a p-group G, return <TT>true</TT> if G is extra-special, <TT>false</TT> otherwise
e.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8018">Example <TT>GrpPC_group-props (H68E4)</TT></A></H3>
We use a presentation to define an extraspecial 3-group of exponent 9.
<P>
<P>
<PRE>
&gt; E := PolycyclicGroup&lt;a1,a2,b1,b2,z|a1^3,a2^3,b1^3=z,b2^3=z,
&gt;   z^3,b1^a1=b1*z,b2^a2=b2*z&gt;;
</PRE>
The sequence of base, exponent pairs from <TT>FactoredOrder</TT> shows us that
the group has order 3<sup>5</sup>.
<P>
<P>
<PRE>
&gt; FactoredOrder(E);
[ &lt;3, 5&gt; ] 
&gt; Exponent(E);
9
</PRE>
As well as with the <TT>Order</TT> function, one can get the size of
a group by using the <TT>#</TT> shorthand.
<P>
<P>
<PRE>
&gt; D3 := DihedralGroup(GrpPC, 3);
&gt; #D3;
6
&gt; IsNilpotent(D3);
false
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text710.htm">[Next]</A><A  HREF = "text708.htm">[Prev]</A> <A  HREF = "text710.htm">[Right]</A> <A  HREF = "text708.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>