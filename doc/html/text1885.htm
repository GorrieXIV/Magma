<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction of Additive  Codes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1886.htm">[Next]</A><A  HREF = "text1884.htm">[Prev]</A> <A  HREF = "text1886.htm">[Right]</A> <A  HREF = "text1884.htm">[Left]</A> <A  HREF = "text1883.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20973">Construction of Additive  Codes</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1885.htm#20974">Construction of General Additive Codes</A>
<LI> <A  HREF = "text1885.htm#20982">Some Trivial Additive Codes</A>
</UL>
<H4><A NAME = "20974">Construction of General Additive Codes</A></H4>



<H5><A NAME = "20975">AdditiveCode&lt;F, K, n | L&gt; : FldFin, RngIntElt, List -&gt; Code</A></H5>
<BLOCKQUOTE>
Create the K-additive code in F<sup>(n)</sup> of length n which is 
generated by the elements specified by the list L, where K is a subfield
of F and L
is one or more items of the following types: 
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>An element of F<sup>(n)</sup>;
<DT>(b)</DT><DD>A set or sequence of elements of F<sup>(n)</sup>;
<DT>(c)</DT><DD>A sequence of n elements of F, defining an element of F<sup>(n)</sup>;
<DT>(d)</DT><DD>A set or sequence of sequences of type (c);
<DT>(e)</DT><DD>A subcode of F<sup>(n)</sup>;</DL>
</BLOCKQUOTE>
<H5><A NAME = "20976">AdditiveCode(G) : ModMatRngElt -&gt; CodeAdd</A></H5>
<H5>AdditiveCode(K, G) : FldFin, ModMatRngElt -&gt; CodeAdd</H5>
<BLOCKQUOTE>
Given a matrix G over a field F and a subfield K of F, return
the K-additive code over F generated by the rows of G.
If no coefficient field K is specified, then the prime field
of F is used.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20977">Example <TT>CodeAdd_AddLinDiff (H163E1)</TT></A></H3>
Starting with two linearly independent vectors in F<sub>4</sub><sup>(3)</sup>, we compare
the linear code over F<sub>4</sub> they generate with the corresponding F<sub>2</sub>-additive 
code.
<P>
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := GF(4);
&gt; G := Matrix(F, 2, 3, [1,0,w^2,0,w,0]);
&gt; G;
[  1   0 w^2]
[  0   w   0]
&gt; C1 := LinearCode(G);
&gt; C2 := AdditiveCode(GF(2), G);
&gt; #C1;
16
&gt; #C2;
4
&gt; C2 subset C1;
true
</PRE>
The codewords of C<sub>2</sub> are arise only through addition of the 
generators: scalar multiplication is not permitted.
<P>
<P>
<PRE>
&gt; { v : v in C2 };
{
    (  1   w w^2),
    (  0   0   0),
    (  1   0 w^2),
    (  0   w   0)
}
</PRE>
<HR>
<H3><A NAME = "20978">Example <TT>CodeAdd_CodeAddFromMatrix (H163E2)</TT></A></H3>
We define an GF(2)-additive code over GF(8) by constructing 
a random matrix and considering the code generated by its rows.
Note that the number of generators exceeds the length of the code.
<P>
<P>
<PRE>
&gt; K&lt;w&gt; := GF(8);
&gt; M := KMatrixSpace(K, 5, 4);    
&gt; C := AdditiveCode(GF(2), Random(M));
&gt; C;
[4, 1 2/3 : 5] GF(2)-Additive Code over GF(2^3)
Generator matrix:
[  1   1 w^2   0]
[  w w^2   w   1]
[w^2 w^2 w^2   1]
[  0 w^4 w^4 w^5]
[  0   0   1   0]
&gt; WeightDistribution(C);
[ &lt;0, 1&gt;, &lt;1, 1&gt;, &lt;2, 2&gt;, &lt;3, 9&gt;, &lt;4, 19&gt; ]
&gt; C;                    
[4, 1 2/3 : 5, 1] GF(2)-Additive Code over GF(2^3)
Generator matrix:
[  1   1 w^2   0]
[  w w^2   w   1]
[w^2 w^2 w^2   1]
[  0 w^4 w^4 w^5]
[  0   0   1   0]
</PRE>
<HR>
<H5><A NAME = "20979">AdditiveCode(K, C) : FldFin, Code -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given a code (linear or additive) C over some finite field F, and a 
subfield K of F such that the wordset of C forms a K-linear 
subspace, then return C as a K-additive code.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20980">Example <TT>CodeAdd_CodeAddFromCode (H163E3)</TT></A></H3>
Any linear code can be regarded as an additive code with respect to a
subfield of its alphabet.
<P>
<P>
<P>
<PRE>
&gt; C := RandomLinearCode(GF(4), 8, 3);
&gt; C:Minimal;
[8, 3, 4] Linear Code over GF(2^2)
&gt; A1 := AdditiveCode(GF(4), C);
&gt; A1:Minimal;
[8, 3 : 3, 4] GF(2^2)-Additive Code over GF(2^2)
&gt; { v : v in C } eq {v : v in A1 };
true
&gt; 
&gt; A2 := AdditiveCode(GF(2), C);
&gt; A2:Minimal;
[8, 3 : 6, 4] GF(2)-Additive Code over GF(2^2)
&gt; { v : v in C } eq {v : v in A2 };
true
</PRE>
<HR>
<H3><A NAME = "20981">Example <TT>CodeAdd_CodeAddFromCodeFail (H163E4)</TT></A></H3>
A K-additive code over F can be viewed as an E-additive code for any
subfield E &sube;K.
<P>
<P>
<P>
<PRE>
&gt; C4 := RandomAdditiveCode(GF(16), GF(4), 8, 5); 
&gt; C4:Minimal;
[8, 2 1/2 : 5] GF(2^2)-Additive Code over GF(2^4)
&gt; 
&gt; C2 := AdditiveCode(GF(2), C4);
&gt; C2:Minimal;
[8, 2 1/2 : 10] GF(2)-Additive Code over GF(2^4)
&gt; { v : v in C2 } eq {v : v in C4 };
true
</PRE>
But for any E such that K &sub;E &sube;F we can create 
an E-additive code if and only if the wordset is in fact an E-linear
subspace.
<P>
<P>
<PRE>
&gt; C2:Minimal;
[8, 2 1/2 : 10] GF(2)-Additive Code over GF(2^4)
&gt; A1 := AdditiveCode(GF(4), C2);
&gt; A1 eq C4;
true
&gt; A2 := AdditiveCode(GF(16), C2);

&gt;&gt; A2 := AdditiveCode(GF(16), C2);
                     ^
Runtime error in 'AdditiveCode': Code is not additive over given field
</PRE>
<HR>
<H4><A NAME = "20982">Some Trivial Additive Codes</A></H4>



<H5><A NAME = "20983">AdditiveZeroCode(F, K, n) : FldFin, FldFin, RngIntElt -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given a field F and subfield K &sube;F along with a positive
integer n, return the [n, 0, n] code
consisting of only the zero code word,
(where the minimum weight is by convention equal to n).
</BLOCKQUOTE>
<H5><A NAME = "20984">AdditiveRepetitionCode(F, K, n) : FldFin, FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a field F and subfield K &sube;F along with a positive
integer n, return the [n, 1, n] code consisting of all
repeating codewords.
</BLOCKQUOTE>
<H5><A NAME = "20985">AdditiveZeroSumCode(F, K, n) : FldFin, FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a field F and subfield K &sube;F 
along with a positive integer n, return the [n, n - 1, 2]
K-additive code over F such that for all codewords 
(c<sub>1</sub>, c<sub>2</sub>, ... , c<sub>n</sub>), we have &sum;<sub>i</sub> c<sub>i</sub> =0 .
<P>
</BLOCKQUOTE>
<H5><A NAME = "20986">AdditiveUniverseCode(F, K, n) : FldFin,FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a field F and subfield K &sube;F 
along with a positive integer n, return the [n, n, 1] 
K-additive code over F consisting of all possible codewords.
<P>
</BLOCKQUOTE>
<H5><A NAME = "20987">RandomAdditiveCode(F, K, n, k) : FldFin,FldFin, RngIntElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a field F and subfield K &sube;F 
along with positive integers n and k, such
that 0 &lt; k &le;n * [F:K], and k, 
return a random K-additive code
of length n and k generators over the field F.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20988">Example <TT>CodeAdd_SimpleCodeChain (H163E5)</TT></A></H3>
Over any finite field chain K &sube;F, the 
zero code of length n is 
contained in every code of length n,
and similarly every code of length n is contained in the 
universe code of length n.
<P>
<P>
<PRE>
&gt; F := GF(9);
&gt; K := GF(3);
&gt; U := AdditiveUniverseCode(F, K, 5);
&gt; Z := AdditiveZeroCode(F, K, 5);
&gt; R := RandomAdditiveCode(F, K, 5, 2);
&gt; (Z subset R) and (R subset U);
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1886.htm">[Next]</A><A  HREF = "text1884.htm">[Prev]</A> <A  HREF = "text1886.htm">[Right]</A> <A  HREF = "text1884.htm">[Left]</A> <A  HREF = "text1883.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>