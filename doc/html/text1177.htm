<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Constructing Groups of  Lie Type</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1178.htm">[Next]</A><A  HREF = "text1176.htm">[Prev]</A> <A  HREF = "text1178.htm">[Right]</A> <A  HREF = "text1176.htm">[Left]</A> <A  HREF = "text1175.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "13095">Constructing Groups of  Lie Type</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1177.htm#13096">Split Groups</A>
<LI> <A  HREF = "text1177.htm#13110">Galois Cohomology</A>
<LI> <A  HREF = "text1177.htm#13118">Twisted Groups</A>
</UL>
<H4><A NAME = "13096">Split Groups</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
The following optional parameters are common to most of the intrinsics described 
in this section:
<P>
<P>
var <A NAME = "GrpLie:Normalising">Normalising</A>: BoolElt Default: <TT>true</TT>
The flag <TT>Normalising</TT> determines whether elements will be
automatically converted to Bruhat form.  This flag is automatically set to <TT>false</TT> if the group is defined over a nonfield.
<P>
var Isogeny: BoolElt                    Default: "Ad"
var Signs: Any                          Default: 1
<P>
The optional parameters <TT>Isogeny</TT> and <TT>Signs</TT>
can take the values described in Section <A  HREF = "text1091.htm#12124">Constructing Root Data</A>. 
<P>
var Method: MonStgElt                   Default: "Default"
<P>
The method to be used for operations with unipotent elements.
See <A  HREF = "text1174.htm#bib_ComputUnipGrps">[CHM08]</A> for more details on the algorithms.
Possible values are 
<P>
<DL COMPACT class='compact'>
<DT>-</DT><DD><TT>"CollectionFromLeft"</TT> uses collection from left.
<DT>-</DT><DD><TT>"CollectionFromOutside"</TT> uses collection from outside.
<DT>-</DT><DD><TT>"Classical"</TT> uses formulas for classical types <A  HREF = "text1174.htm#bib_ComputUnipGrps">[CHM08]</A>. This is only available
         for groups defined over a sparse (classical) root datum.
<DT>-</DT><DD><TT>"Collection"</TT> will choose the best of the above methods automatically. 
<DT>-</DT><DD><TT>"SymbolicFromLeft"</TT> uses Hall polynomials, which are computed using collection from left.
<DT>-</DT><DD><TT>"SymbolicFromOutside"</TT> uses Hall polynomials, which are computed using collection from outside.
<DT>-</DT><DD><TT>"SymbolicClassical"</TT> uses Hall polynomials, which are computed by formulas. This is only available
         for groups defined over a sparse (classical) root datum.
<DT>-</DT><DD><TT>"Symbolic"</TT> will choose the best symbolic method automatically. 
<DT>-</DT><DD><TT>"Default"</TT> will choose the best of all above methods automatically. </DL>


<H5><A NAME = "13097">GroupOfLieType(N, k) : MonStgElt, Rng -&gt; GrpLie</A></H5>

<PRE>    Isogeny: BoolElt                    Default: "Ad"</PRE>

<PRE>    Signs: Any                          Default: 1</PRE>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with Cartan name given by the string N (see Section <A  HREF = "text1074.htm#11954">Finite and Affine Coxeter  Groups</A>)
over the ring k.
</BLOCKQUOTE>
<H5><A NAME = "13098">GroupOfLieType(N, q) : MonStgElt, RngIntElt -&gt; GrpLie</A></H5>

<PRE>    Isogeny: BoolElt                    Default: "Ad"</PRE>

<PRE>    Signs: Any                          Default: 1</PRE>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with Cartan name given by the string N 
(see Section <A  HREF = "text1074.htm#11954">Finite and Affine Coxeter  Groups</A>) 
over the finite field of order q.
</BLOCKQUOTE>
<H5><A NAME = "13099">GroupOfLieType(W, k) : GrpPermCox, Rng -&gt; GrpLie</A></H5>
<H5>GroupOfLieType(W, k) : GrpMat, Rng -&gt; GrpLie</H5>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with Weyl group W over the ring k.
The group W must be a finite Coxeter group, given either as a permutation group
or as a reflection group.
</BLOCKQUOTE>
<H5><A NAME = "13100">GroupOfLieType(W, q) : GrpPermCox, RngIntElt -&gt; GrpLie</A></H5>
<H5>GroupOfLieType(W, q) : GrpMat, RngIntElt -&gt; GrpLie</H5>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with Weyl group W over the finite field of order q.
The group W must be a finite Coxeter group, given either as a permutation group
or as a reflection group.
</BLOCKQUOTE>
<H5><A NAME = "13101">GroupOfLieType(R, k) : RootDtm, Rng -&gt; GrpLie</A></H5>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with root datum R over the ring k.
</BLOCKQUOTE>
<H5><A NAME = "13102">GroupOfLieType(R, q) : RootDtm, RngIntElt -&gt; GrpLie</A></H5>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with root datum R over the finite field of order q.
</BLOCKQUOTE>
<H5><A NAME = "13103">GroupOfLieType(C, k) : Mtrx, Rng -&gt; GrpLie</A></H5>
<H5>GroupOfLieType(D, k) : GrphDir, Rng -&gt; GrpLie</H5>

<PRE>    Isogeny: BoolElt                    Default: "Ad"</PRE>

<PRE>    Signs: Any                          Default: 1</PRE>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with Cartan matrix C or Dynkin digraph D,
over the ring k.
</BLOCKQUOTE>
<H5><A NAME = "13104">GroupOfLieType(C, q) : Mtrx, RngIntElt -&gt; GrpLie</A></H5>
<H5>GroupOfLieType(D, q) : GrphDir, RngIntElt -&gt; GrpLie</H5>

<PRE>    Isogeny: BoolElt                    Default: "Ad"</PRE>

<PRE>    Signs: Any                          Default: 1</PRE>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the group of Lie type with Cartan matrix C or Dynkin digraph D,
over the finite field of order q.
</BLOCKQUOTE>
<H5><A NAME = "13105">SimpleGroupOfLieType(X, n, k) : MonStgElt, RngIntElt, Rng -&gt; GrpLie</A></H5>

<PRE>    Isogeny: BoolElt                    Default: "Ad"</PRE>

<PRE>    Signs: Any                          Default: 1</PRE>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the simple group of Lie type with Cartan name X<sub>n</sub> 
over the ring k, 
where the Cartan name is given by the string X and integer n
(see also Section <A  HREF = "text1074.htm#11954">Finite and Affine Coxeter  Groups</A>). 
</BLOCKQUOTE>
<H5><A NAME = "13106">SimpleGroupOfLieType(X, n, q) : MonStgElt, RngIntElt, RngIntElt -&gt; GrpLie</A></H5>

<PRE>    Isogeny: BoolElt                    Default: "Ad"</PRE>

<PRE>    Signs: Any                          Default: 1</PRE>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
Construct the simple group of Lie type with name X<sub>n</sub> over the finite 
field of order q,
where the Cartan name is given by the string X and integer n
(see also Section <A  HREF = "text1074.htm#11954">Finite and Affine Coxeter  Groups</A>). 
</BLOCKQUOTE>
<H5><A NAME = "13107">GroupOfLieType(L) : AlgLie -&gt; GrpLie</A></H5>
<BLOCKQUOTE>
The group of Lie type corresponding to the Lie algebra L.
The Lie algebra must be the algebraic (i.e., it must correspond to some group),
and Magma must be able to determine that it is algebraic.
</BLOCKQUOTE>
<H5><A NAME = "13108">IsNormalising(G) : GrpLie -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns the value of the flag <TT>Normalising</TT> of the group of Lie type G. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13109">Example <TT>GrpLie_Create (H109E1)</TT></A></H3>
<P>
<P>
<PRE>
&gt; G := GroupOfLieType("E8", 2);
&gt; G;
G: Group of Lie type E8 over Finite field of size 2
</PRE>
<HR>
<H4><A NAME = "13110">Galois Cohomology</A></H4>

<P>
<P>
<P>
<P>
If G is a linear algebraic group defined over the field k
and L is the algebraic closure of k, then
the group &Gamma; := Gal(L:k) acts on G in the usual way and G
becomes a &Gamma;-group in the sense of the Section <A  HREF = "text783.htm#8869">Finite Group Cohomology</A>
and Aut(G), the group of algebraic automorphisms of G also 
becomes a &Gamma;-group.
<P>
Now the twisted forms of G are in one-to-one correspondence to the
1-cocycles of &Gamma; on Aut(G) and the forms are conjugate if
and only if the cocycles are cohomologous.
<P>
For practical purposes it is sufficient to compute the cohomology 
of Gal(K:k) on Aut<sub>K</sub>(G) for some finite Galois field extension
of k, where Aut<sub>K</sub>(G) is the group of K-algebraic automorphisms of G.
<P>
These functions are based on <A  HREF = "text1174.htm#bib_SH">[Hal05]</A>.


<H5><A NAME = "13111">GammaGroup(k, G) : Fld, GrpLie -&gt; GGrp</A></H5>
<BLOCKQUOTE>
Returns the group of Lie type G as a &Gamma;-group with &Gamma;=Gal(K:k),
where K is the base field of G.
The field k must be a subfield of K.
</BLOCKQUOTE>
<H5><A NAME = "13112">GammaGroup(k, A) : Fld, GrpLieAuto -&gt; GGrp</A></H5>
<BLOCKQUOTE>
Returns the group A = Aut<sub>K</sub>(G) of automorphisms of the group of Lie type G 
as a &Gamma;-group with &Gamma;=Gal(K:k), where K is the base field of G.
The field k must be a subfield of K.
</BLOCKQUOTE>
<H5><A NAME = "13113">ActingGroup(G) : GrpLie -&gt; Grp, Map</A></H5>
<H5>ActingGroup(A) : GrpLieAuto -&gt; Grp, Map</H5>
<BLOCKQUOTE>
Given the group of Lie type G or the group A of its automorphisms
as a &Gamma;-group, return &Gamma;=Gal(K:k) together with the map m 
from the abstract Galois group &Gamma; into the set
of field automorphisms, such that m(&gamma;) is the
actual field automorphism for every &gamma;&isin;&Gamma;.
</BLOCKQUOTE>
<H5><A NAME = "13114">ExtendGaloisCocycle(c) : OneCoC -&gt; OneCoC</A></H5>

<PRE>    GBAl: MonStgElt                     Default: "Walk"</PRE>

<PRE>    Printeqs: BoolElt                   Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The analogue to <TT>ExtendCocycle</TT>.
Given a cocycle c in H<sup>1</sup>(&Gamma;, A/A<sub>0</sub>), where A = Aut<sub>K</sub>(G) and
&Gamma;=Gal(K:k), extend the cocycle to a cocycle in H<sup>1</sup>(&Gamma;, A).
The optional parameter <TT>GBAl</TT> can be used to set the algorithm used
for computing the Gr{&ouml;bner bases. The parameter <TT>Printeqs</TT>
may be used to print out the polynomials whose Gr{&ouml;bner bases
are computed.
The current implementation only works for finite fields.
</BLOCKQUOTE>
<H5><A NAME = "13115">GaloisCohomology(A) : GGrp -&gt; SeqEnum</A></H5>

<PRE>    GBAl: MonStgElt                     Default: "Walk"</PRE>

<PRE>    Printeqs: BoolElt                   Default: <TT>false</TT></PRE>

<PRE>    Recompute: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Computes the Galois cohomology H<sup>1</sup>(&Gamma;, Aut<sub>K</sub>(G)), where 
A is the automorphism group of G as a &Gamma;-group returned
by <TT>GammaGroup</TT> and &Gamma;=Gal(K:k).
The optional parameter <TT>GBAl</TT> can be used to set the algorithm used
for computing the Gr{&ouml;bner bases. The parameter <TT>Printeqs</TT>
may be used to print out the polynomials whose Gr{&ouml;bner bases
are computed. And <TT>Recompute</TT> may be used to recompute the
Galois cohomology.
The current implementation only works for finite fields.
</BLOCKQUOTE>
<H5><A NAME = "13116">IsInTwistedForm(x, c) : GrpLieElt, OneCoC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the element x of a group of Lie type 
is contained in the twisted form of its parent defined by the cocycle c.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13117">Example <TT>GrpLie_GalCohom (H109E2)</TT></A></H3>
Compute the Galois cohomology of A<sub>3</sub>(5<sup>2</sup>):
<P>
<P>
<PRE>
&gt; q := 5;
&gt; k := GF(q);
&gt; K := GF(q^2);
&gt;
&gt; G := GroupOfLieType( "A3", K : Isogeny:="SC" );
&gt; A := AutomorphismGroup(G);
&gt;
&gt; AGRP := GammaGroup( k, A );
&gt; Gamma,m := ActingGroup(AGRP);
&gt; Gamma;
Symmetric group Gamma acting on a set of cardinality 2
Order = 2
    (1, 2)
&gt; m;
Mapping from: GrpPerm: Gamma to Set of all maps from GF(5^2) to GF(5^2)
given by a rule [no inverse]
&gt; action  := GammaAction(AGRP);
&gt;
&gt; time GaloisCohomology(AGRP);
[
    [
        One-Cocycle
        defined by [
        Automorphism of $: Group of Lie type A3 over Finite field of size 5^2
        given by: Mapping from: $: Group of Lie type  to $: Group of Lie type
        Composition of Mapping from: $: Group of Lie type  to $: Group of
        Lie type  given by a rule and
        Mapping from: $: Group of Lie type  to $: Group of Lie type 
        given by a rule
        Decomposition:
          Mapping from: GF(5^2) to GF(5^2)
        Composition of Mapping from: GF(5^2) to GF(5^2) given by a rule and
        Mapping from: GF(5^2) to GF(5^2) given by a rule,
          Id($),
          1
        ]
    ],
    [
        One-Cocycle
        defined by [
        Automorphism of $: Group of Lie type A3 over Finite field of size 5^2
        given by: Mapping from: $: Group of Lie type  to $: Group of Lie type
        Composition of Mapping from: $: Group of Lie type  to $: Group of
        Lie type  given by a rule and
        Mapping from: $: Group of Lie type  to $: Group of Lie type 
        given by a rule
        Decomposition:
          Mapping from: GF(5^2) to GF(5^2)
        Composition of Mapping from: GF(5^2) to GF(5^2) given by a rule and
        Mapping from: GF(5^2) to GF(5^2) given by a rule,
          (1, 3),
          1
        ]
    ]
]
Time: 0.470
</PRE>
Now create the trivial cocycle:
<P>
<P>
<PRE>
&gt; TrivialOneCocycle( AGRP );
One-Cocycle
defined by [
Automorphism of $: Group of Lie type A3 over Finite field of size 5^2
given by: Mapping from: $: Group of Lie type  to $: Group of Lie type 
given by a rule
Decomposition:
  Mapping from: GF(5^2) to GF(5^2) given by a rule,
  Id($),
  1
]
&gt;
</PRE>
And now the cocycle defining the group ()<sup>2</sup>A<sub>3</sub>(5) and check for two elements
if they are contained in ()<sup>2</sup>A<sub>3</sub>(5):
<P>
<P>
<PRE>
&gt; c := OneCocycle( AGRP, [GraphAutomorphism(G, Sym(3)!(1,3))] );
&gt;
&gt; x := Random(G);
&gt; IsInTwistedForm( x, c );
false
&gt;
&gt; x := elt&lt; G | &lt;1,y&gt;, &lt;3,y @ m(Gamma.1)&gt; &gt; where y is Random(K);
&gt; IsInTwistedForm( x, c );
true
&gt;
</PRE>
<HR>
<H4><A NAME = "13118">Twisted Groups</A></H4>

<P>
<P>
<P>
<P>
The description of the twisted groups of Lie type is based on the
extended root data, as described in the Section <A  HREF = "text1090.htm#12123">Extended Root Data</A>.
These functions are mainly based on <A  HREF = "text1174.htm#bib_SH">[Hal05]</A>.


<H5><A NAME = "13119">TwistedGroupOfLieType(c) : OneCoC -&gt; GrpLie</A></H5>
<BLOCKQUOTE>
Given the cocycle c on the group of automorphisms
of a split group of Lie type G, return the twisted form of G, 
defined by that cocycle.
</BLOCKQUOTE>
<H5><A NAME = "13120">TwistedGroupOfLieType(R, k, K) : RootDtm, Rng, Rng-&gt; GrpLie</A></H5>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
The twisted group of Lie type defined over the field k with 
coefficients in the field K corresponding to the twisted root datum R.
</BLOCKQUOTE>
<H5><A NAME = "13121">TwistedGroupOfLieType(R, q, r) : RootDtm, RngIntElt, RngIntElt -&gt; GrpLie</A></H5>

<PRE>    Normalising: BoolElt                Default: <TT>true</TT></PRE>

<PRE>    Method: MonStgElt                   Default: "Default"</PRE>
<BLOCKQUOTE>
The twisted group of Lie type defined over the finite field of order q with 
coefficients in the finite field of order r (where r is a power of q)
corresponding to the twisted root datum R.
</BLOCKQUOTE>
<H5><A NAME = "13122">BaseRing(G) : GrpLie -&gt; Rng</A></H5>
<H5>CoefficientRing(G) : GrpLie -&gt; Rng</H5>
<BLOCKQUOTE>
The coefficient ring of the (twisted) group of Lie type G, that is the base 
ring of the untwisted overgroup of G. 
</BLOCKQUOTE>
<H5><A NAME = "13123">DefRing(G) : GrpLie -&gt; Rng</A></H5>
<BLOCKQUOTE>
The ring over which the (twisted) group of Lie type G is defined.
If G is split, this is the same as the base ring of G.
</BLOCKQUOTE>
<H5><A NAME = "13124">UntwistedOvergroup(G) : GrpLie -&gt; GrpLie</A></H5>
<BLOCKQUOTE>
The untwisted overgroup, inside which the twisted group of Lie type G was constructed.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13125">Example <TT>GrpLie_TwistedGrpLieType (H109E3)</TT></A></H3>
The twisted group ()<sup>2</sup>A<sub>3</sub>(5) as a subgroup of A<sub>3</sub>(5<sup>2</sup>).
<P>
<P>
<PRE>
&gt; R := RootDatum("A3" : Twist := 2);
&gt; G := TwistedGroupOfLieType(R,5,25);
&gt; G;
G: Twisted group of Lie type 2A3,2 over GF(5) with entries over GF(5^2)
&gt; BaseRing(G);
Finite field of size 5^2
&gt; DefRing(G);
Finite field of size 5
&gt; UntwistedOvergroup(G);
Group of Lie type A3 over GF(5^2)
</PRE>
<HR>
<H5><A NAME = "13126">RelativeRootElement(G,delta,t) : GrpLie, RngIntElt, [FldElt] -&gt; GrpLieElt</A></H5>
<BLOCKQUOTE>
The relative root element corresponding to the relative root &delta;
of the twisted group of Lie type G
and the field elements given by the sequence t. 
This is the element u<sub>&delta;</sub>(t) in <A  HREF = "text1174.htm#bib_SH">[Hal05, (4.5)]</A>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13127">Example <TT>GrpLie_RelativeRootElts (H109E4)</TT></A></H3>
Here we create the same group as in the previous example, but using 
a cocycle.
<P>
<P>
<PRE>
&gt; q := 5; k := GF(q); K := GF(q^2);
&gt;
&gt; G := GroupOfLieType( "A3", K );
&gt; A := AutomorphismGroup(G);
&gt;
&gt; AGRP := GammaGroup( k, A );
&gt; c := OneCocycle( AGRP, [GraphAutomorphism(G, Sym(3)!(1,3))] );
&gt;
&gt; T := TwistedGroupOfLieType(c);
&gt; T eq TwistedGroupOfLieType(RootDatum("A3":Twist:=2),k,K);
true
&gt; G eq UntwistedOvergroup(T);
true
&gt;
&gt; x := Random(G); x in T;
false
&gt;
&gt; x := RelativeRootElement(T,2,[Random(K)]); x;
x1($.1^22) x3($.1^14)
&gt; x in T;
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1178.htm">[Next]</A><A  HREF = "text1176.htm">[Prev]</A> <A  HREF = "text1178.htm">[Right]</A> <A  HREF = "text1176.htm">[Left]</A> <A  HREF = "text1175.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>