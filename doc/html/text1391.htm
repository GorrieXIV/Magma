<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Baskets of Singularities</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1392.htm">[Next]</A><A  HREF = "text1390.htm">[Prev]</A> <A  HREF = "text1392.htm">[Right]</A> <A  HREF = "text1390.htm">[Left]</A> <A  HREF = "text1388.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "15566">Baskets of Singularities</A></H3>

<P>
<P>
<P>
We describe how to create the various point and curve singularities,
together with collections or <I>baskets</I> of these singularities
that are an ingredient of RR in higher dimensions.
<P>
Recall the basic principle of singularity contributions in RR:  when
we nominate a basket of singularities in the RR formula we do not
necessarily expect the corresponding variety to have exactly those
singularities associated with it (although that is very commonly the 
case), but rather to possess singularities which make exactly the 
same contribution to the RR formula as the singularities of the basket.
Thus, we only allow the creation of a restricted class of singularities
that (in good cases) allow us to realise all possible contributions.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1391.htm#15567">Point Singularities</A>
<LI> <A  HREF = "text1391.htm#15584">Curve Singularities</A>
<LI> <A  HREF = "text1391.htm#15598">Baskets of Singularities</A>
<LI> <A  HREF = "text1391.htm#15610">Curves and Dissident Points</A>
</UL>
<H4><A NAME = "15567">Point Singularities</A></H4>

<P>
<P>
<P>
The point singularities that are allowed are always finite cyclic
quotient singularities.  In the surface case (over the complex
numbers <B>C</B>) they are always analytically isomorphic to a
neighbourhood of the origin in the quotient (C)<sup>2</sup> / G, where
G is the group of r-th roots of unity and the action is
determined on eigencoordinates x, y of (C)<sup>2</sup> by the action
of a primitive root of unity &lambda;&isin;G:
<P>
 &lambda; .x = &lambda;<sup>a</sup>x,  
 &lambda; .y = &lambda;<sup>b</sup>y  
<P>
for some a, b&isin;{0, ..., r - 1}.
Such a singularity is denoted by the symbol oneover(r)(a, b).
<P>
<P>
Similarly, one defines 3-dimensional quotient singularities, where
the symbol oneover(r)(a, b, c) denotes a cyclic quotient singularity.
Of course, one can go into yet higher dimensions, with symbol
oneover(r)(a<sub>1</sub>, ..., a<sub>k</sub>), but although the functions of this
chapter can create such singularities, they do not yet calculate RR
for singularities of dimension higher than three.
By definition, if p=oneover(r)(a<sub>1</sub>, ..., a<sub>k</sub>),
the <I>index of p</I> is the positive integer r and
the <I>polarisation of p</I> is the sequence [a<sub>1</sub>, ..., a<sub>k</sub>].
<P>
The four main situations in which we use (quotient) point
singularities are:
<DL COMPACT class='compact'>
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>Gorenstein surface singularities oneover(r)(a, r - a) with
r coprime to a (for K3 surfaces)
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>terminal 3-fold singularities sing3(r)(a)(r - a)(b) with
r coprime to a, b (for Fano 3-folds)
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>isolated canonical 3-fold singularities sing3(r)(a)(b)(c)
with a + b + c=0 mod r and r coprime to each of a, b, c
(for Calabi--Yau 3-folds)
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>nonisolated canonical 3-fold singularities sing3(r)(a)(b)(c)
with a + b + c=0 mod r and no three of r, a, b, c sharing a
nontrivial common factor (for Calabi--Yau 3-folds).
<P>
</DL>
In the final, nonisolated case, the points can be points at the
intersection of two branches of the 1-dimensional singular loci,
or other points on 1-dimensional singular loci that do not have
the generic transverse behaviour.  (This case is discussed further
in Section <A  HREF = "text1400.htm#15721">Making New Databases</A> on curve singularities below.)
<P>
There is an additional key piece of data.  The contribution of a point
p to RR for &chi;(X, A) depends upon the eigenspace of the G-action 
in which A lies.  In other words, the singularity is also
polarised locally by A.  This is called the <I>local polarisation</I>
or the <I>eigenspace</I> of the singularity (the latter to distinguish
it more clearly from the polarisation), and is another integer n
in the range {0, ..., r - 1}.  When we need to include the eigenspace
of A in the singularity, we use the symbol oneover(r)(a<sub>1</sub>, ..., a<sub>k</sub>)<sub>n</sub>.


<HR>
<H3><A NAME = "15568">Example <TT>GrdRng_gr-grpoints (H123E3)</TT></A></H3>
We make a point that can lie on a surface.
<P>
<P>
<PRE>
&gt; p := Point(7,[3,4]);    
&gt; p;
1/7(3,4)
&gt; IsGorensteinSurface(p);
true
</PRE>
Now we make a point of a 3-fold.
<P>
<P>
<PRE>
&gt; q := Point(5,2,[1,2,3]);  
&gt; q;
1/5(1,2,3)_[2]
&gt; IsTerminalThreefold(q);
true
&gt; Eigenspace(q);
2
&gt; p eq q;
false
</PRE>
We did not assign an eigenspace to the point p, so a default
value was assigned.
<P>
<P>
<PRE>
&gt; Eigenspace(p);
-1
</PRE>
<HR>
<H5><A NAME = "15569">Creation of Point Singularities</A></H5>



<H5><A NAME = "15570">Point(r,n,Q) : RngIntElt, RngIntElt, SeqEnum -&gt; GRPtS</A></H5>
<H5>Point(r,Q) : RngIntElt, RngIntElt, SeqEnum -&gt; GRPtS</H5>
<BLOCKQUOTE>
The point singularity with index a positive integer r, polarisation
a sequence of positive integers Q and local polarisation an integer n.
The group action should have no quasi-reflections, which means that
no integer k&gt;1 is allowed to divide r and all but one of the
elements of Q.
The local polarisation n modulo r should be a unit modulo r.
If it is not given as an argument, the default value is n= - 1.
</BLOCKQUOTE>
<H5><A NAME = "15571">Accessing the Key Data and Testing Equality</A></H5>



<H5><A NAME = "15572">Dimension(p) : GRPtS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Dimension of the variety on which the singularity p lies.
</BLOCKQUOTE>
<H5><A NAME = "15573">Index(p) : GRPtS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Index of the singularity p.
</BLOCKQUOTE>
<H5><A NAME = "15574">Polarisation(p) : GRPtS -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Polarisation sequence of the singularity p.
</BLOCKQUOTE>
<H5><A NAME = "15575">Eigenspace(p) : GRPtS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Eigenspace of the polarising divisor of the point singularity p.
</BLOCKQUOTE>
<H5><A NAME = "15576">p eq q : GRPtS, GRPtS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the two point singularities p, q have the following
attributes equal:  dimension, index, polarisation, eigenspace.
</BLOCKQUOTE>
<H5><A NAME = "15577">Identifying Special Types of Point Singularity</A></H5>



<H5><A NAME = "15578">IsIsolated(p) : GRPtS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the point singularity p is an isolated singularity;
that is, if and only if every element of its polarisation is
coprime to its index.
</BLOCKQUOTE>
<H5><A NAME = "15579">IsGorensteinSurface(p) : GRPtS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the point singularity p is a Gorenstein surface point;
that is, if and only if p is of type oneover(r)(a, r - a) for r, a coprime.
</BLOCKQUOTE>
<H5><A NAME = "15580">IsTerminalThreefold(p) : GRPtS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the point singularity p is a terminal 3-fold point;
that is, if and only if it is isolated, dimension 3 and the polarisation
is of the form a, b, r - b, up to a permutation.
</BLOCKQUOTE>
<H5><A NAME = "15581">TerminalIndex(p) : GRPtS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integer a when p is a singular point with polarisation
sequence of the form a, b, r - b, up to a permutation, assuming that
p is a terminal 3-fold point singularity.
</BLOCKQUOTE>
<H5><A NAME = "15582">TerminalPolarisation(p) : GRPtS -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Polarisation sequence of the singularity p in the order a, b, r - b,
where r is the index of p, and b&le;r/2.
There will be an error if p is not a terminal 3-fold point singularity.
</BLOCKQUOTE>
<H5><A NAME = "15583">IsCanonical(p) : GRPtS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the point singularity p is canonical; that is, if and 
only if the sum of the polarisation is trivial modulo the index.
</BLOCKQUOTE>
<H4><A NAME = "15584">Curve Singularities</A></H4>

<P>
<P>
<P>
We follow Buckley's analysis of curve singularities in RR <A  HREF = "text1387.htm#bib_Buc">[Buc03]</A>.
The first thing to note is that curve singularities in Magma are always
3-dimensional, that is, they are one-dimensional singular loci
C&sub;X of polarised 3-folds X, A.
The <I>degree</I> of C is the intersection number AC.
At a general point
of a curve singularity C, a transverse section is a Gorenstein
surface quotient singularity, that is, a point of type
oneover(r) (a, r - a) for coprime integers r, a.  This is called 
the <I>transverse type</I> of C and r is called the 
<I>transverse index</I> of C.
<P>
There are two further key attributes of a curve singularity C:
two integers N, t that carry information about the normal bundle
of C and about possible special points on C.
We do not discuss the meaning of N here except to say that
it encodes the splitting type of the normal bundle (see <A  HREF = "text1387.htm#bib_Buc">[Buc03]</A>
and <A  HREF = "text1387.htm#bib_SzBuc">[SB]</A> for further information), but in any case
note that there are intrinsics described below that can identify 
appropriate values for N given some other invariants.
This pair of invariants occur in RR only in the combination N/t,
which itself appears only linearly.  So given enough
coefficients of the Hilbert series as input, this value can be
recovered.  A curve, therefore, does have an attribute `magic'
that records this magic number N/t, and this can be set (and
used in RR) even if N, t are not assigned.
<P>
We explain the attribute t.  The transverse type of C gives
a transverse section at any general point along C.  But there may
be special points, so-called <I>dissident points</I>, that do not
have such a section.  They certainly occur at an intersection point
of two curve singularities, but may also be other points in C.
They are quotient singularities {p<sub>i</sub>} whose indices are of the
form rt<sub>i</sub> for positive integers t<sub>i</sub>, where r is the transverse
index of C.  The invariant t, called the <I>index</I> of C,
is the GCD of the set of all such t<sub>i</sub>.


<HR>
<H3><A NAME = "15585">Example <TT>GrdRng_gr-curvesing (H123E4)</TT></A></H3>
We create a curve singularity with given transverse type.
<P>
<P>
<PRE>
&gt; p := Point(3,[1,2]);
&gt; C := Curve(1/3,p,4,3);
&gt; C;
Curve of degree 1/3, N = 4, t = 3 with transverse type 1/3(1,2)
</PRE>
We check some of the characteristics of C.
<P>
<P>
<PRE>
&gt; TransverseIndex(C);
3
&gt; IsCanonical(C);
true
&gt; MagicNumber(C);       
4/3
</PRE>
<HR>
<H5><A NAME = "15586">Creation of Curve Singularities</A></H5>



<H5><A NAME = "15587">Curve(d,p,m) : FldRatElt,GRPtS,FldRatElt -&gt; GRCrvS</A></H5>
<H5>Curve(d,p,N) : FldRatElt,GRPtS,RngIntElt -&gt; GRCrvS</H5>
<H5>Curve(d,p,N,t) : FldRatElt,GRPtS,RngIntElt,RngIntElt -&gt; GRCrvS</H5>
<BLOCKQUOTE>
The 3-fold curve singularity of degree d, transverse type p
(a point surface singularity)
and characteristic numbers N, t (which is 1 if not set) or
magic number m=N/t.
</BLOCKQUOTE>
<H5><A NAME = "15588">Accessing the Key Data and Testing Equality</A></H5>



<H5><A NAME = "15589">Degree(C) : GRCrvS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The degree of the curve singularity C.
</BLOCKQUOTE>
<H5><A NAME = "15590">TransverseType(C) : GRCrvS -&gt; GRPtS</A></H5>
<BLOCKQUOTE>
The transverse type of the curve singularity C, that is,
a point surface singularity that is the general transverse
section of C.
</BLOCKQUOTE>
<H5><A NAME = "15591">TransverseIndex(C) : GRCrvS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The transverse index of the curve singularity C, that is,
the index of the point surface singularity that is a general
transverse section of C.
</BLOCKQUOTE>
<H5><A NAME = "15592">NormalNumber(C) : GRCrvS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The invariant N of the curve singularity C.
</BLOCKQUOTE>
<H5><A NAME = "15593">Index(C) : GRCrvS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The invariant t (sometimes called &tau;) of the curve singularity C
that is determined by the indices of dissident points on C.
</BLOCKQUOTE>
<H5><A NAME = "15594">MagicNumber(C) : GRCrvS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number N/t of the curve singularity C, where N is the
normal number of C and t is the index of C.
</BLOCKQUOTE>
<H5><A NAME = "15595">Dimension(C) : GRCrvS -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The dimension of the curve singularity C (currently always 3).
</BLOCKQUOTE>
<H5><A NAME = "15596">IsCanonical(C) : GRCrvS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the transverse type of the curve singularity C
is a canonical (or Du Val) surface singularity.
</BLOCKQUOTE>
<H5><A NAME = "15597">C eq D : GRCrvS, GRCrvS -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the two curve singularities C, D have the following
attributes equal:  dimension, degree, transverse type, magic number
(or, equivalently, the pair of invariants N, t).
</BLOCKQUOTE>
<H4><A NAME = "15598">Baskets of Singularities</A></H4>

<P>
<P>
<P>
A <I>basket of singularities</I>, or simply <I>basket</I>, is a collection
of point and curve singularities.  One constructs baskets in the
hope of finding a variety that has exactly those singularities
lying on it as its only singularities, and very often this is indeed
the case.  It is a marginal issue here, but worth noting that in fact
baskets are collections of ideal singularities of a variety X that
make exactly the same contributions to RR as the actual singularities
of X.  So as a matter of principle, one is not primarily seeking
varieties with exactly the basket singularities, even though this
is what happens in practice.


<H5><A NAME = "15599">Creation and Modification of Baskets</A></H5>



<H5><A NAME = "15600">Basket(Q) : SeqEnum -&gt; GRBskt</A></H5>
<H5>Basket(Q1,Q2) : SeqEnum,SeqEnum -&gt; GRBskt</H5>
<BLOCKQUOTE>
The basket of singularities where Q, Q<sub>1</sub>, Q<sub>2</sub> are sequences
of point or curve singularities.
</BLOCKQUOTE>
<H5><A NAME = "15601">EmptyBasket() : . -&gt; GRBskt</A></H5>
<BLOCKQUOTE>
The basket of singularities containing no singularities.
</BLOCKQUOTE>
<H5><A NAME = "15602">MakeBasket(Q) : SeqEnum -&gt; GRBskt</A></H5>
<BLOCKQUOTE>
The basket of singularities containing point singularities
that are encoded in the sequence Q.  This may occur in
different ways.
If Q is a sequence of sequences of the
form [r, a] (that is, each having length 2) with r, a coprime,
then the result will be a basket of points of the form
oneover(r)(a, r - a).
If Q is a sequence of sequences of some common length N&gt;2,
then the result will be a basket of points of the form
oneover(Q[1])(Q[2], ..., Q[N]).
Note that a local polarisation n cannot be included in
this constructor:  the default value n = - 1 is always
assumed.
</BLOCKQUOTE>
<H5><A NAME = "15603">Points(B) : GRBskt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of point singularities of the basket B.
</BLOCKQUOTE>
<H5><A NAME = "15604">Curves(B) : GRBskt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of curve singularities of the basket B.
</BLOCKQUOTE>
<H5><A NAME = "15605">Tests for Baskets</A></H5>



<H5><A NAME = "15606">IsIsolated(B) : GRBskt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if all singularities of the basket B are isolated
(so, in particular, there are no curve singularities in B).
</BLOCKQUOTE>
<H5><A NAME = "15607">IsGorensteinSurface(B) : GRBskt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if all singularities of the basket B are Du Val singularities,
that is, are of the form oneover(r)(a, r - a).
</BLOCKQUOTE>
<H5><A NAME = "15608">IsTerminalThreefold(B) : GRBskt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if all singularities of the basket B are terminal 3-fold singularities.
</BLOCKQUOTE>
<H5><A NAME = "15609">IsCanonical(B) : GRBskt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if all singularities of the basket B are canonical singularities.
</BLOCKQUOTE>
<H4><A NAME = "15610">Curves and Dissident Points</A></H4>

<P>
<P>
<P>
Curves of singularities may contain special points not of the
typical transverse type;  these are the dissident points.
The following intrinsics generate sequences of possible
dissident points for a particular curve singularity.
The point is that some of the invariants of a curve singularity
force a curve to have dissident points that together give
a certain RR contribution.  It is not always easy to see
what these points should be, so constructing by hand baskets 
that include a particular curve singularity can be difficult.  
These intrinsics all give suggestions for possible sets of 
dissident points.


<H5><A NAME = "15611">CanonicalDissidentPoints(C) : GRCrvS -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence of sequences of points, each of which minimally accounts for
the index of the curve singularity C (although further curves may be
needed in order for it to make sense).
</BLOCKQUOTE>
<H5><A NAME = "15612">SimpleCanonicalDissidentPoints(C) : GRCrvS -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence of sequences of points, each of which minimally accounts for
the index of the curve singularity
C and which does not allow further curves to meet C.
</BLOCKQUOTE>
<H5><A NAME = "15613">PossibleCanonicalDissidentPoints(C) : GRCrvS -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence of points, each of may appear on the curve singularity
C as a dissident point.
</BLOCKQUOTE>
<H5><A NAME = "15614">PossibleSimpleCanonicalDissidentPoints(C) : GRCrvS -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence of points, each of may appear on the curve singularity
C as a dissident point but
which is not at the intersection of C with another curve.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1392.htm">[Next]</A><A  HREF = "text1390.htm">[Prev]</A> <A  HREF = "text1392.htm">[Right]</A> <A  HREF = "text1390.htm">[Left]</A> <A  HREF = "text1388.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>