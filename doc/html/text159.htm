<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Element Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text160.htm">[Next]</A><A  HREF = "text158.htm">[Prev]</A> <A  HREF = "text160.htm">[Right]</A> <A  HREF = "text158.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1151">Element Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text159.htm#1152">Arithmetic Operations</A>
<LI> <A  HREF = "text159.htm#1156">Bit Operations</A>
<LI> <A  HREF = "text159.htm#1160">Bitwise Operations</A>
<LI> <A  HREF = "text159.htm#1165">Equality and Membership</A>
<LI> <A  HREF = "text159.htm#1166">Parent and Category</A>
<LI> <A  HREF = "text159.htm#1167">Predicates on Ring Elements</A>
<LI> <A  HREF = "text159.htm#1179">Comparison of Ring Elements</A>
<LI> <A  HREF = "text159.htm#1180">Conjugates, Norm and Trace</A>
<LI> <A  HREF = "text159.htm#1187">Other Elementary Functions</A>
</UL>
<H4><A NAME = "1152">Arithmetic Operations</A></H4>

<P>
<P>
Magma includes both the Karatsuba algorithm and the Sch&ouml;nhage-Strassen
FFT-based algorithm for the multiplication of integers
(<A  HREF = "text154.htm#bib_AhoHopcroftUllman">[AHU74, Chap. 7]</A>, <A  HREF = "text154.htm#bib_GathenGerhard">[vzGG99, Sec. 8.3]</A>).
The crossover
point (where the FFT method beats the Karatsuba method) is currently
2<sup>15</sup> bits (approx. 10000 decimal digits) on Sun SPARC workstations
and 2<sup>17</sup> bits (approx. 40000 decimal digits) on Digital Alpha
workstations. Assembler macros are used for critical operations and
64-bit operations are used on DEC-Alpha machines.
<P>
Magma also contains an asymptotically-fast integer (and polynomial)
division algorithm which reduces division to multiplication with a
constant scale factor that is in the practical range.  Thus division of
integers and polynomials are based on the Karatsuba and
Sch&ouml;nhage-Strassen (FFT) methods when applicable.  The crossover point
for integer division (when the new method outperforms the classical
method) is currently at the point of dividing a 2<sup>12</sup> bit
(approx. 1200 decimal digit) integer by a 2<sup>11</sup> (approx. 600 decimal
digit) integer on Sun SPARC workstations.


<H5>+ n : RngIntElt -&gt; RngIntElt</H5>

<H5>- n : RngIntElt -&gt; RngIntElt</H5><P>

<H5>m + n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m - n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m * n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>n ^ k : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m / n : RngIntElt, RngIntElt -&gt; RngIntElt</H5><P>

<H5>m +:= n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m -:= n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m *:= n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m /:= n : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>m ^:= k : RngIntElt, RngIntElt -&gt; RngIntElt</H5><P>



<H5>n div:= m : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>n mod:= m : RngIntElt, RngIntElt -&gt; RngIntElt</H5><P>


<H5><A NAME = "1153">n div m : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The quotient q of the division with remainder n=qm + r, where 0&le;r&lt;m
or m&lt;r&le;0 (depending on the sign of m), for integers n and m != 0.
</BLOCKQUOTE>
<H5><A NAME = "1154">n mod m : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The remainder r of the division with remainder n=qm + r, where 0&le;r&lt;m
or m&lt;r&le;0 (depending on the sign of m), for integers n and m != 0.
</BLOCKQUOTE>
<H5><A NAME = "1155">ExactQuotient(n, d) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Assuming that the integer n is exactly divisible by the integer d,
return the exact quotient of n by d (as an integer).  An error
results if d does not divide n exactly.
</BLOCKQUOTE>
<H4><A NAME = "1156">Bit Operations</A></H4>

<P>
<P>
The following functions use bit operations on the internal representation,
so are in general quicker than using the usual arithmetic operators.


<H5><A NAME = "1157">ShiftLeft(n, b) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given integers n and b, with b&ge;0, return n x 2<sup>b</sup>.
</BLOCKQUOTE>
<H5><A NAME = "1158">ShiftRight(n, b) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given integers n and b, with b&ge;0, return n <TT>div</TT> 2<sup>b</sup>.
</BLOCKQUOTE>
<H5><A NAME = "1159">ModByPowerOf2(n, b) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given integers n and b, with b&ge;0, return n mod 2<sup>b</sup> (so the
result is always non-negative).
</BLOCKQUOTE>
<H4><A NAME = "1160">Bitwise Operations</A></H4>

<P>
<P>
The following functions apply logical operators to integers by
interpreting them as sequences of bits.  Note that the (implicitly
infinite) 2-adic expansion of these integers is used, which enables
consistent handling of negative integers.  In particular, the
<TT>BitwiseNot</TT> of a non-negative integer will be negative, and
vice versa.


<H5><A NAME = "1161">BitwiseNot(x) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integer whose 2-adic representation is the bitwise `not' of the
2-adic representation of x.
</BLOCKQUOTE>
<H5><A NAME = "1162">BitwiseAnd(x, y) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integer whose 2-adic representation is the bitwise `and' of the
2-adic representations of x and y.
</BLOCKQUOTE>
<H5><A NAME = "1163">BitwiseOr(x, y) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integer whose 2-adic representation is the bitwise `or' of the
2-adic representations of x and y.
</BLOCKQUOTE>
<H5><A NAME = "1164">BitwiseXor(x, y) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integer whose 2-adic representation is the bitwise `xor' of the
2-adic representations of x and y.
</BLOCKQUOTE>
<H4><A NAME = "1165">Equality and Membership</A></H4>



<H5>m eq n : RngIntElt, RngIntElt -&gt; BoolElt</H5>

<H5>m ne n : RngIntElt, RngIntElt -&gt; BoolElt</H5><P>

<H5>n in R : RngIntElt, Rng -&gt; BoolElt</H5>

<H5>n notin R : RngIntElt, Rng -&gt; BoolElt</H5><P>

<H4><A NAME = "1166">Parent and Category</A></H4>



<H5>Parent(n) : RngIntElt -&gt; RngInt</H5>

<H5>Category(n) : RngIntElt -&gt; Cat</H5><P>

<H4><A NAME = "1167">Predicates on Ring Elements</A></H4>



<H5>IsZero(n) : RngIntElt -&gt; BoolElt</H5>

<H5>IsOne(n) : RngIntElt -&gt; BoolElt</H5>

<H5>IsMinusOne(n) : RngIntElt -&gt; BoolElt</H5><P>

<H5>IsNilpotent(n) : RngIntElt -&gt; BoolElt</H5>

<H5>IsIdempotent(n) : RngIntElt -&gt; BoolElt</H5><P>

<H5>IsUnit(n) : RngIntElt -&gt; BoolElt</H5>

<H5>IsZeroDivisor(n) : RngIntElt -&gt; BoolElt</H5>

<H5>IsRegular(n) : RngInt -&gt; BoolElt</H5><P>

<H5>IsIrreducible(n) : RngIntElt -&gt; BoolElt</H5>

<H5>IsPrime(n) : RngIntElt -&gt; BoolElt</H5><P>

<H5><A NAME = "1168">IsEven(n) : RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the integer n is even, otherwise <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "1169">IsOdd(n) : RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the integer n is odd, otherwise <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "1170">IsDivisibleBy(n, d) : RngIntElt, RngIntElt -&gt; BoolElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the integer n is divisible by the integer d;
if <TT>true</TT>, the quotient of n by d is also returned.
</BLOCKQUOTE>
<H5><A NAME = "1171">IsSquare(n) : RngIntElt -&gt; BoolElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the non-negative integer n is the square of an integer,
<TT>false</TT> otherwise. If n is a square, its positive square root is
also returned.
</BLOCKQUOTE>
<H5><A NAME = "1172">IsSquarefree(n) : RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the non-zero integer n is not divisible by the square of any
prime, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "1173">IsPower(n) : RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
If the integer n&gt;1 is a power n=b<sup>k</sup> of an integer b, with k&gt;1,
this function returns true, the minimal positive b and its associated k;
if it is not such integer power the function returns false.
</BLOCKQUOTE>
<H5><A NAME = "1174">IsPower(n, k) : RngIntElt, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
If the integer n&gt;1 is k-th power, with k&gt;1, of some integer
b, so that n=b<sup>k</sup>, this function returns true, and b;
if it is not a k-th integer power the function returns false.
</BLOCKQUOTE>
<H5><A NAME = "1175">IsPrime(n) : RngIntElt -&gt; BoolElt</A></H5>

<PRE>    Proof: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the integer n is a prime.
A rigorous primality test 
which returns a proven result will be used unless the parameter <TT>Proof</TT> 
is <TT>false</TT>. The reader is referred to the section <A  HREF = "text164.htm#1246">Primes and Primality Testing</A> 
for a complete description of this function.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1176">Example <TT>RngInt_IsPrime (H18E4)</TT></A></H3>
In this example we find some 10-digit primes that are congruent to 3 modulo 4 
such that (p - 1)/2 is also prime.
<P>
<P>
<PRE>
&gt; { p : p in [10^10+3..10^10+1000 by 4] |
&gt;        IsPrime(p) and IsPrime((p-1) div 2) };
{ 10000000259, 10000000643 }
</PRE>
<HR>
<H5><A NAME = "1177">IsIntegral(n) : RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if a is integral, which is of course
true for every integer n.
</BLOCKQUOTE>
<H5><A NAME = "1178">IsSinglePrecision(n) : RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if n fits in a single word in the internal representation
of integers in Magma, that is, if |n|&lt;2<sup>30</sup>, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><A NAME = "1179">Comparison of Ring Elements</A></H4>



<H5>m gt n : RngIntElt, RngIntElt -&gt; BoolElt</H5>

<H5>m ge n : RngIntElt, RngIntElt -&gt; BoolElt</H5>

<H5>m lt n : RngIntElt, RngIntElt -&gt; BoolElt</H5>

<H5>m le n : RngIntElt, RngIntElt -&gt; BoolElt</H5><P>

<H5>Maximum(m, n) : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>Maximum(Q) : [RngIntElt] -&gt; RngIntElt</H5><P>

<H5>Minimum(m, n) : RngIntElt, RngIntElt -&gt; RngIntElt</H5>

<H5>Minimum(Q) : [RngIntElt] -&gt; RngIntElt</H5><P>

<H4><A NAME = "1180">Conjugates, Norm and Trace</A></H4>



<H5><A NAME = "1181">ComplexConjugate(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The complex conjugate of n, which will be the integer n itself.
</BLOCKQUOTE>
<H5><A NAME = "1182">Conjugate(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The conjugate of n, which will be the integer n itself.
</BLOCKQUOTE>
<H5><A NAME = "1183">Norm(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The norm in Q of n, which will be the integer n itself.
</BLOCKQUOTE>
<H5><A NAME = "1184">EuclideanNorm(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Euclidean norm (length) of n, which will equal the absolute
value of n.
</BLOCKQUOTE>
<H5><A NAME = "1185">Trace(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The trace (in Q) of n, which will be the integer n itself.
</BLOCKQUOTE>
<H5><A NAME = "1186">MinimalPolynomial(n) : RngIntElt -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Returns the minimal polynomial of the integer n, which
is the monic linear polynomial with constant coefficient n in a
univariate polynomial ring R over the integers.
</BLOCKQUOTE>
<H4><A NAME = "1187">Other Elementary Functions</A></H4>



<H5><A NAME = "1188">AbsoluteValue(n) : RngIntElt -&gt; RngIntElt</A></H5>
<H5>Abs(n) : RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Absolute value of the integer n.
</BLOCKQUOTE>
<H5><A NAME = "1189">Ilog2(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integral part of the logarithm to the base two of the positive integer n.
</BLOCKQUOTE>
<H5><A NAME = "1190">Ilog(b, n) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The integral part of the logarithm to the base b of the positive integer n
i.e., the largest integer k such that b<sup>k</sup> &le;n. The integer b must be 
greater than or equal to two.
</BLOCKQUOTE>
<H5><A NAME = "1191">Quotrem(m, n) : RngIntElt, RngIntElt -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Returns both the quotient q and remainder r obtained upon dividing the
integer m by the integer n, that is,
m = q.n + r, where 0 &le;r &lt; n if n&gt;0 and n&lt;r&le;0 if n&lt;0.
</BLOCKQUOTE>
<H5><A NAME = "1192">Valuation(x, p) : RngIntElt, RngIntElt -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
The valuation of the integer x at the prime p.  This is the largest
integer v for which p<sup>v</sup> divides x.  If x = 0 then v = &infin;.
The optional second return value is the integer u such that x = p<sup>v</sup> u.
</BLOCKQUOTE>
<H5><A NAME = "1193">Iroot(a, n) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a positive integer a, return the integer b=
&lfloor;root n of a&rfloor;, i.e. the integral part of the 
n-th root of a. To obtain the actual root (as a real number),
a must e coerced into a real field and the function <TT>Root</TT> 
applied.
</BLOCKQUOTE>
<H5><A NAME = "1194">Sign(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns -1, 0 or 1 depending upon whether the integer n is
negative, zero or positive, respectively.
</BLOCKQUOTE>
<H5><A NAME = "1195">Ceiling(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The ceiling of the integer n, that is, n itself.
</BLOCKQUOTE>
<H5><A NAME = "1196">Floor(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The floor of the integer n, that is, n itself.
</BLOCKQUOTE>
<H5><A NAME = "1197">Round(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
This function rounds the integer n to itself.
</BLOCKQUOTE>
<H5><A NAME = "1198">Truncate(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
This function returns the integer truncation of the integer n, that
is, n itself.
</BLOCKQUOTE>
<H5><A NAME = "1199">SquarefreeFactorization(n) : RngIntElt -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Given a non-negative integer n, return a squarefree integer x
as well as a positive integer y, such that n=xy<sup>2</sup>.
</BLOCKQUOTE>
<H5><A NAME = "1200">Isqrt(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a positive integer n, return the integer
&lfloor;&#8730;n&rfloor;, i.e., the integral part of the 
square root of the integer n.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text160.htm">[Next]</A><A  HREF = "text158.htm">[Prev]</A> <A  HREF = "text160.htm">[Right]</A> <A  HREF = "text158.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>