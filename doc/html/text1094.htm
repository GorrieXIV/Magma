<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Roots, Coroots and Weights</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1095.htm">[Next]</A><A  HREF = "text1093.htm">[Prev]</A> <A  HREF = "text1095.htm">[Right]</A> <A  HREF = "text1093.htm">[Left]</A> <A  HREF = "text1089.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "12202">Roots, Coroots and Weights</A></H3>

<P>
<P>
<P>
<P>
The roots are stored as an indexed set
<P>
  {@ &alpha;<sub>1</sub>, ..., &alpha;<sub>N</sub>, &alpha;<sub>N + 1</sub>, ..., &alpha;<sub>2N</sub>  @},
<P>
where &alpha;<sub>1</sub>, ..., &alpha;<sub>N</sub> are the positive roots in an order compatible
with height;  and &alpha;<sub>N + 1</sub>, ..., &alpha;<sub>2N</sub> are
the corresponding negative roots (i.e. &alpha;<sub>i + N</sub>= - &alpha;<sub>i</sub>).
The simple roots are &alpha;<sub>1</sub>, ..., &alpha;<sub>n</sub> where n is the rank.
<P>
Many of these functions have an optional argument
<TT>Basis</TT> which may take one of the following values
<P>
<DL COMPACT class='compact'>
<DT>1. </DT><DD><TT>"Standard"</TT>: the standard basis for the (co)root space.  
  This is the default.
<DT>2. </DT><DD><TT>"Root"</TT>: the basis of simple (co)roots.
<DT>3. </DT><DD><TT>"Weight"</TT>: the basis of fundamental (co)weights (see
Subsection <A  HREF = "text1126.htm#12644">Weights</A> below).</DL>



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1094.htm#12203">Accessing Roots and Coroots</A>
<LI> <A  HREF = "text1094.htm#12232">Reflections</A>
<LI> <A  HREF = "text1094.htm#12242">Operations and Properties for Root and Coroot Indices</A>
<LI> <A  HREF = "text1094.htm#12263">Weights</A>
</UL>
<H4><A NAME = "12203">Accessing Roots and Coroots</A></H4>



<H5><A NAME = "12204">RootSpace(R) : RootStr -&gt; ModTupFld</A></H5>
<H5>CorootSpace(R) : RootStr -&gt; ModTupFld</H5>
<BLOCKQUOTE>
The vector spacecontaining the (co)roots of
the root datum R, i.e. X&otimes;Q (respectively, Y&otimes;Q). 
</BLOCKQUOTE>
<H5><A NAME = "12205">FullRootLattice(R) : RootDtm -&gt; Lat, Map</A></H5>
<H5>FullCorootLattice(R) : RootDtm -&gt; Lat, Map</H5>
<BLOCKQUOTE>
The latticecontaining the (co)roots of
the root datum R, i.e. X (respectively, Y). 
An inclusion map into the (co)root space of R is returned as the second value.
</BLOCKQUOTE>
<H5><A NAME = "12206">RootLattice(R) : RootDtm -&gt; Lat, Map</A></H5>
<H5>CorootLattice(R) : RootDtm -&gt; Lat, Map</H5>
<BLOCKQUOTE>
The latticespanned by the (co)roots of
the root datum R.
An inclusion map into the (co)root space of R is returned as the second value.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12207">Example <TT>RootDtm_RtLat (H103E15)</TT></A></H3>
The root space, full root lattice and the root lattice of the 
standard root datum of type A<sub>2</sub>:
<P>
<P>
<PRE>
&gt; R := StandardRootDatum("A",2);
&gt; V := RootSpace(R);
&gt; FullRootLattice(R);
Standard Lattice of rank 3 and degree 3
Mapping from: Standard Lattice of rank 3 and degree 3 to ModTupFld: V
&gt; RootLattice(R);
Lattice of rank 2 and degree 3
Basis:
( 1 -1  0)
( 0  1 -1)
Mapping from: Lattice of rank 2 and degree 3 to ModTupFld: V
</PRE>
<HR>
<H5><A NAME = "12208">IsRootSpace(V) : ModTupFld -&gt; BoolElt</A></H5>
<H5>IsCorootSpace(V) : ModTupFld -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if, and only if, V is the (co)root space of some root datum.
</BLOCKQUOTE>
<H5><A NAME = "12209">IsInRootSpace(v) : ModTupFldElt -&gt; BoolElt</A></H5>
<H5>IsCorootSpace(v) : ModTupFldElt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if, and only if, V is an element of
the (co)root space of some root datum.
</BLOCKQUOTE>
<H5><A NAME = "12210">RootDatum(V) : ModTupFld -&gt; RootDtm</A></H5>
<BLOCKQUOTE>
If V is the (co)root space of some root datum, this returns the datum.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12211">Example <TT>RootDtm_RtIsSpace (H103E16)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("a3");
&gt; V := RootSpace(R);
&gt; v := V.1;
&gt; IsRootSpace(V);
true
&gt; RootDatum(V);
R: Adjoint root datum of dimension 3 of type A3 
&gt; IsInRootSpace(v);
true
</PRE>
<HR>
<H5><A NAME = "12212">ZeroRootLattice(R) : RootDtm -&gt; Lat</A></H5>
<H5>ZeroRootSpace(R) : RootDtm -&gt; ModTupFld, Map</H5>
<BLOCKQUOTE>
For the given root datum R, return the lattice X<sub>0</sub> and 
the vector space X<sub>0</sub>&otimes;Q, respectively (see Section <A  HREF = "text1090.htm#12123">Extended Root Data</A>).
</BLOCKQUOTE>
<H5><A NAME = "12213">RelativeRootSpace(R) : RootDtm -&gt; ModTupFld, Map</A></H5>
<BLOCKQUOTE>
For the given root datum R, return the vector space bar(X) = (X&otimes;Q)/(X<sub>0</sub>&otimes;Q) 
containing the relative roots (see Section <A  HREF = "text1090.htm#12123">Extended Root Data</A>).
The projection from X&otimes;Q onto bar(X) is returned as second return value.
</BLOCKQUOTE>
<H5><A NAME = "12214">SimpleRoots(R) : RootStr -&gt; Mtrx</A></H5>
<H5>SimpleCoroots(R) : RootStr -&gt; Mtrx</H5>
<BLOCKQUOTE>
The simple (co)rootsof the root datum R
as the rows of a matrix, i.e. A (respectively, B).  
</BLOCKQUOTE>
<H5><A NAME = "12215">NumberOfPositiveRoots(R) : RootStr -&gt; RngIntElt</A></H5>
<H5>NumPosRoots(R) : RootStr -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of positive roots of the root datum R. 
This is also the number of positive coroots.  
The total number of (co)roots is twice the number of positive (co)roots.
</BLOCKQUOTE>
<H5><A NAME = "12216">Roots(R) : RootStr -&gt; (@@)</A></H5>
<H5>Coroots(R) : RootStr -&gt; (@@)</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The indexed set of (co)roots of the root datum R, i.e. 
{@ &alpha;<sub>1</sub>, ... &alpha;<sub>2N</sub> @} 
(respectively, {@ &alpha;<sub>1</sub><sup>star</sup>, ... &alpha;<sub>2N</sub><sup>star</sup> @}).
</BLOCKQUOTE>
<H5><A NAME = "12217">PositiveRoots(R) : RootStr -&gt; (@@)</A></H5>
<H5>PositiveCoroots(R) : RootStr -&gt; (@@)</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The indexed set of positive
(co)rootsof the root datum R, 
i.e. {@ &alpha;<sub>1</sub>, ... &alpha;<sub>N</sub> @} 
(respectively, {@ &alpha;<sub>1</sub><sup>star</sup>, ... &alpha;<sub>N</sub><sup>star</sup> @}).
</BLOCKQUOTE>
<H5><A NAME = "12218">Root(R, r) : RootStr, RngIntElt -&gt; (@@)</A></H5>
<H5>Coroot(R, r) : RootStr, RngIntElt -&gt; (@@)</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The rth (co)root &alpha;<sub>r</sub> (respectively, &alpha;<sub>r</sub><sup>star</sup>) of the root datum R.
</BLOCKQUOTE>
<H5><A NAME = "12219">RootPosition(R, v) : RootStr, . -&gt; (@@)</A></H5>
<H5>CorootPosition(R, v) : RootStr, . -&gt; (@@)</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
If v is a (co)root in the root datum R, return its index;
otherwise return 0.  These functions will try to coerce v
into the appropriate lattice;  v should be written with
respect to the basis specified by the parameter <TT>Basis</TT>.
</BLOCKQUOTE>
<H5><A NAME = "12220">BasisChange(R,v) : RootStr, Any -&gt; SeqEnum</A></H5>

<PRE>    InBasis: MonStgElt                  Default: "Standard"</PRE>

<PRE>    OutBasis: MonStgElt                 Default: "Standard"</PRE>

<PRE>    Coroots: BoolElt                    Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Changes the basis of the vector v contained in the space spanned by the (co)roots of 
the root datum R.
The vector v is considered as an element of the root space by default. 
If the parameter <TT>Coroots</TT> is set to <TT>true</TT>,   v is considered as an element of the 
coroot space.
The optional arguments <TT>InBasis</TT> and <TT>OutBasis</TT> may take the same 
values as the parameter <TT>Basis</TT> as described at the beginning of the current section. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12221">Example <TT>RootDtm_RootsCoroots (H103E17)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("A3" : Isogeny := 2);
&gt; Roots(R);
{@
    (1 0 0),
    (0 1 0),
    (1 0 2),
    (1 1 0),
    (1 1 2),
    (2 1 2),
    (-1  0  0),
    (0 -1  0),
    (-1  0 -2),
    (-1 -1  0),
    (-1 -1 -2),
    (-2 -1 -2)
@}
&gt; PositiveCoroots(R);
{@
    (2 -1 -1),
    (-1  2  0),
    (0 -1  1),
    (1  1 -1),
    (-1  1  1),
    (1 0 0)
@}
&gt; #Roots(R) eq 2*NumPosRoots(R);
true
&gt; Coroot(R, 4);
(1  1 -1)
&gt; Coroot(R, 4 : Basis := "Root");
(1 1 0)
&gt; CorootPosition(R, [1,1,-1]);
4
&gt; CorootPosition(R, [1,1,0] : Basis := "Root");
4
&gt; BasisChange(R, [1,0,0] : InBasis:="Root");
(1 0 0)
&gt; BasisChange(R, [1,0,0] : InBasis:="Root", Coroots);
( 2 -1 -1)
</PRE>
<HR>
<H5><A NAME = "12222">IsInRootSpace(R,v) : RootDtm, ModTupFldElt -&gt; BoolElt</A></H5>
<H5>IsInCorootSpace(R,v) : RootDtm, ModTupFldElt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the vector v is contained in the (co)root space 
of the root datum R.
</BLOCKQUOTE>
<H5><A NAME = "12223">HighestRoot(R) : RootStr -&gt; .</A></H5>
<H5>HighestCoroot(R) : RootStr  -&gt; .</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The unique (co)root of greatest
heightin the irreducible
root datum R. 
</BLOCKQUOTE>
<H5><A NAME = "12224">HighestLongRoot(R) : RootStr  -&gt; .</A></H5>
<H5>HighestLongCoroot(R) : RootStr  -&gt; .</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The unique long (co)root of greatest
heightin the irreducible
root datum R. 
</BLOCKQUOTE>
<H5><A NAME = "12225">HighestShortRoot(R) : RootStr  -&gt; .</A></H5>
<H5>HighestShortCoroot(R) : RootStr  -&gt; .</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The unique short (co)root of greatest heightin the
irreducible root datum R.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12226">Example <TT>RootDtm_HighestRoots (H103E18)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("G2");
&gt; HighestRoot(R);
(3 2)
&gt; HighestLongRoot(R);
(3 2)
&gt; HighestShortRoot(R);
(2 1)
</PRE>
<HR>
<H5><A NAME = "12227">RelativeRoots(R) : RootDtm -&gt; SetIndx</A></H5>
<H5>PositiveRelativeRoots(R) : RootDtm -&gt; SetIndx</H5>
<H5>NegativeRelativeRoots(R) : RootDtm -&gt; SetIndx</H5>
<H5>SimpleRelativeRoots(R) : RootDtm -&gt; SetIndx</H5>
<BLOCKQUOTE>
The indexed set of all (resp. positive, negative, simple) relative roots of 
the root datum R.
Note that the relative roots are returned in the order induced by the standard ordering on the (nonrelative) roots of R.
</BLOCKQUOTE>
<H5><A NAME = "12228">RelativeRootDatum(R) : RootDtm -&gt; RootDtm</A></H5>
<BLOCKQUOTE>
The relative root datum of the root datum R.
</BLOCKQUOTE>
<H5><A NAME = "12229">GammaOrbitsRepresentatives(R, delta) : RootDtm, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The preimage of a relative root &delta; is a disjoint union
of &Gamma;-orbits on the set of all roots of the root datum R. 
This intrinsic returns a sequence of representatives of these orbits.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12230">Example <TT>RootDtm_TwoTwistedEsixes (H103E19)</TT></A></H3>
We first consider the twisted root datum of type ()<sup>2</sup>E<sub>6</sub>,
which is quasisplit:
<P>
<P>
<PRE>
&gt; DynkinDiagram(RootDatum("E6"));

E6    1 - 3 - 4 - 5 - 6
              |
              2
&gt;
&gt; R := RootDatum("E6" : Twist:=2 ); R;
R: Twisted adjoint root datum of type 2E6,4
&gt; OrbitsOnSimples(R);
[
     GSet{ 2 },
     GSet{ 4 },
     GSet{ 1, 6 },
     GSet{ 3, 5 }
]
&gt; DistinguishedOrbitsOnSimples(R) eq OrbitsOnSimples(R);
true
&gt; AnisotropicSubdatum(R);
Twisted toral root datum of dimension 6
[]
&gt; RR := RelativeRootDatum(R);RR;
RR: Adjoint root datum of type F4
&gt; _,pi := RelativeRootSpace(R);
&gt; DynkinDiagram(RR);

F4    1 - 2 =&gt;= 4 - 3
&gt; [ Position(Roots(RR), pi(Root(R,i)) ) : i in [1,6, 3,5, 4, 2]];
[ 3, 3, 4, 4, 2, 1 ]
</PRE>
now one with distinguished orbits {2} and {4}:
<P>
<P>
<PRE>
&gt; R := RootDatum("E6" : Twist := &lt;{{2},{4}},2&gt; ); R;
R: Twisted adjoint root datum of type 2E6,2
&gt; OrbitsOnSimples(R);
[
     GSet{ 2 },
     GSet{ 4 },
     GSet{ 1, 6 },
     GSet{ 3, 5 }
]
&gt; DistinguishedOrbitsOnSimples(R);
[
     GSet{ 2 },
     GSet{ 4 }
]
&gt; AnisotropicSubdatum(R);
Twisted root datum of type 2(A2 A2)4,0
[ 1, 3, 5, 6, 7, 11, 37, 39, 41, 42, 43, 47 ]
&gt; RR := RelativeRootDatum(R);RR;
RR: Adjoint root datum of type G2
&gt; DynkinDiagram(RR);

G2    2 =&lt;= 1
         3
&gt; _,pi := RelativeRootSpace(R);
&gt; [ Position(Roots(RR), pi(Root(R,i)) ) : i in [2,4]];
[ 1, 2 ]
</PRE>
and now the one with distinguished orbits {2} and {1, 6},
which has a non-reduced relative root datum:
<P>
<P>
<PRE>
&gt; R := RootDatum("E6" : Twist := &lt;{{2},{1,6}},2&gt; ); R;
R: Twisted adjoint root datum of dimension 6 of type 2E6,2
&gt; OrbitsOnSimples(R);
[
     GSet{ 2 },
     GSet{ 4 },
     GSet{ 1, 6 },
     GSet{ 3, 5 }
]
&gt; DistinguishedOrbitsOnSimples(R);
[
     GSet{ 2 },
     GSet{ 1, 6 }
]
&gt; AnisotropicSubdatum(R);
Twisted root datum of type 2A3,0
[ 3, 4, 5, 9, 10, 15, 39, 40, 41, 45, 46, 51 ]
&gt; RR := RelativeRootDatum(R);RR;
RR: Adjoint root datum of type BC2
&gt; DynkinDiagram(RR);

BC2    1 =&gt;= 2
&gt; _,pi := RelativeRootSpace(R);
&gt; [ Position(Roots(RR), pi(Root(R,i)) ) : i in [2, 1,6]];
[ 1, 2, 2 ]
</PRE>
Finally, the twisted root Datum of type ()<sup>6</sup>D<sub>4, 1</sub>:
<P>
<P>
<PRE>
&gt; T := RootDatum( "D4" : Twist:=&lt;{{2}},6&gt; );
&gt; T;
T: Twisted adjoint root datum of dimension 4 of type 6D4,1
&gt; RelativeRootDatum(T);
Adjoint root datum of type BC1
&gt; GammaOrbitsRepresentatives(T,1);
[ 11, 5 ]
&gt; GammaOrbitsRepresentatives(T,2);
[ 12 ]
</PRE>
<HR>
<H5><A NAME = "12231">CoxeterForm(R) : RootDtm -&gt; AlgMatElt</A></H5>
<H5>DualCoxeterForm(R) : RootDtm -&gt; AlgMatElt</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The matrix of an inner producton 
the (co)root space of the root datum R which is invariant under the action of the (co)roots.  
The inner product is normalised so that the short roots in each irreducible 
component have length one.
</BLOCKQUOTE>
<H4><A NAME = "12232">Reflections</A></H4>

<P>
<P>
<P>
<P>
The root &alpha; acts on the root space via the reflection s<sub>&alpha;</sub>; the
coroot &alpha;<sup>star</sup> acts on the coroot space via the coreflection
s<sub>&alpha;</sub><sup>star</sup>.


<H5><A NAME = "12233">SimpleReflectionMatrices(R) : RootDtm -&gt; []</A></H5>
<H5>SimpleCoreflectionMatrices(R) : RootDtm -&gt; []</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The sequence of  matrices giving the action of the simple
(co)roots of the root datum R on the (co)root
space, i.e. the matrices of s<sub>&alpha;<sub>1</sub></sub>, ..., s<sub>&alpha;<sub>n</sub></sub>
(respectively, s<sub>&alpha;<sub>1</sub></sub><sup>star</sup>, ..., s<sub>&alpha;<sub>n</sub></sub><sup>star</sup>).
</BLOCKQUOTE>
<H5><A NAME = "12234">ReflectionMatrices(R) : RootDtm -&gt; []</A></H5>
<H5>CoreflectionMatrices(R) : RootDtm -&gt; []</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The sequence of matrices giving the action of the (co)roots of
the root datum R on the (co)root
space, i.e. the matrices of s<sub>&alpha;<sub>1</sub></sub>, ..., s_(&alpha;<sub>2N</sub>)
(respectively, s<sub>&alpha;<sub>1</sub></sub><sup>star</sup>, ..., s_(&alpha;<sub>2N</sub>)<sup>star</sup>).
</BLOCKQUOTE>
<H5><A NAME = "12235">ReflectionMatrix(R, r) : RootDtm, RngIntElt -&gt; []</A></H5>
<H5>CoreflectionMatrix(R, r) : RootDtm, RngIntElt -&gt; []</H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The matrix giving the action of the rth (co)root of the root datum
R on the (co)root space, i.e. the matrix of s<sub>&alpha;<sub>r</sub></sub>
(respectively, s<sub>&alpha;<sub>r</sub></sub><sup>star</sup>).
</BLOCKQUOTE>
<H5><A NAME = "12236">SimpleReflectionPermutations(R) : RootDtm -&gt; []</A></H5>
<BLOCKQUOTE>
The sequence of permutations giving the action of the simple (co)roots
of the root datum R on the (co)roots.  
This action is the same for roots and coroots.
</BLOCKQUOTE>
<H5><A NAME = "12237">ReflectionPermutations(R) : RootDtm -&gt; []</A></H5>
<BLOCKQUOTE>
The sequence of permutations giving the action of the (co)roots of the 
root datum R on the (co)roots.   
This action is the same for roots and coroots.
</BLOCKQUOTE>
<H5><A NAME = "12238">ReflectionPermutation(R, r) : RootDtm, RngIntElt -&gt; []</A></H5>
<BLOCKQUOTE>
The permutation giving the action of the rth (co)root of the root
datum R on the (co)roots.    
This action is the same for roots and coroots.
</BLOCKQUOTE>
<H5><A NAME = "12239">ReflectionWords(R) : RootDtm -&gt; []</A></H5>
<BLOCKQUOTE>
The sequence of words  in the simple reflections for all
the reflections of the root datum R.
These words are given as sequences of integers.
In other words, if a = [a<sub>1</sub>, ..., a<sub>l</sub>] = ReflectionWords(R)[r],
then s<sub>&alpha;<sub>r</sub></sub> = s_(&alpha;<sub>a<sub>1</sub></sub>) ... s_(&alpha;<sub>a<sub>l</sub></sub>).
</BLOCKQUOTE>
<H5><A NAME = "12240">ReflectionWord(R, r) : RootDtm, RngIntElt -&gt; []</A></H5>
<BLOCKQUOTE>
The word in the simple reflections for the rth
reflection of the root datum R.
The word is given as a sequence of integers.
In other words, if a = [a<sub>1</sub>, ..., a<sub>l</sub>] = ReflectionWord(R, r),
then s<sub>&alpha;<sub>r</sub></sub> = s_(&alpha;<sub>a<sub>1</sub></sub>) ... s_(&alpha;<sub>a<sub>l</sub></sub>).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12241">Example <TT>RootDtm_Action (H103E20)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("A3" : Isogeny := 2);
&gt; mx := ReflectionMatrix(R, 4);
&gt; perm := ReflectionPermutation(R, 4);
&gt; wd := ReflectionWord(R, 4);
&gt; RootPosition(R, Root(R,2) * mx) eq 2^perm;
true
&gt; perm eq &amp;*[ ReflectionPermutation(R, r) : r in wd ];
true
&gt; 
&gt; mx := CoreflectionMatrix(R, 4);
&gt; CorootPosition(R, Coroot(R,2) * mx) eq 2^perm;
true
</PRE>
<HR>
<H4><A NAME = "12242">Operations and Properties for Root and Coroot Indices</A></H4>



<H5><A NAME = "12243">Sum(R, r, s) : RootDtm, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The index of the sum of the rth and sth roots in the root datum R, or
0 if the sum is not a root.  In other words, if
t = hbox(Sum(R,r,s)) &ne;0 then &alpha;<sub>t</sub>=&alpha;<sub>r</sub> + &alpha;<sub>s</sub>.
The condition &alpha;<sub>r</sub>&ne;&#8723;&alpha;<sub>s</sub> must be satisfied.
</BLOCKQUOTE>
<H5><A NAME = "12244">IsPositive(R, r) : RootStr, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, the rth (co)root of the root datum R is a 
positive root.
</BLOCKQUOTE>
<H5><A NAME = "12245">IsNegative(R, r) : RootStr, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, the rth (co)root of the root datum R is a 
negative root.
</BLOCKQUOTE>
<H5><A NAME = "12246">Negative(R, r) : RootStr, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The index of the negative of the rth (co)root of the root datum R.  
In other words, if s = hbox(Negative(R,r)) then &alpha;<sub>s</sub>= - &alpha;<sub>r</sub>.
</BLOCKQUOTE>
<H5><A NAME = "12247">LeftString(R, r, s) : RootDtm, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Indices in the root datum R of the left string through &alpha;<sub>s</sub> in the
direction of &alpha;<sub>r</sub>, i.e. the indices of 
&alpha;<sub>s</sub> - &alpha;<sub>r</sub>, &alpha;<sub>s</sub> - 2&alpha;<sub>r</sub>, ..., &alpha;<sub>s</sub> - p&alpha;<sub>r</sub>.   
In other words, this returns the sequence [r<sub>1</sub>, ..., r<sub>p</sub>] where 
&alpha;<sub>r<sub>i</sub></sub>=&alpha;<sub>s</sub> - i&alpha;<sub>r</sub> and &alpha;<sub>s</sub> - (p + 1)&alpha;<sub>r</sub> is not a root.  
The condition &alpha;<sub>r</sub>&ne;&#8723;&alpha;<sub>s</sub> must be satisfied.
</BLOCKQUOTE>
<H5><A NAME = "12248">RightString(R, r, s) : RootDtm, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Indices in the root datum R of the left string through &alpha;<sub>s</sub> in the
direction of &alpha;<sub>r</sub>, i.e. the indices of 
&alpha;<sub>s</sub> + &alpha;<sub>r</sub>, &alpha;<sub>s</sub> + 2&alpha;<sub>r</sub>, ..., &alpha;<sub>s</sub> + q&alpha;<sub>r</sub>. In other words,
this returns the sequence [r<sub>1</sub>, ..., r<sub>q</sub>] where
&alpha;<sub>r<sub>i</sub></sub>=&alpha;<sub>s</sub> + i&alpha;<sub>r</sub> and &alpha;<sub>s</sub> + (q + 1)&alpha;<sub>r</sub> is not a root.  
The condition &alpha;<sub>r</sub>&ne;&#8723;&alpha;<sub>s</sub> must be satisfied.
</BLOCKQUOTE>
<H5><A NAME = "12249"></A><A NAME = "IntrLeftStringLength">LeftStringLength</A>(R, r, s) : RootDtm, RngIntElt, RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The largest p such that &alpha;<sub>s</sub> - p&alpha;<sub>r</sub> is a root of the root datum R.  
The condition &alpha;<sub>s</sub>&ne;&#8723;&alpha;<sub>r</sub> must be satisfied.  
</BLOCKQUOTE>
<H5><A NAME = "12250"></A><A NAME = "IntrRightStringLength">RightStringLength</A>(R, r, s) : RootDtm, RngIntElt, RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The largest q such that &alpha;<sub>s</sub> + q&alpha;<sub>r</sub> is a root of the root datum R.
The condition &alpha;<sub>s</sub>&ne;&#8723;&alpha;<sub>r</sub> must be satisfied.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12251">Example <TT>RootDtm_RootArithmetic (H103E21)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("G2");
&gt; Sum(R, 1, Negative(R,5));
10
&gt; IsPositive(R, 10);
false
&gt; Negative(R, 10);
4
&gt; P := PositiveRoots(R);
&gt; P[1] - P[5] eq -P[4];
true
</PRE>
<HR>
<H5><A NAME = "12252">RootHeight(R, r) : RootStr, RngIntElt -&gt; RngIntElt</A></H5>
<H5>CorootHeight(R, r) : RootStr, RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The height of the rth (co)root of the root datum 
R, 
i.e. the sum of the coefficients of &alpha;<sub>r</sub> (respectively, &alpha;<sub>r</sub><sup>star</sup>)
with respect to the simple (co)roots.
</BLOCKQUOTE>
<H5><A NAME = "12253">RootNorms(R) : RootStr -&gt; [RngIntElt]</A></H5>
<H5>CorootNorms(R) : RootStr -&gt; [RngIntElt]</H5>
<BLOCKQUOTE>
The sequence of squares of the  lengthsof
the (co)roots of the root datum R.
</BLOCKQUOTE>
<H5><A NAME = "12254">RootNorm(R, r) : RootStr, RngIntElt -&gt; RngIntElt</A></H5>
<H5>CorootNorm(R, r) : RootStr, RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The square of the length of the rth (co)root of the root datum R.
</BLOCKQUOTE>
<H5><A NAME = "12255">IsLongRoot(R, r) : RootStr, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, the rth root of the root datum R is long.
This only makes sense for irreducible crystallographic root data.
Note that for non-reduced root data, the roots which are not indivisible, 
are actually longer than the long ones.
</BLOCKQUOTE>
<H5><A NAME = "12256">IsShortRoot(R, r) : RootStr, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, the rth root of the root datum R is short.
This only makes sense for irreducible crystallographic root data.
</BLOCKQUOTE>
<H5><A NAME = "12257">IsIndivisibleRoot(R, r) : RootStr, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, the rth root of the root system R is indivisible.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12258">Example <TT>RootDtm_RootOperations (H103E22)</TT></A></H3>
Note that the Coxeter form is defined over the rationals.  Since it
is not possible to multiply a lattice element by a rational matrix,
(co)roots must be coerced into a rational vector space first.
<P>
<P>
<PRE>
&gt; R := RootDatum("G2");
&gt; RootHeight(R, 5);
4
&gt; F := CoxeterForm(R);
&gt; v := VectorSpace(Rationals(),2) ! Root(R, 5);
&gt; (v*F, v) eq RootNorm(R, 5);
true
&gt; IsLongRoot(R, 5);
true
&gt; LeftString(R, 1, 5);
[ 4, 3, 2 ]
&gt; roots := Roots(R);
&gt; for i in [1..3] do
&gt;   RootPosition(R, roots[5]-i*roots[1]);
&gt; end for;
4
3
2
</PRE>
<HR>
<H5><A NAME = "12259">RootClosure(R, S) : RootDtm, SetEnum[RngIntElt] -&gt; SetEnum[RngIntElt]</A></H5>
<BLOCKQUOTE>
The closure in the root datum R of the set S of root indices.
That is the indices of every root that can be written as a sum of roots with
indices in S.
</BLOCKQUOTE>
<H5><A NAME = "12260">AdditiveOrder(R) : RootStr -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
An additive orderon the positive roots of the
root datum R,
ie. a sequence containing the numbers 1, ..., N in some order such
that &alpha;<sub>r</sub> + &alpha;<sub>s</sub>=&alpha;<sub>t</sub> implies t is between r and s.  This is
computed using the techniques of <A  HREF = "text1088.htm#bib_Papi">[Pap94]</A>
</BLOCKQUOTE>
<H5><A NAME = "12261">IsAdditiveOrder(R, Q) : RootStr, [RngIntElt] -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, Q gives an additive order on a set of positive roots of
R.  Q must be a sequence of integers in the range [1..N] with no gaps or repeats.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12262">Example <TT>RootDtm_AdditiveOrder (H103E23)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("A5");
&gt; a := AdditiveOrder(R);
&gt; Position(a, 2);
6
&gt; Position(a, 3);
10
&gt; Position(a, Sum(R, 2, 3));
7
</PRE>
<HR>
<H4><A NAME = "12263">Weights</A></H4>



<H5><A NAME = "12264">WeightLattice(R) : RootDtm -&gt; Lat</A></H5>
<BLOCKQUOTE>
The weight lattice &Lambda; of the root datum R.i.e. the &lambda; in Q&Phi;&le;Q tensor X such that
&lt; &lambda;, &alpha;<sup>star</sup> &gt;&isin;Z for every coroot &alpha;<sup>star</sup>.   
</BLOCKQUOTE>
<H5><A NAME = "12265">CoweightLattice(R) : RootDtm -&gt; Lat</A></H5>
<BLOCKQUOTE>
The coweight lattice &Lambda;<sup>star</sup> of the root datum R,i.e. the &lambda;<sup>star</sup> in Q&Phi;<sup>star</sup>&le;Q tensor Y such that
&lt; &alpha;, &lambda;<sup>star</sup> &gt;&isin;Z for every root &alpha;.   
</BLOCKQUOTE>
<H5><A NAME = "12266">FundamentalWeights(R) : RootDtm -&gt; Mtrx</A></H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The fundamental weights&lambda;<sub>1</sub>, ..., &lambda;<sub>n</sub> of the root datum R given as the rows of a matrix.  
This is the basis of the weight lattice &Lambda; dual to the simple coroots, 
i.e. &lt; &lambda;<sub>i</sub>, &alpha;<sub>j</sub><sup>star</sup> &gt;=&delta;<sub>ij</sub>. 
</BLOCKQUOTE>
<H5><A NAME = "12267">FundamentalCoweights(R) : RootDtm -&gt; Mtrx</A></H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The fundamental coweights&lambda;<sub>1</sub><sup>star</sup>, ..., &lambda;<sub>n</sub><sup>star</sup> of the root datum R given as the rows 
of a matrix.  
This is the basis of the coweight lattice &Lambda;<sup>star</sup> dual to the simple roots, 
i.e. &lt; &alpha;<sub>i</sub>, &lambda;<sub>j</sub><sup>star</sup> &gt;=&delta;<sub>ij</sub>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12268">Example <TT>RootDtm_Weights (H103E24)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("E6");
&gt; WeightLattice(R);
Lattice of rank 6 and degree 6
Basis:
(4  3  5  6  4  2)
(3  6  6  9  6  3)
(5  6 10 12  8  4)
(6  9 12 18 12  6)
(4  6  8 12 10  5)
(2  3  4  6  5  4)
Basis Denominator: 3
&gt; FundamentalWeights(R);
[ 4/3    1  5/3    2  4/3  2/3]
[   1    2    2    3    2    1]
[ 5/3    2 10/3    4  8/3  4/3]
[   2    3    4    6    4    2]
[ 4/3    2  8/3    4 10/3  5/3]
[ 2/3    1  4/3    2  5/3  4/3]
</PRE>
<HR>
<H5><A NAME = "12269">IsDominant(R, v) : RootDtm, . -&gt; ModTupFldElt, GrpFPCoxElt</A></H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
Returns <TT>true</TT> if, and only if, v is a dominant weight for the root datum
R, ie, a nonnegative integral linear combination of the fundamental weights.
</BLOCKQUOTE>
<H5><A NAME = "12270">DominantWeight(R, v) : RootDtm, . -&gt; ModTupFldElt, GrpFPCoxElt</A></H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The unique dominant weight in the same W-orbit as the weight v, where W is the Weyl group of
the root datum R.
The second value returned is a Weyl group element taking v to the dominant weight.
The weight v can be given either as a vector or as a sequence representing
the vector and is coerced into the weight lattice first.
</BLOCKQUOTE>
<H5><A NAME = "12271">WeightOrbit(R, v) : RootDtm, . -&gt; @ ModTupFldElt @, [GrpFPCoxElt]</A></H5>

<PRE>    Basis: MonStgElt                    Default: "Standard"</PRE>
<BLOCKQUOTE>
The W-orbit of the weight v as an indexed set, where W is the Weyl group of the root datum R.
The first element in the orbit is always dominant.
The second value returned is a sequence of Weyl group elements taking the dominant weight
to the corresponding element of the orbit.
The weight v can be given either as a vector or as a sequence representing
the vector and is coerced into the weight lattice first.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12272">Example <TT>RootDtm_DominantWeights (H103E25)</TT></A></H3>
<P>
<P>
<PRE>
&gt; R := RootDatum("B3");
&gt; DominantWeight(R, [1,-1,0] : Basis:="Weight");  
(1 0 0)
[ 2, 3, 2, 1 ]
&gt; #WeightOrbit(R, [1,-1,0] : Basis:="Weight");   
6
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1095.htm">[Next]</A><A  HREF = "text1093.htm">[Prev]</A> <A  HREF = "text1095.htm">[Right]</A> <A  HREF = "text1093.htm">[Left]</A> <A  HREF = "text1089.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>