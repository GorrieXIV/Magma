<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction from Groups,  Codes and Designs</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1792.htm">[Next]</A><A  HREF = "text1790.htm">[Prev]</A> <A  HREF = "text1792.htm">[Right]</A> <A  HREF = "text1790.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19804">Construction from Groups,  Codes and Designs</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1791.htm#19805">Graphs Constructed from Groups</A>
<LI> <A  HREF = "text1791.htm#19812">Graphs Constructed from Designs</A>
<LI> <A  HREF = "text1791.htm#19820">Miscellaneous Graph  Constructions</A>
</UL>
<H4><A NAME = "19805">Graphs Constructed from Groups</A></H4>



<H5><A NAME = "19806">CayleyGraph(A : parameter) : Grp -&gt; Grph, GrphVertSet, GrphEdgeSet</A></H5>

<PRE>    Labelled: BoolElt                   Default: <TT>true</TT></PRE>

<PRE>    Directed: BoolElt                   Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Given a finite group A defined on generating set X, construct the
Cayley graph C of A relative to the generating set X. This graph
is defined as follows: The vertices correspond to the elements of A
and two vertices u, v are adjacent if and only if there exists an
element x in X such that u * x = v.
<P>
The optional parameter <TT>Labelled</TT> (<TT>Labelled := true</TT> by default)
can be set to <TT>false</TT> to prevent the graph being labelled.  If this is not
done, then the vertices of C will be labelled with the appropriate
elements of A and the (directed) edge from u to v will be labelled
with the appropriate element x as defined above.
<P>
The parameter <TT>Directed</TT> (<TT>Directed := true</TT> by default) may be 
used to return the Cayley graph of G as an undirected graph
</BLOCKQUOTE>
<H5><A NAME = "19807">SchreierGraph(A, B) : Grp, Grp -&gt; Grph, GrphVertSet, GrphEdgeSet</A></H5>

<PRE>    Labelled: BoolElt                   Default: <TT>true</TT></PRE>

<PRE>    Directed: BoolElt                   Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Given a finite group A defined on the generating set X and a
subgroup B of A, construct the Schreier coset graph S for A
over B, relative to X. The graph S is defined as follows:
The vertices correspond to the cosets of B in A, and two vertices
u, v are adjacent in S if and only if there exists an element x
in X such that u * x = v.
<P>
The graph is available in both a labelled and an unlabelled version and
directed and undirected versions. These versions are controlled by the
parameters <TT>Labelled</TT> and <TT>Directed</TT>, which are both <TT>true</TT> by
default.
</BLOCKQUOTE>
<H5><A NAME = "19808">OrbitalGraph(P, u, T) : GrpPerm, RngIntElt, { RngIntElt } -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Let P be a transitive permutation group acting on the set
&Omega; = {1, ..., n}. Let u be an element of &Omega; and let
T = {t<sub>1</sub>, ..., t<sub>r</sub>} be a subset of &Omega;. This function
constructs the underlying graph G of the digraph corresponding
to the union of P-orbits containing the pairs
(u, t<sub>1</sub>), ..., (u, t<sub>r</sub>). Thus, if T defines a self-paired
orbit &Delta; of the stabilizer in P of the point u, this
function constructs the orbital graph associated with &Delta;.
</BLOCKQUOTE>
<H5><A NAME = "19809">ClosureGraph(P, G) : GrpPerm, GrphUnd -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Let P be a permutation group acting on the set
&Omega; = {1, ..., n}. Let G be a graph (digraph) with vertices
v<sub>1</sub>, ..., v<sub>n</sub>. This function adds the minimum number of edges to
G so as to produce a graph (digraph) H which is left invariant by
the group P.
</BLOCKQUOTE>
<H5><A NAME = "19810">PaleyGraph(q) : RngIntElt -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
The Paley graph of GF(q) where q must be a prime power equivalent to 1
mod 4. Vertices are in bijection with elements of GF(q) and distinct
elements are adjacent when their difference is a square in the field.
</BLOCKQUOTE>
<H5><A NAME = "19811">PaleyTournament(q) : RngIntElt -&gt; GrphDir</A></H5>
<BLOCKQUOTE>
The Paley tournament of GF(q) where q must be a prime power equivalent to 3
mod 4. Vertices are in bijection with elements of GF(q) and there is an
edge from u to v when u &ne;v and v - u is a square in the field.
</BLOCKQUOTE>
<H4><A NAME = "19812">Graphs Constructed from Designs</A></H4>



<H5><A NAME = "19813">IncidenceGraph(D) : Inc -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Given an incidence structure D = (X, B),
construct the incidence graph G of D.
The vertices of G is X &cup;B. The adjacency rules are as follows:
No two vertices of X are adjacent; no two vertices of B are
adjacent; a vertex x &isin;X is adjacent to a vertex b &isin;B
if and only if x is in b.
</BLOCKQUOTE>
<H5><A NAME = "19814">PointGraph(D) : Inc -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Given an incidence structure D = (X, B),
construct the point graph G of D. The
vertex-set of G is X. Vertices x &isin;X, y &isin;X are adjacent
in G if there is a block b&isin;B such that x &isin;b and y &isin;b.
</BLOCKQUOTE>
<H5><A NAME = "19815">BlockGraph(D) : Inc -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
The block graph of the incidence structure D; i.e. the point graph of the dual of D.
</BLOCKQUOTE>
<H5><A NAME = "19816">IncidenceGraph(P) : Plane -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Given a plane P with point-set V and line-set L, construct the
incidence graph G of P.
The vertex-set of G is V &cup;L. The adjacency rules are as follows:
No two vertices of V are adjacent; no two vertices of L are
adjacent; a vertex v &isin;V is adjacent to a vertex a &isin;L
if and only if v lies on a.
</BLOCKQUOTE>
<H5><A NAME = "19817">PointGraph(P) : Plane -&gt; GrphUnd;</A></H5>
<BLOCKQUOTE>
Given a plane P with point-set V and line-set L, construct the
point graph G of P.  The vertex-set of G is V.  Vertices
u, v &isin;V are adjacent in G iff there is a line in L that contains
them both.
</BLOCKQUOTE>
<H5><A NAME = "19818">LineGraph(P) : Plane -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Given a plane P with point-set V and line-set L, construct the
point graph G of P.  The vertex-set of G is L.  Lines
a, b &isin;L are adjacent in G iff there is a vertex in V that lies on
them both.
</BLOCKQUOTE>
<H5><A NAME = "19819">HadamardGraph(H : parameters) : Mtrx -&gt; GrphUnd</A></H5>

<PRE>    Labels: BoolElt                     Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The graph of the &#8723; 1 matrix H as described in
Brendan D. McKay's note "Hadamard equivalence via graph isomorphism"
(with self-loops omitted). The parameter <TT>Labels</TT> is set to
<TT>false</TT> by default, but when set to <TT>true</TT>, the vertices associated with
rows are labelled "row" and the others "col". Those labelled "row" are 
those given loops in McKay's paper.
</BLOCKQUOTE>
<H4><A NAME = "19820">Miscellaneous Graph  Constructions</A></H4>



<H5><A NAME = "19821">Converse(G) : GrphDir -&gt; GrphDir</A></H5>
<BLOCKQUOTE>
Returns the converse H of the directed graph G: if [u, v] is an edge of G then
[v, u] is an edge of H.
</BLOCKQUOTE>
<H5><A NAME = "19822">OddGraph(n) : RngIntElt -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
The nth odd graph. Vertices are (n - 1)--subsets of a (2n - 1)-set with
vertices adjacent if and only if the (n - 1)--subsets are disjoint.
</BLOCKQUOTE>
<H5><A NAME = "19823">TriangularGraph(n) : RngIntElt -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
The nth triangular graph. Vertices are 2-subsets of a n-set with
vertices adjacent if and only if the 2-subsets are unequal and not disjoint.
</BLOCKQUOTE>
<H5><A NAME = "19824">SquareLatticeGraph(n) : RngIntElt -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
The nth square lattice graph. This is the cartesian product of
the nth complete graph with itself.
</BLOCKQUOTE>
<H5><A NAME = "19825">ClebschGraph() : -&gt; GrphUnd</A></H5>
<H5>ShrikhandeGraph() : -&gt; GrphUnd</H5>
<H5>GewirtzGraph() : -&gt; GrphUnd</H5>
<BLOCKQUOTE>
Return the named graph.
</BLOCKQUOTE>
<H5><A NAME = "19826">ChangGraphs() : -&gt; [GrpUnd, GrpUnd, GrpUnd]</A></H5>
<BLOCKQUOTE>
Return a sequence of the three Chang graphs.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1792.htm">[Next]</A><A  HREF = "text1790.htm">[Prev]</A> <A  HREF = "text1792.htm">[Right]</A> <A  HREF = "text1790.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>