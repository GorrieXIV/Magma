<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Codeword Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1870.htm">[Next]</A><A  HREF = "text1868.htm">[Prev]</A> <A  HREF = "text1870.htm">[Right]</A> <A  HREF = "text1868.htm">[Left]</A> <A  HREF = "text1862.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20801">Codeword Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1869.htm#20802">Construction</A>
<LI> <A  HREF = "text1869.htm#20807">Operations</A>
<LI> <A  HREF = "text1869.htm#20822">Accessing Components of a Codeword</A>
</UL>
<H4><A NAME = "20802">Construction</A></H4>



<H5><A NAME = "20803">C ! [a<sub>1</sub>, ..., a<sub>n</sub>] : Code, [ RngElt ] -&gt; ModTupRngElt</A></H5>
<H5>elt&lt; C | a<sub>1</sub>, ..., a<sub>n</sub>&gt; : Code, List -&gt; ModTupRngElt</H5>
<BLOCKQUOTE>
Given a code C which is defined as a subset of the
R-space R<sup>(n)</sup>, and elements a<sub>1</sub>, ..., a<sub>n</sub> belonging 
to R, construct the codeword (a<sub>1</sub>, ..., a<sub>n</sub>) of C.  
It is checked that the vector (a<sub>1</sub>, ..., a<sub>n</sub>) is an element of C.
</BLOCKQUOTE>
<H5><A NAME = "20804">C ! u : Code, ModTupRngElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Given a code C which is defined as a subset of the R-space
V = R<sup>(n)</sup>, and an element u belonging to V,
create the codeword of C corresponding to u. The function
will fail if u does not belong to C.
</BLOCKQUOTE>
<H5><A NAME = "20805">C ! 0 : Code, RngIntElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
The zero word of the code C.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20806">Example <TT>CodeRng_code-elts (H161E12)</TT></A></H3>
We create some elements of a code over a finite ring. 
<P>
<P>
<PRE>
&gt; R&lt;w&gt; := GR(16,2);
&gt; P&lt;x&gt; := PolynomialRing(R);
&gt; L := CyclotomicFactors(R, 7);
&gt; C := CyclicCode(7, L[2]);
&gt; C ! [1, 2*w, 0, w+3, 7*w, 12*w+3, w+3];
(       1      2*w        0    w + 3      7*w 12*w + 3    w + 3)
&gt; elt&lt; C | 0, 3, 0, 2*w + 5, 6*w + 9, 4*w + 5, 14*w + 14 &gt;;
(        0         3         0   2*w + 5   6*w + 9   4*w + 5 14*w + 14)
</PRE>
If the given vector does not lie in the given code then an error 
will result.
<P>
<P>
<PRE>
&gt; C ! [0,0,0,0,0,0,1];

&gt;&gt; C ! [0,0,0,0,0,0,1];
     ^
Runtime error in '!': Result is not in the given structure
&gt; elt&lt; C | 1, 0, 1, 0, 1, 0, 1&gt;;

&gt;&gt; elt&lt; C | 1, 0, 1, 0, 1, 0, 1&gt;;
      ^
Runtime error in elt&lt; ... &gt;: Result is not in the lhs of the constructor
</PRE>
<HR>
<H4><A NAME = "20807">Operations</A></H4>



<H5><A NAME = "20808">u + v : ModTupRngElt, ModTupRngElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Sum of the codewords u and v, where u and 
v belong to the same linear code C.
</BLOCKQUOTE>
<H5><A NAME = "20809">- u : ModTupRngElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Additive inverse of the codeword u belonging
to the linear code C.
</BLOCKQUOTE>
<H5><A NAME = "20810">u - v : ModTupRngElt, ModTupRngElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Difference of the codewords u and v, where 
u and v belong to the same linear code C.
</BLOCKQUOTE>
<H5><A NAME = "20811">a * u : RngElt, ModTupRngElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Given an element a belonging to the ring R, 
and a codeword u belonging to the linear code
C, return the codeword a * u.
</BLOCKQUOTE>
<H5><A NAME = "20812">Weight(v) : ModTupRngElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Hamming weight of the codeword v, i.e., the number of non-zero
components of v.
</BLOCKQUOTE>
<H5><A NAME = "20813">Distance(u, v) : ModTupRngElt, ModTupRngElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Hamming distance between the codewords u and v,
where u and v belong to the same code C.
</BLOCKQUOTE>
<H5><A NAME = "20814">Support(w) : ModTupRngElt -&gt; { RngIntElt }</A></H5>
<BLOCKQUOTE>
Given a word w belonging to the length n code C, return its
support as a subset of the integer set { 1 .. n }.  The support of w
consists of the coordinates at which w has non-zero entries.
</BLOCKQUOTE>
<H5><A NAME = "20815">(u, v) : ModTupRngElt, ModTupRngElt -&gt; RngElt</A></H5>
<H5>InnerProduct(u, v) : ModTupRngElt, ModTupRngElt -&gt; RngElt</H5>
<BLOCKQUOTE>
Inner product of the vectors u and v with respect to 
the Euclidean norm, where u and v belong to the parent 
vector space of the code C.
</BLOCKQUOTE>
<H5><A NAME = "20816">Coordinates(C, u) : Code, ModTupRngElt -&gt; [ RngFinElt ]</A></H5>
<BLOCKQUOTE>
Given a length n linear code C and a codeword u of C return the
coordinates of u with respect to C.  The coordinates of u are returned
as a sequence Q = [a<sub>1</sub>, ..., a<sub>k</sub>] of elements from the alphabet of C
so that u = a<sub>1</sub> * C.1 + ... + a<sub>k</sub> * C.k.
</BLOCKQUOTE>
<H5><A NAME = "20817">Normalize(u) : ModTupRngElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Given an element u of a code defined over the ring R,
return the normalization of u, which
is the unique vector v such that v = a.u for some scalar a&isin;R
such that the first non-zero entry of v is the canonical associate in R
of the first non-zero entry of u (v is zero if u is zero).
</BLOCKQUOTE>
<H5><A NAME = "20818">Rotate(u, k) : ModTupRngElt, RngIntElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Given a vector u, return the vector obtained from u by
cyclically shifting its components to the right by k coordinate 
positions.
</BLOCKQUOTE>
<H5><A NAME = "20819">Rotate(~u, k) : ModTupRngElt, RngIntElt -&gt;</A></H5>
<BLOCKQUOTE>
Given a vector u, destructively rotate u by k coordinate positions.
</BLOCKQUOTE>
<H5><A NAME = "20820">Parent(w): ModTupRngElt -&gt; ModTupRng</A></H5>
<BLOCKQUOTE>
Given a word w belonging to the code C, return the
ambient space V of C.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20821">Example <TT>CodeRng_codeword-ops (H161E13)</TT></A></H3>
Given a code over a finite ring, we explore various
operations on its code words.
<P>
<P>
<P>
<PRE>
&gt; R&lt;w&gt; := GR(4, 4);
&gt; P&lt;x&gt; := PolynomialRing(R);
&gt; g := x + 2*w^3 + 3*w^2 + w + 2;
&gt; C := CyclicCode(3, g);
&gt; C;
(3, 1048576) Cyclic Code over GaloisRing(2, 2, 4)
Generator matrix:
[          1           0     w^2 + w]
[          0           1 w^2 + w + 1]
[          0           0           2]
&gt; u := C.1;
&gt; v := C.2;
&gt; u;
(      1       0 w^2 + w)
&gt; v;
(          0           1 w^2 + w + 1)
&gt; u + v;
(              1               1 2*w^2 + 2*w + 1)
&gt; 2*u;
(          2           0 2*w^2 + 2*w)
&gt; 4*u;
(0 0 0)
&gt; Weight(u);
2
&gt; Support(u);
{ 1, 3 }
</PRE>
<HR>
<H4><A NAME = "20822">Accessing Components of a Codeword</A></H4>



<H5><A NAME = "20823">u[i] : ModTupRngElt, RngIntElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a codeword u belonging to the code C defined 
over the ring R, return the i-th component of u 
(as an element of R).
</BLOCKQUOTE>
<H5><A NAME = "20824">u[i] := x;</A></H5>
<BLOCKQUOTE>
Given an element u belonging to a subcode C of the full R-space
V = R<sup>n</sup>, a positive integer i, 1 &le;i&le;n, and an 
element x of R, this function returns a vector in V
which is u with its i-th component redefined to be x.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1870.htm">[Next]</A><A  HREF = "text1868.htm">[Prev]</A> <A  HREF = "text1870.htm">[Right]</A> <A  HREF = "text1868.htm">[Left]</A> <A  HREF = "text1862.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>