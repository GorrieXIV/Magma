<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>The Collineation Group of a Plane</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1706.htm">[Next]</A><A  HREF = "text1704.htm">[Prev]</A> <A  HREF = "text1706.htm">[Right]</A> <A  HREF = "text1704.htm">[Left]</A> <A  HREF = "text1690.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "18844">The Collineation Group of a Plane</A></H3>

<P>
<P>
<P>
The automorphism group (or collineation group) A of a plane P is always
presented as a permutation group G acting on the standard support
{1, ..v}, where v is the number of points of P. 
The reasons for this include the fact that
if the group is represented as acting on a set of objects 
relating to the plane, printed permutations are often 
unreadable.
<P>
So the collineation group G of P does not act directly on P.
Instead, G--sets are used to transfer the action of G to various
sets associated with P. The two most important G--sets, 
corresponding to action of G on the point set and on the line set, 
are returned by each of the functions provided for constructing
the collineation group or some specified subgroup of it.
<P>
In some circumstances, rather than viewing collineations as
group elements, it is desirable to view them is as mappings 
of P into itself. Associated with each incidence structure
is a mapping structure, Aut(P), which denotes the set of
collineations of P. Note that Aut(P) is the <I>parent</I> 
of the collineations of G so that the function <TT>Aut(P)</TT> 
simply creates a shell structure rather than the actual 
collineation group of P. A transfer map is provided to convert 
a permutation of the collineation group G into a mapping 
belonging to Aut(P).



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1705.htm#18845">The Collineation Group Function</A>
<LI> <A  HREF = "text1705.htm#18850">General Action of Collineations</A>
<LI> <A  HREF = "text1705.htm#18863">Central Collineations</A>
<LI> <A  HREF = "text1705.htm#18869">Transitivity Properties</A>
</UL>
<H4><A NAME = "18845">The Collineation Group Function</A></H4>



<H5><A NAME = "18846">CollineationGroup(P) : Plane -&gt; GrpPerm, GSet, GSet, PowMap, Map</A></H5>
<H5>AutomorphismGroup(P) : Plane -&gt; GrpPerm, GSet, GSet, PowMap, Map</H5>
<H5>PointGroup(P) : Plane -&gt; GrpPerm, GSet, GSet, PowMap, Map</H5>
<BLOCKQUOTE>
Construct the collineation group G of the plane P.  The group G
is returned as a permutation group on the standard support
{ 1 ... v }, where v is the number of points of P.
The function also returns:
a G--set Y being the point set of P acted on by G;
a G--set W being the line set of P acted on by G;
a power structure S; a transfer map t.  
Given a permutation g from G, one can create a map f = t(g)
which represents the automorphism g as a mapping in S from
P to P (which maps both point sets and line sets).
The G--sets Y and W should be used if one wishes to compute
stabilizers or similar such subgroups of G so that the appropriate
action is used.
</BLOCKQUOTE>
<H5><A NAME = "18847">LineGroup(P) : Plane -&gt; GrpPerm, PowMap, Map</A></H5>
<BLOCKQUOTE>
Construct the collineation group G of the plane P in its action on the
lines of P.
The group G is returned as a permutation group on the standard support
{ 1 ... l }, where l is the number of lines of P.
A power structure S and transfer map t are also returned, so that, given
a permutation g from G, one can create a map f = t(g) which represents
the automorphism g as a mapping in S from L to L, where L
is the line set of P.
</BLOCKQUOTE>
<H5><A NAME = "18848">CollineationGroupStabilizer(P, k) : Plane, RngIntElt -&gt; GrpPerm, GSet, GSet, PowMap, Map</A></H5>
<BLOCKQUOTE>
A subgroup G of the collineation group of the plane P which 
stabilizes the first k base points, together with the points G--set, 
the lines G--set, the power structure A of all automorphisms of P, and
the transfer map t from G into A.
</BLOCKQUOTE>
<H5><A NAME = "18849">CollineationSubgroup(P) : Plane -&gt; GrpPerm, GSet, GSet, PowMap, Map</A></H5>
<BLOCKQUOTE>
A subgroup G of the collineation group of the plane P generated by 
one element, together with the points G--set, the lines G--set, the 
power structure A of all automorphisms of P, and the transfer map t 
from G into A.
</BLOCKQUOTE>
<H4><A NAME = "18850">General Action of Collineations</A></H4>

<P>
<P>
<P>
<P>
The collineation group G of a plane P is given in its action 
on the standard support. This support may be regarded as the indices
of the points of P. The 
action of G on P is obtained using the G--set mechanism. The 
two basic G--sets associated with P correspond to the action 
of G on the set of points V and the set of lines L of P. 
These two G--sets are given as return values of the function 
<TT>AutomorphismGroup</TT>. Additional 
G--sets associated with P may be built using the G--set 
constructors. Given a G--set Y for G, the action of G 
on Y may be studied using the permutation group functions 
that allow a G--set as an argument. In this section, only a 
few of the available functions are described: see the chapter 
on permutation groups for a complete list.
<P>
The action of the collineation group on the plane may also be
obtained using the ^  operator.


<H5><A NAME = "18851">y ^ g : Elt, GrpPermElt -&gt; Elt</A></H5>
<BLOCKQUOTE>
Let G be a subgroup of the collineation group for the plane
P and suppose g&isin;G. 
Given an element y that is either a point or line of P, 
return the image of y under g.
</BLOCKQUOTE>
<H5><A NAME = "18852">y ^ G : Elt, GrpPerm -&gt; GSet</A></H5>
<BLOCKQUOTE>
Let G be a subgroup of the collineation group for the plane P. 
Given an element y that is either a point or line of P, 
return the orbit of y under G.
</BLOCKQUOTE>
<H5><A NAME = "18853">Image(g, Y, y) : GrpPermElt, GSet, Elt -&gt; Elt</A></H5>
<BLOCKQUOTE>
Let G be a subgroup of the collineation group for the plane
P and let Y be a G--set for G. Given an element y 
belonging either to Y or to a G--set derived from Y, find 
the image of y under G. 
</BLOCKQUOTE>
<H5><A NAME = "18854">Orbit(G, Y, y) : GrpPerm, GSet, Elt -&gt; GSet</A></H5>
<BLOCKQUOTE>
Let G be a subgroup of the collineation group for the plane
P and let Y be a G--set for G. Given an element y 
belonging either to Y or to a G--set derived from Y, construct 
the orbit of y under G. 
</BLOCKQUOTE>
<H5><A NAME = "18855">Orbits(G, Y) : GrpPerm, GSet -&gt; [ GSet ]</A></H5>
<BLOCKQUOTE>
Let G be a subgroup of the collineation group for the plane
P and let Y be a G--set for G. This function
constructs the orbits of the action of G on Y.
</BLOCKQUOTE>
<H5><A NAME = "18856">Stabilizer(G, Y, y) : GrpPerm, GSet, Elt -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Let G be a subgroup of the collineation group for the plane
P and let Y be a G--set for G. Given an element y 
belonging either to Y or to a G--set derived from Y, construct 
the stabilizer of y in G. 
</BLOCKQUOTE>
<H5><A NAME = "18857">Action(G, Y) : GrpPerm, GSet -&gt; Hom(Grp), GrpPerm, GrpPerm</A></H5>
<BLOCKQUOTE>
Given a subgroup G of the collineation group of the plane 
P, and a G--set Y for G, construct the homomorphism 
&phi;: G -&gt; L, where the permutation group L gives the 
action of G on the set Y.  The function returns:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The natural homomorphism &phi;: G -&gt; L;
<DT>(b)</DT><DD>The induced group L;
<DT>(c)</DT><DD>The kernel of the action (a subgroup of G).</DL>
</BLOCKQUOTE>
<H5><A NAME = "18858">ActionImage(G, Y) : GrpPerm, GSet -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a subgroup G of the collineation group of the plane 
P, and a G--set Y for G, construct the 
permutation group L giving the action of G on the set Y.
</BLOCKQUOTE>
<H5><A NAME = "18859">ActionKernel(G, Y) : GrpPerm, GSet -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a subgroup G of the collineation group of the plane 
P, and a G--set Y for G, construct the kernel
of the action of G on the set Y.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "18860">Example <TT>Plane_CollineationGSet (H147E12)</TT></A></H3>
We illustrate the use of the G--sets returned by the
<TT>CollineationGroup</TT> function.
<P>
<P>
<PRE>
&gt; P := FiniteProjectivePlane(3);
&gt; G, Y, W := CollineationGroup(P);
</PRE>
Compute the stabilizer of the first point of P:
<P>
<P>
<PRE>
&gt; H := Stabilizer(G, Y, Points(P)[1]);
&gt; H;
Permutation group H acting on a set of cardinality 13
    (3, 9)(5, 7)(6, 11)(8, 12)
    (2, 8, 12)(3, 9)(4, 6, 7, 10, 5, 11)
    (2, 9)(3, 4)(5, 8)(10, 13)
    (2, 8)(3, 9)(4, 5)(6, 10)
    (2, 3)(4, 13)(6, 8)(9, 10)
    (2, 13, 8)(3, 6, 4)(5, 10, 9)
    (2, 3)(4, 9)(7, 12)(10, 13)
&gt; H eq CollineationGroupStabilizer(P, 1);
true
&gt; lines := {m : m in Lines(P) | Points(P)[1] in m};
&gt; l := Random(lines);
&gt; l ^ H;
GSet{ 
  &lt; 0 : 1 : 0 &gt;,
  &lt; 0 : 0 : 1 &gt;,
  &lt; 0 : 1 : 2 &gt;,
  &lt; 0 : 1 : 1 &gt;
}
</PRE>
Compute the stabilizer of the first line of P:
<P>
<P>
<PRE>
&gt; Stabilizer(G, W, Lines(P)[1]); 
Permutation group acting on a set of cardinality 13
    (1, 8, 12, 4, 7, 9)(2, 3, 5)(6, 13)
    (3, 5, 11)(6, 7, 9)(8, 12, 13)
    (4, 10)(5, 11)(6, 7)(8, 12)
    (1, 10, 6, 7)(2, 11)(3, 5)(4, 13, 9, 12)
    (5, 11)(6, 12)(7, 8)(9, 13)
    (1, 10)(3, 5)(6, 7)(12, 13)
    (1, 4, 10)(3, 11)(6, 13, 9, 8, 7, 12)
</PRE>
<HR>
<H3><A NAME = "18861">Example <TT>Plane_Collineation (H147E13)</TT></A></H3>
The following function <TT>Bundle</TT> returns a projective bundle in
PG<sub>2</sub>(q).
<P>
<P>
<PRE>
&gt; Bundle := function(q)
&gt;     K&lt;w&gt; := GF(q^3);
&gt;     P, V, L := FiniteProjectivePlane(q^3);
&gt;     G, Y := CollineationGroup(P);
&gt;     S := Support(P);  // normalized vectors
&gt;     sig := sub&lt; G |
&gt;               [Index(P, V ! [S[i][1], S[i][2]^q, S[i][3]^q]) : i in [1..#V]]&gt;;
&gt;                       // group of planar collineations of order 3
&gt;     p := V ! [1, w^2, w];
&gt;     T := Orbit(sig, Y, p);
&gt;     e2 := V![0, 1, 0];
&gt;     e3 := V![0, 0, 1];
&gt;     S := Points(SubfieldSubplane(P, GF(q)));
&gt;     c23 := Conic(P, T join {e2, e3}) meet S;
&gt;     e1 := Rep(S diff c23);
&gt;     c12 := (Conic(P, T join {e1, e2}) meet S) diff { e1 };
&gt;     c13 := (Conic(P, T join {e1, e3}) meet S) diff { e1 };
&gt;     bundle := [ Conic(P, T join {e1, e}) meet S : e in c23 ] cat
&gt;               [ Conic(P, T join {v1, v2}) meet S : v2 in c13, v1 in c12 ];
&gt;     return FiniteProjectivePlane&lt; S | bundle &gt;;
&gt; 
&gt; end function;
&gt;                 
&gt; PB := Bundle(3);
&gt; PB;
Projective Plane of order 3
</PRE>
<HR>
<H3><A NAME = "18862">Example <TT>Plane_baer (H147E14)</TT></A></H3>
The function <TT>BaerDerivation</TT> below uses a Baer subplane to construct
an affine plane.
<P>
<P>
<PRE>
&gt; BaerDerivation := function(q)
&gt; //---------------------------
&gt; // Construct an affine plane by the technique of derivation using 
&gt; // Baer subplanes
&gt;
&gt;    Fq2&lt; w &gt; := FiniteField(q^2);
&gt;    V := VectorSpace(Fq2, 3);
&gt;    Plane, Pts, Lns := FiniteProjectivePlane(V);
&gt;    G, Y := CollineationGroup(Plane);
</PRE>
<P>
Construct a Baer subplane:
<P>
<P>
<P>
<PRE>
&gt;    Subplane := SubfieldSubplane(Plane, GF(q));
</PRE>
<P>
The Baer segment consists of those points of the Baer subplane that 
   lie on the line at infinity. Take the line x = 0 as the line at 
   infinity.
<P>
<P>
<P>
<PRE>
&gt;    LineInf := Lns![1, 0, 0];
&gt; 
&gt;    BaerSeg := Points(Subplane) meet LineInf;
</PRE>
<P>
We now find the subgroup of the collineation group that fixes the Baer
   segment. The translates of the Baer subplane under this subgroup will
   give us those Baer subplanes that contain the set <TT>BaerSeg</TT>.  We use the
   G--set <TT>Y</TT> to specify the action of <TT>G</TT> on the points of <TT>Plane</TT>.
<P>
<P>
<P>
<PRE>
&gt;    StabSeg := Stabilizer(G, Y, BaerSeg);
</PRE>
<P>
   Rather than computing the translates of the entire Baer subplane, we
   compute the translates of <TT>Subplane - BaerSeg</TT> so that we get exactly 
   those sets which become new affine lines.
<P>
<P>
<P>
<PRE>
&gt;    BaerLines := Orbit(StabSeg, Y, Points(Subplane) diff BaerSeg);
</PRE>
<P>
   We complete the new plane by taking those lines of PG(2, q<sup>2</sup>) which
   intersect the line at infinity at points other than those in the Baer
   segment. Upon removing the intersection point with <TT>LineInf</TT>, each such
   line becomes a line of the new affine plane.
<P>
<P>
<P>
<PRE>
&gt;    AffLines := BaerLines join { Set(l) diff LineInf : l in Lns | 
&gt;                                (BaerSeg meet l) eq  };

&gt;    return FiniteAffinePlane&lt; SetToIndexedSet(&amp;join(AffLines)) | Setseq(AffLines) 
&gt; : Check := false &gt;;

&gt; end function; /*BaerDerivation*/

</PRE>
<HR>
<H4><A NAME = "18863">Central Collineations</A></H4>

<P>
<P>
<P>
Let p be a point and l a line of a projective plane P.
A (p, l)--<I>central collineation</I> is a collineation &alpha;
of P which fixes l pointwise and p linewise. The line l
is called the <I>axis</I> of &alpha; and the point p is called
the <I>centre</I> of &alpha;.


<H5><A NAME = "18864">CentralCollineationGroup(P, p, l) : Plane, PlanePt, PlaneLn -&gt; GrpPerm, PowMap, Map</A></H5>
<BLOCKQUOTE>
The group G of (p, l)--central collineations of a projective plane P.
A power structure S and transfer map t are also returned, so that, given
a permutation g from G, one can create a map f = t(g) which represents
the permutation g as a mapping in S from P to P.
(which maps both point sets and line sets).
</BLOCKQUOTE>
<H5><A NAME = "18865">CentralCollineationGroup(P, p) : Plane, PlanePt -&gt; GrpPerm, PowMap, Map</A></H5>
<BLOCKQUOTE>
The group of central collineations with centre p of a projective plane P.
A power structure S and transfer map t are also returned, so that, given
a permutation g from G, one can create a map f = t(g) which represents
the permutation g as a mapping in S from P to P.
(which maps both point sets and line sets).
</BLOCKQUOTE>
<H5><A NAME = "18866">CentralCollineationGroup(P, l) : Plane, PlaneLn -&gt; GrpPerm, PowMap, Map</A></H5>
<BLOCKQUOTE>
The group of central collineations with axis l of a projective plane P.
A power structure S and transfer map t are also returned, so that, given
a permutation g from G, one can create a map f = t(g) which represents
the permutation g as a mapping in S from P to P.
(which maps both point sets and line sets).
</BLOCKQUOTE>
<H5><A NAME = "18867">IsCentralCollineation(P, g) : Plane, GrpPermElt -&gt; BoolElt, PlanePt, PlaneLn</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> iff the collineation g of the projective plane P is a central
collineation; if <TT>true</TT>, also returns the centre and axis of g.  The
support of the parent of g must be the point set of P or the
standard support { 1 ... v }, where v is the number of
points of P.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "18868">Example <TT>Plane_cent-coll (H147E15)</TT></A></H3>
We find a group of central collineations of a plane P, and check that
a generator of the group is in fact a central collineation and has
the correct axis and centre.
<P>
<P>
<PRE>
&gt; P, V, L := FiniteProjectivePlane&lt; 13 |
&gt;     {1, 2, 3, 4}, {1, 5, 6, 7}, {1, 8, 9, 10},
&gt;     {1, 11, 12, 13}, {2, 5, 8, 11}, {2, 6, 9, 12},
&gt;     {2, 7, 10, 13}, {3, 5, 9, 13}, {3, 6, 10, 11},
&gt;     {3, 7, 8, 12}, {4, 5, 10, 12}, {4, 6, 8, 13},
&gt;     {4, 7, 9, 11} &gt;;
&gt; p := V!3;
&gt; l := L.1;
&gt; G := CentralCollineationGroup(P, p, l);
&gt; G;
Permutation group G acting on a set of cardinality 13
Order = 3
    (5, 13, 9)(6, 11, 10)(7, 12, 8)
&gt; g := G.1;
&gt; g;
(5, 9, 13)(6, 10, 11)(7, 8, 12)
&gt; is_cent_coll, centre, axis := IsCentralCollineation(P, g);
&gt; is_cent_coll;
true
&gt; centre eq p;
true
&gt; axis eq l;
true
</PRE>
Any line through the centre of a central collineation must be fixed by
the collineation.
<P>
<P>
<PRE>
&gt; lines := {m : m in Lines(P) | p in m};
&gt; m := Random(lines);
&gt; m;
{3, 7, 8, 12}
&gt; m ^ G;
GSet{
  {3, 7, 8, 12}
}
</PRE>
<HR>
<H4><A NAME = "18869">Transitivity Properties</A></H4>

<P>


<H5><A NAME = "18870">IsPointTransitive(P) : Plane -&gt; BoolElt</A></H5>
<H5>IsTransitive(P) : Plane -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> iff the collineation group of the plane P acts transitively 
on the points of P.
</BLOCKQUOTE>
<H5><A NAME = "18871">IsLineTransitive(P) : Plane -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> iff the collineation group of the plane P acts transitively 
on the lines of P.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "18872">Example <TT>Plane_trans (H147E16)</TT></A></H3>
We check the transitivity of the collineation group of AG<sub>2</sub>(4).
<P>
<P>
<PRE>
&gt; P := FiniteAffinePlane(4);
&gt; IsPointTransitive(P);
true
&gt; IsLineTransitive(P); 
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1706.htm">[Next]</A><A  HREF = "text1704.htm">[Prev]</A> <A  HREF = "text1706.htm">[Right]</A> <A  HREF = "text1704.htm">[Left]</A> <A  HREF = "text1690.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>