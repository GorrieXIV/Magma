<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Planar Graphs</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1821.htm">[Next]</A><A  HREF = "text1819.htm">[Prev]</A> <A  HREF = "text1821.htm">[Right]</A> <A  HREF = "text1819.htm">[Left]</A> <A  HREF = "text1809.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20241">Planar Graphs</A></H3>

<P>
<P>
<P>
<P>
<P>
<P>
The planarity algorithm implemented in Magma tests whether
  an undirected graph or multigraph is planar.
If the graph is planar, then an embedding of the graph is produced,
  otherwise a Kuratowski subgraph is identified.
For a thorough discussion of this algorithm, its implementation
  and complexity, the reader is referred to Section <A  HREF = "text1803.htm#19960">Planar Graphs</A>.


<H5><A NAME = "20242">IsPlanar(G) : GrphMultUnd -&gt; BoolElt, GrphMultUnd</A></H5>
<BLOCKQUOTE>
Tests whether the (undirected) graph G is planar. 
The graph may be disconnected.
If the graph is non-planar then a Kuratowski subgraph of G is 
  returned: That is, a subgraph of G homeomorphic to K<sub>5</sub> or 
  K<sub>3, 3</sub>.
The support and vertex/edge decorations of G are <I>not</I> retained 
  in this (structural) subgraph.
</BLOCKQUOTE>
<H5><A NAME = "20243">Obstruction(G) : GrphMultUnd -&gt; GrphMultUnd</A></H5>
<BLOCKQUOTE>
Returns a Kuratoswki obstruction if the graph is non-planar,
or the empty graph if the graph is planar.
The Kuratoswki graph is returned as a (structural) subgraph 
  of G; the support and vertex/edge decorations are not retained.
</BLOCKQUOTE>
<H5><A NAME = "20244">IsHomeomorphic(G: parameters) : GrphMultUnd -&gt; BoolElt</A></H5>

<PRE>    Graph: MonStg                       Default: </PRE>
<BLOCKQUOTE>
Tests if a graph is homeomorphic to either K<sub>5</sub> or K<sub>3, 3</sub>.
The parameter <TT>Graph</TT> must be set to either "K5" or "K33";
it has no default setting.
</BLOCKQUOTE>
<H5><A NAME = "20245">Faces(G) : GrphMultUnd -&gt; SeqEnum[GrphVert]</A></H5>
<BLOCKQUOTE>
Returns the faces of the planar graph G as sequences of the edges 
   bordering the faces of G.
If G is disconnected, then the face defined by an isolated vertex
  v is given as [ v ].
</BLOCKQUOTE>
<H5><A NAME = "20246">Face(u, v) : GrphVert, GrphVert -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns the face of the planar graph G
  bordered by the directed edge [u, v] as an ordered list 
  of edges of G.
<P>
Note that a directed edge and an orientation determine a face
  uniquely:
We can assume without loss of generality that
  the plane is given a clockwise orientation.
Then given a directed edge e = [u<sub>1</sub>, v<sub>1</sub>],  
  the face defined by e is the ordered set of 
  edges [u<sub>1</sub>, v<sub>1</sub>], [u<sub>2</sub>, v<sub>2</sub>], ..., [u<sub>m</sub>, v<sub>m</sub>]
  such that v<sub>i</sub> = u<sub>i + 1</sub> for all i, 1 &le;i &lt; m,
  v<sub>m</sub> = u<sub>1</sub>, and for each v<sub>i</sub> = u<sub>i + 1</sub>, the neighbours of v<sub>i</sub>,
  u<sub>i</sub> and v<sub>i + 1</sub>, are <I>consecutive</I> vertices in v<sub>i</sub>'s adjacency  
  list whose order is <I>anti-clockwise</I>.
</BLOCKQUOTE>
<H5><A NAME = "20247">Face(e) : GrphEdge -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Let e be the edge  (u, v) of the planar graph 
  G  (recall that G is undirected).
Then <TT>Face(</TT>(u, v)<TT>)</TT> returns the  
  face bordered by the directed edge [u, v] as a 
  sequence of edges of G.
</BLOCKQUOTE>
<H5><A NAME = "20248">NFaces(G) : GrphMultUnd -&gt; RngIntElt</A></H5>
<H5>NumberOfFaces(G) : GrphMultUnd -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Returns the number of faces of the planar graph G.
In the case of a disconnected graph, an isolated vertex counts for one face.
</BLOCKQUOTE>
<H5><A NAME = "20249">Embedding(G) : GrphMultUnd -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns the planar embedding of the graph G as a sequence S where 
  S[i] is a sequence of edges incident from vertex i.
</BLOCKQUOTE>
<H5><A NAME = "20250">Embedding(v) : GrphVert -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns the ordered list of edges (in clockwise order say) incident 
  from vertex v.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20251">Example <TT>MultiGraph_GrphMult_Planar (H156E10)</TT></A></H3>
The purpose of the example is to show the embedding and faces
<P>
  of a graph with multiples edges and loops.
<P>
<P>
<PRE>
&gt; G := MultiGraph&lt; 3 | &lt; 1, {2, 3} &gt;, &lt; 1, {2} &gt;, &lt; 2, {2, 3} &gt; &gt;;
&gt; G;
Multigraph
Vertex  Neighbours

1       2 3 2 ;
2       3 2 2 1 1 ;
3       2 1 ;

&gt; IsPlanar(G);
true
&gt; Faces(G);
[
  [ &lt; {1, 2}, 5 &gt;, &lt; {2, 1}, 1 &gt; ],
  [ &lt; {1, 2}, 1 &gt;, &lt; {2, 2}, 7 &gt;, &lt; {2, 3}, 9 &gt;, &lt; {3, 1}, 3 &gt; ],
  [ &lt; {1, 3}, 3 &gt;, &lt; {3, 2}, 9 &gt;, &lt; {2, 1}, 5 &gt; ],
  [ &lt; {2, 2}, 7 &gt; ]
]
&gt; Embedding(G);
[
  [ &lt; {1, 2}, 5 &gt;, &lt; {1, 2}, 1 &gt;, &lt; {1, 3}, 3 &gt; ],
  [ &lt; {2, 3}, 9 &gt;, &lt; {2, 2}, 7 &gt;, &lt; {2, 1}, 1 &gt;, &lt; {2, 1}, 5 &gt; ],
  [ &lt; {3, 1}, 3 &gt;, &lt; {3, 2}, 9 &gt; ]
]
</PRE>
<HR>
<H3><A NAME = "20252">Example <TT>MultiGraph_GrphMult_Planar_Dual (H156E11)</TT></A></H3>
We show how to construct the dual graph D of a planar graph G
<P>
  and how to find all its minimal cuts.
The vertex set of the dual is the set of faces F of G where 
  face f<sub>i</sub> is adjacent to face f<sub>2</sub> if and only if f<sub>1</sub> 
  and f<sub>2</sub> share a common edge in G.
For the purpose of this example a cut of a graph G 
  is defined as a set of edges which disconnects G.
<P>
<P>
Let us construct a small planar graph G and its dual D.
For clarity, the support of D will be the standard support (we could
  have chosen it to be the set of faces  of G).
<P>
<P>
<PRE>
&gt; G := MultiGraph&lt; 4 | {1, 2}, {1, 2}, {1, 3}, {2, 3}, {2, 4}, {3, 4}&gt;;
&gt; IsPlanar(G);
true
&gt; Faces(G);
[
  [ &lt; {1, 3}, 5 &gt;, &lt; {3, 2}, 7 &gt;, &lt; {2, 1}, 3 &gt; ],
  [ &lt; {1, 2}, 3 &gt;, &lt; {2, 1}, 1 &gt; ],
  [ &lt; {1, 2}, 1 &gt;, &lt; {2, 4}, 9 &gt;, &lt; {4, 3}, 11 &gt;, &lt; {3, 1}, 5 &gt; ],
  [ &lt; {3, 4}, 11 &gt;, &lt; {4, 2}, 9 &gt;, &lt; {2, 3}, 7 &gt; ]
]
&gt; F := {@ SequenceToSet(f) : f in Faces(G) @};
&gt; D := MultiGraph&lt; #F | &gt;;
&gt; mapG2D := [ 0 : i in [1..Max(Indices(G))] ];
&gt; mapD2G := [ 0 : i in [1..Max(Indices(G))] ];
&gt; for u in VertexSet(D) do
&gt;     for v in VertexSet(D) do
&gt;        if Index(v) le Index(u) then
&gt;           continue;
&gt;        end if;
&gt;        M := F[ Index(u) ] meet F[ Index(v) ];
&gt;        for e in M do
&gt;           D, edge :=
&gt;           AddEdge(D, VertexSet(D)!u, VertexSet(D)!v);
&gt; 
&gt;           mapG2D[Index(e)] := Index(edge);
&gt;           mapD2G[Index(edge)] := Index(e);
&gt;        end for;
&gt;     end for;
&gt; end for;
&gt; 
&gt; e_star := map&lt; EdgeSet(G) -&gt; EdgeSet(D) |
&gt; x :-&gt; EdgeSet(D).mapG2D[Index(x)],
&gt; y :-&gt; EdgeSet(G).mapD2G[Index(y)] &gt;;
</PRE>
The map <TT>e-star</TT> is the bijection from G's edge-set into
  D's edge-set:
<P>
<P>
<PRE>
&gt; for e in EdgeSet(G) do
&gt;     e, "   ", e @ e_star;
&gt; end for;
&lt; {1, 3}, 5 &gt;     &lt; {1, 3}, 3 &gt;
&lt; {1, 2}, 3 &gt;     &lt; {1, 2}, 1 &gt;
&lt; {1, 2}, 1 &gt;     &lt; {2, 3}, 7 &gt;
&lt; {2, 4}, 9 &gt;     &lt; {3, 4}, 11 &gt;
&lt; {2, 3}, 7 &gt;     &lt; {1, 4}, 5 &gt;
&lt; {3, 4}, 11 &gt;     &lt; {3, 4}, 9 &gt;
&gt;
&gt; for e in EdgeSet(D) do
&gt;     e, "   ", e @@ e_star;
&gt; end for;
&lt; {1, 4}, 5 &gt;     &lt; {2, 3}, 7 &gt;
&lt; {1, 3}, 3 &gt;     &lt; {1, 3}, 5 &gt;
&lt; {1, 2}, 1 &gt;     &lt; {1, 2}, 3 &gt;
&lt; {2, 3}, 7 &gt;     &lt; {1, 2}, 1 &gt;
&lt; {3, 4}, 11 &gt;     &lt; {2, 4}, 9 &gt;
&lt; {3, 4}, 9 &gt;     &lt; {3, 4}, 11 &gt;
</PRE>
If G is biconnected, then any of its faces 
  is bounded by a cycle.
From Euler's formula giving the number of faces in a graph,
  we deduce that the boundaries of the internal faces of G,
  which form a chordless cycle, form a basis for the cycle space of
 G.
<P>
It is a well-known fact that, if G is connected and planar,
  a set of edges E is the set of edges of a cycle in G 
  if and only if E<sup>ast</sup> = { e<sup>ast</sup> : e &isin;E }
  is a minimal cut in D.
For more details, see <A  HREF = "text1808.htm#bib_diestel">[Die00, $ 4]</A>.
<P>
From this we conclude that we can compute the minimal cuts
  generating the cut space of the dual graph D.
We verify that G is biconnected, we  compute the cut corresponding
  to each face of G, and verify that it is a minimal cut.
All the cuts together form a generating set of the cut space of D.
Had we not included the cut corresponding to the external face
  of G, we would have a basis of the cut space.
<P>
<P>
<PRE>
&gt; IsBiconnected(G);
true
&gt; for f in F do
&gt;     Cut := { e @ e_star : e in f };
&gt;     H := D;
&gt;     RemoveEdges(~H, Cut);
&gt;     assert not IsConnected(H);
&gt; 
&gt;     for e in Cut do
&gt;        C := Exclude(Cut, e);
&gt;        H := D;
&gt;        RemoveEdges(~H, C);
&gt;        assert IsConnected(H);
&gt;     end for;
&gt; end for;
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1821.htm">[Next]</A><A  HREF = "text1819.htm">[Prev]</A> <A  HREF = "text1821.htm">[Right]</A> <A  HREF = "text1819.htm">[Left]</A> <A  HREF = "text1809.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>