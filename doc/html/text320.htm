<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Database of Lattices</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text304.htm">[Next]</A><A  HREF = "text319.htm">[Prev]</A> <A  HREF = "text304.htm">[Right]</A> <A  HREF = "text319.htm">[Left]</A> <A  HREF = "text305.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "3077">Database of Lattices</A></H3>

<P>
<P>
<P>
Magma includes a database containing most of the lattices
explicitly presented in the Catalogue of Lattices maintained
by Neil J.A. Sloane and Gabriele Nebe <A  HREF = "text304.htm#bib_lattice-db">[NS01b]</A>.  
<P>
Many standard lattices included in the Sloane &amp; Nebe catalogue are not in the 
database as they may be obtained by applying
Magma's standard lattice creation functions. Also omitted from the database
are a small number of catalogued lattices defined over rings other than
Z or Q.
<P>
The information available for any given lattice in the catalogue varies
considerably.  A similar variety is found in the Magma database version,
although some data (generally either easily computable or rarely
available in the catalogue) is omitted.
<P>
Where the Magma database does retain data, it is not altered from
the data in the catalogue.  Thus the caveat which comes with that
catalogue remains relevant: "Warning!  Not all the entries have been
checked!"
<P>
A second version of the Lattice Database has been made available with
Version 2.16 of Magma. It adds a few more lattices, contains more information
about automorphism groups, and adds &Theta;-series as attributes.
Furthermore, it removes some duplicates. The user should be warned
that the numbering of lattices (and naming in some cases) differs
between the two versions. The newer version, however,
does not contain information about any Hermitian structure at the current time.
<P>
<P>
<P>
<P>
The entries of the database can be accessed in three ways:  
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>the i-th entry of the database can be requested;  
<DT>(ii)</DT><DD>the i-th entry of a particular dimension d can be specified;  
<DT>(iii)</DT><DD>the desired entry can be denoted by its name N. This name is specified
exactly as in the catalogue, including all punctuation and whitespace.
In the rare event that two or more entries share a single name, particular
entries may be distinguished by supplying an integer i in addition to N,
to denote the i-th entry with name N.</DL>



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text320.htm#3078">Creating the Database</A>
<LI> <A  HREF = "text320.htm#3080">Database Information</A>
<LI> <A  HREF = "text320.htm#3090">Accessing the Database</A>
<LI> <A  HREF = "text320.htm#3094">Hermitian Lattices</A>
</UL>
<H4><A NAME = "3078">Creating the Database</A></H4>



<H5><A NAME = "3079">LatticeDatabase() : -&gt; DB</A></H5>
<BLOCKQUOTE>
This function returns a database object which contains information about the
database.
</BLOCKQUOTE>
<H4><A NAME = "3080">Database Information</A></H4>

<P>
<P>
<P>
This section gives the functions that enable the user to find out what is in 
the database.


<H5><A NAME = "3081"># D: DB -&gt; RngIntElt</A></H5>
<H5>NumberOfLattices(D): DB -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Returns the number of lattices stored in the database.
</BLOCKQUOTE>
<H5><A NAME = "3082">LargestDimension(D): DB -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the largest dimension of any lattice in the database.
</BLOCKQUOTE>
<H5><A NAME = "3083">NumberOfLattices(D, d): DB, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the number of lattices of dimension d stored in the database.
</BLOCKQUOTE>
<H5><A NAME = "3084">NumberOfLattices(D, N): DB, MonStgElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the number of lattices named N stored in the database.
(This should always be 1 now).
</BLOCKQUOTE>
<H5><A NAME = "3085">LatticeName(D, i): DB, RngIntElt -&gt; MonStgElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the name and dimension of the i-th entry of the database D.
</BLOCKQUOTE>
<H5><A NAME = "3086">LatticeName(D, d, i): DB, RngIntElt, RngIntElt -&gt; RecMonStgElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the name and dimension of the i-th entry of dimension d
of the database D.
</BLOCKQUOTE>
<H5><A NAME = "3087">LatticeName(D, N): DB, MonStgElt -&gt; RecMonStgElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the name and dimension of the first entry of the database with
name N.
</BLOCKQUOTE>
<H5><A NAME = "3088">LatticeName(D, N, i): DB, MonStgElt, RngIntElt -&gt; RecMonStgElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the name and dimension of the i-th entry of the database with
name N.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3089">Example <TT>Lat_latdb-names (H30E22)</TT></A></H3>
We find out the names of the database entries. 
<P>
<P>
<PRE>
&gt; D := LatticeDatabase();
&gt; NumberOfLattices(D);
699
</PRE>
The database contains 699 lattices.
We get the set of all names in the database.
<P>
<P>
<PRE>
&gt; names := {LatticeName(D,i): i in [1..#D]};
&gt; #names; // No duplicate names anymore
699
&gt; Random(names);
S4(5):2
&gt; NumberOfLattices(D, "S4(5):2");
1
</PRE>
<HR>
<H4><A NAME = "3090">Accessing the Database</A></H4>

<P>
<P>
<P>
The following functions retrieve lattice information from the database.


<H5><A NAME = "3091">Lattice(D, i: parameters): DB, RngIntElt -&gt; Lattice</A></H5>
<H5>Lattice(D, d, i: parameters): DB, RngIntElt, RngIntElt -&gt; Lattice</H5>
<H5>Lattice(D, N: parameters): DB, MonStgElt -&gt; Lattice</H5>
<H5>Lattice(D, N, i: parameters): DB, MonStgElt, RngIntElt -&gt; Lattice</H5>

<PRE>    TrustAutomorphismGroup: Bool        Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Returns the i-th entry (of dimension d or name N) from the database D as a lattice L.
<P>
If the <TT>TrustAutomorphismGroup</TT> parameter is assigned <TT>false</TT>, 
then any data which
claims to be the automorphism group will not be stored in L.
</BLOCKQUOTE>
<H5><A NAME = "3092">LatticeData(D, i): DB, RngIntElt -&gt; Rec</A></H5>
<H5>LatticeData(D, d, i): DB, RngIntElt, RngIntElt -&gt; Rec</H5>
<H5>LatticeData(D, N): DB, MonStgElt -&gt; Rec</H5>
<H5>LatticeData(D, N, i): DB, MonStgElt, RngIntElt -&gt; Rec</H5>
<BLOCKQUOTE>
Returns a record which contains all the information about the i-th lattice
stored in the database D (of dimension d or name N).
The automorphism group is returned separately from the lattice and
not stored in it.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3093">Example <TT>Lat_latdb (H30E23)</TT></A></H3>
We look up a lattice in the database. There are 19 lattices of dimension 6 
in the database. We get the 10th.
<P>
<P>
<PRE>
&gt; D := LatticeDatabase();
&gt; NumberOfLattices(D, 6);
19
&gt; L := Lattice(D, 6, 10);
&gt; L;
Standard Lattice of rank 6 and degree 6
Minimum: 4
Inner Product Matrix:
[4 1 2 2 2 2]
[1 4 2 2 2 2]
[2 2 4 1 2 2]
[2 2 1 4 2 2]
[2 2 2 2 4 1]
[2 2 2 2 1 4]
</PRE>
There may be more information stored than just what is returned by the
<TT>Lattice</TT> function.
We get the record containing all the stored lattice data.
<P>
<P>
<PRE>
&gt; R := LatticeData(D, 6, 10);
&gt; Format(R);
recformat&lt;name, dim, lattice, minimum, kissing_number, 
is_integral, is_even, is_unimodular, is_unimodular_hermitian, 
modularity, group_names, group, group_order, 
hermitian_group_names, hermitian_group, hermitian_group_order, 
hermitian_structure&gt;
</PRE>
This lists all possible fields in the record. They may or may not be
assigned for any particular lattice.
<P>
<P>
<PRE>
&gt; R`lattice eq L;
true
&gt; R`name;
A6,1
&gt; assigned R`kissing_number;
true
&gt; R`kissing_number;
42
&gt; assigned R`group;
false
&gt; A := AutomorphismGroup(L);
&gt; A : Minimal;
MatrixGroup(6, Integer Ring) of order 96 = 2^5 * 3
</PRE>
The result of the <TT>Lattice</TT> call is equal to the <TT>lattice</TT>
field of the data record.
The kissing number was stored, but the automorphism group wasn't.
We computed the group (as a matrix group over the integers) and found 
it has order 96.
<HR>
<H4><A NAME = "3094">Hermitian Lattices</A></H4>

<P>
<P>
<P>
There are a few facilities for computing with Hermitian lattices over
an imaginary quadratic field or a quaternion algebra. However, these
functions apply to a Gram matrix, and not a lattice <I>per se</I>.
The main application is for automorphism groups that preserve a structure.


<H5><A NAME = "3095">HermitianTranspose(M) : Mtrx -&gt; Mtrx</A></H5>
<H5>QuaternionicTranspose(M) : Mtrx -&gt; Mtrx</H5>
<BLOCKQUOTE>
Given a matrix over an imaginary quadratic field or a quaternion algebra,
return the conjugate transpose.
</BLOCKQUOTE>
<H5><A NAME = "3096">ExpandBasis(M) : Mtrx -&gt; Mtrx</A></H5>
<H5>QuaternionicBasis(M) : Mtrx -&gt; Mtrx</H5>
<BLOCKQUOTE>
Given a matrix over an imaginary quadratic field or a quaternion algebra,
expand it to a basis over the rationals.
</BLOCKQUOTE>
<H5><A NAME = "3097">HermitianAutomorphismGroup(M) : Mtrx -&gt; GrpMat</A></H5>
<H5>QuaternionicAutomorphismGroup(M) : Mtrx -&gt; GrpMat</H5>
<BLOCKQUOTE>
Given a conjugate symmetric Gram matrix, compute the automorphism group.
<P>
Various functions for matrix groups over associative algebras are available
here, such as <TT>CharacterTable</TT> and <TT>IsConjugate</TT> which simply use
a re-writing over the rationals, and <TT>InvariantForms</TT> which after using
<TT>GHom</TT> needs to restrict to elements fixed by the quaterionic structure.
Finally, there is <TT>QuaternionicGModule</TT> which will split a G-module
over a quaternionic structure.
</BLOCKQUOTE>
<H5><A NAME = "3098">InvariantForms(G) : GrpMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a matrix group over an associative algebra or an imaginary quadratic
field, return a basis for the forms fixed by it.
</BLOCKQUOTE>
<H5><A NAME = "3099">QuaternionicGModule(M, I, J) : ModGrp, AlgMatElt, AlgMatElt -&gt; ModGrp</A></H5>
<BLOCKQUOTE>
Given a G-module M and I and J in the endomorphism algebra that
anti-commute and whose squares are scalars, write G over the quaternionic
structure given by I and J.
</BLOCKQUOTE>
<H5><A NAME = "3100">MooreDeterminant(M) : Mtrx -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given a conjugate-symmetric matrix over a quaternion algebra, compute the
Moore determinant. This is the "normal" determinant, which is well-defined
here because all the diagonal elements are rational, and thus there is no
ambiguity between left/right division.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3101">Example <TT>Lat_coxeter-todd (H30E24)</TT></A></H3>
We construct the Coxeter-Todd lattice over Q<sub>3, &infin;</sub> starting
with the group SU(3, 3).
<P>
<P>
<P>
<PRE>
&gt; G := SU(3, 3); 
&gt; chi := CharacterTable(G)[2];
&gt; M := GModule(chi,Integers());
&gt; E := EndomorphismAlgebra (M);
&gt; while true do 
&gt;     r := &amp;+[Random([-2..2])*E.i : i in [1..4]];
&gt;     if r^2 eq -1 then break; end if;
&gt; end while;
&gt; while true do
&gt;     s := &amp;+[Random([-2..2])*E.i : i in [1..4]];
&gt;     if s^2 eq -3 and r*s eq -s*r then break; end if;
&gt; end while;
&gt; MM := QuaternionicGModule(M, r, s);
&gt; Discriminant(BaseRing(MM));
3
&gt; MG := MatrixGroup(MM);
&gt; IF := InvariantForms(MG); IF;
[
    [1 -1/2*i + 1/6*k 1/3*k]
    [1/2*i - 1/6*k 1 -1/3*j]
    [-1/3*k 1/3*j 1]
]
&gt; assert IsIsomorphic(G, MG);
</PRE>
<HR>
<H3><A NAME = "3102">Example <TT>Lat_quaternionic-auto-group (H30E25)</TT></A></H3>
We compute the quaternionic automorphism group for the Leech lattice.
<P>
<P>
<P>
<PRE>
&gt; A&lt;i,j,k&gt; := QuaternionAlgebra&lt;Rationals()|-1,-1&gt;;
&gt; v := [];
&gt; v[1] := [2+2*i,0,0,0,0,0]; /* from Wilson's paper */
&gt; v[2] := [2,2,0,0,0,0];
&gt; v[3] := [0,2,2,0,0,0];
&gt; v[4] := [i+j+k,1,1,1,1,1];
&gt; v[5] := [0,0,1+k,1+j,1+j,1+k];
&gt; v[6] := [0,1+j,1+j,1+k,0,1+k];
&gt; V := [Vector(x) : x in v];
&gt; W := [Vector([Conjugate(x) : x in Eltseq(v)]): v in V];
&gt; M6 := Matrix(6,6,[(V[i],W[j])/2 : i,j in [1..6]]); /* 6-dim over A */
&gt; time Q := QuaternionicAutomorphismGroup(M6);
&gt; assert #Q eq 503193600;
</PRE>
<P>
The same can be done for the Coxeter-Todd lattice.
<P>
<P>
<P>
<PRE>
&gt; A&lt;i,j,k&gt; := QuaternionAlgebra&lt;Rationals()|-1,-3&gt;;
&gt; a := (1+i+j+k)/2;
&gt; M3 := Matrix(3,3,[2,a,-1, Conjugate(a),2,a, -1,Conjugate(a),2]);
&gt; time Q := QuaternionicAutomorphismGroup(M3);
&gt; assert #Q eq 12096;
</PRE>
<P>
One can also compute the automorphism group over the Eisenstein field,
using <TT>InvariantForms</TT> on the realisation of this group as
<TT>ShephardTodd(34)</TT>.
<P>
<P>
<P>
<PRE>
&gt; G := ShephardTodd(34);
&gt; IF := InvariantForms(G); // scaled Coxeter-Todd over Q(sqrt(-3))
&gt; A := HermitianAutomorphismGroup(IF[1]);
&gt; assert IsIsomorphic(A,G);
</PRE>
<PRE></PRE> <A  HREF = "text304.htm">[Next]</A><A  HREF = "text319.htm">[Prev]</A> <A  HREF = "text304.htm">[Right]</A> <A  HREF = "text319.htm">[Left]</A> <A  HREF = "text305.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>