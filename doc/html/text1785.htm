<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Graphs with a Sparse Representation</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1786.htm">[Next]</A><A  HREF = "text1784.htm">[Prev]</A> <A  HREF = "text1786.htm">[Right]</A> <A  HREF = "text1784.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19713">Graphs with a Sparse Representation</A></H3>

<P>
<P>
<P>
<P>
<P>
<P>
As mentioned in the
  <A  HREF = "text1783.htm#19677">Introduction</A> of this
 chapter it is possible to construct graphs having a sparse
 representation.
That is, graphs which are represented by means of an adjacency list.
This has an obvious advantage for graphs with a low edge density,
  in that it allows to construct much larger graphs than 
  if they were represented by means of an adjacency matrix
  (the dense representation).
See Section <A  HREF = "text1784.htm#19679">Bounds on the Graph Order</A> for more details on this issue.
<P>
Another advantage of the sparse representation is for
  graph algorithms which are linear in the number of edges
  (the planarity tester and the triconnectivity  tester),
  and more generally, for those algorithms based on the adjacency list
  representation (the flow-based algorithms and the shortest-paths 
  algorithms).
Further, the sparse representation is required when creating 
  multigraphs (see Chapter <A  HREF = "text1809.htm#20036">MULTIGRAPHS</A>) since they may 
  have multiple edges.
<P>
A significant number, but not all, of the
  existing Magma functions have been written for both representations.
Should a function designed for a matrix representation of the graph
  be applied
  to a graph with a sparse representation, then the graph is 
  automatically converted <I>without any  user intervention</I>.
This is also true when the reverse conversion is required.
<P>
Without being exhaustive, we will list here the functions 
  which can deal with both graph representations without having 
  to perform an (internal) conversion.
<P>
<DL COMPACT class='compact'>
<DT>-</DT><DD>Nearly all construction functions (<A  HREF = "text1784.htm#19678">Construction of Graphs and Digraphs</A>),
<DT>-</DT><DD>All functions in <A  HREF = "text1786.htm#19716">The Vertex--Set and Edge--Set of a Graph</A>, 
  <A  HREF = "text1788.htm#19753">Subgraphs and Quotient Graphs</A>,
  <A  HREF = "text1788.htm#19758">Incremental Construction of  Graphs</A>,
<DT>-</DT><DD>Some functions in <A  HREF = "text1788.htm#19781">Constructing Complements, Line Graphs; Contraction, Switching</A> and <A  HREF = "text1789.htm#19792">Unions and Products of  Graphs</A>,
<DT>-</DT><DD>All functions in <A  HREF = "text1790.htm#19800">Converting between Graphs  and Digraphs</A>,
<DT>-</DT><DD>The basic invariants and predicates 
  in <A  HREF = "text1792.htm#19827">Elementary Invariants of a  Graph</A> and <A  HREF = "text1793.htm#19832">Elementary Graph Predicates</A>,
<DT>-</DT><DD>Almost all functions in <A  HREF = "text1794.htm#19851">Adjacency and Degree</A>,
<DT>-</DT><DD>All functions in <A  HREF = "text1795.htm#19879">Connectedness in a Graph</A> and all but the 
  last
  in <A  HREF = "text1795.htm#19887">Connectedness in a Digraph</A>,
<DT>-</DT><DD>The functions in <A  HREF = "text1796.htm#19909">Distances, Paths and Circuits in a Possibly Weighted Graph</A>,
<DT>-</DT><DD>All functions in <A  HREF = "text1799.htm#19929">Spanning Trees of a Graph or Digraph</A>.
<P>
</DL>
The functions in <A  HREF = "text1787.htm#19751">Labelled, Capacitated and  Weighted Graphs</A>,
  <A  HREF = "text1795.htm#19892">Graph Triconnectivity</A>,
  <A  HREF = "text1795.htm#19897">Maximum Matching in Bipartite Graphs</A>,
  <A  HREF = "text1795.htm#19900">General Vertex and Edge Connectivity in Graphs and Digraphs</A>, and 
  <A  HREF = "text1803.htm#19960">Planar Graphs</A>, and all the functions
  listed in Chapter <A  HREF = "text1809.htm#20036">MULTIGRAPHS</A>,
   deal with a graph as an adjacency list.
<P>
The functions in <A  HREF = "text1791.htm#19804">Construction from Groups,  Codes and Designs</A>,
  <A  HREF = "text1796.htm#19913">Distances, Paths and Circuits in a Non-Weighted Graph</A>,
  <A  HREF = "text1798.htm#19924">Matrices and Vector Spaces  Associated with a Graph or Digraph</A>,
  <A  HREF = "text1800.htm#19934">Directed Trees</A>,
  <A  HREF = "text1801.htm#19941">Colourings</A>,
  <A  HREF = "text1802.htm#19948">Cliques, Independent Sets</A>,
  <A  HREF = "text1804.htm#19972">Automorphism Group of a  Graph or Digraph</A>, and 
  <A  HREF = "text1805.htm#19993">Symmetry and Regularity  Properties of Graphs</A> deal with a graph as an adjacency matrix.
<P>
<P>
<P>
We emphasize again that should a conversion of the graph's
  representation take place due to internal specifications,
  the conversion takes place <I>automatically</I>, that is,
  <I>without user intervention</I>.
<P>
The only problem that may occur is when such a conversion 
  concerns a (very) large graph and thus may possibly result
  in a lack of memory to create the required representation.
This is where users might require control over which internal representation
  is used so as to minimise the likelihood of both representations 
  coexisting.
This is achieved by tuning the creation functions 
  (as described in Section <A  HREF = "text1784.htm#19678">Construction of Graphs and Digraphs</A>), and 
  the following functions which determine the nature of a graph's
  representation.
<P>
When conversion of the graph's representation into the alternative
  one occurs the original representation is not deleted.


<H5><A NAME = "19714">HasSparseRep(G) : Grph -&gt; BoolElt</A></H5>
<H5>HasDenseRep(G) : Grph -&gt; BoolElt</H5>
<H5>HasSparseRepOnly(G) : Grph -&gt; BoolElt</H5>
<H5>HasDenseRepOnly(G) : Grph -&gt; BoolElt</H5>
<H5>HasDenseAndSparseRep(G) : Grph -&gt; BoolElt</H5>
<BLOCKQUOTE>
This set of functions determine the nature of a graph's
representation.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19715">Example <TT>Graph_SparseReps (H155E7)</TT></A></H3>
We give four examples, each illustrating one of the four
  possible cases that may arise.
First, when the graph's dense representation remains unchanged:
<P>
<P>
<PRE>
&gt; G := Graph&lt;5 | { {1,2}, {2,3}, {3,4}, {4,5}, {5,1} }&gt;;
&gt; HasDenseRepOnly(G);
true
&gt; A := AutomorphismGroup(G);
&gt; HasDenseRepOnly(G);
true
</PRE>
<P>
The same example using a sparse graph representation:
<P>
<P>
<PRE>
&gt; G := Graph&lt;5 | { {1,2}, {2,3}, {3,4}, {4,5}, {5,1} } : SparseRep := true&gt;;
&gt; HasSparseRepOnly(G);
true
&gt; A := AutomorphismGroup(G);
&gt; HasDenseAndSparseRep(G);
true
</PRE>
<P>
Next the case when the graph's sparse representation remains unchanged:
<P>
<P>
<PRE>
&gt; G := Graph&lt;5 | { {1,2}, {2,3}, {3,4}, {4,5}, {5,1} } : SparseRep := true&gt;;
&gt; HasSparseRepOnly(G);
true
&gt; IsPlanar(G);
true
&gt; HasSparseRepOnly(G);
true
</PRE>
<P>
Finally the same example using a dense graph representation:
<P>
<P>
<PRE>
&gt; G := Graph&lt;5 | { {1,2}, {2,3}, {3,4}, {4,5}, {5,1} }&gt;;
&gt; HasDenseRepOnly(G);
true
&gt; IsPlanar(G);
true
&gt; HasDenseAndSparseRep(G);
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1786.htm">[Next]</A><A  HREF = "text1784.htm">[Prev]</A> <A  HREF = "text1786.htm">[Right]</A> <A  HREF = "text1784.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>