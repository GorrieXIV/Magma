<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Operations on Elements</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1182.htm">[Next]</A><A  HREF = "text1180.htm">[Prev]</A> <A  HREF = "text1182.htm">[Right]</A> <A  HREF = "text1180.htm">[Left]</A> <A  HREF = "text1175.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "13185">Operations on Elements</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1181.htm#13186">Basic Operations</A>
<LI> <A  HREF = "text1181.htm#13195">Decompositions</A>
<LI> <A  HREF = "text1181.htm#13199">Conjugacy and Cohomology</A>
</UL>
<H4><A NAME = "13186">Basic Operations</A></H4>



<H5><A NAME = "13187">g * h : GrpLieElt, GrpLieElt -&gt; GrpLieElt</A></H5>
<BLOCKQUOTE>
The product of two elements of a group of Lie type.
If the <A  HREF = "text1177.htm#GrpLie:Normalising">Normalising</A> flag is set for the group, then the product is normalised using the algorithms of <A  HREF = "text1174.htm#bib_CohenMurrayTaylor">[CMT04]</A>, <A  HREF = "text1174.htm#bib_ComputUnipGrps">[CHM08]</A>.
Otherwise, the words are just concatenated.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13188">Example <TT>GrpLie_GrpLieEltProduct (H109E9)</TT></A></H3>
If the <TT>Normalising</TT> flag is set, the product is normalised,
otherwise multiplication is just concatenation. 
<P>
<P>
<PRE>
&gt; G := GroupOfLieType("G2", GF(3) : Normalising:=false );
&gt; V := VectorSpace(GF(3),2);
&gt; g := elt&lt; G | 1,2,1,2, V![2,2], &lt;1,2&gt;,&lt;5,1&gt; &gt;;
&gt; h := elt&lt; G | &lt;3,2&gt;, V![1,2], 1 &gt;;
&gt; g*h;
n1 n2 n1 n2 (2 2) x1(2) x5(1) x3(2) (1 2) n1
&gt; H := GroupOfLieType("G2", GF(3) : Normalising:=true  );
&gt; g := elt&lt; H | 1,2,1,2, V![2,2], &lt;1,2&gt;,&lt;5,1&gt; &gt;;
&gt; h := elt&lt; H | &lt;3,2&gt;, V![1,2], 1 &gt;;
&gt; g*h;
x2(1) x3(1) (1 2) n1 n2 n1 n2 n1 x4(1)
</PRE>
<HR>
<H5><A NAME = "13189">g ^ -1 : GrpLieElt -&gt; GrpLieElt</A></H5>
<H5>Inverse(G) : GrpLieElt -&gt; GrpLieElt</H5>
<BLOCKQUOTE>
The inverse of the element g of a group of Lie type.
</BLOCKQUOTE>
<H5><A NAME = "13190">g ^ n : GrpLieElt, RngIntElt -&gt; GrpLieElt</A></H5>
<BLOCKQUOTE>
The nth power of the element g of a group of Lie type.
</BLOCKQUOTE>
<H5><A NAME = "13191">g ^ h : GrpLieElt, GrpLieElt -&gt; GrpLieElt</A></H5>
<BLOCKQUOTE>
The conjugate h<sup> - 1</sup>gh, where g and h are elements of a group of Lie type.
</BLOCKQUOTE>
<H5><A NAME = "13192">(g,  h) : GrpLieElt, GrpLieElt -&gt; GrpLieElt</A></H5>
<H5>Commutator(g,  h) : GrpLieElt, GrpLieElt -&gt; GrpLieElt</H5>
<BLOCKQUOTE>
The commutator g<sup> - 1</sup>h<sup> - 1</sup>gh of g and h, 
where g and h are elements of a group of Lie type.
</BLOCKQUOTE>
<H5><A NAME = "13193">Normalise(simg) : GrpLieElt -&gt;</A></H5>
<H5>Normalize(simg) : GrpLieElt -&gt;</H5>
<H5>Normalise(g) : GrpLieElt -&gt; GrpLieElt</H5>
<H5>Normalize(g) : GrpLieElt -&gt; GrpLieElt</H5>
<BLOCKQUOTE>
Normalise the element g of a group of Lie type G.  The procedural form is slightly more efficient
than the functional form.  If the <TT>Normalise</TT> flag is set for G, 
this operation has no effect.
This uses the algorithms of <A  HREF = "text1174.htm#bib_CohenMurrayTaylor">[CMT04]</A>, <A  HREF = "text1174.htm#bib_ComputUnipGrps">[CHM08]</A>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13194">Example <TT>GrpLie_GrpLieEltArith (H109E10)</TT></A></H3>
Arithmetic in groups of Lie type.
<P>
<P>
<PRE>
&gt; k&lt;z&gt; := GF(4);
&gt; G := GroupOfLieType("C3", k);    
&gt; V := VectorSpace(k, 3);
&gt; g := elt&lt; G | 1,2,3, &lt;3,z&gt;,&lt;4,z^2&gt;, V![1,z^2,1] &gt;;               
&gt; g;
n1 n2 n3 x3(z) x4(z^2) ( 1 z^2   1) 
&gt; h := elt&lt; G | [0,1,z,1,0,z^2,1,1,z] &gt;;
&gt; h;
x2(1) x3(z) x4(1) x6(z^2) x7(1) x8(1) x9(z) 
&gt; g * h^-1;
x3(1) x5(z) x6(z^2) x8(1) (z^2 z^2   z) n1 n2 n3 x3(z^2) x5(z^2) 
&gt; g^3;
x3(z) x5(1) x7(z^2) x8(z^2) ( 1   1   z) n1 n2 n3 n1 n2 n3 n1 n2 n3 x1(1) 
x2(z^2) x3(1) x4(z) x7(z) x9(z) 
</PRE>
<HR>
<H4><A NAME = "13195">Decompositions</A></H4>



<H5><A NAME = "13196">Bruhat(g) : GrpLieElt -&gt; GrpLieElt, GrpLieElt, GrpLieElt, GrpLieElt</A></H5>
<BLOCKQUOTE>
Given an element g of a group of Lie type the Bruhat decomposition 
of g is returned.  The function returns elements u,
h, /dot w, u' with the properties described in
Subsection <A  HREF = "text1176.htm#13094">Twisted Groups of Lie type</A> and so that g=uh/dot wu'.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "13197">Example <TT>GrpLie_Bruhat (H109E11)</TT></A></H3>
<P>
<P>
<PRE>
&gt; k&lt;z&gt; := GF(4);
&gt; G := GroupOfLieType("C3", k);    
&gt; V := VectorSpace(k, 3);
&gt; g := elt&lt; G | 1,2,3, &lt;3,z&gt;,&lt;4,z^2&gt;, V![1,z^2,1] &gt;;               
&gt; Normalise(g); 
x7(z^2) x8(z^2) (z^2 z^2   z) n1 n2 n3 x3(1) x6(z) 
&gt; u, h, w, up := Bruhat(g);
&gt; u; h; w; up;
x7(z^2) x8(z^2) 
(z^2 z^2   z) 
n1 n2 n3 
x3(1) x6(z) 
</PRE>
<HR>
<H5><A NAME = "13198">MultiplicativeJordanDecomposition(x) : GrpLieElt -&gt; GrpLieElt, GrpLieElt</A></H5>
<BLOCKQUOTE>
The multiplicative Jordan decomposition of the element x of the group of Lie type.
</BLOCKQUOTE>
<H4><A NAME = "13199">Conjugacy and Cohomology</A></H4>



<H5><A NAME = "13200">ConjugateIntoTorus(g) : GrpLieElt -&gt; GrpLieElt, GrpLieElt</A></H5>
<BLOCKQUOTE>
Given a semisimple element g in a finite group of Lie type, return a torus element t
and conjugator x such that t=xgx<sup> - 1</sup>.
The elements returned may be defined over a larger field that the input element. 
</BLOCKQUOTE>
<H5><A NAME = "13201">ConjugateIntoBorel(g) : GrpLieElt -&gt; GrpLieElt, GrpLieElt</A></H5>
<BLOCKQUOTE>
Given a semisimple element g in a finite group of Lie type, return a 
Borel element b
and conjugator x such that b=xgx<sup> - 1</sup>.
The elements returned may be defined over a larger field that the input element. 
Although any element of a group of Lie type can be conjugated into the Borel
subgroup, this function is currently only implemented for semisimple elements.
</BLOCKQUOTE>
<H5><A NAME = "13202">Lang(c, q) : GrpLieElt, RngIntElt -&gt; GrpLieElt</A></H5>
<BLOCKQUOTE>
Given an element c in a finite group of Lie type and q a power of the
characteristic, return a solution a of the Lang equation c = a<sup> - F</sup> a.
Here F is the Frobenius automorphism gotten by taking qth powers in
the field.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1182.htm">[Next]</A><A  HREF = "text1180.htm">[Prev]</A> <A  HREF = "text1182.htm">[Right]</A> <A  HREF = "text1180.htm">[Left]</A> <A  HREF = "text1175.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>