<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Access Functions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1900.htm">[Next]</A><A  HREF = "text1898.htm">[Prev]</A> <A  HREF = "text1900.htm">[Right]</A> <A  HREF = "text1898.htm">[Left]</A> <A  HREF = "text1896.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "21152">Access Functions</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1899.htm#21158">Quantum Error Group</A>
</UL>
<H5><A NAME = "21153">QuantumBasisElement(F) : FldFin -&gt; FldFinElt</A></H5>
<BLOCKQUOTE>
Given a degree 2 extension field F = GF(q<sup>2</sup>), return the
element &lambda; &isin;F which acts to connect the extended and
compact formats.  For a vector (ba | bb) in extended format,
the corresponding compact format of this vector will be 
bw = ba + &lambda; bb.
</BLOCKQUOTE>
<H5><A NAME = "21154">StabilizerCode(Q) : CodeQuantum -&gt; CodeAdd</A></H5>
<H5>StabiliserCode(Q) : CodeQuantum -&gt; CodeAdd</H5>

<PRE>    ExtendedFormat: BoolElt             Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The additive stabiliser code S which defines the quantum code Q.
By default S is returned in the compact format of a length n code
over GF(q<sup>2</sup>), but if <TT>ExtendedFormat</TT> is set to <TT>true</TT>, then it 
will be returned in extended format as a length 2n code over GF(q).
</BLOCKQUOTE>
<H5><A NAME = "21155">StabilizerMatrix(Q) : CodeQuantum -&gt; ModMatFldElt</A></H5>
<H5>StabiliserMatrix(Q) : CodeQuantum -&gt; ModMatFldElt</H5>

<PRE>    ExtendedFormat: BoolElt             Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Given a quantum code Q return the additive stabiliser matrix M 
defining Q.
By default M is returned in the compact format of a length n code
over GF(q<sup>2</sup>), but if <TT>ExtendedFormat</TT> is set to <TT>true</TT>, then it 
will be returned in the extended format as a length 2n code over 
GF(q).
</BLOCKQUOTE>
<H5><A NAME = "21156">NormalizerCode(Q) : CodeQuantum -&gt; CodeAdd</A></H5>
<H5>NormaliserCode(Q) : CodeQuantum -&gt; CodeAdd</H5>

<PRE>    ExtendedFormat: BoolElt             Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The additive normalizer code N which defines the quantum code Q.
By default N is returned in the compact format of a length n code
over GF(q<sup>2</sup>), but if <TT>ExtendedFormat</TT> is set to <TT>true</TT>, then it 
will be returned in extended format as a length 2n code over GF(q).
</BLOCKQUOTE>
<H5><A NAME = "21157">NormalizerMatrix(Q) : CodeQuantum -&gt; ModMatFldElt</A></H5>
<H5>NormaliserMatrix(Q) : CodeQuantum -&gt; ModMatFldElt</H5>

<PRE>    ExtendedFormat: BoolElt             Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Given a quantum code Q return the additive normalizer matrix M 
defining Q.
By default M is returned in the compact format of a length n code
over GF(q<sup>2</sup>), but if <TT>ExtendedFormat</TT> is set to <TT>true</TT>, then it 
will be returned in the extended format as a length 2n code over 
GF(q).
</BLOCKQUOTE>
<H4><A NAME = "21158">Quantum Error Group</A></H4>

<P>
<P>
<P>
As described in the introduction to this chapter, vectors over a
finite field used to describe a quantum stabilizer code actually 
represent elements of the corresponding quantum error group.  For 
a p-ary N qubit system (where p is prime)
this error group is the extra-special 
group with order 2<sup>2N + 1</sup> consisting of combinations of N 
bit-flip errors, N phase flip errors, and an overall phase shift.
All groups in this section use a polycyclic group representation.


<H5><A NAME = "21159">QuantumErrorGroup(p, n) : RngIntElt, RngIntElt -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
Return the abelian group representing all possible errors
for a length n p-ary qubit system, which is an 
extra-special group of order p<sup>2n + 1</sup> with 2n + 1 generators.
The generators correspond to the qubit-flip operators X(i),
the phase-flip operators Z(i), and an overall phase 
multiplication W by the p-th root of unity.
The generators appear in the order X(1), Z(1), ..., X(n), Z(n), W.
</BLOCKQUOTE>
<H5><A NAME = "21160">QuantumBinaryErrorGroup(n) : RngIntElt -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
Return the abelian group representing all possible errors on a 
length n binary qubit system, which is an extra special group 
of order 2<sup>2n - 1</sup>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21161">Example <TT>QECC_quantum-error-group (H164E14)</TT></A></H3>
The image of a vector in the error group is easily obtained from 
its extended format representation.  We illustrate the connection 
between symplectic orthogonality as a vector, and commutativity 
as an element of the error group.
<P>
<P>
<P>
<PRE>
&gt; n := 5;
&gt; VSn  := VectorSpace(GF(2), n);
&gt; VS2n := VectorSpace(GF(2), 2*n);
&gt; E := QuantumBinaryErrorGroup(n);
&gt; BitFlips   := [E.i : i in [1..2*n] | IsOdd(i)  ];
&gt; PhaseFlips := [E.i : i in [1..2*n] | IsEven(i) ];
</PRE>
We first take two vectors which are not orthogonal and show 
their images in the error group do not commute.
<P>
<P>
<PRE>
&gt; v1a := VSn ! [0,1,1,0,1]; v1b := VSn ! [0,1,1,0,1];
&gt; v1  := VS2n ! HorizontalJoin(v1a, v1b);
&gt; v2a := VSn ! [1,0,1,1,0]; v2b := VSn ! [0,1,0,1,1];
&gt; v2  := VS2n ! HorizontalJoin(v2a, v2b);
&gt; SymplecticInnerProduct(v1,v2 : ExtendedFormat := true);
1
&gt;
&gt; e1 := &amp;*[ BitFlips[i] : i in Support(v1a) ] *
&gt;       &amp;*[ PhaseFlips[i] : i in Support(v1b) ];
&gt; e2 := &amp;*[ BitFlips[i] : i in Support(v2a) ] *
&gt;       &amp;*[ PhaseFlips[i] : i in Support(v2b) ];
&gt; e1*e2 eq e2*e1;
false
</PRE>
Next a pair of orthogonal vectors is shown to commute.
<P>
<P>
<PRE>
&gt; v1a := VSn ! [1,1,0,1,0]; v1b := VSn ! [0,0,1,1,0];
&gt; v1  := VS2n ! HorizontalJoin(v1a, v1b);
&gt; v2a := VSn ! [0,1,1,1,0]; v2b := VSn ! [0,1,1,1,0];
&gt; v2  := VS2n ! HorizontalJoin(v2a, v2b);
&gt; SymplecticInnerProduct(v1,v2 : ExtendedFormat := true);
0
&gt;
&gt; e1 := &amp;*[ BitFlips[i] : i in Support(v1a) ] *
&gt;       &amp;*[ PhaseFlips[i] : i in Support(v1b) ];
&gt; e2 := &amp;*[ BitFlips[i] : i in Support(v2a) ] *
&gt;       &amp;*[ PhaseFlips[i] : i in Support(v2b) ];
&gt; e1*e2 eq e2*e1;
true
</PRE>
<HR>
<H5><A NAME = "21162">QuantumErrorGroup(Q) : CodeQuantum -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
For a quantum code Q of length n, return the 
group of all errors on n qubits.
This is the full error group, the ambient space containing all
possible errors. 
</BLOCKQUOTE>
<H5><A NAME = "21163">StabilizerGroup(Q) : CodeQuantum -&gt; GrpPC</A></H5>
<H5>StabiliserGroup(Q) : CodeQuantum -&gt; GrpPC</H5>
<BLOCKQUOTE>
Return the abelian group of errors that defines the
quantum code Q, which is a subgroup of the group
returned by <TT>QuantumErrorGroup(Q)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "21164">StabilizerGroup(Q, G) : CodeQuantum, GrpPC -&gt; GrpPC</A></H5>
<H5>StabiliserGroup(Q, G) : CodeQuantum, GrpPC -&gt; GrpPC</H5>
<BLOCKQUOTE>
Given a quantum code Q with error group G (an extra-special
group), return the abelian group of errors of Q as a subgroup 
of G. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21165">Example <TT>QECC_quant-stab-group (H164E15)</TT></A></H3>
The stabilizer group of any quantum stabilizer code over GF(4) will
be abelian.
<P>
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := GF(4);
&gt; Q := RandomQuantumCode(F, 10, 6);
&gt; G := StabilizerGroup(Q);
&gt; IsAbelian(G);
true
</PRE>
<HR>
<H3><A NAME = "21166">Example <TT>QECC_quant-stab-group-hack (H164E16)</TT></A></H3>
In order to make stabilizer groups from distinct codes compatible
with one another, 
the groups must be created within the same super-structure. This
is done by first creating a copy of the full error group, 
and then generating each instance of a stabilizer group as
a subgroup.
<P>
In this example, the intersection of the stabilizer groups of two random 
codes is formed. An error group E which will be a common over group for 
the two stabilizer groups is first created.
<P>
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := GF(4);
&gt; Q1 := RandomQuantumCode(F, 15, 8);
&gt; Q2 := RandomQuantumCode(F, 15, 8);
&gt;
&gt; E := QuantumErrorGroup(Q1);
&gt; S1 := StabilizerGroup(Q1, E);
&gt; S2 := StabilizerGroup(Q2, E);
&gt; #(S1 meet S2);
2
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1900.htm">[Next]</A><A  HREF = "text1898.htm">[Prev]</A> <A  HREF = "text1900.htm">[Right]</A> <A  HREF = "text1898.htm">[Left]</A> <A  HREF = "text1896.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>