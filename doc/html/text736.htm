<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creating Finite Groups of Lie  Type</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text737.htm">[Next]</A><A  HREF = "text735.htm">[Prev]</A> <A  HREF = "text737.htm">[Right]</A> <A  HREF = "text735.htm">[Left]</A> <A  HREF = "text734.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8334">Creating Finite Groups of Lie  Type</A></H3>

<P>
<P>
Several functions are provided which construct various classical
groups and other groups of Lie type.  The effect of these functions
is to define the group in terms of a set of generating matrices.
<P>
<P>
<P>
As shown by Chevalley, for each simple Lie algebra L over the complex
field and for each finite field GF(q) there is an associated matrix
group L(q).  In general, these groups are perfect but not simple. To 
obtain the simple group, it is necessary to form the quotient by the centre.
Similarly, as Steinberg, Ree and others have shown, if the associated
Coxeter graph has an automorphism, of order t say, then there will
be a `twisted' version sL(q) of L(q).
<P>
<P>
Generators for the series A, C, ()<sup>2</sup>A and ()<sup>2</sup>B are described in
<A  HREF = "text733.htm#bib_taylor">[Tay87]</A>.  Generators for the series B, D and ()<sup>2</sup>D are as given
by Rylands and Taylor <A  HREF = "text733.htm#bib_rylands-taylor">[RT98]</A>. Generators for the exceptional
groups of Lie type are described by Howlett, Rylands and Taylor in
<A  HREF = "text733.htm#bib_howlett-rylands-taylor">[HRT01]</A>.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text736.htm#8335">Generic Creation Function</A>
<LI> <A  HREF = "text736.htm#8337">The Orders of the Chevalley Groups</A>
<LI> <A  HREF = "text736.htm#8340">Classical Groups</A>
<LI> <A  HREF = "text736.htm#8369">Exceptional Groups</A>
</UL>
<H4><A NAME = "8335">Generic Creation Function</A></H4>



<H5><A NAME = "8336">ChevalleyGroup(X, n, K: parameters) : MonStgElt, RngIntElt, FldFin -&gt; GrpMat</A></H5>
<H5>ChevalleyGroup(X, n, q: parameters) : MonStgElt, RngIntElt, RngIntElt -&gt; GrpMat</H5>

<PRE>    Irreducible: BoolElt                Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Construct a matrix group over the field K (or over GF(q)) which has the
adjoint Chevalley group of Lie series <TT>X</TT> and Lie rank n as the quotient
modulo scalar matrices.  In most cases the group returned is the universal Chevalley
group X<sub>n</sub>(q); however, for series <TT>B</TT>, <TT>D</TT> and <TT>2D</TT> the universal group 
is the spin group and the matrix group returned by <TT>ChevalleyGroup</TT> is 
&Omega;(2n + 1, q), &Omega;^ + (2n, q) or &Omega;^ - (2n, q).
<P>
For the twisted groups the meaning of the parameter q is consistent with the 
(abbreviated) notation in the `Atlas of Finite Groups' and in the 
monograph series `The Classification of the Finite Simple Groups' by Gorenstein,
Lyons and Solomon.  For a Chevalley group of rank n and type X with an 
automorphism of order t the Atlas defines the <I>twisted Chevalley group</I>
()<sup>t</sup>X<sub>n</sub>(q, q<sup>t</sup>) to be the set of elements of X<sub>n</sub>(q<sup>t</sup>) fixed by the quotient
of the twisting automorphism and the field automorphism induced by
x |-&gt; x<sup>q</sup> of GF(q<sup>t</sup>).  In the Atlas the abbreviated
notation for the twisted group is ()<sup>t</sup>X<sub>n</sub>(q) but in Carter <A  HREF = "text733.htm#bib_Car72">[Car72]</A> it
is ()<sup>t</sup>X<sub>n</sub>(q<sup>t</sup>).  The first signature of the intrinsic expects the field 
GF(q<sup>t</sup>) but the second signature expects the parameter q.
<P>
For example, for the series <TT>"2A"</TT>, the group 2A_n(q) 
is SU(n + 1, q) but, in the first form of the signature, K must be the field 
GF(q<sup>2</sup>).  Similarly the first form of the signature for the groups ()<sup>3</sup>D<sub>4</sub>(q) and 
()<sup>2</sup>E<sub>6</sub>(q) requires the fields GF(q<sup>3</sup>) and GF(q<sup>2</sup>), respectively.
<P>
The possible series and the groups returned are:
<DL COMPACT class='compact'>
<DT></DT><DD><TT>"A"</TT>: n&ge;0, A<sub>n</sub>(q), the special linear group SL(n + 1, q).
<DT></DT><DD><TT>"B"</TT>: n&ge;1, B<sub>n</sub>(q), the orthogonal group &Omega;(2n + 1, q).
<DT></DT><DD><TT>"C"</TT>: n&ge;1, C<sub>n</sub>(q), the symplectic group Sp(2n, q).
<DT></DT><DD><TT>"D"</TT>: n&ge;1, D<sub>n</sub>(q), the orthogonal group D_n(q) = Omega+(2n, q).
<P>
<DT></DT><DD><TT>"E"</TT>: n&isin;{ 6, 7, 8 }, the exceptional groups E<sub>n</sub>(q).
E<sub>6</sub>(q) is represented as a matrix group of degree 27.  It is simple
unless q &equiv; 1 mod 3, in which case its centre has order 3.
E<sub>7</sub>(q) is represented as a matrix group of degree 56.  It is simple
unless q &equiv; 1 mod 2, in which case its centre has order 2.
E<sub>8</sub>(q) is represented as a matrix group of degree 248.
<P>
<DT></DT><DD><TT>"F"</TT>: n = 4, the exceptional group F<sub>4</sub>(q) represented as a matrix
group of degree 26.  If q = 3<sup>k</sup> then this representation is reducible.
An irreducible representation is not yet available.
<DT></DT><DD><TT>"G"</TT>: n = 2, the exceptional group G<sub>2</sub>(q) represented as a matrix
group of degree 7.  If q = 2<sup>k</sup> then this representation is reducible.
An irreducible representation of degree 6 can be obtained by setting the
parameter <TT>Irreducible := true</TT>.
<DT></DT><DD><TT>"2A"</TT>: n&ge;1, K = GF(q<sup>2</sup>), the special unitary group 2A_n(q) = SU(n + 1, q).
<DT></DT><DD><TT>"2B"</TT>: n = 2, K = GF(q), q = 2<sup>2k + 1</sup>, the Suzuki group 2B_2(q) = Sz(q).
<DT></DT><DD><TT>"2D"</TT>: n&ge;1, K =GF(q), ()<sup>2</sup>D<sub>n</sub>(q), the orthogonal group 2D_n(q) = Omega-(2n, q).
<DT></DT><DD><TT>"3D"</TT>: n = 4, K = GF(q<sup>3</sup>), the exceptional group 3D_4(q).
<DT></DT><DD><TT>"2E"</TT>: n = 6, K = GF(q<sup>2</sup>), the exceptional group 2E_6(q).
<DT></DT><DD><TT>"2F"</TT>: n = 4, K=GF(q), q = 2<sup>2k + 1</sup>, the Ree group 2F_4(q), simple
except when q = 2 when the derived group is simple and is returned by the
function <TT>TitsGroup</TT>.
<DT></DT><DD><TT>"2G"</TT>: n = 2, K = GF(q), q = 3<sup>2k + 1</sup>, the Ree
group 2G_2(q), simple except when q = 3.</DL>
</BLOCKQUOTE>
<H4><A NAME = "8337">The Orders of the Chevalley Groups</A></H4>



<H5><A NAME = "8338">ChevalleyOrderPolynomial(type, n: parameters) : MonStgElt, RngIntElt -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
The orders of the universal Chevalley groups X<sub>n</sub>(q) and ()<sup>t</sup>X<sub>n</sub>(q) are
polynomials in q.  For the twisted groups of types ()<sup>2</sup>A<sub>n</sub>, ()<sup>3</sup>D<sub>4</sub> and 
()<sup>2</sup>E<sub>6</sub> the parameter q is the order of the fixed field of the Frobenius 
automorphism.
<P>
Other versions of Chevalley groups are quotients of universal Chevalley groups 
modulo a subgroup of the centre.
</BLOCKQUOTE>
<H5><A NAME = "8339">FactoredChevalleyGroupOrder(type, n, F: parameters) : MonStgElt, RngIntElt, FldFin -&gt; RngIntEltFact</A></H5>
<H5>FactoredChevalleyGroupOrder(type, n, q: parameters) : MonStgElt, RngIntElt, RngIntElt -&gt; RngIntEltFact</H5>

<PRE>    Proof: BoolElt                      Default: <TT>true</TT></PRE>

<PRE>    Version: MonStgElt                  Default: em "Default"</PRE>
<H5>ChevalleyGroupOrder(type, n, F: parameters) : MonStgElt, RngIntElt, FldFin -&gt; RngIntEltFact</H5>
<H5>ChevalleyGroupOrder(type, n, q: parameters) : MonStgElt, RngIntElt, RngIntElt -&gt; RngIntEltFact</H5>

<PRE>    Version: MonStgElt                  Default: em "Default"</PRE>
<BLOCKQUOTE>
The (factored) order of the Chevalley group of a given type and rank
over the field F (or GF(q)). The default is the order of the group returned by 
<TT>ChevalleyGroup</TT>, which except for types B<sub>n</sub>, D<sub>n</sub> and ()<sup>2</sup>D<sub>n</sub> is the
universal group.  The orders of the universal and adjoint Chevalley group can be obtained
by setting the parameter <TT>Version</TT> to <TT>Universal</TT> or <TT>Adjoint</TT>. In
the factored version the value of <TT>Proof</TT> is passed to the Magma's factorisation 
function (q.v.).
</BLOCKQUOTE>
<H4><A NAME = "8340">Classical Groups</A></H4>

<P>
<P>
Magma offers several functions to construct the classical groups.
For most of these functions, it is possible to specify the particular
group by giving one of the following combinations of arguments:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>The degree n and the coefficient field K of the desired
matrix group;
<DT>(ii)</DT><DD>The degree n of the desired matrix group and a prime power q
which relates the group to the appropriate Lie algebra.  With the exception of
the unitary groups (which will be defined over GF(q<sup>2</sup>)),
the resulting group will be defined over GF(q); or,
<DT>(iii)</DT><DD>A full vector space V = K<sup>n</sup> on which the desired matrix group
should act naturally.</DL>


<H5><A NAME = "8341">Linear Groups</A></H5>



<H5><A NAME = "8342"></A><A NAME = "GeneralLinearGroup">GeneralLinearGroup</A>(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>GeneralLinearGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GeneralLinearGroup(V) : ModTupRng -&gt; GrpMat</H5>
<H5>GL(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>GL(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GL(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is a positive integer, q is the power of a prime,
K is a finite field GF(q), and V is an n-dimensional
vector space over K. This function constructs the general 
linear group GL(n, q) (resp. GL(n, K), GL(V)) in terms 
of generating matrices. The intrinsic name may be abbreviated 
to <TT>GL</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8343">SpecialLinearGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpecialLinearGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpecialLinearGroup(V) : ModTupRng -&gt; GrpMat</H5>
<H5>SL(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>SL(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SL(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is a positive integer, q is the power of a prime,
K is a finite field GF(q), and V is an n-dimensional
vector space over K. This function constructs the 
special linear group SL(n, q) (resp. SL(n, K), SL(V)),
namely the group of n x n matrices of determinant 1,
in terms of generating matrices. The intrinsic name may be 
abbreviated to <TT>SL</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8344">AffineGeneralLinearGroup(GrpMat, n, q) : Cat, RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>AffineGeneralLinearGroup(GrpMat, n, K) : Cat, RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>AffineGeneralLinearGroup(GrpMat, V) : Cat, ModTupRng -&gt; GrpMat</H5>
<H5>AffineGeneralLinearGroup(E) : GrpPerm -&gt; GrpPerm</H5>
<H5>AGL(GrpMat, n, q) : Cat, RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>AGL(GrpMat, n, K) : Cat, RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>AGL(GrpMat, V) : Cat, ModTupRng -&gt; GrpMat</H5>
<H5>AGL(E) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
Here n is a positive integer greater than or equal to 2, q is the 
power of a prime, K is a finite field GF(q), and V is an 
n-dimensional vector space over K. This function constructs 
the affine general linear group AGL(n, q) (resp. AGL(n, K), 
AGL(V)) as a subgroup of GL(n + 1, K). If the category name 
<TT>GrpMat</TT> is omitted the affine group will be returned as a 
permutation group. The intrinsic name may be abbreviated to <TT>AGL</TT>.
<P>
If E is a regular elementary abelian permutation group the function
constructs the affine general linear group of E, regarded
as a vector space over the field GF(p), where p is the exponent
of E.
</BLOCKQUOTE>
<H5><A NAME = "8345">AffineSpecialLinearGroup(GrpMat, n, q) : Cat, RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>AffineSpecialLinearGroup(GrpMat, n, K) : Cat, RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>AffineSpecialLinearGroup(GrpMat, V) : Cat, ModTupRng -&gt; GrpMat</H5>
<H5>ASL(GrpMat, n, q) : Cat, RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>ASL(GrpMat, n, K) : Cat, RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>ASL(GrpMat, V) : Cat, ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is a positive integer greater than or equal to 2, q is the 
power of a prime, K is a finite field GF(q), and V is an 
n-dimensional vector space over K. This function constructs 
the affine special linear group ASL(n, q) (resp. ASL(n, K), 
ASL(V)) as a subgroup of SL(n + 1, K). If the category name 
<TT>GrpMat</TT> is omitted, the affine group will be returned as a 
permutation group. The intrinsic name may be abbreviated to <TT>ASL</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8346">Unitary Groups</A></H5>



<H5><A NAME = "8347"></A><A NAME = "ConformalUnitaryGroup">ConformalUnitaryGroup</A>(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>ConformalUnitaryGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>ConformalUnitaryGroup(V): ModTupRng -&gt; GrpMat</H5>
<H5>CU(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>CU(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>CU(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n &ge;2 is a positive integer, q is the power of a prime, 
K is the finite field GF(q<sup>2</sup>), and V is the n-dimensional 
vector space over K. This function constructs the conformal unitary 
group CU(n, q) (resp. CU(n, K), CU(V)) in terms of 
generating matrices. The intrinsic name may be abbreviated to 
<TT>CU</TT>. A conformal unitary group is the group that preserves
a unitary form up to a constant.
</BLOCKQUOTE>
<H5><A NAME = "8348">GeneralUnitaryGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>GeneralUnitaryGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GeneralUnitaryGroup(V): ModTupRng -&gt; GrpMat</H5>
<H5>GU(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>GU(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GU(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n &ge;2 is a positive integer, q is the power of a prime, 
K is the finite field GF(q<sup>2</sup>), and V is the n-dimensional 
vector space over K. This function constructs the general unitary 
group GU(n, q) (resp. GU(n, K), GU(V)) in terms of 
generating matrices. The intrinsic name may be abbreviated to 
<TT>GU</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8349">SpecialUnitaryGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpecialUnitaryGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpecialUnitaryGroup(V): ModTupRng -&gt; GrpMat</H5>
<H5>SU(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>SU(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SU(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an integer greater than or equal to 2, q is the power 
of a prime, K is the finite field GF(q<sup>2</sup>), and V is the 
n-dimensional vector space over K. This function constructs 
the special unitary group SU(n, q) (resp. SU(n, K), SU(V)) 
in terms of generating matrices. The intrinsic name may be abbreviated 
to <TT>SU</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8350">Symplectic Groups</A></H5>



<H5><A NAME = "8351">ConformalSymplecticGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>ConformalSymplecticGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>ConformalSymplecticGroup(V) : ModTupRng -&gt; GrpMat</H5>
<H5>CSp(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>CSp(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>CSp(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 4, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the conformal symplectic group CSp(n, q) (resp. CSp(n, K), CSp(V)) 
in terms of generating matrices. The intrinsic name may be 
abbreviated to <TT>CSp</TT>. A conformal symplectic group is the group that 
preserves a symplectic form up to a constant.
</BLOCKQUOTE>
<H5><A NAME = "8352">SymplecticGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SymplecticGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SymplecticGroup(V) : ModTupRng -&gt; GrpMat</H5>
<H5>Sp(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>Sp(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>Sp(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 4, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the symplectic group Sp(n, q) (resp. Sp(n, K), Sp(V)) 
in terms of two generating matrices. The intrinsic name may be 
abbreviated to <TT>Sp</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8353">Orthogonal and Spin Groups</A></H5>



<H5><A NAME = "8354">ConformalOrthogonalGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>ConformalOrthogonalGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>ConformalOrthogonalGroup(V): ModTupRng -&gt; GrpMat</H5>
<H5>CO(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>CO(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>CO(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an odd integer greater than or equal to 3, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the conformal orthogonal group CO(n, q) (resp. CO(n, K), CO(V)) 
in terms of generating matrices. The intrinsic name may be 
abbreviated to <TT>CO</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8355">GeneralOrthogonalGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>GeneralOrthogonalGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GeneralOrthogonalGroup(V): ModTupRng -&gt; GrpMat</H5>
<H5>GO(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>GO(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GO(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an odd integer greater than or equal to 3, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the general orthogonal group GO(n, q) (resp. GO(n, K), GO(V)) 
in terms of generating matrices. The intrinsic name may be 
abbreviated to <TT>GO</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8356">SpecialOrthogonalGroup(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpecialOrthogonalGroup(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpecialOrthogonalGroup(V): ModTupRng -&gt; GrpMat</H5>
<H5>SO(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>SO(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SO(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an odd integer greater than or equal to 3, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the special orthogonal group SO(n, q) (resp. SO(n, K), 
SO(V)) in terms of generating matrices. The intrinsic name 
may be abbreviated to <TT>SO</TT>. In characteristic 2 the group coincides
with the general orthogonal group and is <I>not</I> the kernel of the
Dickson invariant.
</BLOCKQUOTE>
<H5><A NAME = "8357">ConformalOrthogonalGroupPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>ConformalOrthogonalGroupPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>ConformalOrthogonalGroupPlus(V): ModTupRng -&gt; GrpMat</H5>
<H5>COPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>COPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>COPlus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the conformal orthogonal group CO^ + (n, q) (resp. CO^ + (n, K), CO^ + (V)) 
in terms of generating matrices. The intrinsic name may be 
abbreviated to <TT>COPlus</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8358">GeneralOrthogonalGroupPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>GeneralOrthogonalGroupPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GeneralOrthogonalGroupPlus(V): ModTupRng -&gt; GrpMat</H5>
<H5>GOPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>GOPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GOPlus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the general orthogonal group GO^ + (n, q) (resp. GO^ + (n, K), 
GO^ + (V)) in terms of generating matrices. The intrinsic name 
may be abbreviated to <TT>GOPlus</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8359">SpecialOrthogonalGroupPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpecialOrthogonalGroupPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpecialOrthogonalGroupPlus(V): ModTupRng -&gt; GrpMat</H5>
<H5>SOPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>SOPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SOPlus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the special orthogonal group SO^ + (n, q) (resp. SO^ + (n, K), 
SO^ + (V)) in terms of generating matrices. The intrinsic name 
may be abbreviated to <TT>SOPlus</TT>. In characteristic 2 the group coincides
with <TT>GOPlus</TT> and is <I>not</I> the kernel of the Dickson invariant.
</BLOCKQUOTE>
<H5><A NAME = "8360">ConformalOrthogonalGroupMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>ConformalOrthogonalGroupMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>ConformalOrthogonalGroupMinus(V): ModTupRng -&gt; GrpMat</H5>
<H5>COMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>COMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>COMinus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the conformal orthogonal group CO^ - (n, q) (resp. CO^ - (n, K), CO^ - (V)) 
in terms of generating matrices. The intrinsic name may be 
abbreviated to <TT>COMinus</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8361">GeneralOrthogonalGroupMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>GeneralOrthogonalGroupMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GeneralOrthogonalGroupMinus(V): ModTupRng -&gt; GrpMat</H5>
<H5>GOMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>GOMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>GOMinus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the general orthogonal group GO^ - (n, q) (resp. GO^ - (n, K), 
GO^ - (V)) in terms of generating matrices. The intrinsic name 
may be abbreviated to <TT>GOMinus</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8362">SpecialOrthogonalGroupMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpecialOrthogonalGroupMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpecialOrthogonalGroupMinus(V): ModTupRng -&gt; GrpMat</H5>
<H5>SOMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>SOMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SOMinus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the special orthogonal group SO^ - (n, q) (resp. SO^ - (n, K), 
SO^ - (V)) in terms of generating matrices. The intrinsic name 
may be abbreviated to <TT>SOMinus</TT>. In characteristic 2 the group coincides
with <TT>GOMinus</TT> and is <I>not</I> the kernel of the Dickson invariant.
</BLOCKQUOTE>
<H5><A NAME = "8363">Omega(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>Omega(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>Omega(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an odd integer greater than or equal to 3, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the orthogonal group &Omega;(n, K) (resp. &Omega;(n, K), 
&Omega;(V)) in terms of two generating matrices. The group
&Omega;(n, K) is the kernel of the spinor norm map on SO(n, K)).
</BLOCKQUOTE>
<H5><A NAME = "8364">OmegaPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>OmegaPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>OmegaPlus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the orthogonal group &Omega;^ + (n, q) (resp. &Omega;^ + (n, K), 
&Omega;^ + (V)) in terms of two generating matrices. The group
&Omega;^ + (n, K) is the kernel of the spinor norm map on SO^ + (n, K).
</BLOCKQUOTE>
<H5><A NAME = "8365">OmegaMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>OmegaMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>OmegaMinus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the orthogonal group &Omega;^ - (n, q) (resp. &Omega;^ - (n, K), 
&Omega;^ - (V)) in terms of two generating matrices. The group
&Omega;^ - (n, K) is the kernel of the spinor norm map on SO^ - (n, K).
</BLOCKQUOTE>
<H5><A NAME = "8366">Spin(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>Spin(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>Spin(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an odd integer greater than or equal to 1, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the spin group Spin(n, K) (resp. Spin(n, K), 
Spin(V)).
</BLOCKQUOTE>
<H5><A NAME = "8367">SpinPlus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpinPlus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpinPlus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 2, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the spin group Spin^ + (n, K) (resp. Spin^ + (n, K), 
Spin^ + (V)).
</BLOCKQUOTE>
<H5><A NAME = "8368">SpinMinus(n, q) : RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<H5>SpinMinus(n, K) : RngIntElt, FldFin -&gt; GrpMat</H5>
<H5>SpinMinus(V): ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here n is an even integer greater than or equal to 4, q is the 
power of a prime, K is the finite field GF(q), and V is the 
n-dimensional vector space over K. This function constructs 
the spin group Spin^ - (n, K) (resp. Spin^ - (n, K), 
Spin^ - (V)).
</BLOCKQUOTE>
<H4><A NAME = "8369">Exceptional Groups</A></H4>



<H5><A NAME = "8370">Suzuki Groups</A></H5>

<P>
<P>
The Suzuki groups are specified slightly differently, as the degree of
the group is always four. Thus for this family of groups, the possible
combinations of arguments are:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A finite field K = GF(2<sup>2m + 1</sup>), over which the resulting
matrix group is defined;
<DT>(ii)</DT><DD>An integer q = 2<sup>2m + 1</sup>, corresponding to the field K = GF(q)
over which the resulting matrix group is defined; or,
<DT>(iii)</DT><DD>A vector space V = K<sup>4</sup> where K = GF(2<sup>2m + 1</sup>) on which the
resulting matrix group acts naturally.
which the resulting</DL>


<H5><A NAME = "8371">SuzukiGroup(q) : RngIntElt -&gt; GrpMat</A></H5>
<H5>SuzukiGroup(K) : FldFin -&gt; GrpMat</H5>
<H5>SuzukiGroup(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here q is a prime power of the form 2<sup>2n + 1</sup>, K is the finite field 
GF(q), and V is the 4-dimensional vector space over K. This 
function constructs the Suzuki simple group Sz(q) (resp. Sz(K), 
Sz(V)) in terms of two generating matrices. The intrinsic name 
may be abbreviated to <TT>Sz</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8372">Example <TT>GrpASim_Symplectic (H70E1)</TT></A></H3>
We create the 10-dimensional symplectic group over GF(8):
<P>
<P>
<PRE>
&gt; F&lt;u&gt; := FiniteField(8);
&gt; G := SymplecticGroup(10, F);
&gt; G;
MatrixGroup(10, GF(2, 3))
Generators:
[  u   0   0   0   0   0   0   0   0   0]
[  0   1   0   0   0   0   0   0   0   0]
[  0   0   1   0   0   0   0   0   0   0]
[  0   0   0   1   0   0   0   0   0   0]
[  0   0   0   0   u   0   0   0   0   0]
[  0   0   0   0   0   u   0   0   0   0]
[  0   0   0   0   0   0   1   0   0   0]
[  0   0   0   0   0   0   0   1   0   0]
[  0   0   0   0   0   0   0   0   1   0]
[  0   0   0   0   0   0   0   0   0 u^6]


[0 0 0 1 1 1 0 0 0 0]
[1 0 0 0 0 0 0 0 0 0]
[0 1 0 0 0 0 0 0 0 0]
[0 0 1 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0]
[0 0 0 0 1 0 1 0 0 0]
[0 0 0 0 0 0 0 1 0 0]
[0 0 0 0 0 0 0 0 1 0]
[0 0 0 0 0 0 0 0 0 1]
[0 0 0 0 1 0 0 0 0 0]
</PRE>
<HR>
<H3><A NAME = "8373">Example <TT>GrpASim_Suzuki (H70E2)</TT></A></H3>
We create the Suzuki group over GF(128):
<P>
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := FiniteField(128);
&gt; V := VectorSpace(F, 4);
&gt; S := SuzukiGroup(V);
&gt; S;
MatrixGroup(4, GF(2, 7))
Generators:
[0 0 0 1]
[0 0 1 0]
[0 1 0 0]
[1 0 0 0]


[  w^8     0     0     0]
[    0 w^120     0     0]
[    0     0   w^7     0]
[    0     0     0 w^119]


[   1    0    0    0]
[ w^8    1    0    0]
[   0    w    1    0]
[w^17  w^9  w^8    1]
&gt; Order(S);
34093383680
&gt; FactoredOrder(S);
[ &lt;2, 14&gt;, &lt;5, 1&gt;, &lt;29, 1&gt;, &lt;113, 1&gt;, &lt;127, 1&gt; ]
</PRE>
<HR>
<H5><A NAME = "8374">Small Ree Groups</A></H5>

<P>
<P>
The Ree groups ((<sup>2</sup>)G<sub>2</sub>(q)) are given in an irreducible matrix representation 
of degree seven. The possible combinations of arguments are:
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A finite field K = GF(3<sup>2m + 1</sup>) with m &gt; 0, over which the
matrix group is defined.
<P>
<DT>(ii)</DT><DD>An integer q = 3<sup>2m + 1</sup> with m &gt; 0, corresponding to the 
field K = GF(q) over which the group is defined; or,
<P>
<DT>(iii)</DT><DD>A vector space V = K<sup>7</sup> where K = GF(3<sup>2m + 1</sup>) with m &gt; 0, 
on which the matrix group acts naturally.</DL>


<H5><A NAME = "8375">ReeGroup(q) : RngIntElt -&gt; GrpMat</A></H5>
<H5>ReeGroup(K) : FldFin -&gt; GrpMat</H5>
<H5>ReeGroup(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here q is a prime power of the form q = 3<sup>2m + 1</sup> with m &gt;
0, K is the finite field GF(q), and V is the 7-dimensional
vector space over K.  This function constructs the Ree group
(<sup>2</sup>)G<sub>2</sub>(q) (resp. (<sup>2</sup>)G<sub>2</sub>(K), (<sup>2</sup>)G<sub>2</sub>(V)) in terms of standard
generating matrices. The intrinsic name may be abbreviated to <TT>Ree</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8376">Large Ree Groups</A></H5>

<P>
<P>
The Ree groups ((<sup>2</sup>)F<sub>4</sub>(q)) are given in an irreducible matrix representation 
of degree twenty-six. The possible combinations of arguments are:
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A finite field K = GF(2<sup>2m + 1</sup>) with m &gt; 0, over which the
matrix group is defined.
<P>
<DT>(ii)</DT><DD>An integer q = 2<sup>2m + 1</sup> with m &gt; 0, corresponding to the 
field K = GF(q) over which the group is defined; or,
<P>
<DT>(iii)</DT><DD>A vector space V = K<sup>26</sup> where K = GF(2<sup>2m + 1</sup>) with m &gt; 0, 
on which the matrix group acts naturally.</DL>


<H5><A NAME = "8377">LargeReeGroup(q) : RngIntElt -&gt; GrpMat</A></H5>
<H5>LargeReeGroup(K) : FldFin -&gt; GrpMat</H5>
<H5>LargeReeGroup(V) : ModTupRng -&gt; GrpMat</H5>
<BLOCKQUOTE>
Here q is a prime power of the form q = 2<sup>2m + 1</sup> with m &gt;
0, K is the finite field GF(q), and V is the 26-dimensional
vector space over K.  This function constructs the Ree group
(<sup>2</sup>)F<sub>4</sub>(q) (resp. (<sup>2</sup>)F<sub>4</sub>(K), (<sup>2</sup>)F<sub>4</sub>(V)) in terms of standard
generating matrices. The intrinsic name may be abbreviated to <TT>LargeRee</TT>.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text737.htm">[Next]</A><A  HREF = "text735.htm">[Prev]</A> <A  HREF = "text737.htm">[Right]</A> <A  HREF = "text735.htm">[Left]</A> <A  HREF = "text734.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>