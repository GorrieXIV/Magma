<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Element Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text430.htm">[Next]</A><A  HREF = "text428.htm">[Prev]</A> <A  HREF = "text430.htm">[Right]</A> <A  HREF = "text428.htm">[Left]</A> <A  HREF = "text421.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "4413">Element Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text429.htm#4414">Arithmetic Operators</A>
<LI> <A  HREF = "text429.htm#4415">Equality and Membership</A>
<LI> <A  HREF = "text429.htm#4416">Parent and Category</A>
<LI> <A  HREF = "text429.htm#4417">Predicates on Ring Elements</A>
<LI> <A  HREF = "text429.htm#4422">Minimal Polynomial, Norm and  Trace</A>
</UL>
<H4><A NAME = "4414">Arithmetic Operators</A></H4>

<P>
<P>
This section lists the basic arithmetic operations available for
elements of an algebraically closed field.
Elements are always kept in normal form with respect to the defining
relations of the field.
Computing the inverse of an element may cause a simplification
of the field to be performed.


<H5>+ a : FldACElt -&gt; FldACElt</H5>

<H5>- a : FldACElt -&gt; FldACElt</H5><P>

<H5>a + b : FldACElt, FldACElt -&gt; FldACElt</H5>

<H5>a - b : FldACElt, FldACElt -&gt; FldACElt</H5>

<H5>a * b : FldACElt, FldACElt -&gt; FldACElt</H5>

<H5>a / b : FldACElt, FldACElt -&gt; FldACElt</H5>


<H5>a ^ k : FldACElt, RngIntElt -&gt; FldACElt</H5><P>

<H5>a +:= b : FldACElt, FldACElt -&gt; FldACElt</H5>

<H5>a -:= b : FldACElt, FldACElt -&gt; FldACElt</H5>

<H5>a *:= b : FldACElt, FldACElt -&gt; FldACElt</H5><P>


<H4><A NAME = "4415">Equality and Membership</A></H4>



<H4><A NAME = "4416">Parent and Category</A></H4>



<H5>Parent(a) : FldACElt -&gt; AC</H5>

<H5>Category(a) : FldACElt -&gt; Cat</H5><P>


<H4><A NAME = "4417">Predicates on Ring Elements</A></H4>



<H5>a ne b : FldACElt, FldACElt -&gt; BoolElt</H5>
<P>

<H5>a in A : FldACElt, Rng -&gt; BoolElt</H5>

<H5>a notin A : FldACElt, Rng -&gt; BoolElt</H5><P>

<H5>IsNilpotent(a) : FldACElt -&gt; BoolElt</H5>

<H5>IsIdempotent(a) : FldACElt -&gt; BoolElt</H5><P>

<H5>IsUnit(a) : FldACElt -&gt; BoolElt</H5>

<H5>IsZeroDivisor(a) : FldACElt -&gt; BoolElt</H5>

<H5>IsRegular(a) : FldAC -&gt; BoolElt</H5><P>

<H5>IsIrreducible(a) : FldACElt -&gt; BoolElt</H5>

<H5>IsPrime(a) : FldACElt -&gt; BoolElt</H5><P>




<H5><A NAME = "4418"></A><A NAME = "FldAC:IsZero">IsZero</A>(a) : FldACElt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return whether a is the zero element of its field.
This is the most difficult of all arithmetic
functions for algebraically closed fields!
To determine whether a is zero, Magma computes the recursive GCD of a,
considered as a polynomial in its highest variable,
and the appropriate defining polynomial, to determine the result.  If
the GCD is non-trivial, then this forces a splitting of the defining
polynomial, all elements of the field are reduced, and the original
element may now be deemed to be zero (it may not be zero because
the cofactor of the GCD may be used to perform the simplification).
Despite the fact that simplifications may occur,
the return value of this function is <I>invariable</I>, and this fact is the most
important feature of the whole system, enabling the illusion of
a true field to be achieved!
</BLOCKQUOTE>
<H5><A NAME = "4419">IsOne(a) : FldACElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return whether a is one in its field, which is determined by testing whether
(a - 1) is zero.
Consequently, a simplification of the field may occur,
but the return value is invariable.
</BLOCKQUOTE>
<H5><A NAME = "4420">IsMinusOne(a) : FldACElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return whether a is minus one in its field, which is determined by
testing whether (a + 1) is zero.
Consequently, a simplification of the field may occur,
but the return value is invariable.
</BLOCKQUOTE>
<H5><A NAME = "4421">a eq b : FldACElt, FldACElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return whether a = b, which is determined by testing whether (a - b)
is zero.
Consequently, a simplification of the field may occur,
but the return value is invariable.
</BLOCKQUOTE>
<H4><A NAME = "4422">Minimal Polynomial, Norm and  Trace</A></H4>



<H5><A NAME = "4423"></A><A NAME = "FldAC:MinimalPolynomial">MinimalPolynomial</A>(a) : FldACElt -&gt; RngUPolElt</H5>
<BLOCKQUOTE>
Return the minimal polynomial of the element a of the field 
A, relative to the base field of A.
This is the unique minimal-degree <I>irreducible</I> monic polynomial with
coefficients in the base field, having a as a root.
<P>
This function works as follows.  First the minimal polynomial M of a
in the affine algebra corresponding to A is computed.
M may be reducible in general, so M is factored,
and for each irreducible factor F of M, F(a) is evaluated
and it is tested whether this evaluation is zero (using the
<A  HREF = "text429.htm#FldAC:IsZero">IsZero</A>
algorithm).  If M is not irreducible, some of these evaluations
will cause simplifications of the field, but
exactly one of the evaluations will be zero
and the corresponding irreducible F is the minimal polynomial
of a.
Consequently, after F is returned, F(a) will be
identically zero so the return value of this function <I>is invariable</I>.
<P>
Thus the illusion of a true field is sustained by forcing the minimal
polynomial of a to be irreducible, by first performing whatever
simplifications of A are necessary for this.  (In fact, computing
minimal polynomials in this way is one method of achieving
simplifications.)
</BLOCKQUOTE>
<H5><A NAME = "4424">Norm(a) : FldACElt -&gt; FldACElt</A></H5>
<BLOCKQUOTE>
Given an element a from an algebraically closed field A,
return the absolute norm of a to the base field of A. 
This is simply computed as ( - 1)^(Degree(M)) times the constant
coefficient of M, where M is the irreducible minimal polynomial
of a returned by <A  HREF = "text429.htm#FldAC:MinimalPolynomial">MinimalPolynomial</A>(a).
Consequently, a simplification of the field may occur,
but the return value is invariable.
</BLOCKQUOTE>
<H5><A NAME = "4425">Trace(a) : FldACElt -&gt; FldACElt</A></H5>
<BLOCKQUOTE>
Given an element a from an algebraically closed field A,
return the absolute trace of a to the base field of A. 
This is simply computed as the negation of the coefficient of x<sup>n - 2</sup>
in M, where M is the irreducible minimal polynomial of a returned
by <A  HREF = "text429.htm#FldAC:MinimalPolynomial">MinimalPolynomial</A>(a).  Consequently, a simplification of the
field may occur, but the return value is invariable.
</BLOCKQUOTE>
<H5><A NAME = "4426">Conjugates(a) : FldACElt -&gt; [ FldACElt ]</A></H5>
<BLOCKQUOTE>
Given an element a from an algebraically closed field A,
return the conjugates of a as a sequence of elements.
The conjugates of a are defined to be the roots in A
of the minimal polynomial of a, and a is always included.
This function is thus simply equivalent to: 
([t[1] : t in Roots(MinimalPolynomial(a), A)]).
(No multiplicities are returned as in the <A  HREF = "text425.htm#FldAC:Roots">Roots</A> function since
the minimal polynomial is always squarefree, of course.)
As this function first computes the minimal polynomials of a,
a simplification of the field may occur, but the return value is invariable.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "4427">Example <TT>FldAC_Functions (H42E4)</TT></A></H3>
<P>
<P>
We create two elements of an algebraically closed field
and note that they are conjugate.
<P>
<P>
<P>
<PRE>
&gt; A := AlgebraicClosure();  
&gt; x := Sqrt(A!2) + Sqrt(A!-3);  
&gt; y := Sqrt(A ! (-1 + 2*Sqrt(A!-6)));  
&gt; A;
Algebraically closed field with 4 variables
Defining relations:
[
    r4^2 - 2*r3 + 1,
    r3^2 + 6,
    r2^2 + 3,
    r1^2 - 2
]
&gt; x;
r2 + r1
&gt; y;
r4
&gt; x eq y; // depends on choice of square roots
false
&gt; Conjugates(x);
[
    r4,
    -r4,
    r5,
    r6
]
&gt; y in Conjugates(x);
true
</PRE>
Of course, x and y are conjugate if and only if they have the
same minimal polynomial, which is the case here:
<P>
<P>
<PRE>
&gt; P&lt;z&gt; := PolynomialRing(RationalField());
&gt; MinimalPolynomial(x);
z^4 + 2*z^2 + 25
&gt; MinimalPolynomial(y);
z^4 + 2*z^2 + 25
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text430.htm">[Next]</A><A  HREF = "text428.htm">[Prev]</A> <A  HREF = "text430.htm">[Right]</A> <A  HREF = "text428.htm">[Left]</A> <A  HREF = "text421.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>