<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>The Vertex--Set and Edge--Set of a Graph</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1787.htm">[Next]</A><A  HREF = "text1785.htm">[Prev]</A> <A  HREF = "text1787.htm">[Right]</A> <A  HREF = "text1785.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19716">The Vertex--Set and Edge--Set of a Graph</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1786.htm#19717">Introduction</A>
<LI> <A  HREF = "text1786.htm#19718">Creating Edges and Vertices</A>
<LI> <A  HREF = "text1786.htm#19730">Operations on Vertex-Sets and  Edge-Sets</A>
<LI> <A  HREF = "text1786.htm#19746">Operations on Edges and Vertices</A>
</UL>
<H4><A NAME = "19717">Introduction</A></H4>

<P>
<P>
<P>
<P>
<P>
Let G be a graph on n vertices and m edges
  whose vertex-set is V = {v<sub>1</sub>, ..., v<sub>m</sub>}
  and edge-set is E = {e<sub>1</sub>, ..., e<sub>m</sub>}. 
A graph created by Magma consists of three objects: 
  the <I>vertex-set</I> V, the
  <I>edge-set</I> E and the graph G itself. 
The vertex-set and edge-set of
 a graph are <I>enriched</I> sets and consequently constitute types. 
The vertex-set and edge-set are returned as the second and
  third arguments, respectively, by all functions which create graphs.
Alternatively, a pair of functions are provided to extract the vertex-set
and edge-set of a graph G. 
The main purpose of having vertex-sets and
  edge-sets as types is to provide a convenient mechanism for referring to
  vertices and edges of a graph. 
Here, the functions applicable to vertex-sets and edge-sets are described.


<H4><A NAME = "19718">Creating Edges and Vertices</A></H4>



<H5><A NAME = "19719">EdgeSet(G) : Grph -&gt; GrphEdgeSet</A></H5>
<BLOCKQUOTE>
Given a graph G, return the edge-set of G.
</BLOCKQUOTE>
<H5><A NAME = "19720">Edges(G) : Grph -&gt; {@ GrphEdge @}</A></H5>
<BLOCKQUOTE>
A set E whose elements are the edges of the graph G. Note
that this creates an indexed set and not the edge-set of G, in
contrast to the function <TT>EdgeSet</TT>.
</BLOCKQUOTE>
<H5><A NAME = "19721">VertexSet(G) : Grph -&gt; GrphVertSet</A></H5>
<BLOCKQUOTE>
Given a graph G, return the vertex-set of G.
</BLOCKQUOTE>
<H5><A NAME = "19722">Vertices(G) : Grph -&gt; { GrphVert }</A></H5>
<BLOCKQUOTE>
A set V whose elements are the vertices of the graph G. In
contrast to the function <TT>VertexSet</TT>, this function returns
the collection of vertices of G in the form of an indexed set.
</BLOCKQUOTE>
<H5><A NAME = "19723">V ! v : GrphVertSet, . -&gt; GrphVert</A></H5>
<BLOCKQUOTE>
Given the vertex-set V of the graph G and an element v 
of the support of V, create the corresponding vertex of G.
</BLOCKQUOTE>
<H5><A NAME = "19724">V . i : GrphVertSet, RngIntElt -&gt; GrphVert</A></H5>
<BLOCKQUOTE>
Given a vertex-set V and an integer i such that 
1 &le;i &le;#V, create the vertex v<sub>i</sub> of V.
</BLOCKQUOTE>
<H5><A NAME = "19725">Index(v) : GrphVert -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a vertex v of some graph G, return the index of v 
in the (indexed) vertex-set of G.
</BLOCKQUOTE>
<H5><A NAME = "19726">E ! { u, v } : GrphEdgeSet,  .  -&gt; GrphEdge</A></H5>
<BLOCKQUOTE>
Given the edge-set E of the graph G and objects u, v 
belonging to the support of G, which correspond to adjacent 
vertices, create the edge uv of G.
</BLOCKQUOTE>
<H5><A NAME = "19727">E ! [u, v] : GrphEdgeSet, [ . ] -&gt; GrphEdge</A></H5>
<BLOCKQUOTE>
Given the edge-set E of the digraph G and objects u, v 
belonging to the support of G, which correspond to adjacent 
vertices, create the edge uv of G.
</BLOCKQUOTE>
<H5><A NAME = "19728">E . i : GrphEdgeSet, RngIntElt -&gt; GrphEdge</A></H5>
<BLOCKQUOTE>
Given an edge-set E and an integer i such that 1 &le;i &le;#E, 
create the i-th edge of E.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19729">Example <TT>Graph_EdgeSets (H155E8)</TT></A></H3>
The construction of vertices and edges is illustrated using the
Odd Graph, O<sub>3</sub>.
and then form its standard graph. 
<P>
<P>
<PRE>
&gt; S := Subsets({1..5}, 2);                                   
&gt; O3, V, E := Graph&lt; S | { {u,v} : u,v in S | IsDisjoint(u, v) } &gt;;
&gt; VertexSet(O3);
Vertex-set of O3
&gt; Vertices(O3); 
{@ { 1, 5 }, { 2, 5 }, { 1, 3 }, { 1, 4 }, { 2, 4 }, { 3, 5 }, 
{ 2, 3 }, { 1, 2 }, { 3, 4 }, { 4, 5 } @}
&gt; EdgeSet(O3);
Edge-set of O3
&gt; Edges(O3);  
{@ {{ 1, 5 }, { 2, 4 }}, {{ 1, 5 }, { 2, 3 }}, {{ 1, 5 }, { 3, 4 }}, 
{{ 2, 5 }, { 1, 3 }}, {{ 2, 5 }, { 1, 4 }}, {{ 2, 5 }, { 3, 4 }}, 
{{ 1, 3 }, { 2, 4 }}, {{ 1, 3 }, { 4, 5 }}, {{ 1, 4 }, { 3, 5 }}, 
{{ 1, 4 }, { 2, 3 }}, {{ 2, 4 }, { 3, 5 }}, {{ 3, 5 }, { 1, 2 }}, 
{{ 2, 3 }, { 4, 5 }}, {{ 1, 2 }, { 3, 4 }}, {{ 1, 2 }, { 4, 5 }} @}
&gt; u := V!{1, 2};
&gt; u, Type(u);
{1, 2} GrphVert
&gt; Index(u);
8
&gt; x := E!{ {1,2}, {3,4}};
&gt; x, Type(x);
{{ 1, 2 }, { 3, 4 }} GrphEdge
</PRE>
<HR>
<H4><A NAME = "19730">Operations on Vertex-Sets and  Edge-Sets</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
For each of the following operations, 
   S and T may be interpreted as either
   the vertex-set or the edge-set of the graph G. 
The variable s may be
   interpreted as either a vertex or an edge.  
The edge-set and vertex-set
   support all the standard set operations.


<H5><A NAME = "19731"># S : GrphVertSet -&gt; RngIntElt</A></H5>
<H5># S : GrphEdgeSet -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The cardinality of the set S.
</BLOCKQUOTE>
<H5><A NAME = "19732">s in S : GrphVert, GrphVertSet -&gt; BoolElt</A></H5>
<H5>s in S : GrphEdge, GrphEdgeSet -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the vertex (edge) s lies in the vertex-set (edge-set) S,
otherwise <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "19733">s notin S : GrphVert, GrphVertSet -&gt; BoolElt</A></H5>
<H5>s notin S : GrphEdge, GrphEdgeSet -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the vertex (edge) s 
  does not lie in the vertex-set (edge-set) S, otherwise <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "19734">S subset T : GrphVertSet, GrphVertSet -&gt; BoolElt</A></H5>
<H5>S subset T : GrphEdgeSet, GrphEdgeSet -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the vertex-set (edge-set) S is contained in the vertex-set
(edge-set) T, otherwise <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "19735">S notsubset T : GrphVertSet, GrphVertSet -&gt; BoolElt</A></H5>
<H5>S notsubset T : GrphEdgeSet, GrphEdgeSet -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the vertex-set (edge-set) S is not contained in the
vertex-set (edge-set) T, otherwise <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "19736">S eq T : GrphVertSet, GrphVertSet -&gt; BoolElt</A></H5>
<H5>S eq T : GrphEdgeSet, GrphEdgeSet -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the vertex-set (edge-set) S is equal to the vertex-set
  (edge-set) T.
</BLOCKQUOTE>
<H5><A NAME = "19737">s eq t : GrphVert, GrphVert -&gt; BoolElt</A></H5>
<H5>s eq t : GrphEdge, GrphEdge -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the vertex (edge) s 
  is equal to the vertex (edge) t.
</BLOCKQUOTE>
<H5><A NAME = "19738">S ne T : GrphVertSet, GrphVertSet -&gt; BoolElt</A></H5>
<H5>S ne T : GrphEdgeSet, GrphEdgeSet -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the vertex-set (edge-set) S 
  is not equal to the vertex-set (edge-set) T.
</BLOCKQUOTE>
<H5><A NAME = "19739">s ne t : GrphVert, GrphVert -&gt; BoolElt</A></H5>
<H5>s ne t : GrphEdge, GrphEdge -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the vertex (edge) s 
  is not equal to the vertex (edge) t.
</BLOCKQUOTE>
<H5><A NAME = "19740">ParentGraph(S) : GrphVertSet -&gt; Grph</A></H5>
<H5>ParentGraph(S) : GrphEdgeSet -&gt; Grph</H5>
<BLOCKQUOTE>
Return the graph G for which S is the vertex-set (edge-set).
</BLOCKQUOTE>
<H5><A NAME = "19741">ParentGraph(s) : GrphVert -&gt; Grph</A></H5>
<H5>ParentGraph(s) : GrphEdge -&gt; Grph</H5>
<BLOCKQUOTE>
Return the graph G for which s is a vertex (edge).
</BLOCKQUOTE>
<H5><A NAME = "19742">Random(S) : GrphVertSet -&gt; GrphVert</A></H5>
<H5>Random(S) : GrphEdgeSet -&gt; GrphEdge</H5>
<BLOCKQUOTE>
Choose a random element from the vertex-set (edge-set) S.
</BLOCKQUOTE>
<H5><A NAME = "19743">Representative(S) : GrphVertSet -&gt; GrphVert</A></H5>
<H5>Rep(S) : GrphVertSet -&gt; GrphVert</H5>
<H5>Representative(S) : GrphEdgeSet -&gt; GrphEdge</H5>
<H5>Rep(S) : GrphEdgeSet -&gt; GrphEdge</H5>
<BLOCKQUOTE>
Choose some element from the vertex-set (edge-set) S.
</BLOCKQUOTE>
<H5><A NAME = "19744">for x in S do ... end for;</A></H5>
<BLOCKQUOTE>
The vertex-set (edge-set) S may appear as the 
  range in the <TT>for</TT>-statement.
</BLOCKQUOTE>
<H5><A NAME = "19745">for random x in S do ... end for;</A></H5>
<BLOCKQUOTE>
The vertex-set (edge-set) S may appear as the 
  range in the <TT>for random</TT> - statement. 
</BLOCKQUOTE>
<H4><A NAME = "19746">Operations on Edges and Vertices</A></H4>



<H5><A NAME = "19747">EndVertices(e) : GrphEdge -&gt; { GrphVert }</A></H5>
<H5>EndVertices(e) : GrphEdge -&gt; [ GrphVert ]</H5>
<BLOCKQUOTE>
Given an edge e belonging to the graph G, return a set
containing the two end-vertices of e.
If G is a digraph return the two end-vertices in a sequence.
</BLOCKQUOTE>
<H5><A NAME = "19748">InitialVertex(e) : GrphEdge -&gt; GrphVert</A></H5>
<BLOCKQUOTE>
Given an undirected or directed 
  edge e from vertex u to vertex v, return  vertex u. 
This is useful in the undirected case since it indicates, where relevant,
  the direction
  in which the edge has been traversed.
</BLOCKQUOTE>
<H5><A NAME = "19749">TerminalVertex(e) : GrphEdge -&gt; GrphVert</A></H5>
<BLOCKQUOTE>
Given an undirected or directed  edge e from vertex u 
  to vertex v, return  vertex v.
This is useful in the undirected case since it indicates, where relevant,
  the direction
  in which the edge has been traversed.
</BLOCKQUOTE>
<H5><A NAME = "19750">IncidentEdges(u) : GrphVert -&gt; { GrphEdge }</A></H5>
<BLOCKQUOTE>
Given a vertex u of a graph G, return the set of all edges 
  incident with the vertex u.
If G is directed, then the set consists of 
  all the edges incident into u and from v.
<P>
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1787.htm">[Next]</A><A  HREF = "text1785.htm">[Prev]</A> <A  HREF = "text1787.htm">[Right]</A> <A  HREF = "text1785.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>