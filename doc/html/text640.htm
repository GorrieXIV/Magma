<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Normal and Subnormal  Subgroups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text641.htm">[Next]</A><A  HREF = "text639.htm">[Prev]</A> <A  HREF = "text641.htm">[Right]</A> <A  HREF = "text639.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7150">Normal and Subnormal  Subgroups</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text640.htm#7151">Characteristic Subgroups and Normal Series</A>
<LI> <A  HREF = "text640.htm#7170">Maximal and Minimal Normal  Subgroups</A>
<LI> <A  HREF = "text640.htm#7173">Lattice of Normal Subgroups</A>
<LI> <A  HREF = "text640.htm#7177">Composition and Chief Series</A>
<LI> <A  HREF = "text640.htm#7184">The Socle</A>
<LI> <A  HREF = "text640.htm#7201">The Soluble Radical and its Quotient</A>
<LI> <A  HREF = "text640.htm#7207">Complements and Supplements</A>
<LI> <A  HREF = "text640.htm#7215">Abelian Normal Subgroups</A>
</UL>
<H4><A NAME = "7151">Characteristic Subgroups and Normal Series</A></H4>



<H5><A NAME = "7152"></A><A NAME = "GrpPerm:DerivedSeries">DerivedSeries</A>(G) : GrpPerm -&gt; [ GrpPerm ]</H5>
<BLOCKQUOTE>
The derived series of the group G. The series is returned as
a sequence of subgroups. The algorithm used is described in
<A  HREF = "text628.htm#bib_perm-matrix-I">[BC82]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7153">CompositionSeries(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
A composition series of the group G, ie. a descending
chain of normal subgroups, such that each quotient is a simple group.
The series is returned as a sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "7154">CommutatorSubgroup(G) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>DerivedSubgroup(G) : GrpPerm -&gt; GrpPerm</H5>
<H5>DerivedGroup(G) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
The derived subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7155">SolubleResidual(G) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>SolvableResidual(G) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
The solvable residual (the last term of the derived series)
of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7156">DerivedLength(G) : GrpPerm -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The derived length of G. If G is non-soluble, the function
returns the number of terms in the series terminating with the
soluble residual.
</BLOCKQUOTE>
<H5><A NAME = "7157">LowerCentralSeries(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
The lower central series of G. The series is returned as a
sequence of subgroups, the first of which is the group G.
The algorithm used is described in <A  HREF = "text628.htm#bib_perm-matrix-I">[BC82]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7158">NilpotencyClass(G) : GrpPerm -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The nilpotency class of the group G. If the group
is not nilpotent, the value -1 is returned.
</BLOCKQUOTE>
<H5><A NAME = "7159">UpperCentralSeries(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
The upper central series of G. The series is returned as a
sequence of subgroups commencing with the trivial subgroup. 
The algorithm used is to compute the centre of G and then
section centralisers (see <A  HREF = "text628.htm#bib_luks-polynomial">[Luk93]</A>) up the chain.
This requires computing cores of subgroups, so 
this function is more restricted in its range of application 
than <TT>DerivedSeries</TT> and <TT>LowerCentralSeries</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7160">Centre(G) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>Center(G) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
Construct the centre of the group G.  The centre is found by applying
the function <TT>CentralizerOfNormalSubgroup</TT> to G in G.
</BLOCKQUOTE>
<H5><A NAME = "7161">Hypercentre(G) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>Hypercenter(G) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
Construct the hypercentre of the group G (the
stationary term of the upper central series).
</BLOCKQUOTE>
<H5><A NAME = "7162">pCore(G, p) : GrpPerm, RngIntElt -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a group G and a prime p, construct the maximal normal p-subgroup 
of G. The algorithm employed is described in Unger <A  HREF = "text628.htm#bib_unger">[Ung06b]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7163">pCoreQuotient(G, p) : GrpPerm, RngIntElt -&gt; GrpPerm, Map, GrpPerm</A></H5>
<BLOCKQUOTE>
Given a group G and a prime p, construct the quotient of G by 
<TT>K := pCore(G, p)</TT>.
The return values are the quotient, Q, represented as a 
permutation group of the same degree as G, the quotient map from G onto
Q, and K.
</BLOCKQUOTE>
<H5><A NAME = "7164">FittingGroup(G) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>FittingSubgroup(G) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
The Fitting subgroup of the group G. It is computed as the 
product of the p-cores of the radical of G.
</BLOCKQUOTE>
<H5><A NAME = "7165">FrattiniSubgroup(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a group G, return the Frattini subgroup. For p-groups this
is computed as the derived group with pth powers of the generators added. 
Solvable groups are
converted to their <TT>GrpPC</TT> representation and the problem solved there.
Non-solvable groups are treated by finding their maximal subgroups and
forming the intersection, so are subject to the same restrictions as the
<TT>MaximalSubgroups</TT> command.
</BLOCKQUOTE>
<H5><A NAME = "7166">JenningsSeries(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a p-group G, return the Jennings series for G. The
series is returned as a sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "7167">pCentralSeries(G, p) : GrpPerm, RngIntElt -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a soluble group G, and a prime p dividing |G|,
return the lower p-central series for G. The series is
returned as a sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "7168">SubnormalSeries(G, H) : GrpPerm, GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a group G and a subnormal subgroup H of G, return a
sequence of subgroups commencing with G and terminating with
H, such that each subgroup is normal in the previous one. If
H is not subnormal in G, the empty sequence is returned.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7169">Example <TT>GrpPerm_Series (H63E29)</TT></A></H3>
We compute the various series in the wreath product of the
symmetric group of degree 4 with the dihedral group of order 8 (a
soluble group).
<P>
<P>
<PRE>
&gt; G := WreathProduct(Sym(4), DihedralGroup(4));
&gt; G;
Permutation group G acting on a set of cardinality 16
    (1, 5, 9, 13)(2, 6, 10, 14)(3, 7, 11, 15)(4, 8, 12, 16)
    (1, 13)(2, 14)(3, 15)(4, 16)(5, 9)(6, 10)(7, 11)(8, 12)
    (1, 2, 3, 4)
    (1, 2)
&gt; [ FactoredOrder(H) : H in DerivedSeries(G) ];
[
    [ &lt;2, 15&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 12&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 9&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 8&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 8&gt; ],
    []
]
&gt; DerivedLength(G);
5
&gt; [ FactoredOrder(H) : H in LowerCentralSeries(G) ];
[
    [ &lt;2, 15&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 12&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 10&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 9&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 8&gt;, &lt;3, 4&gt; ]
]
&gt; NilpotencyClass(G);
-1
&gt; Centre(G);
Permutation group acting on a set of cardinality 16
Order = 1
    Id($)
&gt; pCentralSeries(G, 2);
[
    [ &lt;2, 15&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 12&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 10&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 9&gt;, &lt;3, 4&gt; ],
    [ &lt;2, 8&gt;, &lt;3, 4&gt; ]
]
&gt; [ FactoredOrder(H) : H in pCentralSeries(G, 3) ];
[
    [ &lt;2, 15&gt;, &lt;3, 4&gt; ]
]

</PRE>
<HR>
<H4><A NAME = "7170">Maximal and Minimal Normal  Subgroups</A></H4>



<H5><A NAME = "7171">MaximalNormalSubgroup(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
A maximal normal subgroup of G. The trivial subgroup is returned
if G is simple. The algorithm takes homomorphic reductions to a 
primitive group and then uses O'Nan-Scott type considerations to get
its result.
</BLOCKQUOTE>
<H5><A NAME = "7172">MinimalNormalSubgroups(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
The minimal normal subgroups of G. These are obtained by first 
computing the socle of G and then splitting off the normal factors.
</BLOCKQUOTE>
<H4><A NAME = "7173">Lattice of Normal Subgroups</A></H4>



<H5><A NAME = "7174">NormalSubgroups(G) : GrpPerm -&gt; [ Rec ]</A></H5>
<BLOCKQUOTE>
The normal subgroups of G. These are determined by the method of Cannon
and Souvignier <A  HREF = "text628.htm#bib_normal-subgps-permg">[CS]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7175">NormalLattice(G) : GrpPerm -&gt; SubGrpLat</A></H5>
<BLOCKQUOTE>
The normal subgroup lattice of G. The subgroups are first found 
using the same algorithm as the function <TT>NormalSubgroups</TT> and
then inclusions are determined.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7176">Example <TT>GrpPerm_NormalSubgroups (H63E30)</TT></A></H3>
We determine all normal subgroups of the wreath product of Sym(8) and the
dihedral group of order 8.
<P>
<P>
<P>
<PRE>
&gt; G := WreathProduct(Sym(8), DihedralGroup(4));                               
&gt; Order(G);
21143266346926080000
&gt; time N := NormalSubgroups(G);
Time: 1.050
&gt; #N;
29
&gt; [ &lt; Order(H`subgroup), FactoredOrder(H`subgroup) &gt; : H in N ];              
[
    &lt;1, []&gt;,
    &lt;165181768335360000, [ &lt;2, 24&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;330363536670720000, [ &lt;2, 25&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;660727073341440000, [ &lt;2, 26&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;1321454146682880000, [ &lt;2, 27&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;1321454146682880000, [ &lt;2, 27&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;1321454146682880000, [ &lt;2, 27&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;2642908293365760000, [ &lt;2, 28&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;5285816586731520000, [ &lt;2, 29&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;10571633173463040000, [ &lt;2, 30&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;,
    &lt;21143266346926080000, [ &lt;2, 31&gt;, &lt;3, 8&gt;, &lt;5, 4&gt;, &lt;7, 4&gt; ]&gt;
]
</PRE>
<HR>
<H4><A NAME = "7177">Composition and Chief Series</A></H4>



<H5><A NAME = "7178">ChiefFactors(G) : GrpPerm -&gt; [ &lt;RngIntElt, RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Given a group G, return a sequence of the isomorphism
types &lt;f, d, q, m&gt; of the chief factors.
An isomorphism type in a chief factor should be understood as the
direct product of m copies of the simple group described by &lt;f, d, q&gt;
(see <TT>CompositionFactors</TT> below). For the algorithm, see Unger 
<A  HREF = "text628.htm#bib_chief-series-unger">[Ung]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7179">ChiefSeries(G) : GrpPerm -&gt; [ GrpPerm ], [ &lt;RngIntElt, RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Given a group G, return the chief series of G and a sequence of the
corresponding isomorphism types &lt;f, d, q, m&gt; of the chief factors.
An isomorphism type in a chief factor should be understood as the
direct product of m copies of the simple group described by &lt;f, d, q&gt;
(see <TT>CompositionFactors</TT> below).
The series will be organised to include the soluble radical of G, and,
if G is insoluble, the socle of the quotient of G by the soluble radical.
</BLOCKQUOTE>
<H5><A NAME = "7180">CompositionFactors(G) : GrpPerm -&gt; [ &lt;RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Given a permutation group G, return a sequence S of tuples that
represent the composition factors of G, ordered according to some
composition series of G. Each tuple is a triple 
of integers f, d, q that defines the isomorphism type of 
the corresponding composition factor.  A triple &lt; f, d, q &gt;
describes a simple group as follows. The integer f defines
the family to which the group belongs, and d and q are the
parameters of the family.  The length of the sequence S is the 
number of composition factors of G. The algorithm used is the
"tabular" algorithm of Kantor <A  HREF = "text628.htm#bib_kantor-comp-factors">[Kan91]</A>, 
extended to be valid for groups of degree &le;2<sup>30</sup>.
<PRE>
The families are:
    f      family name
-------------------------
    1       A(d, q) 
    2       B(d, q) 
    3       C(d, q) 
    4       D(d, q) 
    5       G(2, q) 
    6       F(4, q) 
    7       E(6, q) 
    8       E(7, q) 
    9       E(8, q) 
   10       2A(d, q) 
   11       2B(2, q) 
   12       2D(d, q) 
   13       3D(4, q) 
   14       2G(2, q) 
   15       2F(4, q) 
   16       2E(6, q) 
   17       Alternating(d) 
   18       Sporadic group --- see next list
   19       Cyclic(q) 

For f=18, the sporadic groups are:
    d      group name
-------------------------    
    1      M_11
    2      M_12
    3      M_22
    4      M_23 
    5      M_24
    6      J_1
    7      HS
    8      J_2
    9      McL
   10      Suz
   11      J_3
   12      Co_1
   13      Co_2
   14      Co_3
   15      He
   16      Fi_22
   17      Fi_23
   18      Fi_24
   19      Ly
   20      Ru
   21      ON
   22      Th
   23      HN
   24      BM
   25      M
   26      J_4
</PRE>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7181">Example <TT>GrpPerm_CompFactors (H63E31)</TT></A></H3>
We illustrate the function <TT>CompositionFactors</TT>  by
applying it to the group associated with Rubik's cube.
<P>
<P>
<PRE>
&gt; G := sub&lt;Sym(48) |
&gt;     (1,3,8,6)(2,5,7,4)(9,48,15,12)(10,47,16,13)(11,46,17,14),
&gt;     (6,15,35,26)(7,22,34,19)(8,30,33,11)(12,14,29,27)(13,21,28,20),
&gt;     (1,12,33,41)(4,20,36,44)(6,27,38,46)(9,11,26,24)(10,19,25,18),
&gt;     (1,24,40,17)(2,18,39,23)(3,9,38,32)(41,43,48,46)(42,45,47,44),
&gt;     (3,43,35,14)(5,45,37,21)(8,48,40,29)(15,17,32,30)(16,23,31,22),
&gt;     (24,27,30,43)(25,28,31,42)(26,29,32,41)(33,35,40,38)(34,37,39,36)
&gt;         &gt;;
&gt; FactoredOrder(G);
[ &lt;2, 27&gt;, &lt;3, 14&gt;, &lt;5, 3&gt;, &lt;7, 2&gt;, &lt;11, 1&gt; ]
&gt; CompositionFactors(G);
     G
     |  Cyclic(2)
     *
     |  Alternating(12)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Cyclic(2)
     *
     |  Alternating(8)
     *
     |  Cyclic(3)
     *
     |  Cyclic(3)
     *
     |  Cyclic(3)
     *
     |  Cyclic(3)
     *
     |  Cyclic(3)
     *
     |  Cyclic(3)
     *
     |  Cyclic(3)
     1
</PRE>
<HR>
<H5><A NAME = "7182">PrimaryAbelianInvariants(G) : GrpPerm -&gt; [ RngIntElt ]</A></H5>
<H5>AbelianInvariants(G) : GrpPerm -&gt; [ RngIntElt ]</H5>
<BLOCKQUOTE>
Given an abelian group G, return a sequence Q containing
the types of each p-primary component of G.
The non-primary form gives the Smith form invariants, i.e. each element of
the sequence divides the next.
</BLOCKQUOTE>
<H5><A NAME = "7183">PrimaryAbelianBasis(G) : GrpPerm -&gt; [ GrpPermElt ], [ RngIntElt ]</A></H5>
<H5>AbelianBasis(G) : GrpPerm -&gt; [ GrpPermElt ], [ RngIntElt ]</H5>
<BLOCKQUOTE>
Given an abelian group G,  return sequences B and I where I
contains the types of each p-primary component of G and B contains
corresponding elements of G which have the order given and
generate G.
The non-primary form uses the Smith form invariants, i.e. each element of
the sequence divides the next.
</BLOCKQUOTE>
<H4><A NAME = "7184">The Socle</A></H4>



<H5><A NAME = "7185">Socle(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
The socle of the group G. This is computed using the algorithms 
described in Cannon and Holt <A  HREF = "text628.htm#bib_chief-series-permg">[CH97]</A>, extended to apply
to all degrees up to 2<sup>30</sup>.
</BLOCKQUOTE>
<H5><A NAME = "7186">SocleFactor(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
A simple factor of the socle of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7187">SocleFactors(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
The simple factors of the socle of the group G. The index of each factor 
in the sequence corresponds to the points of the image group of
<TT>SocleAction</TT> and <TT>SocleImage</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7188">SocleSeries(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
A chain of subgroups S<sub>1</sub>, S<sub>1</sub> x S<sub>2</sub>, ..., S<sub>1</sub> x ... x S<sub>r</sub>,
where S<sub>1</sub>, ..., S<sub>r</sub> are the simple factors of the socle
of the primitive group G.
</BLOCKQUOTE>
<H5><A NAME = "7189">EARNS(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
The elementary abelian regular normal subgroup (EARNS) of the
primitive group G. If G does not have an EARNS, then
the trivial subgroup is returned. The algorithm used is that of Neumann
<A  HREF = "text628.htm#bib_neumann-algs-permg">[Neu86]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7190">AffineGeneralLinearGroup(E) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>AGL(E) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
The affine general linear group of the elementary abelian group E, regarded
as a vector space over the field GF(p), where p is the exponent of E.
</BLOCKQUOTE>
<H5><A NAME = "7191">IsAffine(G) : GrpPerm -&gt; BoolElt, GrpPerm</A></H5>
<BLOCKQUOTE>
Decide if the permutation group G is of primitive affine type. If so,
the elementary abelian regular normal subgroup of G is returned as second
return value. If the group G is either intransitive or transitive and
imprimitive or primitive and not of affine type, then the result will be false
(only). This function combines <TT>IsTransitive</TT>, <TT>IsPrimitive</TT>
and <TT>EARNS</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7192">AffineAction(G) : GrpPerm -&gt; Hom, GrpPerm, GrpPerm</A></H5>
<BLOCKQUOTE>
Given a primitive group G which has a non-trivial elementary abelian
regular normal subgroup A, construct the representation of G given
by the action of G on elements of the elementary abelian group A.
The image is realised as a point-stabilizer in G and the kernel of
the action is A.
As with the other action functions, <TT>AffineAction</TT> returns the
homomorphism, the image and the kernel of the action.
</BLOCKQUOTE>
<H5><A NAME = "7193">AffineImage(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a primitive group G which has an elementary abelian
regular normal subgroup A, construct the permutation group that results
from the action of G on elements of the elementary abelian group A.
This image is realised as a point-stabilizer in G.
</BLOCKQUOTE>
<H5><A NAME = "7194">AffineKernel(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a primitive group G which has a non-trivial elementary abelian
regular normal subgroup A, construct the kernel of the action of G
on elements of the elementary abelian group A. This kernel equals A.
</BLOCKQUOTE>
<H5><A NAME = "7195">SocleAction(G) : GrpPerm -&gt; Hom, GrpPerm, GrpPerm</A></H5>
<BLOCKQUOTE>
Given a non-trivial permutation group G which has trivial Fitting subgroup, 
construct the permutation representation of G given by the action
of G on the simple factors of N.
Note that a primitive group has a perfect socle if
and only if it has no elementary abelian regular normal subgroup. 
As with the other action functions, <TT>SocleAction</TT>
returns the homomorphism, the image and the kernel of the action.
The socle factor corresponding to point i in the support of
the image group is the ith element in the sequence
<TT>SocleFactors(G)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7196">SocleImage(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a non-trivial permutation group G which has trivial Fitting subgroup, 
construct the permutation group L induced by the action of G
on the simple factors of N.
</BLOCKQUOTE>
<H5><A NAME = "7197">SocleKernel(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given a non-trivial permutation group G which has trivial Fitting subgroup, 
construct the kernel of the action of G on the simple factors of N.
</BLOCKQUOTE>
<H5><A NAME = "7198">SocleQuotient(G) : GrpPerm -&gt; GrpPerm, Hom, GrpPerm</A></H5>
<BLOCKQUOTE>
Given a permutation group G which has trivial Fitting subgroup, 
construct a permutation representation of G/N. If U<sub>i</sub> denote the
simple factors of N, then the degree of the result is bounded by
&sum;<sub>i</sub> |Out(U<sub>i</sub>)| (see Cannon and Souvignier <A  HREF = "text628.htm#bib_normal-subgps-permg">[CS]</A>).
Note that a primitive group has a perfect socle if
and only if it has no elementary abelian regular normal subgroup. 
<TT>SocleQuotient</TT> 
returns G/N, the quotient homomorphism and the 
kernel of the map (which is the socle of G).
</BLOCKQUOTE>
<H5><A NAME = "7199">RefineSection(G, M, N) : GrpPerm, GrpPerm, GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given M, N normal subgroups of G with N &lt; M, return a 
sequence of G-normal subgroups L<sub>1</sub>, ..., L<sub>r</sub> with N = L<sub>0</sub>,
L<sub>i</sub> &lt; L<sub>i + 1</sub> and L<sub>r</sub> = M such that each of the quotients
L<sub>i + 1</sub>/L<sub>i</sub> is either elementary abelian or a direct product of
non-abelian simple groups.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7200">Example <TT>GrpPerm_PrimitiveStructure (H63E32)</TT></A></H3>
We examine the normal structure of a primitive group, the
primitive-wreath product of Sym(5) and Sym(3) (with product action).
<P>
<P>
<PRE>
&gt; G := PrimitiveWreathProduct(Sym(5), Sym(3));
&gt; FactoredOrder(G);
[ &lt;2, 10&gt;, &lt;3, 4&gt;, &lt;5, 3&gt; ]
&gt; E := EARNS(G);
&gt; E;
Permutation group E acting on a set of cardinality 125
Order = 1
&gt; DerivedSeries(G);
[
    Permutation group G acting on a set of cardinality 125
    Order = 10368000 = 2^10 * 3^4 * 5^3

    Permutation group acting on a set of cardinality 125
    Order = 2592000 = 2^8 * 3^4 * 5^3,

    Permutation group acting on a set of cardinality 125
    Order = 864000 = 2^8 * 3^3 * 5^3,

    Permutation group S acting on a set of cardinality 125
    Order = 216000 = 2^6 * 3^3 * 5^3
]
&gt; S := Socle(G);
&gt; S;
Permutation group S acting on a set of cardinality 125
Order = 216000 = 2^6 * 3^3 * 5^3
&gt; Q := SocleFactors(G);
&gt; Q;
[
    Permutation group acting on a set of cardinality 125
    Order = 60 = 2^2 * 3 * 5,

    Permutation group acting on a set of cardinality 125
    Order = 60 = 2^2 * 3 * 5,

    Permutation group acting on a set of cardinality 125
    Order = 60 = 2^2 * 3 * 5
]
&gt; R := SocleSeries(G);
&gt; R;
[
    Permutation group acting on a set of cardinality 125
    Order = 60 = 2^2 * 3 * 5,

    Permutation group acting on a set of cardinality 125
    Order = 3600 = 2^4 * 3^2 * 5^2,

    Permutation group acting on a set of cardinality 125
    Order = 216000 = 2^6 * 3^3 * 5^3
]
&gt; SQ := SocleQuotient(G);                                                           
&gt; SQ;
Permutation group SQ acting on a set of cardinality 6
Order = 48 = 2^4 * 3
    (1, 2, 3)(4, 5, 6)
    (2, 3)(4, 5)
    Id($)
    (2, 4)
</PRE>
<HR>
<H4><A NAME = "7201">The Soluble Radical and its Quotient</A></H4>

<P>
<P>
Very efficient algorithms have been developed for computing invariants 
such as subgroups, normal subgroups and conjugacy classes of elements
for soluble groups defined by means of polycyclic presentations. Almost 
all such algorithms employ a top-down <I>Lifting Strategy</I>. Let P 
be a quotient-invariant property for a soluble group. In general, an
algorithm that constructs the set of elements or subgroups X<sub>P</sub>(G)
satisfying property P for the group G, proceeds as follows:  Let
G be a non-simple soluble group and let N be a normal subgroup of
G. The set X<sub>P</sub>(G/N) is constructed and its elements are lifted back
into G, thereby yielding X<sub>P</sub>(G). This process is usually iterated
with successive normal subgroups N being chosen as the terms of some
descending normal series (e.g., an elementary abelian series).
<P>
In generalizing this approach to permutation groups, our approach has
been to construct the soluble radical R of G, use special methods to
solve the problem for the quotient G/R, and then proceed (as in the
case of a soluble group) to lift the solution down the successive terms 
of an elementary abelian series for G using the Lifting Strategy. 
Derek Holt has shown that the quotient group G/R has a faithful 
permutation representation of degree no greater than that of G.
<P>
The functions in this section enable the user to construct the radical,
its quotient and an elementary abelian series.


<H5><A NAME = "7202">Radical(G) : GrpPerm -&gt; GrpPerm</A></H5>
<H5>SolubleRadical(G) : GrpPerm -&gt; GrpPerm</H5>
<H5>SolvableRadical(G) : GrpPerm -&gt; GrpPerm</H5>
<BLOCKQUOTE>
Given a group G, return the maximal normal solvable subgroup of G.
The algorithm used is described in Unger <A  HREF = "text628.htm#bib_unger">[Ung06b]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7203">RadicalQuotient(G) : GrpPerm -&gt; GrpPerm, Hom(GrpPerm), GrpPerm</A></H5>
<BLOCKQUOTE>
Given a group G, compute a representation of the quotient G/R where
R is the (solvable) radical of G.  The resulting representation has
the same degree as G.  Both the permutation group Q isomorphic to G/R and
a homomorphism &phi;: G -&gt; Q are returned. The algorithm proceeds by
repeatedly applying <TT>AbelianNormalQuotient</TT> up the terms of the derived 
series of the radical. The third return value is R, the radical of G
and the kernel of the homomorphism.
</BLOCKQUOTE>
<H5><A NAME = "7204">ElementaryAbelianSeries(G: parameters) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<H5>ElementaryAbelianSeries(G, N: parameters) : GrpPerm, GrpPerm -&gt; [ GrpPerm ]</H5>

<PRE>    LayerSizes: SeqEnum[RngIntElt]      Default: []</PRE>
<BLOCKQUOTE>
An elementary abelian series is a chain of normal subgroups
R = N<sub>1</sub> &gt; N<sub>2</sub> &gt; ... &gt; N<sub>r</sub> = 1 with the property that the quotient of
each pair of successive terms in the series is elementary abelian
and that there is no group R &lt; H &lt; G such that H/R is elementary
abelian and H normal in G.  The top of the series R is called the
solvable radical and is the maximal normal solvable subgroup of G.
<P>
In the second form N must be a normal subgroup of G and the
returned series has the form R = N<sub>1</sub> &gt; N<sub>2</sub> &gt; ... &gt; N<sub>r</sub> = N, so is
an elementary abelian series for G/N.
<P>
The parameter <TT>LayerSizes</TT> controls possible refinement of the
series. The default is no refinement. As an example, take
<TT>LayerSizes := [ 2, 5, 3, 4, 7, 3, 11, 2, 17, 1]</TT>.
When constructing an elementary abelian series for the group,
attempt to split 2-layers of size gt 2<sup>5</sup>, 3-layers of size gt 3<sup>4</sup>,
etc. The implied exponent for 13 is 2 and for all primes greater than 17
the exponent is 1. Setting <TT>LayerSizes</TT> to <TT>[2, 1]</TT> will attempt
to split all layers, resulting in a portion of a chief series for G.
</BLOCKQUOTE>
<H5><A NAME = "7205">ElementaryAbelianSeriesCanonical(G) : GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Gives a similar result to using <TT>ElementaryAbelianSeries</TT>, except the 
series returned depends only on the isomorphism
type of the solvable radical, and consists of characteristic subgroups of G.
This function may be slower than <TT>ElementaryAbelianSeries</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7206">Example <TT>GrpPerm_Radical (H63E33)</TT></A></H3>
We illustrate these functions by considering the group
of degree 16 generated by the following permutations:
<PRE>
(1, 8, 11, 3, 6, 14, 15, 10)(2, 7, 12, 4, 5, 13, 16, 9),
(1, 2)(3, 16, 9, 14, 8, 12)(4, 15, 10, 13, 7, 11),
(1, 13, 12, 16)(2, 14, 11, 15)(7, 9)(8, 10).
</PRE>
<P>
<P>
<PRE>
&gt; G := PermutationGroup&lt; 16 |
&gt;         (1, 8, 11, 3, 6, 14, 15, 10)(2, 7, 12, 4, 5, 13, 16, 9),
&gt;         (1, 2)(3, 16, 9, 14, 8, 12)(4, 15, 10, 13, 7, 11),
&gt;         (1, 13, 12, 16)(2, 14, 11, 15)(7, 9)(8, 10) &gt;;
&gt; Radical(G); 
Permutation group acting on a set of cardinality 16
Order = 256 = 2^8
   (3, 4)(5, 6)(7, 8)(13, 14)(15, 16)
   (3, 4)(7, 8)(9, 10)(11, 12)
   (7, 8)(13, 14)
   (1, 2)(7, 8)(9, 10)(11, 12)(13, 14)(15, 16)
   (9, 10)
   (15, 16)
   (11, 12)(15, 16)
   (13, 14)(15, 16)
&gt; RadicalQuotient(G);            
Permutation group acting on a set of cardinality 16
Order = 40320 = 2^7 * 3^2 * 5 * 7
   (1, 7, 11, 3, 5, 13, 15, 9)(2, 8, 12, 4, 6, 14, 16, 10)
   (3, 15, 9, 13, 7, 11)(4, 16, 10, 14, 8, 12)
   (1, 13, 11, 15)(2, 14, 12, 16)(7, 9)(8, 10)
Mapping from: GrpPerm: g to GrpPerm: $, Degree 16
&gt; ElementaryAbelianSeries(G);                                                 
[
   Permutation group acting on a set of cardinality 16
   Order = 256 = 2^8
       (3, 4)(5, 6)(7, 8)(13, 14)(15, 16)
       (3, 4)(7, 8)(9, 10)(11, 12)
       (7, 8)(13, 14)
       (1, 2)(7, 8)(9, 10)(11, 12)(13, 14)(15, 16)
       (9, 10)
       (15, 16)
       (11, 12)(15, 16)
       (13, 14)(15, 16),
   Permutation group acting on a set of cardinality 16
   Order = 1
]
</PRE>
<HR>
<H4><A NAME = "7207">Complements and Supplements</A></H4>



<H5><A NAME = "7208">Complements(G, M) : GrpPerm, GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a group G and a normal subgroup M, this function returns a 
sequence containing one representative from each conjugacy class of 
complements of M in G. 
</BLOCKQUOTE>
<H5><A NAME = "7209">Complements(G, M, N) : GrpPerm, GrpPerm, GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a group G, a normal subgroup M of G and a normal subgroup 
N of G, that is strictly contained in M, the function returns 
a sequence comprising representatives for the conjugacy classes of 
complements of M/N in G/N, as subgroups of G.
<P>
</BLOCKQUOTE>
<H5><A NAME = "7210">HasComplement(G, M) : GrpPerm, GrpPerm -&gt; BoolElt, GrpPerm</A></H5>
<BLOCKQUOTE>
The group M must be a normal subgroup of G. Returns whether M has
a complement in G and, if so, one such complement.
</BLOCKQUOTE>
<H5><A NAME = "7211">Supplements(G, M) : GrpPerm, GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a group G and a soluble normal subgroup M of G, the function
returns a sequence containing one representative from each conjugacy class 
of minimal supplements for M in G. 
</BLOCKQUOTE>
<H5><A NAME = "7212">Supplements(G, M, N) : GrpPerm, GrpPerm, GrpPerm -&gt; [ GrpPerm ]</A></H5>
<BLOCKQUOTE>
Given a group G, a normal subgroup M of G and a normal subgroup
N of G such that (a), N is strictly contained in M, and (b),
M/N is soluble, the function returns a sequence comprising representatives 
for the conjugacy classes of minimal supplements of M/N in G/N,
as subgroups of G.
</BLOCKQUOTE>
<H5><A NAME = "7213">HasSupplement(G, M) : GrpPerm, GrpPerm -&gt; BoolElt, GrpPerm</A></H5>
<BLOCKQUOTE>
The group M must be a soluble normal subgroup of G. Returns whether M has
a proper supplement in G and, if so, one such supplement.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7214">Example <TT>GrpPerm_Complements (H63E34)</TT></A></H3>
We illustrate these functions by considering a normal subgroup H
of the group G of degree 16 generated by the following permutations:
<PRE>
(1, 3, 2, 4)(5, 16, 6, 13)(7, 14, 8, 15)(9, 12, 11, 10),
(1, 16, 9)(2, 15, 12)(3, 14, 11)(4, 13, 10)(6, 8, 7).
</PRE>
<P>
<P>
<PRE>
&gt; G := PermutationGroup&lt; 16 |
&gt;         (1, 3, 2, 4)(5, 16, 6, 13)(7, 14, 8, 15)(9, 12, 11, 10),
&gt;         (1, 16, 9)(2, 15, 12)(3, 14, 11)(4, 13, 10)(6, 8, 7) &gt;;
Permutation group G acting on a set of cardinality 16
Order = 165888 = 2^11 * 3^4
    (1, 3, 2, 4)(5, 16, 6, 13)(7, 14, 8, 15)(9, 12, 11, 10)
    (1, 16, 9)(2, 15, 12)(3, 14, 11)(4, 13, 10)(6, 8, 7)
&gt; H := ncl&lt; G | (6, 7, 8)(14, 16, 15) &gt;;
&gt; H;
Permutation group H acting on a set of cardinality 16
Order = 6912 = 2^8 * 3^3
   (6, 7, 8)(14, 16, 15)
   (6, 7, 8)(13, 14, 15)
   (6, 7, 8)(9, 12, 11)
   (5, 8, 7)(13, 14, 15)
   (6, 7, 8)(10, 11, 12)
   (1, 2, 3)(6, 7, 8)
   (2, 4, 3)(6, 7, 8)
&gt; C := Complements(G, H);                                                          
&gt; C;
[
   Permutation group acting on a set of cardinality 16
   Order = 24 = 2^3 * 3
       (3, 4)(5, 14)(6, 15)(7, 16)(8, 13)(10, 12)
       (2, 4)(6, 7)(9, 14)(10, 15)(11, 13)(12, 16)
       (1, 14)(2, 15)(3, 16)(4, 13)(7, 8)(10, 11)
       (1, 14, 9)(2, 13, 10)(3, 16, 12)(4, 15, 11)(6, 8, 7)
]
</PRE>
<P>
So the normal subgroup has one conjugacy class of complements. We
check that the representative subgroup is indeed a complement for H.
<P>
<P>
<P>
<PRE>
&gt; K := C[1];
&gt; IsTrivial(K meet H );
true
&gt; #K * #H eq #G;
true
</PRE>
<HR>
<H4><A NAME = "7215">Abelian Normal Subgroups</A></H4>



<H5><A NAME = "7216">AbelianNormalSubgroup(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
An abelian normal subgroup of G.  If none exists, the trivial
subgroup is returned.
</BLOCKQUOTE>
<H5><A NAME = "7217">AbelianNormalQuotient(G, H) : GrpPerm, GrpPerm -&gt; GrpPerm, Hom(GrpPerm), GrpPerm</A></H5>
<BLOCKQUOTE>
A quotient of G by an abelian normal subgroup that contains the
abelian normal subgroup H. The quotient is represented as a permutation 
group of the same degree as G. The other values returned are the quotient 
epimorphism and its kernel K.
The kernel K will be abelian, K will contain H, #K and #H will
have the same prime divisors, and if H is elementary abelian then so is K.
</BLOCKQUOTE>
<H5><A NAME = "7218">SolubleNormalQuotient(G, H) : GrpPerm -&gt; GrpPerm, Hom(GrpPerm), GrpPerm</A></H5>
<BLOCKQUOTE>
A quotient of G by a soluble normal subgroup that contains the
soluble normal subgroup H. The quotient is represented as a permutation 
group of the same degree as G. The other values returned are the quotient 
epimorphism and its kernel K. As with <TT>AbelianNormalQuotient</TT>,
K will contain H, and #K and #H will have the same prime divisors.
</BLOCKQUOTE>
<H5><A NAME = "7219">ElementaryAbelianNormalSubgroup(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
An elementary abelian normal subgroup of G.  If none exists, the trivial
subgroup is returned. The group returned is the last non-trivial group in an 
elementary abelian series for the radical of G.
</BLOCKQUOTE>
<H5><A NAME = "7220">pElementaryAbelianNormalSubgroup(G, p) : GrpPerm, RngIntElt -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
An elementary abelian normal p-subgroup of G.  If none exists, the trivial
subgroup is returned. The group returned is the last non-trivial group in an 
elementary abelian series for the p-core of G.
</BLOCKQUOTE>
<H5><A NAME = "7221">MEANS(G) : GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
A minimal elementary abelian normal subgroup of G.
</BLOCKQUOTE>
<H5><A NAME = "7222">MEANS(G, N) : GrpPerm, GrpPerm -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
A minimal elementary abelian normal subgroup of G that lies in the
elementary abelian normal subgroup N of G.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text641.htm">[Next]</A><A  HREF = "text639.htm">[Prev]</A> <A  HREF = "text641.htm">[Right]</A> <A  HREF = "text639.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>