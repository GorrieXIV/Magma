<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creating Elements of a Braid  Group</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text851.htm">[Next]</A><A  HREF = "text849.htm">[Prev]</A> <A  HREF = "text851.htm">[Right]</A> <A  HREF = "text849.htm">[Left]</A> <A  HREF = "text847.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9774">Creating Elements of a Braid  Group</A></H3>

<P>
<P>
<P>
<P>
<P>
<P>
<P>
This section describes the facilities for creating elements of a braid group.


<H5><A NAME = "9775">Representative(B) : GrpBrd -&gt; GrpBrdElt</A></H5>
<H5>Rep(B) : GrpBrd -&gt; GrpBrdElt</H5>
<BLOCKQUOTE>
Given a braid group B, return a representative of B.
</BLOCKQUOTE>
<H5><A NAME = "9776">Identity(B) : GrpBrd -&gt; GrpBrdElt</A></H5>
<H5>Id(B) : GrpBrd -&gt; GrpBrdElt</H5>
<H5>B ! 1 : GrpBrd, RngIntElt -&gt; GrpBrdElt</H5>
<BLOCKQUOTE>
Given a braid group B, return the identity element of B.
</BLOCKQUOTE>
<H5><A NAME = "9777">FundamentalElement(B: parameters) : GrpBrd -&gt; GrpBrdElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: </PRE>
<BLOCKQUOTE>
Return the fundamental element for the presentation of B
indicated by the parameter <TT>Presentation</TT>. Possible values for this
parameter are <TT>"Artin"</TT> and <TT>"BKL"</TT>.
If the parameter <TT>Presentation</TT> is not used, the fundamental element
for the presentation currently selected for B is returned.
</BLOCKQUOTE>
<H5><A NAME = "9778">Generators(B: parameters) : GrpBrd -&gt; [ GrpBrd ]</A></H5>

<PRE>    Presentation: MonStgElt             Default: </PRE>
<BLOCKQUOTE>
Return a sequence containing the generators for the presentation of B
indicated by the parameter <TT>Presentation</TT>. Possible values for this
parameter are <TT>"Artin"</TT> and <TT>"BKL"</TT>.
If the parameter <TT>Presentation</TT> is not used, a sequence containing
the generators for the presentation currently selected for B is returned.
</BLOCKQUOTE>
<H5><A NAME = "9779">B . i : GrpBrd, RngIntElt -&gt; GrpBrdElt</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings and an integer i, where 0 &lt; |i| &lt; n,
return the |i|-th Artin generator s_i, if i&gt;0, or its
inverse s_{|i|}^{-1}, if i&lt;0.
</BLOCKQUOTE>
<H5><A NAME = "9780">B . T : GrpBrd, Tup -&gt; GrpBrdElt</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a tuple T = &lt;r, t&gt;, where
1 &le;|t| &lt; |r| &le;n, return the BKL generator a<sub>|r|, |t|</sub>, if
r, t&gt;0, or its inverse a<sub>|r|, |t|</sub><sup> - 1</sup> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9781">B ! [ i<sub>1</sub>, ..., i<sub>k</sub> ] : GrpBrd, [ RngIntElt ] -&gt; GrpBrdElt</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a sequence
[i<sub>1</sub>, ..., i<sub>k</sub>] of integers satisfying 0&lt;|i<sub>j</sub>|&lt;n (j=1, ..., k),
return the element of B given by the product
s_{|i_1|}^{sgn(i_1)}...s_{|i_k|}^{sgn(i_k)}.
</BLOCKQUOTE>
<H5><A NAME = "9782">B ! [ T<sub>1</sub>, ..., T<sub>k</sub> ] : GrpBrd, [ Tup ] -&gt; GrpBrdElt</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a sequence
[T<sub>1</sub>, ..., T<sub>k</sub>] of tuples satisfying T<sub>j</sub> = &lt;r<sub>j</sub>, t<sub>j</sub>&gt;,
1 &le;|t<sub>j</sub>| &lt; |r<sub>j</sub>| &le;n (j=1, ..., k),
return the element of B given by the product
a_{|r_1|,|t_1|}^{e_1}...a_{|r_k|,|t_k|}^{e_k}
where e<sub>j</sub> = 1 if r<sub>j</sub>, t<sub>j</sub> &gt; 0 and e<sub>j</sub> = - 1 otherwise (j=1, ..., k).
</BLOCKQUOTE>
<H5><A NAME = "9783"></A>B <A NAME = "GrpBrd:coerce_perm">!</A> p : GrpBrd, GrpPermElt -&gt; GrpBrdElt</H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a permutation p on n points,
return the simple element defined by p in the presentation
currently selected for B as new element of B.
<P>
Note that the result in general depends on the presentation
selected for B.  Note
further that in the BKL presentation, only permutations which are products
of parallel descending cycles correspond to simple elements; attempting to
coerce an invalid permutation will result in a runtime error.  The function
<A  HREF = "text850.htm#GrpBrd:IsProductOfParallelDescendingCycles">IsProductOfParallelDescendingCycles</A> can be used to test
whether a given permutation corresponds to a BKL simple element.
</BLOCKQUOTE>
<H5><A NAME = "9784">B ! [ p<sub>1</sub>, ...,p<sub>k</sub> ]: GrpBrd, [ GrpPermElt ] -&gt; GrpBrdElt</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a sequence [p<sub>1</sub>, ..., p<sub>k</sub>]
of permutations on n points, return the product c<sub>1</sub> ... c<sub>k</sub> as
new element of B, where c<sub>j</sub> is the simple element defined by p<sub>j</sub>
in the presentation currently selected for B (j=1, ..., k).
<P>
Note that the result in general depends on the presentation
selected for B.  Note
further that in the BKL presentation, only permutations which are products
of parallel descending cycles correspond to simple elements; attempting to
coerce a sequence containing an invalid permutation will result in a runtime
error.  The function
<A  HREF = "text850.htm#GrpBrd:IsProductOfParallelDescendingCycles">IsProductOfParallelDescendingCycles</A> can be used to test
whether a given permutation corresponds to a BKL simple element.
</BLOCKQUOTE>
<H5><A NAME = "9785"></A>B <A NAME = "GrpBrd:coerce_tuple">!</A> T : GrpBrd, Tup -&gt; GrpBrdElt</H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a tuple T = &lt;s, l, S, r&gt;, where
s is either the string <TT>"Artin"</TT> or the string <TT>"BKL"</TT>, l and r are integers
and S is a sequence [p<sub>1</sub>, ..., p<sub>k</sub>] of permutations on n points, return
the product D<sup>l</sup> c<sub>1</sub> ... c<sub>k</sub> D<sup>r</sup> as new element of B, where D is the
fundamental element and c<sub>j</sub> is the simple element defined by p<sub>j</sub>
(j=1, ..., k) in the presentation indicated by s.
<P>
Note that in the BKL presentation, only permutations which are products
of parallel descending cycles correspond to simple elements; if S
contains an invalid permutation, a runtime error will result.  Whether the
elements of a given sequence S correspond to BKL simple elements can be
tested using the function
<A  HREF = "text850.htm#GrpBrd:IsProductOfParallelDescendingCycles">IsProductOfParallelDescendingCycles</A>.
</BLOCKQUOTE>
<H5><A NAME = "GrpBrd:IsProductOfParallelDescendingCycles"></A><A NAME = "9786">IsProductOfParallelDescendingCycles(p) : GrpPermElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a permutation p on n points, return whether p is a product of
parallel descending cycles, that is, whether p defines a simple element
in the BKL monoid on n strings.
</BLOCKQUOTE>
<H5><A NAME = "9787">Random(B, r, s, m, n: parameters) : GrpBrd, RngIntElt, RngIntElt, RngIntElt, RngIntElt -&gt; GrpBrdElt</A></H5>
<H5>RandomCFP(B, r, s, m, n: parameters) : GrpBrd, RngIntElt, RngIntElt -&gt; GrpBrdElt</H5>
<H5>Random(B: parameters) : GrpBrd -&gt; GrpBrdElt</H5>
<H5>RandomCFP(B: parameters) : GrpBrd -&gt; GrpBrdElt</H5>

<PRE>    Presentation: MonStgElt             Default: </PRE>
<BLOCKQUOTE>
Given a braid group B and integers r, s, m, n, satisfying r&le;s and
0&le;m&le;n, a pseudo-random element of B is constructed as follows.
Let D be the fundamental element and C the set of simple elements
for the presentation indicated by the parameter <TT>Presentation</TT>.
First, integers e&isin;[r, s] and l&isin;[m, n] are chosen using uniform
distributions on these sets. Then, for i=1, ..., l, c<sub>i</sub> &isin;C is chosen
using a uniform distribution on C and the element D<sup>e</sup> c<sub>1</sub> ... c<sub>l</sub>
is returned.
<P>
If no value is given for the parameter <TT>Presentation</TT>, the presentation
selected for B is used.
<P>
The versions with a single argument are short for <TT>Random(B, 0, 0, 0, 42)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "9788">Random(B, m, n: parameters) : GrpBrd, RngIntElt, RngIntElt -&gt; GrpBrdElt</A></H5>
<H5>RandomWord(B, m, n: parameters) : GrpBrd, RngIntElt, RngIntElt -&gt; GrpBrdElt</H5>
<H5>RandomWord(B: parameters) : GrpBrd -&gt; GrpBrdElt</H5>

<PRE>    Presentation: MonStgElt             Default: </PRE>
<BLOCKQUOTE>
Given a braid group B and two integers 0&le;m&le;n, <TT>Random(B, m, n)</TT>
returns a pseudo-random element of B constructed as follows. First, a length
l&isin;[m, n] is chosen using a uniform distribution. Then, for i=1, ..., l,
g<sub>i</sub> &isin;X &cup;X<sup> - 1</sup> - {g<sub>i - 1</sub><sup> - 1</sup>} is chosen using a uniform
distribution on this set.  Here, X is the set of generators of the
presentation indicated by the parameter <TT>Presentation</TT> and X<sup> - 1</sup> is
the set of generator inverses.
<P>
If no value is given for the parameter <TT>Presentation</TT>, the presentation
selected for B is used.
<P>
The signature <TT>RandomWord(B)</TT> is short for <TT>RandomWord(B, 0, 42)</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9789">Example <TT>GrpBrd_Constructor (H78E1)</TT></A></H3>
<P>
<P>
We construct the braid group B on 6 strings and the symmetric group S on 6
points.
<P>
<P>
<PRE>
&gt; S := Sym(6);
&gt; B := BraidGroup(6);
&gt; B;
GrpBrd : B on 6 strings
</PRE>
By default, B is created using the Artin presentation.
<P>
<P>
<PRE>
&gt; GetPresentation(B);
Artin
</PRE>
We now define the fundamental element with respect to the BKL presentation of
B and print this element with respect to the presentation currently used
for B, that is, with respect to the Artin presentation.  Note that both
a word in the Artin generators and a representation of the element in terms
of Artin simple elements are printed.
<P>
<P>
<PRE>
&gt; D_BKL := FundamentalElement(B : Presentation := "BKL");
&gt; D_BKL;
B.5 * B.4 * B.3 * B.2 * B.1
&lt;Artin, 0, [
    (1, 6, 5, 4, 3, 2)
], 0&gt;
&gt; GetElementPrintFormat(B);
Both
</PRE>
We print the BKL generator a<sub>3, 1</sub>.
<P>
<P>
<PRE>
&gt; B.&lt;3,1&gt;;
B.2 * B.1 * B.2^-1
&lt;Artin, 0, [
    (1, 3, 2),
    (1, 6)(2, 5, 3, 4)
], -1&gt;
</PRE>
Next we change the format for printing elements of B using the function
<A  HREF = "text849.htm#GrpBrd:SetElementPrintFormat">SetElementPrintFormat</A> so that only a representation in terms
of simple elements is printed.
<P>
<P>
<PRE>
&gt; SetElementPrintFormat(~B, "CFP");
</PRE>
We now define and print several elements of B, illustrating the use of
some of the functions described in the previous section.
<P>
<P>
First we create a pseudo-random element of B as product of 3 random
simple elements for the Artin presentation.
<P>
<P>
<PRE>
&gt; u := Random(B, 0, 0, 3, 3);
&gt; u;
&lt;Artin, 0, [
    (1, 6)(3, 5, 4),
    (1, 3)(2, 6)(4, 5),
    (2, 3)
], 0&gt;
</PRE>
Next we define an element of B by a product of simple elements for the
BKL presentation using the coercion operator `<A  HREF = "text850.htm#GrpBrd:coerce_tuple">!</A>'.
Note that printing of this element is still done with respect to the Artin
presentation.
<P>
<P>
<PRE>
&gt; v := B ! &lt;"BKL", 0, [ S | (1,6)(3,5,4), (1,3)(4,5)], 0&gt;;
&gt; v;
&lt;Artin, 0, [
    (1, 6, 5, 4, 3, 2),
    (1, 2, 6)(3, 5),
    (2, 4, 5, 6),
    (1, 6)(2, 4, 3, 5)
], -2&gt;
</PRE>
Finally, we look at the simple elements defined by the permutations
p = (1, 3)(4, 2) and q = (1, 4, 3) on 6 points.
<P>
<P>
<PRE>
&gt; p := S ! (1,3)(4,2);
&gt; q := S ! (1,4,3);
</PRE>
Creating the simple elements for the Artin presentation defined by p
and q is straightforward using the coercion operator
`<A  HREF = "text850.htm#GrpBrd:coerce_perm">!</A>'.
<P>
<P>
<PRE>
&gt; p_Artin := B!p;
&gt; p_Artin;
&lt;Artin, 0, [
    (1, 3)(2, 4)
], 0&gt;


&gt; q_Artin := B!q;
&gt; q_Artin;
&lt;Artin, 0, [
    (1, 4, 3)
], 0&gt;
</PRE>
We now change the presentation used for B to the BKL presentation.  Note
that this also changes the presentation with respect to which elements are
printed.
<P>
<P>
<PRE>
&gt; SetPresentation(~B, "BKL");
&gt; GetPresentation(B);
BKL
</PRE>
The attempt to define a simple element for the BKL presentation using the
permutation p fails.
<P>
<P>
<PRE>
&gt; p_BKL := B!p;

&gt;&gt; p_BKL := B!p;
             ^
Runtime error in '!': Illegal coercion
LHS: GrpBrd
RHS: GrpPermElt
</PRE>
We should have been more careful:  using the function
<A  HREF = "text850.htm#GrpBrd:IsProductOfParallelDescendingCycles">IsProductOfParallelDescendingCycles</A> we see that p is not
a product of parallel descending cycles and hence does not define a
simple element for the BKL presentation.
<P>
<P>
<PRE>
&gt; IsProductOfParallelDescendingCycles(p);
false
</PRE>
q, on the other hand, does define a simple element for the BKL
presentation and we can coerce q to an element of B using the
operator `<A  HREF = "text850.htm#GrpBrd:coerce_perm">!</A>'.
<P>
<P>
<PRE>
&gt; IsProductOfParallelDescendingCycles(q);
true
&gt; q_BKL := B!q;
&gt; q_BKL;
&lt;BKL, 0, [
    (1, 4, 3)
], 0&gt;
</PRE>
Note however, that the simple element for the BKL presentation defined
by q and the simple element for the Artin presentation defined
by q are different elements of B!  (The comparison operator
<A  HREF = "text851.htm#GrpBrd:eq">eq</A> is described in Section
<A  HREF = "text851.htm#9832">Boolean Predicates for Elements</A>.)
<P>
<P>
<PRE>
&gt; q_BKL eq q_Artin;
false
</PRE>
The representations of the Artin simple elements defined by p and q in
terms of BKL simple elements have no obvious connection to p and q,
respectively.
<P>
<P>
<PRE>
&gt; p_Artin;
&lt;BKL, 0, [
    (1, 3, 2),
    (2, 4, 3)
], 0&gt;


&gt; q_Artin;
&lt;BKL, 0, [
    (1, 4, 3, 2),
    (2, 3)
], 0&gt;
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text851.htm">[Next]</A><A  HREF = "text849.htm">[Prev]</A> <A  HREF = "text851.htm">[Right]</A> <A  HREF = "text849.htm">[Left]</A> <A  HREF = "text847.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>