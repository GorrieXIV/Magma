<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creation of Quaternion Orders</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text986.htm">[Next]</A><A  HREF = "text984.htm">[Prev]</A> <A  HREF = "text986.htm">[Right]</A> <A  HREF = "text984.htm">[Left]</A> <A  HREF = "text982.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "11139">Creation of Quaternion Orders</A></H3>

<P>
<P>
Let R be a ring with field of fractions K, and let A be a
quaternion algebra over K.  An R-<I>order</I> in A is a subring 
O &sub;A which is a R-submodule of A with O.K = A.  
An order is <I>maximal</I> if it is not properly contained in any other 
order.  
<P>
One can create orders for number rings R, for R = Z or for R=k[x]
with k a field.  Unlike commutative orders, it is important to note that
maximal orders O of quaternion algebras are no longer unique: for any 
x &isin;A not in the normalizer of O, we have another maximal order
given by O'=x<sup> - 1</sup> O x != O.
<P>
When R=Z or R=k[x], the order O has type <TT>AlgQuatOrd</TT>.
When R inherits from type <TT>RngOrd</TT> (a number ring), the order O has
type <TT>AlgAssVOrd</TT>; see Section <A  HREF = "text920.htm#10368">Orders</A> for more 
information on constructors and general procedures for these orders.
<P>
See above (<A  HREF = "text983.htm#11125">Introduction</A>) for an important warning 
regarding quaternion algebras over the rationals.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text985.htm#11140">Creation of Orders from Elements</A>
<LI> <A  HREF = "text985.htm#11144">Creation of Maximal Orders</A>
<LI> <A  HREF = "text985.htm#11150">Creation of Orders with given Discriminant</A>
<LI> <A  HREF = "text985.htm#11155">Creation of Orders with given Discriminant over the Integers</A>
</UL>
<H4><A NAME = "11140">Creation of Orders from Elements</A></H4>

<P>
<P>
<P>
The creation of orders from elements of number rings is covered in
Section <A  HREF = "text920.htm#10368">Orders</A>. The creation of quaternion orders over 
the integers and univariate polynomial rings is covered in this 
section.


<H5><A NAME = "11141">QuaternionOrder(S) : [AlgQuatElt] -&gt; AlgQuatOrd</A></H5>

<PRE>    IsBasis: BoolElt                    Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Given S a sequence of elements in a quaternion algebra defined over Q
or F<sub>q</sub>(X), this function returns the order generated by S over Z 
or F<sub>q</sub>[X].  If the set S does not generate an order, an error will 
be returned.  If the parameter <TT>IsBasis</TT> is set to <TT>true</TT> then S 
will be used as the basis of the order returned.
</BLOCKQUOTE>
<H5><A NAME = "11142">QuaternionOrder(R, S) : Rng, [AlgQuatElt] -&gt; AlgQuatOrd</A></H5>
<H5>Order(R, S) : Rng, [AlgQuatElt] -&gt; AlgQuatOrd</H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Given a ring R and a sequence S of elements of a quaternion algebra
over Q or F<sub>q</sub>(X), this function returns the R-order with basis S.
The sequence must have length four.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11143">Example <TT>AlgQuat_Quaternion_Orders_over_Q_FqX (H91E5)</TT></A></H3>
First we construct an order over a polynomial ring.
<P>
<P>
<PRE>
&gt; K&lt;t&gt; := FunctionField(FiniteField(7));
&gt; A&lt;i,j,k&gt; := QuaternionAlgebra&lt; K | t, t^2+t+1 &gt;;
&gt; O := QuaternionOrder( [i,j] );
&gt; Basis(O);
[1, i, j, k ]
</PRE>
Next we demonstrate how to construct orders in quaternion algebras
generated by a given sequence of elements.  When provided with a
sequence of elements of a quaternion algebra over Q, Magma
reduces the sequence so as to form a basis.  When provided with the 
ring over which these elements are to be interpreted, the sequence 
must be a basis with initial element 1, and the order having this 
basis is constructed.
<P>
<P>
<PRE>
&gt; A&lt;i,j,k&gt; := QuaternionAlgebra&lt; RationalField() | -1, -3 &gt;;
&gt; B := [ 1, 1/2 + 1/2*j, i, 1/2*i + 1/2*k ];
&gt; O := QuaternionOrder(B);
&gt; Basis(O);
[ 1, 1/2*i + 1/2*k, 1/2 - 1/2*j, -1/2*i + 1/2*k ]
&gt; S := QuaternionOrder(Integers(),B);
&gt; Basis(S);
[ 1, 1/2 + 1/2*j, i, 1/2*i + 1/2*k ]
</PRE>
<HR>
<H4><A NAME = "11144">Creation of Maximal Orders</A></H4>



<H5><A NAME = "11145">MaximalOrder(A) : AlgQuat[FldRat] -&gt; AlgQuatOrd</A></H5>
<H5>MaximalOrder(A) : AlgQuat[FldFunRat] -&gt; AlgQuatOrd</H5>
<H5>MaximalOrder(A) : AlgQuat[FldOrd] -&gt; AlgAssVOrd</H5>
<H5>MaximalOrder(A) : AlgQuat[FldNum] -&gt; AlgAssVOrd</H5>
<BLOCKQUOTE>
A maximal order is constructed in the quaternion algebra A.  The 
algebra A must be defined over a field K where K is either a 
number field, Q, F<sub>q</sub>(X) with q odd, or the field of fractions 
of a number ring.  Over F<sub>q</sub>(X) we use the standard algorithm 
<A  HREF = "text981.htm#bib_Fr1">[Fri97]</A>, <A  HREF = "text981.htm#bib_ivanyos-ronyai">[IR93]</A>. Over the rationals or over a number field, 
we use a variation of this algorithm optimized for the case of quaternion 
algebras.  First, a factorization of the discriminant of a tame order 
(see below) is computed.  Then, for each prime p dividing the discriminant,
a p-maximal order compatible with the existing order is computed. 
The method used corresponds to Algorithm 4.3.8 in <A  HREF = "text981.htm#bib_Voight1">[Voi05]</A>. See
also <A  HREF = "text981.htm#bib_Voight3">[Voi11]</A>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11146">Example <TT>AlgQuat_Quaternion_MaximalOrder (H91E6)</TT></A></H3>
The following is an example of a quaternion algebra which is unramified
at all finite primes.  
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(Rationals());
&gt; F&lt;b&gt; := NumberField(x^3-3*x-1);
&gt; A&lt;alpha,beta,alphabeta&gt; := QuaternionAlgebra&lt;F | -3,b&gt;;
&gt; O := MaximalOrder(A);
&gt; Factorization(Discriminant(O));
[]
</PRE>
<P>
Hence the algebra A has a maximal order of discriminant 1, or equivalently,
A is unramified at all finite places of F.
<P>
Since we are working over a general order of a number field, we can no longer
guarantee that an order will have a free basis, so it must be represented by
a pseudomatrix.  For more on pseudomatrices, see Section <A  HREF = "text596.htm#6285">Pseudo Matrices</A>.  
<P>
<P>
<P>
<PRE>
&gt; Z_F := BaseRing(O);
&gt; PseudoBasis(O);
[
    &lt;Principal Ideal of Z_F
    Generator:
        Z_F.1, Z_F.1&gt;,
    &lt;Fractional Ideal of Z_F
    Two element generators:
        Z_F.1
        2/3*Z_F.1 + 1/6*Z_F.2 + 1/6*Z_F.3, 3/1*Z_F.1 + i&gt;,
    &lt;Principal Ideal of Z_F
    Generator:
        Z_F.1, j&gt;,
    &lt;Fractional Ideal of Z_F
    Two element generators:
        Z_F.1
        11/2*Z_F.1 + 1/6*Z_F.2 + 35/6*Z_F.3, 3/1*Z_F.1 - i + 3/1*Z_F.1*j + k&gt;
]
</PRE>
<P>
The wide applicability of the above algorithm, is demonstrated by examining
a "random" quaternion algebra over a "random" quadratic number field.
<P>
<P>
<P>
<PRE>
&gt; for c := 1 to 10 do
&gt;   D := Random([d : d in [-100..100] | not IsSquare(d)]);
&gt;   K&lt;w&gt; := NumberField(x^2-D);
&gt;   Z_K := MaximalOrder(K);
&gt;   K&lt;K1,w&gt; := FieldOfFractions(Z_K);
&gt;   a := Random([i : i in [-50..50] | i ne 0]) + Random([-50..50])*w;
&gt;   b := Random([i : i in [-50..50] | i ne 0]) + Random([-50..50])*w;
&gt;   printf "D = %o, a = %o, b = %o n", D, a, b;
&gt;   A := QuaternionAlgebra&lt;K | a,b&gt;;
&gt;   O := MaximalOrder(A);
&gt;   ds := [&lt;pp[1],pp[2],HilbertSymbol(A,pp[1])&gt; :
&gt;            pp in Factorization(Discriminant(O))];
&gt;   print ds;
&gt;   for d in ds do
&gt;     if d[3] eq 1 then
&gt;       break c;
&gt;     end if;
&gt;   end for;
&gt; end for;
D = 5, a = -46/1*K1 + 25/1*w, b = -10/1*K1 - 7/1*w
[
    &lt;Prime Ideal of Z_K
    Two element generators:
        [31, 0]
        [5, 2], 2, -1&gt;,
    &lt;Prime Ideal of Z_K
    Two element generators:
        [11, 0]
        [6, 2], 2, -1&gt;
]
...
</PRE>
<P>
For each such "random" quaternion algebra, we verify that the Hilbert
symbol evaluated at each prime dividing the discriminant of the maximal order
is -1, indicating that the algebra is indeed ramified at the prime.
<HR>
<H5><A NAME = "11147">MaximalOrder(O) : AlgQuatOrd -&gt; AlgQuat</A></H5>
<H5>MaximalOrder(O) : AlgAssVOrd[RngOrd] -&gt; AlgAssVOrd</H5>
<BLOCKQUOTE>
For O a quaternion order defined over Z, F<sub>q</sub>[X] with q odd or
a number ring, this function returns a maximal order containing O.
</BLOCKQUOTE>
<H5><A NAME = "11148">pMaximalOrder(O, p) : AlgQuatOrd, RngElt -&gt; AlgQuatOrd, RngIntElt</A></H5>
<H5>pMaximalOrder(O, p) : AlgAssVOrd, RngOrdIdl -&gt; AlgAssVOrd, RngIntElt</H5>
<BLOCKQUOTE>
For O a quaternion order defined over Z, F<sub>q</sub>[X] with q odd or
a number ring and a prime (ideal) p, this function returns a p-maximal 
order O' containing the order O.  The p-adic valuation of the 
discriminant of O' (which is either 0 or 1) is returned as a second
return value.
</BLOCKQUOTE>
<H5><A NAME = "11149">TameOrder(A) : AlgQuat[FldAlg] -&gt; AlgAssVOrd</A></H5>
<BLOCKQUOTE>
Given a quaternion algebra A, this function returns an order O
having the property that the odd reduced discriminant of O is squarefree.
The algebra A must be defined over a number field or field of
fractions of a number ring.  The algorithm ignores even primes and 
does not test the remaining odd primes for maximality.
</BLOCKQUOTE>
<H4><A NAME = "11150">Creation of Orders with given Discriminant</A></H4>

<P>
<P>
<P>
The following two functions together with the maximal order algorithms 
of the previous subsection allow the construction of arbitrary Eichler
orders. 


<H5><A NAME = "11151">Order(O, N) : AlgQuatOrd, RngElt -&gt; AlgQuatOrd</A></H5>
<BLOCKQUOTE>
Given an order O in a quaternion algebra A over the rationals
or F<sub>q</sub>(x) with q odd, and some element N in the base ring 
of O, this function returns a suborder O' of O having index N.
Currently, N and the level of O must be coprime and N must
have valuation at most 1 at each ramified prime of A.
The order O' is locally Eichler at all prime divisors of N
that are not ramified in A. In particular, if O is Eichler and
N is coprime to the discriminant of A, so is O'.
</BLOCKQUOTE>
<H5><A NAME = "11152">Order(O, N) : AlgAssVOrd, RngOrdIdl -&gt; AlgAssVOrd</A></H5>
<BLOCKQUOTE>
Given a maximal quaternion order O over a number ring, this 
function returns an Eichler order of level N inside O. 
</BLOCKQUOTE>
<H5><A NAME = "11153"></A><A NAME = "algquat-gorensteinclosure">GorensteinClosure</A>(O) : AlgAssVOrd -&gt; AlgAssVOrd, .</H5>
<BLOCKQUOTE>
Let O be a quaternion order over R where R is either the
integers, F<sub>q</sub>[x] with q odd or a number ring.
This function returns the smallest Gorenstein order &Lambda; containing O. 
<P>
The Brandt invariant of O is the unique ideal b of R such that 
&Lambda; is generated by 1 and bO as an R-module.
<P>
The second return value is either a positive or monic generator of b
or b itself depending on whether R is Z, F<sub>q</sub>[x] or a number ring.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11154">Example <TT>AlgQuat_Quaternion_Orders (H91E7)</TT></A></H3>
First we construct a quaternion algebra A over F<sub>5</sub>(x) ramified
at x<sup>2</sup> + x + 1, then a maximal order M in A and finally an
Eichler O order of discriminant (x<sup>2</sup> + x + 1)(x<sup>3</sup> + x + 1)<sup>5</sup>.
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(GF(5));
&gt; A := QuaternionAlgebra(x^2+x+1);
&gt; M := MaximalOrder(A);
&gt; O := Order(M, (x^3+x+1)^5);
&gt; FactoredDiscriminant(O);
[
    &lt;x^2 + x + 1, 1&gt;,
    &lt;x^3 + x + 1, 5&gt;
]
</PRE>
<HR>
<H4><A NAME = "11155">Creation of Orders with given Discriminant over the Integers</A></H4>

<P>
<P>
<P>
When constructing quaternion orders over the integers, several shortcuts 
are available.


<H5><A NAME = "11156">QuaternionOrder(A, M) : AlgQuat[FldRat], RngIntElt -&gt; AlgQuatOrd</A></H5>
<BLOCKQUOTE>
Given a quaternion algebra A and a positive integer M, this function
returns an order of index M in a maximal order of the quaternion algebra 
A defined over Q.  The second argument M can have at most 
valuation 1 at any ramified prime of A. 
</BLOCKQUOTE>
<H5><A NAME = "11157">QuaternionOrder(N) : RngIntElt -&gt; AlgQuatOrd</A></H5>
<H5>QuaternionOrder(N, M) : RngIntElt, RngIntElt -&gt; AlgQuatOrd</H5>
<BLOCKQUOTE>
Given positive integers N and M, this function returns an order 
of index M in a maximal order of the rational quaternion algebra 
A of discriminant N.  The discriminant N must be a product of 
an odd number of distinct primes, and the argument M can be at 
most of valuation 1 at any prime dividing N. If M is omitted, 
the integer M defaults to 1, i.e., the function will return a 
maximal order.
</BLOCKQUOTE>
<H5><A NAME = "11158">QuaternionOrder(D1, D2, T) : RngIntElt, RngIntElt, RngIntElt -&gt; AlgQuat</A></H5>
<BLOCKQUOTE>
This intrinsic constructs the quaternion order Z&lt; x, y &gt;, 
where Z[x] and Z[y] are quadratic subrings of discriminant 
D<sub>1</sub> and D<sub>2</sub>, respectively, and Z[xy - yx] is a quadratic subring 
of discriminant D<sub>1</sub> D<sub>2</sub> - T<sup>2</sup>.
<P>
Note that the container algebra of such a quaternion order is <B>not</B>
usually in standard form (see the example below).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11159">Example <TT>AlgQuat_Quaternion_Orders_over_the_Integers (H91E8)</TT></A></H3>
The above constructors permit the construction of Eichler orders 
over Z, if the discriminant N and the index M are coprime.
More generally they allow the construction of an order whose index 
in an Eichler order divides the discriminant.
<P>
<P>
<PRE>
&gt; A := QuaternionOrder(103,2);
&gt; Discriminant(A);
206
&gt; Factorization($1);
[ &lt;2, 1&gt;, &lt;103, 1&gt; ]
&gt; _&lt;x&gt; := PolynomialRing(Rationals());
&gt; [MinimalPolynomial(A.i) : i in [1..4]];
[
    x - 1,
    x^2 + 1,
    x^2 - x + 52,
    x^2 + 104
]
</PRE>
The constructor <TT>QuaternionOrder(D1, D2, T)</TT> may return an order
whose container algebra is not in standard form.
<P>
<P>
<PRE>
&gt; A := QuaternionOrder(-4, 5, 2);
&gt; B := Algebra(A);
&gt; B.1 * B.2 eq - B.2 * B.1;
false
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text986.htm">[Next]</A><A  HREF = "text984.htm">[Prev]</A> <A  HREF = "text986.htm">[Right]</A> <A  HREF = "text984.htm">[Left]</A> <A  HREF = "text982.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>