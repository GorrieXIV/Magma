<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Accessing or Modifying Entries</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text252.htm">[Next]</A><A  HREF = "text250.htm">[Prev]</A> <A  HREF = "text252.htm">[Right]</A> <A  HREF = "text250.htm">[Left]</A> <A  HREF = "text247.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "2307">Accessing or Modifying Entries</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text251.htm#2308">Indexing</A>
<LI> <A  HREF = "text251.htm#2315">Extracting and Inserting Blocks</A>
<LI> <A  HREF = "text251.htm#2327">Row and Column Operations</A>
</UL>
<H4><A NAME = "2308">Indexing</A></H4>

<P>
<P>
The following functions and operators enable one to access individual
entries or rows of matrices or vectors.


<H5><A NAME = "2309">A[i] : Mtrx, RngIntElt -&gt; ModTupRngElt</A></H5>
<BLOCKQUOTE>
Given a matrix A over the ring R having m rows and n columns,
and an integer i such that 1 &le;i &le;m,
return the i-th row of A, as a vector of length n.
</BLOCKQUOTE>
<H5><A NAME = "2310">A[i, j] : Mtrx, RngIntElt, RngIntElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a matrix A over the ring R having m rows and n columns,
integers i and j such that 1 &le;i &le;m and 1 &le;j &le;n,
return the (i, j)-th entry of A, as an element of the ring R.
</BLOCKQUOTE>
<H5><A NAME = "2311">A[Q] : Mtrx, [ RngIntElt ] -&gt; RngElt</A></H5>
<H5>A[i .. j] : Mtrx, RngIntElt, RngIntElt -&gt; RngElt</H5>
<BLOCKQUOTE>
Given a matrix A over the ring R having m rows and n columns,
and a sequence Q of integers in the range [1..m],
return the sequence consisting of the rows of A specified by Q.
This is equivalent to <TT>[A[i]: i in Q]]</TT>.  If Q is a range,
then the second form <TT>A[i .. j]</TT> may be used to specify the
range directly.
</BLOCKQUOTE>
<H5><A NAME = "2312">A[i] := v : Mtrx, RngIntElt, Mtrx -&gt;</A></H5>
<BLOCKQUOTE>
Given a matrix A over the ring R having m rows and n columns,
an integer i such that 1 &le;i &le;m, and a vector v over R
of length n, modify the i-th row of A to be v.  The integer 
0 may also be given for v, indicating the zero vector.
</BLOCKQUOTE>
<H5><A NAME = "2313">A[i, j] := x : Mtrx, RngIntElt, RngIntElt, RngElt -&gt;</A></H5>
<BLOCKQUOTE>
Given a matrix A over the ring R having m rows and n columns,
integers i and j such that 1 &le;i &le;m and 1 &le;j &le;n,
and a ring element x coercible into R, modify the (i, j)-th entry 
of A to be x.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "2314">Example <TT>Mat_Indexing (H26E4)</TT></A></H3>
This example demonstrates simple ways of accessing the entries of matrices.
<P>
<P>
<PRE>
&gt; X := Matrix(4, [1,2,3,4, 5,4,3,2, 1,2,3,4]);
&gt; X;
[1 2 3 4]
[5 4 3 2]
[1 2 3 4]
&gt; X[1];
(1 2 3 4)
&gt; X[1, 2];
2
&gt; X[1, 2] := 23;
&gt; X;
[ 1 23  3  4]
[ 5  4  3  2]
[ 1  2  3  4]
&gt; X[3] := Vector([9,8,7,6]);
&gt; X[2] := 0;
&gt; X;
[ 1 23  3  4]
[ 0  0  0  0]
[ 9  8  7  6]
</PRE>
<HR>
<H4><A NAME = "2315">Extracting and Inserting Blocks</A></H4>

<P>
<P>
The following functions enable the extraction of certain rows, columns or 
general submatrices, or the replacement of a block by another matrix.


<H5><A NAME = "2316">Submatrix(A, i, j, p, q) : Mtrx, RngIntElt, RngIntElt, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>ExtractBlock(A, i, j, p, q) : Mtrx, RngIntElt, RngIntElt, RngIntElt, RngIntElt -&gt; Mtrx</H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i, j, p and q such
that 1&le;i &le;i + p &le;m + 1 and 1 &le;j &le;j + q &le;n + 1,
return the p x q submatrix of A rooted at (i, j).  Either
or both of p and q may be zero, while i may be m + 1 if p is zero
and j may be n + 1 if q is zero.
</BLOCKQUOTE>
<H5><A NAME = "2317">SubmatrixRange(A, i, j, r, s) : Mtrx, RngIntElt, RngIntElt, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>ExtractBlockRange(A, i, j, r, s) : Mtrx, RngIntElt, RngIntElt, RngIntElt, RngIntElt -&gt; Mtrx</H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i, j, r and s such
that 1&le;i, i - 1 &le;r &le;m, 1 &le;j, and j - 1 &le;s &le;n,
return the r - i + 1 x s - j + 1 submatrix of A rooted at the (i, j)-th
entry and extending to the (r, s)-th entry, inclusive.
r may equal i - 1 or s may equal j - 1, in which case a matrix with
zero rows or zero columns, respectively, will be returned.
</BLOCKQUOTE>
<H5><A NAME = "2318">Submatrix(A, I, J) : Mtrx, [RngIntElt], [RngIntElt] -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and integer sequences I and J,
return the submatrix of A given by the row indices in I and the
column indices in J.
</BLOCKQUOTE>
<H5><A NAME = "2319">InsertBlock(A, B, i, j) : Mtrx, Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>InsertBlock(~A, B, i, j) : Mtrx, Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</H5>
<BLOCKQUOTE>
Given an m x n matrix A over a ring R,
a p x q matrix B over R, and integers i and j such
that 1&le;i &le;i + p &le;m + 1 and 1 &le;j &le;j + q &le;n + 1,
insert B at position (i, j) in A.
In the functional version (A is a value argument), this function returns
the new matrix and leaves A untouched, while in the procedural
version (~A is a reference argument), A is modified
in place so that the p x q submatrix of A rooted
at (i, j) is now equal to B.
</BLOCKQUOTE>
<H5><A NAME = "2320">RowSubmatrix(A, i, k) : Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and k such
that 1 &le;i &le;i + k &le;m + 1, return the k x n submatrix of
X consisting of rows [i ... i + k - 1] inclusive. The integer
k may be zero and i may also be m + 1 if k is zero, but
the result will always have n columns.
</BLOCKQUOTE>
<H5><A NAME = "2321">RowSubmatrix(A, i) : Mtrx, RngIntElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and an integer i such
that 0 &le;i &le;m, return the i x n submatrix of
X consisting of the first i rows.  The integer
i may be 0, but the result will always have n columns.
</BLOCKQUOTE>
<H5><A NAME = "2322">RowSubmatrixRange(A, i, j) : Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and j such
that 1 &le;i and i - 1 &le;j &le;m, return the j - i + 1 x n submatrix
of X consisting of rows [i ... j] inclusive. The integer
j may equal i - 1, in which case a matrix with zero rows and n
columns will be returned.
</BLOCKQUOTE>
<H5><A NAME = "2323">ColumnSubmatrix(A, i, k) : Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and k such
that 1 &le;i &le;i + k &le;n + 1, return the m x k submatrix of
X consisting of columns [i ... i + k - 1] inclusive. The integer
k may be zero and i may also be n + 1 if k is zero, but
the result will always have m rows.
</BLOCKQUOTE>
<H5><A NAME = "2324">ColumnSubmatrix(A, i) : Mtrx, RngIntElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and an integer i such
that 0 &le;i &le;n, return the m x i submatrix of
X consisting of the first i columns. The integer
i may be 0, but the result will always have m rows.
</BLOCKQUOTE>
<H5><A NAME = "2325">ColumnSubmatrixRange(A, i, j) : Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and j such
that 1 &le;i and i - 1 &le;j &le;n, return the m x j - i + 1 submatrix
of X consisting of columns [i ... j] inclusive. The integer
j may equal i - 1, in which case a matrix with zero columns and n
rows will be returned.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "2326">Example <TT>Mat_Submatrix (H26E5)</TT></A></H3>
The use of the submatrix operations is illustrated by applying them 
to a 6 x 6 matrix over the ring of integers Z.
<P>
<P>
<P>
<PRE>
&gt; A := Matrix(6,
&gt;     [ 9, 1, 7, -3, 2, -1,   
&gt;       3, -4, -5, 9, 2, 7, 
&gt;       7, 1, 0, 1, 8, 22, 
&gt;       -3, 3, 3, 8, 8, 37,
&gt;       -9, 0, 7, -1, 2, 3,
&gt;       7, 2, -2, 4, 3, 47 ]);
&gt; A;
[ 9  1  7 -3  2 -1]
[ 3 -4 -5  9  2  7]
[ 7  1  0  1  8 22]
[-3  3  3  8  8 37]
[-9  0  7 -1  2  3]
[ 7  2 -2  4  3 47]
&gt; Submatrix(A, 2,2, 3,3);
[-4 -5  9]
[ 1  0  1]
[ 3  3  8]
&gt; SubmatrixRange(A, 2,2, 3,3);
[-4 -5]
[ 1  0]
&gt; S := $1;
&gt; InsertBlock(~A, S, 5,5);
&gt; A;
[ 9  1  7 -3  2 -1]
[ 3 -4 -5  9  2  7]
[ 7  1  0  1  8 22]
[-3  3  3  8  8 37]
[-9  0  7 -1 -4 -5]
[ 7  2 -2  4  1  0]
&gt; RowSubmatrix(A, 5, 2);     
[-9  0  7 -1 -4 -5]
[ 7  2 -2  4  1  0]
&gt; RowSubmatrixRange(A, 2, 3);
[ 3 -4 -5  9  2  7]
[ 7  1  0  1  8 22]
&gt; RowSubmatrix(A, 2, 0);
Matrix with 0 rows and 6 columns
</PRE>
<HR>
<H4><A NAME = "2327">Row and Column Operations</A></H4>

<P>
<P>
The following functions and procedures provide elementary row or
column operations on matrices.   For each operation, there is a
corresponding function which creates a new matrix for the result
(leaving the input matrix unchanged), and a corresponding procedure
which modifies the input matrix in place.


<H5><A NAME = "2328">SwapRows(A, i, j) : Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>SwapRows(~A, i, j) : Mtrx, RngIntElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and j such that 1
&le;i&le;m and 1 &le;j &le;m, swap the i-th and j-th rows of
A.
</BLOCKQUOTE>
<H5><A NAME = "2329">SwapColumns(A, i, j) : Mtrx, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>SwapColumns(~A, i, j) : Mtrx, RngIntElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and j such that 1
&le;i&le;n and 1 &le;j &le;n, swap the i-th and j-th columns of
A.
</BLOCKQUOTE>
<H5><A NAME = "2330">ReverseRows(A) : Mtrx -&gt; Mtrx</A></H5>
<H5>ReverseRows(~A) : Mtrx -&gt;</H5>
<BLOCKQUOTE>
Given a matrix A, reverse all the rows of A.
</BLOCKQUOTE>
<H5><A NAME = "2331">ReverseColumns(A) : Mtrx -&gt; Mtrx</A></H5>
<H5>ReverseColumns(~A) : Mtrx -&gt;</H5>
<BLOCKQUOTE>
Given a matrix A, reverse all the columns of A.
</BLOCKQUOTE>
<H5><A NAME = "2332">AddRow(A, c, i, j) : Mtrx, RngElt, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>AddRow(~A, c, i, j) : Mtrx, RngElt, RngIntElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A over a ring R, a ring element c
coercible into R, and integers i and j such that 1
&le;i&le;m and 1 &le;j &le;m, add c times row i of A
to row j of A.
</BLOCKQUOTE>
<H5><A NAME = "2333">AddColumn(A, c, i, j) : Mtrx, RngElt, RngIntElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>AddColumn(~A, c, i, j) : Mtrx, RngElt, RngIntElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A over a ring R, a ring element c
coercible into R, and integers i and j such that 1
&le;i&le;n and 1 &le;j &le;n, add c times column i of A
to column j.
</BLOCKQUOTE>
<H5><A NAME = "2334">MultiplyRow(A, c, i) : Mtrx, RngElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>MultiplyRow(~A, c, i) : Mtrx, RngElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A over a ring R, a ring element c
coercible into R, and an integer i such that 1
&le;i&le;m, multiply row i of A by c (on the left).
</BLOCKQUOTE>
<H5><A NAME = "2335">MultiplyColumn(A, c, i) : Mtrx, RngElt, RngIntElt -&gt; Mtrx</A></H5>
<H5>MultiplyColumn(~A, c, i) : Mtrx, RngElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A over a ring R, a ring element c
coercible into R, and an integer i such that 1
&le;i&le;n, multiply column i of A by c (on the left).
</BLOCKQUOTE>
<H5><A NAME = "2336">RemoveRow(A, i) : Mtrx, RngIntElt -&gt; Mtrx</A></H5>
<H5>RemoveRow(~A, i) : Mtrx, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A and an integer i such that 1 &le;i&le;m,
remove row i from A (leaving an (m - 1) x n matrix).
</BLOCKQUOTE>
<H5><A NAME = "2337">RemoveColumn(A, j) : Mtrx, RngIntElt -&gt; Mtrx</A></H5>
<H5>RemoveColumn(~A, j) : Mtrx, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A and an integer j such that 1 &le;j&le;n,
remove column j from A (leaving an m x (n - 1) matrix).
</BLOCKQUOTE>
<H5><A NAME = "2338">RemoveRowColumn(A, i, j) : Mtrx, RngIntElt -&gt; Mtrx</A></H5>
<H5>RemoveRowColumn(~A, i, j) : Mtrx, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given an m x n matrix A and integers i and j such that
1 &le;i&le;m and 1 &le;j&le;n, remove row i and column j from
A (leaving an (m - 1) x (n - 1) matrix).
</BLOCKQUOTE>
<H5><A NAME = "2339">RemoveZeroRows(A) : Mtrx -&gt; Mtrx</A></H5>
<H5>RemoveZeroRows(~A) : Mtrx -&gt;</H5>
<BLOCKQUOTE>
Given a matrix A, remove all the zero rows of A.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "2340">Example <TT>Mat_RowColumnOps (H26E6)</TT></A></H3>
The use of row and column operations is illustrated by applying them 
to a 5 x 6 matrix over the ring of integers Z.
<P>
<P>
<P>
<PRE>
&gt; A := Matrix(5, 6,
&gt;     [ 3, 1, 0, -4, 2, -12,   
&gt;       2, -4, -5, 5, 23, 6, 
&gt;       8, 0, 0, 1, 5, 12, 
&gt;       -2, -6, 3, 8, 9, 17,
&gt;       11, 12, -6, 4, 2, 27 ]);
&gt; A;
[  3   1   0  -4   2 -12]
[  2  -4  -5   5  23   6]
[  8   0   0   1   5  12]
[ -2  -6   3   8   9  17]
[ 11  12  -6   4   2  27]
&gt; SwapColumns(~A, 1, 2);
&gt; A;
[  1   3   0  -4   2 -12]
[ -4   2  -5   5  23   6]
[  0   8   0   1   5  12]
[ -6  -2   3   8   9  17]
[ 12  11  -6   4   2  27]
&gt; AddRow(~A, 4, 1, 2);
&gt; AddRow(~A, 6, 1, 4);
&gt; AddRow(~A, -12, 1, 5);
&gt; A;
[  1   3   0  -4   2 -12]
[  0  14  -5 -11  31 -42]
[  0   8   0   1   5  12]
[  0  16   3 -16  21 -55]
[  0 -25  -6  52 -22 171]
&gt; RemoveRow(~A, 1);
&gt; A;
[ 2 -4 -5  5 23  6]
[ 8  0  0  1  5 12]
[-2 -6  3  8  9 17]
[11 12 -6  4  2 27]
&gt; RemoveRowColumn(~A, 4, 6);
&gt; A;
[ 2 -4 -5  5 23]
[ 8  0  0  1  5]
[-2 -6  3  8  9]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text252.htm">[Next]</A><A  HREF = "text250.htm">[Prev]</A> <A  HREF = "text252.htm">[Right]</A> <A  HREF = "text250.htm">[Left]</A> <A  HREF = "text247.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>