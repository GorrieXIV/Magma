<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Normal Structure and Characteristic Subgroups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text842.htm">[Next]</A><A  HREF = "text840.htm">[Prev]</A> <A  HREF = "text842.htm">[Right]</A> <A  HREF = "text840.htm">[Left]</A> <A  HREF = "text831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9706">Normal Structure and Characteristic Subgroups</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text841.htm#9707">Characteristic Subgroups and Subgroup Series</A>
<LI> <A  HREF = "text841.htm#9723">The Abelian Quotient Structure of a Group</A>
</UL>
<H4><A NAME = "9707">Characteristic Subgroups and Subgroup Series</A></H4>



<H5><A NAME = "9708">Centre(G) : GrpGPC -&gt; GrpGPC</A></H5>
<H5>Center(G) : GrpGPC -&gt; GrpGPC</H5>
<BLOCKQUOTE>
The centre of the group G. For nilpotent groups the centre is computed
using the centraliser algorithm <A  HREF = "text830.htm#bib_lo_nilpotent">[Lo98]</A>. Otherwise, it is computed
as the simultaneous fixed point space of the action of the generators of G on
the centre of the Fitting subgroup of G <A  HREF = "text830.htm#bib_eick_fitting">[Eic01]</A>.
</BLOCKQUOTE>
<H5><A NAME = "9709">DerivedLength(G) : GrpGPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The derived length of the group G.
</BLOCKQUOTE>
<H5><A NAME = "9710">DerivedSeries(G) : GrpGPC -&gt; [GrpGPC]</A></H5>
<BLOCKQUOTE>
The derived series of the group G. The series is returned as a
sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "9711">DerivedSubgroup(G) : GrpGPC -&gt; GrpGPC</A></H5>
<H5>DerivedGroup(G) : GrpGPC -&gt; GrpGPC</H5>
<BLOCKQUOTE>
The derived subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "9712"></A><A NAME = "GrpGPC:EFASeries">EFASeries</A>(G) : GrpGPC -&gt; [GrpGPC]</H5>
<BLOCKQUOTE>
Returns a normal series of G, the factors of which are either elementary
abelian p-groups or free abelian groups.
</BLOCKQUOTE>
<H5><A NAME = "9713">FittingLength(G) : GrpGPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Fitting length of the group G, i.e. the smallest integer k such that
F<sub>k</sub> = G where the groups F<sub>i</sub> are defined recursively by F<sub>0</sub> := 1 and
F<sub>i</sub> / F<sub>i - 1</sub> := (Fit)(G / F<sub>i - 1</sub>) (i&gt;0).  Note that such a k exists
for every polycyclic group G.
</BLOCKQUOTE>
<H5><A NAME = "9714">FittingSeries(G) : GrpGPC -&gt; [GrpGPC]</A></H5>
<BLOCKQUOTE>
The Fitting series of the group G, where the groups F<sub>i</sub>
are defined recursively by F<sub>0</sub> := 1 and
F<sub>i</sub> / F<sub>i - 1</sub> := (Fit)(G / F<sub>i - 1</sub>) (i&gt;0). The series is returned as
the sequence [F<sub>0</sub>, ..., F<sub>k</sub>] of subgroups of G.  Note that every
polycyclic group G has a finite Fitting series ending in G.
</BLOCKQUOTE>
<H5><A NAME = "9715"></A><A NAME = "GrpGPC:FittingSubgroup">FittingSubgroup</A>(G) : GrpGPC -&gt; GrpGPC</H5>
<H5>FittingGroup(G) : GrpGPC -&gt; GrpGPC</H5>
<BLOCKQUOTE>
The Fitting subgroup of the group G, i.e. the maximal nilpotent normal
subgroup of G. This function uses an algorithm described in
<A  HREF = "text830.htm#bib_eick_fitting">[Eic01]</A>.
</BLOCKQUOTE>
<H5><A NAME = "9716"></A><A NAME = "GrpGPC:HasComputableLCS">HasComputableLCS</A>(G) : GrpGPC -&gt; BoolElt</H5>
<BLOCKQUOTE>
This function returns the value <TT>true</TT> if the lower central series of G 
is computable, otherwise it returns the value <TT>false</TT>. This is useful to 
avoid runtime errors, when <A  HREF = "text841.htm#GrpGPC:LowerCentralSeries">LowerCentralSeries</A> is called in
user written loops or functions.
</BLOCKQUOTE>
<H5><A NAME = "9717"></A><A NAME = "GrpGPC:LowerCentralSeries">LowerCentralSeries</A>(G) : GrpGPC -&gt; [GrpGPC]</H5>
<BLOCKQUOTE>
The lower central series for the group G. The series is returned 
as a sequence of subgroups. Since infinite polycyclic groups need not satisfy
the descending chain condition for subgroups, computation of the lower
central series may fail. To determine if the series can be computed and
thereby avoid runtime errors, the function <A  HREF = "text841.htm#GrpGPC:HasComputableLCS">HasComputableLCS</A> 
may be used. This function uses an algorithm described in <A  HREF = "text830.htm#bib_lo_nilpotent">[Lo98]</A>.
</BLOCKQUOTE>
<H5><A NAME = "9718"></A><A NAME = "GrpGPC:NilpotencyClass">NilpotencyClass</A>(G) : GrpGPC -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The nilpotency class of the group G. If G is not nilpotent, then
-1 is returned.
</BLOCKQUOTE>
<H5><A NAME = "9719">NilpotentPresentation(G) : GrpGPC -&gt; GrpGPC, Map</A></H5>
<BLOCKQUOTE>
A polycyclic presentation is called <I>nilpotent</I>, if for all i=1, ..., n, G<sub>i + 1</sub> is normal in G and G<sub>i</sub>/G<sub>i + 1</sub> is central in G/G<sub>i + 1</sub>. Every nilpotent polycyclic group has a nilpotent polycyclic presentation. A suitable polycyclic series can be obtained by refining the lower central series.
<P>
The function <TT>NilpotentPresentation</TT> computes a group N isomorphic to G, given by a nilpotent polycyclic presentation and the isomorphism from G to N.
</BLOCKQUOTE>
<H5><A NAME = "9720"></A><A NAME = "GrpGPC:SemisimpleEFASeries">SemisimpleEFASeries</A>(G) : GrpGPC -&gt; [GrpGPC]</H5>
<BLOCKQUOTE>
Returns a normal series of G, the factors of which are either elementary
abelian p-groups which are semisimple as GF(p)[G]-modules or free
abelian groups which are semisimple as Q[G]-modules.
<P>
<P>
The normal series returned by the function <TT>SemisimpleEFASeries</TT>
is a refinement of the normal series returned by the function
<A  HREF = "text841.htm#GrpGPC:EFASeries">EFASeries</A>.
</BLOCKQUOTE>
<H5><A NAME = "9721">UpperCentralSeries(G) : GrpGPC -&gt; [GrpGPC]</A></H5>
<BLOCKQUOTE>
The upper central series [Z<sub>0</sub>, ..., Z<sub>k</sub>] of the group G, where the groups
Z<sub>k</sub> are defined recursively by Z<sub>0</sub> := 1 and
Z<sub>i</sub> / Z<sub>i - 1</sub> := (Z)(G / Z<sub>i - 1</sub>) (i&gt;0). The series is returned as
a sequence of subgroups of G.  Note that since polycyclic groups satisfy
the ascending chain condition for subgroups, every polycyclic group G has
a finite upper central series.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9722">Example <TT>GrpGPC_NormalStructure (H77E11)</TT></A></H3>
The dihedral group of order 32 is nilpotent; we compute its lower central series.
<P>
<P>
<PRE>
&gt; D16&lt;a,b&gt; := DihedralGroup(GrpGPC, 16);
&gt; IsNilpotent(D16);
true
&gt; NilpotencyClass(D16);
4
&gt; L := LowerCentralSeries(D16);         
</PRE>
The generators of the subgroups in the lower central series expressed as 
elements of D16 are:
<P>
<P>
<PRE>
&gt; for i := 1 to 1+NilpotencyClass(D16) do
&gt;   print i, ":", {@ D16!x : x in PCGenerators(L[i]) @};
&gt; end for;
1 : {@ a, b @}
2 : {@ b^2 @}
3 : {@ b^4 @}
4 : {@ b^8 @}
5 : {@ @}
</PRE>
We compute a nilpotent presentation and express the new generators in terms of a and b:
<P>
<P>
<PRE>
&gt; N&lt;p,q,r,s,t&gt;, f := NilpotentPresentation(D16);
&gt; N;
GrpGPC : N of order 2^5 on 5 PC-generators
PC-Relations:
    p^2 = Id(N), 
    q^2 = r, 
    r^2 = s, 
    s^2 = t, 
    t^2 = Id(N), 
    q^p = q * r * s * t, 
    r^p = r * s * t, 
    s^p = s * t
&gt; {@ x@@f : x in PCGenerators(N) @};
{@ a, b, b^2, b^4, b^8 @}
</PRE>
The infinite dihedral group has an infinite, strictly descending, lower central 
series which cannot be computed:
<P>
<P>
<PRE>
&gt; D := DihedralGroup(GrpGPC, 0);
&gt; HasComputableLCS(D);
false
</PRE>
It is easy to see, that b^(2<sup>i - 1</sup>) would be a generator of L<sub>i</sub>.
<P>
<P>
<P>
The symmetric group on 3 letters is not nilpotent, but has a lower central 
series which becomes stationary and which can be computed:
<P>
<P>
<PRE>
&gt; F2&lt;a,b&gt; := FreeGroup(2);
&gt; rels := [ a^2 = F2!1, b^3 = F2!1, b^a = b^2 ];
&gt; G&lt;a,b&gt; := quo&lt;GrpGPC : F2 | rels&gt;;
&gt; G;
GrpGPC : G of order 6 = 2 * 3 on 2 PC-generators
PC-Relations:
    a^2 = Id(G), 
    b^3 = Id(G), 
    b^a = b^2
&gt; IsNilpotent(G);
false
&gt; HasComputableLCS(G);
true
&gt; L := LowerCentralSeries(G);
&gt; for i := 1 to #L do
&gt;   print i, ":", {@ G!x : x in PCGenerators(L[i]) @};
&gt; end for;
1 : {@ a, b @}
2 : {@ b @}
</PRE>
<HR>
<H4><A NAME = "9723">The Abelian Quotient Structure of a Group</A></H4>



<H5><A NAME = "9724">AbelianQuotient(G) : GrpGPC -&gt; GrpAb, Map</A></H5>
<BLOCKQUOTE>
The maximal abelian quotient G/G<sup>prime</sup> of the group G as <TT>GrpAb</TT>
(cf. Chapter <A  HREF = "text786.htm#8898">ABELIAN GROUPS</A>). The natural epimorphism is returned as second
return value.
</BLOCKQUOTE>
<H5><A NAME = "9725">AbelianQuotientInvariants(G) : GrpGPC -&gt; [ RngIntElt ]</A></H5>
<H5>AQInvariants(G) : GrpGPC -&gt; [ RngIntElt ]</H5>
<BLOCKQUOTE>
Returns a sequence containing the invariants of the maximal abelian quotient
 G/G<sup>prime</sup> of the group G. Each infinite cyclic factor of G/G<sup>prime</sup>
 is represented by zero.
</BLOCKQUOTE>
<H5><A NAME = "9726">ElementaryAbelianQuotient(G, p) : GrpGPC, RngIntElt -&gt; GrpAb, Map</A></H5>
<BLOCKQUOTE>
The maximal p-elementary abelian quotient of the group G as <TT>GrpAb</TT>
(cf. Chapter <A  HREF = "text786.htm#8898">ABELIAN GROUPS</A>). The natural epimorphism is returned as second
return value.
</BLOCKQUOTE>
<H5><A NAME = "9727">FreeAbelianQuotient(G) : GrpGPC -&gt; GrpAb, Map</A></H5>
<BLOCKQUOTE>
The maximal free abelian quotient of the group G as <TT>GrpAb</TT>
(cf. Chapter <A  HREF = "text786.htm#8898">ABELIAN GROUPS</A>). The natural epimorphism is returned as second
return value.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text842.htm">[Next]</A><A  HREF = "text840.htm">[Prev]</A> <A  HREF = "text842.htm">[Right]</A> <A  HREF = "text840.htm">[Left]</A> <A  HREF = "text831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>