<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Arithmetic with Words</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text860.htm">[Next]</A><A  HREF = "text858.htm">[Prev]</A> <A  HREF = "text860.htm">[Right]</A> <A  HREF = "text858.htm">[Left]</A> <A  HREF = "text855.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9934">Arithmetic with Words</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text859.htm#9935">Construction of a Word</A>
<LI> <A  HREF = "text859.htm#9940">Element Operations</A>
</UL>
<H4><A NAME = "9935">Construction of a Word</A></H4>



<H5><A NAME = "9936">Identity(G) : GrpRWS -&gt; GrpRWSElt</A></H5>
<H5>Id(G) : GrpRWS -&gt; GrpRWSElt</H5>
<H5>G ! 1 : GrpRWS, RngIntElt -&gt; GrpRWSElt</H5>
<BLOCKQUOTE>
Construct the identity word in G.
</BLOCKQUOTE>
<H5><A NAME = "9937">G ! [ i<sub>1</sub>, ..., i<sub>s</sub> ] : GrpRWS, [ RngIntElt ] -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
Given a rewrite group G defined on r generators and a sequence
[i<sub>1</sub>, ..., i<sub>s</sub>] of integers lying in the range [ - r, r],
excluding 0, construct the word
G.|i<sub>1</sub>|<sup>&epsilon;<sub>1</sub></sup> * G.|i<sub>2</sub>|<sup>&epsilon;<sub>2</sub></sup> * ... * G.|i<sub>s</sub>|<sup>&epsilon;<sub>s</sub></sup>
where &epsilon;<sub>j</sub> is +1 if i<sub>j</sub> is positive, and -1 if i<sub>j</sub> is
negative. The resulting word is reduced using the reduction machine
associated with G.
</BLOCKQUOTE>
<H5><A NAME = "9938">Parent(w) : GrpRWSElt -&gt; GrpRWS</A></H5>
<BLOCKQUOTE>
The parent group G for the word w.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9939">Example <TT>GrpRWS_Words (H79E7)</TT></A></H3>
We construct the Fibonacci group F(2, 7), and its identity.
<P>
<P>
<PRE>
&gt; FG&lt;a,b,c,d,e,f,g&gt; := FreeGroup(7);
&gt; F := quo&lt; FG | a*b=c, b*c=d, c*d=e, d*e=f, e*f=g, f*g=a, g*a=b&gt;;
&gt; G := RWSGroup(F : TidyInt := 1000);
&gt; Id(G);
Id(G)
&gt; G!1;
Id(G)
&gt; G![1,2];
G.3
</PRE>
<HR>
<H4><A NAME = "9940">Element Operations</A></H4>

<P>
<P>
Having constructed a rewrite group G one can perform arithmetic with words
in G. Assuming we have u, v &isin;G then the product u * v will be computed
as follows:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>the product w = u * v is formed as a product in the appropriate 
free group.
<DT>(ii)</DT><DD>w is reduced using the reduction machine associated with G.
<P>
<P>
</DL>
If G is confluent, then w will be the unique minimal word that represents
u * v under the ordering of G. If G is not confluent, then there are
some pairs of words which are equal in G, but which reduce to distinct words,
and hence w will not be a unique normal form. Note that:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>reduction of w can cause an increase in the length of w. At
present there is an internal limit on the length of a word -- if this limit
is exceeded during reduction an error will be raised. Hence any word operation
involving reduction can fail.
<DT>(ii)</DT><DD>the implementation is designed more with speed of execution in 
mind than with minimizing space requirements; thus, the reduction machine is
always used to carry out word reduction, which can be space-consuming,
particularly when the number of generators is large.</DL>


<H5><A NAME = "9941">u * v : GrpRWSElt, GrpRWSElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
Given words w and v belonging to a common group,
return their product.
</BLOCKQUOTE>
<H5><A NAME = "9942">u / v : GrpRWSElt, GrpRWSElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
Given words w and v belonging to a common group,
return the product of the word u by the inverse of 
the word v, i.e. the word u * v<sup> - 1</sup>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "9943">u ^ n : GrpRWSElt, RngIntElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
The n-th power of the word w.
</BLOCKQUOTE>
<H5><A NAME = "9944">u ^ v : GrpRWSElt, GrpRWSElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
Given words w and v belonging to a common group,
return the conjugate of the word u by the word v, 
i.e.  the word v<sup> - 1</sup> * u * v.
</BLOCKQUOTE>
<H5><A NAME = "9945">Inverse(w) : GrpRWSElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
The inverse of the word w.
</BLOCKQUOTE>
<H5><A NAME = "9946">(u, v) : GrpRWSElt, GrpRWSElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
Given words w and v belonging to a common group,
return the commutator of the words u and v, 
i.e., the word u<sup> - 1</sup>v<sup> - 1</sup>uv. 
<P>
<P>
</BLOCKQUOTE>
<H5><A NAME = "9947">(u<sub>1</sub>, ..., u<sub>r</sub>) : GrpRWSElt, ..., GrpRWSElt -&gt; GrpRWSElt</A></H5>
<BLOCKQUOTE>
Given r words u<sub>1</sub>, ..., u<sub>r</sub> belonging to a common group,
return their commutator. Commutators are <I>left-normed</I>, so they are
evaluated from left to right.
<P>
</BLOCKQUOTE>
<H5><A NAME = "9948">u eq v : GrpRWSElt, GrpRWSElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given words w and v belonging to the same group, return <TT>true</TT> 
if w and v reduce to the same normal form, <TT>false</TT> otherwise. If G is
confluent this tests for equality. If G is non-confluent 
then two words which are the same may not reduce to the same normal form.
</BLOCKQUOTE>
<H5><A NAME = "9949">u ne v : GrpRWSElt, GrpRWSElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given words w and v belonging to the same group, return <TT>false</TT> 
if w and v reduce to the same normal form, <TT>true</TT> otherwise. If G is
confluent this tests for non-equality. If G is non-confluent 
then two words which are the same may reduce to different normal forms.
</BLOCKQUOTE>
<H5><A NAME = "9950">IsId(w) : GrpRWSElt -&gt; BoolElt</A></H5>
<H5>IsIdentity(w) : GrpRWSElt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the word w is the identity word.
</BLOCKQUOTE>
<H5><A NAME = "9951"># u : GrpRWSElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The length of the word w.
</BLOCKQUOTE>
<H5><A NAME = "9952">ElementToSequence(u) : GrpRWSElt -&gt; [ RngIntElt ]</A></H5>
<H5>Eltseq(u) : GrpRWSElt -&gt; [ RngIntElt ]</H5>
<BLOCKQUOTE>
The sequence Q obtained by decomposing the element u of a rewrite group
into its constituent
generators and generator inverses. Suppose u is a word in the rewrite
group G. Then, if u = G.i<sub>1</sub><sup>e<sub>1</sub></sup> ... G.i<sub>m</sub><sup>e<sub>m</sub></sup>, with 
each e<sub>i</sub> equaling plus or minus 1,
then Q[j] = i<sub>j</sub> if e<sub>j</sub> = + 1 and Q[j] = - i<sub>j</sub> if e<sub>j</sub> = (-1), for
j = 1, ..., m.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9953">Example <TT>GrpRWS_Arithmetic (H79E8)</TT></A></H3>
We illustrate the word operations by applying them to elements of 
the Fibonacci group F(2, 5).
<P>
<P>
<PRE>
&gt; FG&lt;a,b,c,d,e&gt; := FreeGroup(5);
&gt; F := quo&lt; FG | a*b=c, b*c=d, c*d=e, d*e=a, e*a=b&gt;;
&gt; G&lt;a,b,c,d,e&gt; := RWSGroup(F);
&gt; a*b^-1;
e^-1
&gt; a/b;
e^-1
&gt; (c*d)^4;
a
&gt; a^b, b^-1*a*b;
a a
&gt; a^-2, 
&gt; Inverse(a)^2;
d d
&gt; c^-1*d^-1*c*d eq (c,d);
true
&gt; IsIdentity(a*b*c^-1);
true
&gt; #(c*d);
1
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text860.htm">[Next]</A><A  HREF = "text858.htm">[Prev]</A> <A  HREF = "text860.htm">[Right]</A> <A  HREF = "text858.htm">[Left]</A> <A  HREF = "text855.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>