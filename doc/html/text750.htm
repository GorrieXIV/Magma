<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Database of Primitive Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text751.htm">[Next]</A><A  HREF = "text749.htm">[Prev]</A> <A  HREF = "text751.htm">[Right]</A> <A  HREF = "text749.htm">[Left]</A> <A  HREF = "text742.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8619">Database of Primitive Groups</A></H3>

<P>
<P>
<P>
Magma has a database containing all primitive permutation groups with 
degree less than 2500.
<P>
The list of primitive groups up to degree 50 was prepared by C. C. Sims 
(see <A  HREF = "text741.htm#bib_sims-methods">[Sim70]</A> for the early part of the list). The list up 
to degree 999 was determined by Roney-Dougal and Unger. 
See <A  HREF = "text741.htm#bib_prim1000">[RDU03]</A> for details of the methods used. The list was extended
to degree 2499 by Roney-Dougal, as described in <A  HREF = "text741.htm#bib_prim2500">[RD05]</A>, and was
further extended to degree 4095 by Coutts, Quick and Roney-Dougal
<A  HREF = "text741.htm#bib_prim4096">[CQRD11]</A>.
<P>
Within the database the groups are stored by degree. Within each 
degree they are stored by O'Nan-Scott class in the order 
soluble affine, insoluble affine, diagonal action, product action, 
almost simple. Within each class groups are ordered by increasing size. 
(It follows that the alternating and symmetric groups
come last at each degree.)
<P>
The basic access function takes two parameters, degree and number, 
and returns the corresponding primitive group. Functions with name 
prefixed by <TT>NumberOfPrimitive</TT> tell how many groups of each class 
there are stored.
We recommend the use of the <TT>PrimitiveGroupProcess</TT> or 
<TT>PrimitiveGroups</TT> functions, with appropriate <TT>Filter</TT> value, 
to access all primitive groups in a specific class.
<P>
<P>



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text750.htm#8620">Accessing the Databases</A>
<LI> <A  HREF = "text750.htm#8632">Processes</A>
<LI> <A  HREF = "text750.htm#8640">Primitive Group Identification</A>
</UL>
<H4><A NAME = "8620">Accessing the Databases</A></H4>

<P>
<P>


<P>
<H5><A NAME = "8621">PrimitiveGroupDatabaseLimit() : -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The limiting degree of the database of primitive groups.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8622">NumberOfPrimitiveGroups(d) : RngIntElt -&gt; RngIntElt</A></H5>
<H5>NumberOfPrimitiveSolubleGroups(d) : RngIntElt -&gt; RngIntElt</H5>
<H5>NumberOfPrimitiveAffineGroups(d) : RngIntElt -&gt; RngIntElt</H5>
<H5>NumberOfPrimitiveDiagonalGroups(d) : RngIntElt -&gt; RngIntElt</H5>
<H5>NumberOfPrimitiveProductGroups(d) : RngIntElt -&gt; RngIntElt</H5>
<H5>NumberOfPrimitiveAlmostSimpleGroups(d) : RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a degree d in the required range, <TT>NumberOfPrimitiveGroups</TT> 
returns the number of primitive groups of degree d. The other functions
return the number of groups of each class at that degree.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8623">PrimitiveGroup(d, n) : RngIntElt, RngIntElt -&gt; GrpPerm, MonStgElt, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range and a positive integer n,
return the n-th primitive group of degree d.
Also returns a string (possibly empty) giving a description of the 
group and a string giving the group's O'Nan-Scott type.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8624">PrimitiveGroupDescription(d, n) : RngIntElt, RngIntElt -&gt; MonStgElt</A></H5>
<BLOCKQUOTE>
A string giving a description of the n-th primitive group of degree d.
</BLOCKQUOTE>
<H5><A NAME = "8625">PrimitiveGroup(d) : RngIntElt -&gt; GrpPerm, MonStgElt, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range,
return the first primitive group of degree d.
Also returns a string giving a description of the group and a string
giving the group's O'Nan-Scott type.
<P>
<P>
</BLOCKQUOTE>
<H5><A NAME = "8626">PrimitiveGroup(d, f) : RngIntElt, Program -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range and a predicate f
(as a function or intrinsic), return the first transitive (primitive)
group of degree d
which satisfies f.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8627">PrimitiveGroup(S, f) : [RngIntElt], Program -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a sequence S of degrees and a predicate f
(as a function or intrinsic), return the first transitive (primitive)
group with degree in S which satisfies f.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8628">PrimitiveGroups(d: parameters) : RngIntElt -&gt; [GrpPerm]</A></H5>

<PRE>    Filter: MonStgElt                   Default: "All"</PRE>
<BLOCKQUOTE>
Return a sequence of all primitive groups of degree d, modified by the value
assigned to <TT>Filter</TT>. The possible values for the parameter are the strings
<TT>All</TT>, <TT>Soluble</TT>, <TT>Affine</TT>, <TT>Diagonal</TT>, <TT>Product</TT>, <TT>AlmostSimple</TT>, <TT>Simple</TT> and <TT>SimpleNA</TT>. Generally these values restrict 
the list to groups in the appropriate O'Nan-Scott type, with the exceptions
being <TT>All</TT> giving no restriction, <TT>Simple</TT> restricting to a lsit of
all simple groups in the database, and <TT>SimpleNA</TT> being as for <TT>Simple</TT>
but omitting all alternating groups in their natural representations. 
<P>
</BLOCKQUOTE>
<H5><A NAME = "8629">PrimitiveGroups(S: parameters) : [RngIntElt] -&gt; [GrpPerm]</A></H5>
<H5>PrimitiveGroups( : parameters) : -&gt; [GrpPerm]</H5>

<PRE>    Filter: MonStgElt                   Default: "All"</PRE>
<BLOCKQUOTE>
Given a sequence S of degrees, return a sequence of all
primitive groups with degree in S. The result is modified by <TT>Filter</TT>
with values as above. Omitting the sequence of degrees gives the same result as
specifying all legal degrees.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8630">PrimitiveGroups(d, f: parameters) : RngIntElt, Program -&gt; [GrpPerm]</A></H5>
<H5>PrimitiveGroups(S, f) : [RngIntElt], Program -&gt; [GrpPerm]</H5>
<H5>PrimitiveGroups(f) : Program -&gt; [GrpPerm]</H5>

<PRE>    Filter: MonStgElt                   Default: "All"</PRE>
<BLOCKQUOTE>
Given an integer d and a predicate (function or intrinsic) f, return a
sequence containing all primitive groups G of degree d passing the filter
satisfying <TT>f(G) eq true</TT>. Note that the filter will be generally much
quicker in rejecting candidates than the predicate will be, and only groups
passing the filter have <TT>f(G)</TT> evaluated.
<P>
Instead of giving a single degree, a sequence of degrees may be given.
Omitting the degree is the same as specifying the sequence of all legal
degrees.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8631">Example <TT>GrpData_Primitive (H71E12)</TT></A></H3>
We apply some of these functions to the degree 625 case.
<P>
<P>
<PRE>
&gt; NumberOfPrimitiveGroups(625);
698
&gt; NumberOfPrimitiveAffineGroups(625);
647
&gt; NumberOfPrimitiveSolubleGroups(625);
509
&gt; NumberOfPrimitiveDiagonalGroups(625);
0
&gt; NumberOfPrimitiveProductGroups(625);
49
&gt; NumberOfPrimitiveAlmostSimpleGroups(625);
2
&gt; PrimitiveGroup(625, 511);
Permutation group acting on a set of cardinality 625
Order = 150000 = 2^4 * 3 * 5^5
5^4:SL(2, 5).2 Affine
&gt; PrimitiveGroup(625,690);                        
Permutation group acting on a set of cardinality 625
Order = 2^14 * 3^5 * 5^4
Alt(5)^4:Q_8:Sym(4) ProductAction
&gt; Q := PrimitiveGroups(625, func&lt;G|#G eq 3*10^4&gt; 
&gt; : Filter := "Affine");
&gt; #Q;
26
</PRE>
<HR>
<H4><A NAME = "8632">Processes</A></H4>

<P>
<P>
<P>
A primitive group process enables iteration over all primitive
groups of specified degrees satisfying a given predicate, without
having to create and store a list of all such groups.
<P>
The intrinsic function <TT>PrimitiveGroupProcess</TT> may be used to create
a primitive group process. The standard process functions <TT>IsEmpty</TT>, 
<TT>Current</TT>, <TT>CurrentLabel</TT> and <TT>Advance</TT> can then be applied 
to the process.
<P>
<P>


<P>
<H5><A NAME = "8633">PrimitiveGroupProcess(d: parameters) : RngIntElt -&gt; Process</A></H5>
<H5>PrimitiveGroupProcess(S: parameters) : [RngIntElt] -&gt; Process</H5>
<H5>PrimitiveGroupProcess(: parameters) : -&gt; Process</H5>

<PRE>    Filter: MonStgElt                   Default: "All"</PRE>
<BLOCKQUOTE>
Return a group process which will iterate though all primitive
groups of degree d that pass the filter as described above.
A sequence of degrees may be given instead of a single degree. In this case 
the process will iterate though the groups of all the degrees in S.
Omitting any degree information is the same as specifying the
sequence of all legal degrees.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8634">PrimitiveGroupProcess(d, f: parameters) : RngIntElt, Program -&gt; Process</A></H5>
<H5>PrimitiveGroupProcess(S, f: parameters) : [RngIntElt], Program -&gt; Process</H5>
<H5>PrimitiveGroupProcess(f: parameters) : Program -&gt; Process</H5>

<PRE>    Filter: MonStgElt                   Default: "All"</PRE>
<BLOCKQUOTE>
Return a process which will iterate though all primitive
groups with degree d which pass the filter and satisfy the predicate f.
A sequence of degrees may be given instead of a single degree. In this case 
the process will iterate though the groups of all the degrees in S.
Omitting any degree information is the same as specifying the
sequence of all legal degrees.
</BLOCKQUOTE>
<H5><A NAME = "8635">IsEmpty(p) : Process -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the process p has passed its last group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8636">Current(p) : Process -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Return the current group of the process p, as well as a description
of the group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8637">CurrentLabel(p) : Process -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the label of the current group of the process p.
That is, return d and  n such that the current group is
<TT>TransitiveGroup(d, n)</TT> (or <TT>PrimitiveGroup(d, n)</TT>).
<P>
</BLOCKQUOTE>
<H5><A NAME = "8638">Advance(~p) : Process -&gt;</A></H5>
<BLOCKQUOTE>
Move the process p to its next group.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8639">Example <TT>GrpData_PrimitiveProcess (H71E13)</TT></A></H3>
The use of processes is illustrated by the following code, in which the
orders of all primitive groups with degree 60 of diagonal type are 
listed.
We also compute the orbit structures of their Sylow 2-subgroups, which
demonstrates that they are non-conjugate.
<P>
<P>
<PRE>
&gt; p := PrimitiveGroupProcess(60:Filter:="Diagonal");            
&gt; while not IsEmpty(p) do
&gt;     G := Current(p);
&gt;     CurrentLabel(p), #G,
&gt;     [t[1]:t in OrbitRepresentatives(Sylow(G,2))];
&gt;     Advance(~p);
&gt; end while;
60 1 3600 [ 4, 4, 4, 16, 16, 16 ]
60 2 7200 [ 4, 4, 4, 16, 32 ]
60 3 7200 [ 4, 8, 16, 32 ]
60 4 7200 [ 4, 8, 16, 16, 16 ]
60 5 14400 [ 4, 8, 16, 32 ]
</PRE>
<HR>
<H4><A NAME = "8640">Primitive Group Identification</A></H4>

<P>
<P>
<P>
Given a primitive group G whose degree is at most 2499,
it is possible to obtain the number of the group in the primitive groups
database which is permutation isomorphic to G.
<P>
<P>


<H5><A NAME = "8641">PrimitiveGroupIdentification(G) : GrpPerm -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
The number (and degree) of the group in the primitive groups
database which is permutation isomorphic to the primitive group G.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8642">Example <TT>GrpData_PrimitiveId (H71E14)</TT></A></H3>
We construct a permutation group of affine type
and identify it as a primitive group.
<P>
<P>
<PRE>
&gt; M := WreathProduct(SL(2,5), Sym(2));
&gt; Q := Getvecs(M);
&gt; G := Semidir(M, Q);
&gt; G;
Permutation group G acting on a set of cardinality 625
&gt; PrimitiveGroupIdentification(G);
595 625
</PRE>
We found it to be group 595 of degree 625.
<HR>
<PRE></PRE> <A  HREF = "text751.htm">[Next]</A><A  HREF = "text749.htm">[Prev]</A> <A  HREF = "text751.htm">[Right]</A> <A  HREF = "text749.htm">[Left]</A> <A  HREF = "text742.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>