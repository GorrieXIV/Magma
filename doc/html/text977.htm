<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Cohomology</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text978.htm">[Next]</A><A  HREF = "text976.htm">[Prev]</A> <A  HREF = "text978.htm">[Right]</A> <A  HREF = "text976.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "11064">Cohomology</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text977.htm#11072">Ext-Algebras</A>
</UL>
<H5><A NAME = "11065">CohomologyRingGenerators(P) : Rec -&gt; Rec</A></H5>
<BLOCKQUOTE>
Given a compact projective resolution P for a 
simple module S over a basic
algebra A, the function returns the chain maps 
in compact form of a minimal set of 
generators for the cohomology Ext<sub>A</sub><sup> * </sup>(S, S), 
as well as some other information. The record that is 
returned has the following fields:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The list of maps in compact form for the chain map
of the generators
(field name <TT>ChainMapRecord</TT>).
<DT>(b)</DT><DD>The sequence of degrees of cohomology generators
(field name <TT>ChainDegrees</TT>).
<DT>(c)</DT><DD>The tops of the chain maps (maps on modules modulo
radicals) for the purposes of computing products (field name 
<TT>TopsOfCohomologyGenerators</TT>).
<DT>(d)</DT><DD>The tops of the chain maps representing monomials 
in the generators (field name
<TT>TopsOfCohomologyChainMaps</TT>). 
<DT>(e)</DT><DD>The original compact projective resolution (field name 
<TT>ProjectiveResolution</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "11066">CohomologyRightModuleGenerators(P, Q, CQ) : Rec, Rec, Rec -&gt; Rec</A></H5>
<BLOCKQUOTE>
Given projective resolutions P and Q for simple modules 
S and T over a basic algebra A and the cohomology 
generators CQ for T associated to the resolution
Q, the function returns the chain maps 
in compact form of the minimal generators for the
cohomology Ext<sub>A</sub><sup> * </sup>(S, T) as a right module over the cohomology ring 
Ext<sub>A</sub><sup> * </sup>(T, T). The function returns a record consisting of 
the following fields. 
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The list of maps in compact form for the chain map of
each cohomology generator
(field name <TT>ChainMapRecord</TT>).
<DT>(b)</DT><DD>The sequence of degrees of cohomology generators
(field name <TT>ChainDegrees</TT>).
<DT>(c)</DT><DD>The tops of the chain maps (maps on modules module
radicals) for the purposes of computing products (field name 
<TT>TopsOfCohomologyGenerators</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "11067">CohomologyLeftModuleGenerators(P, CP, Q) : Tup, Tup, Tup -&gt; Tup</A></H5>
<BLOCKQUOTE>
Given projective resolutions P and Q for simple 
modules S and T over a basic
algebra A and the cohomology generators CP for T 
associated to the resolution
Q, the function returns the chain maps 
in compact form of the minimal generators for the
cohomology Ext<sub>A</sub><sup> * </sup>(S, T) as a left module over 
the cohomology ring Ext<sub>A</sub><sup> * </sup>(S, S). The 
function returns a record consisting of the following fields. 
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The list of maps in compact form for the chain map
of each cohomology generator
(field name <TT>ChainMapRecord</TT>).
<DT>(b)</DT><DD>The sequence of degrees of cohomology generators
(field name <TT>ChainDegrees</TT>).
<DT>(c)</DT><DD>The tops of the chain maps (maps on modules module
radicals) for the purposes of computing products (field name 
<TT>TopsOfCohomologyGenerators</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "11068">DegreesOfCohomologyGenerators(C) : Rec -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given the generators C for cohomology, as either module generators or 
as ring generators, the function returns the list 
of degrees of the minimal generators.
</BLOCKQUOTE>
<H5><A NAME = "11069">CohomologyGeneratorToChainMap(P,Q,C,n) : ModCpx, ModCpx, Rec, RngIntElt -&gt; MapChn</A></H5>
<BLOCKQUOTE>
Given the projective resolutions P and Q of two modules M and N and 
the cohomology generators C of the cohomology module, (Ext)<sub>B</sub><sup> * </sup>(M, N), the 
function returns the chain map from P to Q that lifts the n<sup>th</sup> generator 
of the cohomology module and has degree equal to the degree of that
generator.
</BLOCKQUOTE>
<H5><A NAME = "11070">CohomologyGeneratorToChainMap(P, C, n) : ModCpx, Tup, RngIntElt -&gt; MapChn</A></H5>
<BLOCKQUOTE>
Given the projective resolution P of a module and the cohomology 
generators C of the cohomology ring of that module, the function returns
the chain map from P to P that lifts the n<sup>th</sup> generator of the 
cohomology ring and has degree equal to the degree of that generator.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11071">Example <TT>AlgBas_Cohomology-2 (H90E21)</TT></A></H3>
We create the Basic algebra for the principal block of the sporadic simple 
group M<sub>11</sub> in characteristic 2. The block algebra has three simple modules
of dimension 1, 44, and 10. The basic algebra has dimension 22.
<P>
<P>
<PRE>
&gt; ff := GF(2);
&gt; VV8 := VectorSpace(ff,8);
&gt; BB8 := Basis(VV8);
&gt; MM8 := MatrixAlgebra(ff,8);
&gt; e11 := MM8!0;
&gt; e12 := MM8!0;
&gt; e13 := MM8!0;
&gt; e11[1]  := BB8[1];
&gt; e11[4]  := BB8[4];
&gt; e11[5]  := BB8[5];
&gt; e11[8]  := BB8[8];
&gt; e12[2]  := BB8[2];
&gt; e12[7]  := BB8[7];
&gt; e13[3]  := BB8[3];
&gt; e13[6]  := BB8[6];
&gt; a1 := MM8!0;
&gt; b1 := MM8!0;
&gt; c1 := MM8!0;
&gt; d1 := MM8!0;
&gt; e1 := MM8!0;
&gt; f1 := MM8!0;
&gt; a1[1] :=  BB8[2];
&gt; a1[5] :=  BB8[7];
&gt; b1[1] :=  BB8[3];
&gt; b1[4] :=  BB8[6];
&gt; c1[2] :=  BB8[4];
&gt; c1[7] :=  BB8[8];
&gt; e1[3] :=  BB8[5];
&gt; e1[6] :=  BB8[8];
&gt; f1[3] :=  BB8[6];
&gt; A1 := sub&lt; MM8 | [e11, e12, e13, a1, b1, c1, d1, e1, f1] &gt;;
&gt; T1 := [ &lt;1,1&gt;,&lt;1,4&gt;,&lt;1,5&gt;,&lt;2,6&gt;,&lt;3,8&gt;,&lt;4,5&gt;,&lt;5,4&gt;,&lt;6,8&gt;];
&gt; VV6 := VectorSpace(ff,6);
&gt; BB6 := Basis(VV6);
&gt; MM6 := MatrixAlgebra(ff,6);
&gt; e21 := MM6!0;
&gt; e22 := MM6!0;
&gt; e23 := MM6!0;
&gt; e22[1]  := BB6[1];
&gt; e22[5]  := BB6[5];
&gt; e22[6]  := BB6[6];
&gt; e21[2]  := BB6[2];
&gt; e21[4]  := BB6[4];
&gt; e23[3]  := BB6[3];
&gt; a2 := MM6!0;
&gt; b2 := MM6!0;
&gt; c2 := MM6!0;
&gt; d2 := MM6!0;
&gt; e2 := MM6!0;
&gt; f2 := MM6!0;
&gt; a2[4] := BB6[6];
&gt; b2[2] := BB6[3];
&gt; c2[1] := BB6[2];
&gt; d2[1] := BB6[5];
&gt; d2[5] := BB6[6];
&gt; e2[3] := BB6[4];
&gt; A2 := sub&lt; MM6 | [e21, e22, e23, a2, b2, c2, d2, e2, f2]&gt;;
&gt; T2 := [ &lt;1,2&gt;, &lt;1,6&gt;, &lt;2,5&gt;, &lt;3,8&gt;, &lt;1,7&gt;, &lt;5,7&gt; ];
&gt; VV8 := VectorSpace(ff,8);
&gt; BB8 := Basis(VV8);
&gt; MM8 := MatrixAlgebra(ff,8);
&gt; e31 := MM8!0;
&gt; e32 := MM8!0;
&gt; e33 := MM8!0;
&gt; e31[2]  := BB8[2];
&gt; e31[6]  := BB8[6];
&gt; e32[4]  := BB8[4];
&gt; e33[1]  := BB8[1];
&gt; e33[3]  := BB8[3];
&gt; e33[5]  := BB8[5];
&gt; e33[7]  := BB8[7];
&gt; e33[8]  := BB8[8];
&gt; a3 := MM8!0;
&gt; b3 := MM8!0;
&gt; c3 := MM8!0;
&gt; d3 := MM8!0;
&gt; e3 := MM8!0;
&gt; f3 := MM8!0;a3[2] :=  BB8[4];
&gt; b3[6] :=  BB8[8];
&gt; b3[2] :=  BB8[7];
&gt; c3[4] :=  BB8[6];
&gt; e3[1] :=  BB8[2];
&gt; e3[3] :=  BB8[6];
&gt; f3[1] :=  BB8[3];
&gt; f3[3] :=  BB8[5];
&gt; f3[5] :=  BB8[7];
&gt; f3[7] :=  BB8[8];
&gt; A3 := sub&lt; MM8 | [e31, e32, e33, a3, b3, c3, d3, e3, f3] &gt;;
&gt; T3 := [ &lt;1,3&gt;,&lt;1,8&gt;,&lt;1,9&gt;,&lt;2,4&gt;,&lt;3,9&gt;,&lt;4,6&gt;,&lt;5,9&gt;,&lt;6,5&gt;];
&gt; 
&gt; m11 := BasicAlgebra( [&lt;A1, T1&gt;, &lt;A2, T2&gt;, &lt;A3, T3&gt;] );
&gt; m11;
Basic algebra of dimension 22 over GF(2)
Number of projective modules: 3
Number of generators: 9
&gt; s1 := SimpleModule(m11,1);
&gt; s2 := SimpleModule(m11,2);
</PRE>
Now we compute the projective resolutions of the first and second simple
modules. Then we find the degrees of their cohomology ring generators. 
<P>
<P>
<PRE>
&gt; prj1 := CompactProjectiveResolution(s1,20);
&gt; prj2 := CompactProjectiveResolution(s2,20);
&gt; CR1 := CohomologyRingGenerators(prj1);
&gt; CR2 := CohomologyRingGenerators(prj2);
&gt; DegreesOfCohomologyGenerators(CR1);
[ 3, 4, 5 ]
&gt; DegreesOfCohomologyGenerators(CR2);
[ 1, 2 ]
</PRE>
Finally we look at the cohomology Ext(cs(s2), cs(s1)) as a 
left module over 
the cohomology ring of cs{s1} and as a right module over the cohomology 
ring of cs{s2}.
<P>
<P>
<PRE>
&gt; CR12 := CohomologyLeftModuleGenerators(prj1,CR1,prj2);
&gt; DegreesOfCohomologyGenerators(CR12);
[ 1, 2, 3, 4 ]
&gt; CR12 := CohomologyRightModuleGenerators(prj1,prj2,CR2);
&gt; DegreesOfCohomologyGenerators(CR12);
[ 1 ]
</PRE>
So as a module over the cohomology ring of cs{s1} it is generated by 4
elements. But as a module over the cohomology ring of cs{s2} it is generated
by a single element. 
<P>
Next we get the chain complex for the projective resolution of the first 
simple module and the chain map for the third generator of the cohomology ring
of the first simple module. 
<P>
<P>
<PRE>
&gt; pj1 := ProjectiveResolution(s1,20);
&gt; pj1;
Basic algebra complex with terms of degree 20 down to 0
Dimensions of terms: 74 66 68 68 60 54 54 54 48 40 40 42 34 26 28 28 20 14 14 
   14 8
&gt; gen113 := CohomologyGeneratorToChainMap(pj1,CR1,3);
&gt; gen113;
Basic algebra chain map of degree -5
</PRE>
We can compose this with itself.
<P>
<P>
<PRE>
&gt; gen113*gen113;
Basic algebra chain map of degree -10
</PRE>
Now compute the kernel and the dimensions of the homology of the kernel.
<P>
<P>
<PRE>
&gt; Ker, phi := Kernel(gen113);
&gt; Ker, phi;
Basic algebra complex with terms of degree 20 down to 0
Dimensions of terms: 20 15 19 20 20 17 17 20 22 15 17 22 20 15 19 20 20 14 14 
14 8
Basic algebra chain map of degree 0
&gt; DimensionsOfHomology(Ker);
[ 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0 ]
</PRE>
We apply the same procedure in the case of the cokernel.
<P>
<P>
<PRE>
&gt; Cok, mu := Cokernel(gen113);
&gt; Cok, mu;
Basic algebra complex with terms of degree 20 down to 0
Dimensions of terms: 74 66 68 68 60 0 3 5 0 0 3 5 0 0 3 5 0 0 3 5 0
Basic algebra chain map of degree 0
&gt; DimensionsOfHomology(Cok);
[ 0, 0, 0, 27, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2 ]
</PRE>
We can also check the image.
<P>
<P>
<PRE>
&gt; Imm, theta, gamma := Image(gen113);
&gt; Imm;
Basic algebra complex with terms of degree 20 down to 0
Dimensions of terms: 0 0 0 0 0 54 51 49 48 40 37 37 34 26 25 23 20 14 11 9 8
&gt; DimensionsOfHomology(Imm);
[ 0, 0, 0, 0, 27, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0 ]
</PRE>
We can check that certain things make sense. 
<P>
<P>
<PRE>
&gt; IsChainMap(theta);
true
&gt; IsChainMap(gamma);
true
</PRE>
<HR>
<H4><A NAME = "11072">Ext-Algebras</A></H4>

<P>
<P>
<P>
The ext-algebra of an algebra B is the algebra Ext<sub>B</sub><sup> * </sup>(S, S) for
S = S<sub>1</sub> direct-sum ... direct-sum S<sub>n</sub> where S<sub>1</sub>, ..., S<sub>n</sub> are all of
the simple B-modules. In the event that the algebra B had finite
global dimension, this is a finite dimensional algebra and we can form
its basic algebra.


<H5><A NAME = "11073">ExtAlgebra(A, n): AlgBas,RngIntElt  -&gt; Rec</A></H5>
<BLOCKQUOTE>
The function computes the information on the
ext-algebra B of the basic algebra A
where the projective resolutions and cohomology have been computed to
degree n.  The function returns a record carrying the data:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A free algebra F,
<DT>(ii)</DT><DD>A list of relations in the elements of F, such that the ext-algebra
is the quotient F/I where I is the ideal generated by the relations,
<DT>(iii)</DT><DD>The sequence of chain maps of the generators. Each chain map goes
from the projective resolution of one simple module to that of another.
<DT>(iv)</DT><DD>The sequence of degrees of the generators.
<DT>(v)</DT><DD>A sequence of sequences of sequences of basis element such the
j<sup>th</sup> element of the i<sup>th</sup> sequence is a basis of
in Ext<sup> * </sup><sub>A</sub>(S<sub>i</sub>, S<sub>j</sub>) where S<sub>i</sub> is the i<sup>th</sup> simple module.
<DT>(vi)</DT><DD>A basis of the entire ext-algebra, the concatenation of the
previous sequences.
<DT>(vii)</DT><DD>The number of steps of the cohomology that were computed.
<DT>(viii)</DT><DD>The global dimension that has been computed. This number is
smaller than the number of steps only in the case that the global
dimension of A is less than n, meaning that the n<sup>th</sup> step
in the projective resolution of any simple module is the zero module.</DL>
</BLOCKQUOTE>
<H5><A NAME = "11074">BasicAlgebraOfExtAlgebra(ext) : Rec -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The function creates the basic algebra from a computed ext-algebra. The
input is the output of the <TT>ExtAlgebra</TT> function.  If the ext-algebra
is not verified to be finite dimensional by the computation, then an
error is returned.
</BLOCKQUOTE>
<H5><A NAME = "11075">BasicAlgebraOfExtAlgebra(A): AlgBas -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The function forms the basic algebra from a computed ext-algebra of the
basic algebra A. If no ext-algebra  for A has been computed or if the
ext-algebra is not verified to be finite dimensional then an error is
returned.
</BLOCKQUOTE>
<H5><A NAME = "11076">BasicAlgebraOfExtAlgebra(A, n): AlgBas,  RngIntElt -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The function creates the basic algebra for the ext-algebra of A computed
to n steps. If no ext-algebra for A to n steps has been computed then
it computes one. If the ext-algebra is not verified to be finite
dimensional by the computation, then an error is returned.
</BLOCKQUOTE>
<H5><A NAME = "11077">SumOfBettiNumbersOfSimpleModules(A, n) : AlgBas, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
This function computes the Betti numbers of all of simple A-modules out to
degree n. This is the dimension of the ext-algebra of A computed to
degree n.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11078">Example <TT>AlgBas_ExtAlgebra (H90E22)</TT></A></H3>
We construct the basic algebra of the algebra B of lower triangular
matrices over the field with 5 elements. Note that because the identity
element of B is the sum of primitive idempotents of rank 1, B is
actually isomorphic to its basic algebra.
<P>
<P>
<PRE>
&gt; A := MatrixAlgebra(GF(5),10);
&gt; U := A!0;
&gt; ElementaryMatrix := function(i,j);
&gt;     W := U;
&gt;     W[i,j] := 1;
&gt;     return W;
&gt; end function;
&gt; S := &amp;cat[[ElementaryMatrix(i,j): i in [j .. 10]]:j in [1 .. 10]];
&gt; B := sub&lt;A|S&gt;;
&gt; B;
Matrix Algebra of degree 10 with 55 generators over GF(5)
&gt; C := BasicAlgebra(B);
&gt; C;
Basic algebra of dimension 55 over GF(5)
Number of projective modules: 10
Number of generators: 19
</PRE>
Note that C has the same dimension as B. The two are isomorphic,
though they have different types.
<P>
<P>
<PRE>
&gt; SumOfBettiNumbersOfSimpleModules(C,9);
19
&gt; SumOfBettiNumbersOfSimpleModules(C,10);
19
</PRE>
From the above we see that C has global dimension at most 9. Consequently,
we can compute the basic algebra of its ext-algebra.
<P>
<P>
<PRE>
&gt; D:= ExtAlgebra(C,10);
&gt; E := BasicAlgebraOfExtAlgebra(D);
&gt; E;
Basic algebra of dimension 19 over GF(5)
Number of projective modules: 10
Number of generators: 19
&gt; SumOfBettiNumbersOfSimpleModules(E,8);
54
&gt; SumOfBettiNumbersOfSimpleModules(E,9);
55
&gt; SumOfBettiNumbersOfSimpleModules(E,10);
55
</PRE>
Here we see that E has global dimension 9. So we compute the basic
algebra of its ext-algebra.
<P>
<P>
<PRE>
&gt; F := BasicAlgebraOfExtAlgebra(E,10);
&gt; F;
Basic algebra of dimension 55 over GF(5)
Number of projective modules: 10
Number of generators: 19
&gt; G := BasicAlgebraOfExtAlgebra(F,10);
&gt; G;
Basic algebra of dimension 19 over GF(5)
Number of projective modules: 10
Number of generators: 19
</PRE>
So it would appear that C and F are isomorphic as well as E and G.
<HR>
<PRE></PRE> <A  HREF = "text978.htm">[Next]</A><A  HREF = "text976.htm">[Prev]</A> <A  HREF = "text978.htm">[Right]</A> <A  HREF = "text976.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>