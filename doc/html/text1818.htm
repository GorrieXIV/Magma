<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Connectedness</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1819.htm">[Next]</A><A  HREF = "text1817.htm">[Prev]</A> <A  HREF = "text1819.htm">[Right]</A> <A  HREF = "text1817.htm">[Left]</A> <A  HREF = "text1809.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20208">Connectedness</A></H3>

<P>
<P>
<P>
<P>
<P>
<P>
All the functions relating to connectivity issues are the same for simple 
graphs and multigraphs.  See Section <A  HREF = "text1795.htm#19879">Connectedness in a Graph</A> and 
its subsections for specific details about the algorithms underlying these 
functions.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1818.htm#20209">Connectedness in a Multigraph</A>
<LI> <A  HREF = "text1818.htm#20217">Connectedness in  a Multidigraph</A>
<LI> <A  HREF = "text1818.htm#20222">Triconnectivity for Multigraphs</A>
<LI> <A  HREF = "text1818.htm#20226">Maximum Matching in Bipartite Multigraphs</A>
<LI> <A  HREF = "text1818.htm#20228">General Vertex and Edge Connectivity in Multigraphs and Multidigraphs</A>
</UL>
<H4><A NAME = "20209">Connectedness in a Multigraph</A></H4>



<H5><A NAME = "20210">IsConnected(G) : GrphMultUnd -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the undirected 
   graph G is a connected graph.
</BLOCKQUOTE>
<H5><A NAME = "20211">Components(G) : GrphMultUnd -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
The connected components of the undirected graph G. 
These are returned in the form of a sequence of 
    subsets of the vertex-set of G.
</BLOCKQUOTE>
<H5><A NAME = "20212">Component(u) : GrphVert -&gt; GrphMult</A></H5>
<BLOCKQUOTE>
The subgraph corresponding to the connected component of the 
   multigraph G containing vertex u.
The support and vertex/edge decorations are <I>not</I> retained 
  in the resulting (structural) subgraph.
</BLOCKQUOTE>
<H5><A NAME = "20213">IsSeparable(G) : GrphMultUnd -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the graph G is connected and has at least
  one cut vertex.
</BLOCKQUOTE>
<H5><A NAME = "20214">IsBiconnected(G) : GrphMultUnd -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the graph G is biconnected.
The graph G must be undirected.
</BLOCKQUOTE>
<H5><A NAME = "20215">CutVertices(G) : GrphMultUnd -&gt; { GrphVert }</A></H5>
<BLOCKQUOTE>
The set of cut vertices for the connected undirected graph G 
   (as a set of vertices).
</BLOCKQUOTE>
<H5><A NAME = "20216">Bicomponents(G) : GrphMultUnd -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
The biconnected components of the undirected graph G. 
These are returned in the
  form of a sequence of subsets of the vertex-set of G.
The graph may be disconnected.
</BLOCKQUOTE>
<H4><A NAME = "20217">Connectedness in  a Multidigraph</A></H4>



<H5><A NAME = "20218">IsStronglyConnected(G) : GrphMultDir -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if  and only if 
   the multidigraph G is strongly connected.
</BLOCKQUOTE>
<H5><A NAME = "20219">IsWeaklyConnected(G) : GrphMultDir -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the multidigraph G is weakly 
connected.
</BLOCKQUOTE>
<H5><A NAME = "20220">StronglyConnectedComponents(G) : GrphMultDir -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
The strongly connected components of the multidigraph G. 
These are returned in the
   form of a sequence of subsets of the vertex-set of G.
</BLOCKQUOTE>
<H5><A NAME = "20221">Component(u) : GrphVert -&gt; GrphMult</A></H5>
<BLOCKQUOTE>
The subgraph corresponding to the connected component of the multidigraph
    G containing vertex u.
The support and vertex/edge decorations are <I>not</I> retained 
  in the resulting (structural) subgraph.
</BLOCKQUOTE>
<H4><A NAME = "20222">Triconnectivity for Multigraphs</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
We refer the reader to Subsection <A  HREF = "text1795.htm#19892">Graph Triconnectivity</A>
  of the graphs chapter for details about the 
  triconnectivity algorithm implemented here,
  and especially about the meaning of the <TT>Splitcomponents</TT>
  function.
The triconnectivity algorithm applies to undirected graphs only.


<H5><A NAME = "20223">IsTriconnected(G) : GrphMultUnd -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if G is triconnected. 
The graph G must be undirected.
</BLOCKQUOTE>
<H5><A NAME = "20224">Splitcomponents(G) : GrphMultUnd -&gt; [ { GrphVert } ], [ [ GrphVert ]]</A></H5>
<BLOCKQUOTE>
The split components of the undirected graph G. 
These are returned in the
  form of a sequence of subsets of the vertex-set of G.
The graph may be disconnected.
The second return value returns the cut vertices and the separation
  pairs as sequences of one or two vertices respectively.
</BLOCKQUOTE>
<H5><A NAME = "20225">SeparationVertices(G) : GrphMultUnd -&gt; [ [ GrphVert ]], [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
The cut vertices and/or the separation pairs of the undirected graph G as 
   a sequence of sequences of one and/or two vertices respectively.
The graph may be disconnected.
The second return value returns the split components of G .
</BLOCKQUOTE>
<H4><A NAME = "20226">Maximum Matching in Bipartite Multigraphs</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
We refer the reader to Subsection <A  HREF = "text1795.htm#19897">Maximum Matching in Bipartite Graphs</A>
  for information about the maximum matching algorithm.


<H5><A NAME = "20227">MaximumMatching(G : parameters) : GrphMultUnd -&gt; [ { GrphEdge rbrace ]</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
A maximum matching in the bipartite graph G. 
The matching is returned as  a sequence of edges of G.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<H4><A NAME = "20228">General Vertex and Edge Connectivity in Multigraphs and Multidigraphs</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
See Subsection <A  HREF = "text1795.htm#19900">General Vertex and Edge Connectivity in Graphs and Digraphs</A> for details 
  about the algorithms underlying the functions listed below.
These functions apply to both undirected and directed graphs.


<H5><A NAME = "20229">VertexSeparator(G : parameters) : GrphMult -&gt; [ GrphVert ]</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
If G is an undirected graph, a <I>vertex separator</I> for G is a smallest
  set of vertices S such that for any u, v&isin;V(G), every path 
  connecting u and v passes through at least one vertex of S.
<P>
If G is a directed graph, a vertex separator for G is a smallest
  set of vertices S such that for any u, v&isin;V(G), every directed
  path from u to v passes through at least one vertex of S.
<P>
<TT>VertexSeparator</TT> returns the vertex separator of G as a sequence
  of vertices of G.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<H5><A NAME = "20230">VertexConnectivity(G : parameters) : GrphMult -&gt; RngIntElt, [ GrphVert ]</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
Returns the vertex connectivity of the graph G, the size of a minimum
   vertex separator of G.
Also returns a vertex separator for G as the
  second value.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<H5><A NAME = "20231">IsKVertexConnected(G, k : parameters) : GrphMult, RngIntElt -&gt; BoolElt</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
Returns <TT>true</TT> if the vertex connectivity of the graph G is at least k, <TT>false</TT> 
   otherwise.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<H5><A NAME = "20232">EdgeSeparator(G : parameters) : GrphMult -&gt; [ GrphEdge ]</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
If G is an undirected graph, an <I>edge separator</I> for G is a smallest
  set of edges T such that for any u, v&isin;V(G), every path 
  connecting u and v passes through at least one edge of T.
<P>
If G is a directed graph, an edge separator for G is a smallest
  set of edges T such that for any u, v&isin;V(G), every directed
  path from u to v passes through at least one edge of T.
<P>
<TT>EdgeSeparator</TT> returns the edge separator of G as a sequence
  of edges of G.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<H5><A NAME = "20233">EdgeConnectivity(G : parameters) : GrphMult -&gt; RngIntElt, [ GrphEdge ]</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
Returns the edge connectivity of the graph G, the size of a minimum
  edge separator of G.
Also returns as the second value an edge separator for G.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<H5><A NAME = "20234">IsKEdgeConnected(G, k : parameters) : GrphMult, RngIntElt -&gt; BoolElt</A></H5>

<PRE>    Al: MonStg                          Default: "PushRelabel"</PRE>
<BLOCKQUOTE>
Returns <TT>true</TT> if the edge connectivity of the graph G is at least k, <TT>false</TT> 
  otherwise.
The parameter <TT>Al</TT> enables the user to select the algorithm
  which is to be used:
<TT>Al := "PushRelabel"</TT> or <TT>Al := "Dinic"</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20235">Example <TT>MultiGraph_GrphMult_Conn (H156E9)</TT></A></H3>
We demonstrate that the connectivity functions deal properly
<P>
  with multiple edges.
<P>
<P>
<PRE>
&gt; G := MultiGraph&lt; 3 | &lt; 1, {2, 3} &gt;, &lt; 1, {2, 3} &gt;, &lt; 2, {2, 3} &gt; &gt;;
&gt; G;
Multigraph
Vertex  Neighbours

1       3 2 3 2 ;
2       3 2 2 1 1 ;
3       2 1 1 ;

&gt; EdgeConnectivity(G);
3
&gt; EdgeSeparator(G);
[ &lt; {3, 2}, 11 &gt;, &lt; {1, 2}, 5 &gt;, &lt; {1, 2}, 1 &gt; ]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1819.htm">[Next]</A><A  HREF = "text1817.htm">[Prev]</A> <A  HREF = "text1819.htm">[Right]</A> <A  HREF = "text1817.htm">[Left]</A> <A  HREF = "text1809.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>