<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Normal and Subnormal  Subgroups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text665.htm">[Next]</A><A  HREF = "text663.htm">[Prev]</A> <A  HREF = "text665.htm">[Right]</A> <A  HREF = "text663.htm">[Left]</A> <A  HREF = "text653.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7648">Normal and Subnormal  Subgroups</A></H3>

<P>
<P>
The functions described in this section apply only to finite groups for
which a base and strong generating set may be constructed.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text664.htm#7649">Characteristic Subgroups and Subgroup Series</A>
<LI> <A  HREF = "text664.htm#7662">The Soluble Radical and its Quotient</A>
<LI> <A  HREF = "text664.htm#7667">Composition and Chief Factors</A>
</UL>
<H4><A NAME = "7649">Characteristic Subgroups and Subgroup Series</A></H4>



<H5><A NAME = "7650">Centre(G) : GrpMat -&gt; GrpMat</A></H5>
<H5>Center(G) : GrpMat -&gt; GrpMat</H5>
<BLOCKQUOTE>
Construct the centre of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7651">DerivedLength(G) : GrpMat -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The derived length of the matrix group G. If G is non-soluble, the function
returns the number of terms in the series terminating with the
soluble residual.
</BLOCKQUOTE>
<H5><A NAME = "7652">DerivedSeries(G) : GrpMat -&gt; [ GrpMat ]</A></H5>
<BLOCKQUOTE>
The derived series of the group G. The series is returned as
a sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "7653">CommutatorSubgroup(G) : GrpMat -&gt; GrpMat</A></H5>
<H5>DerivedSubgroup(G) : GrpMat -&gt; GrpMat</H5>
<H5>DerivedGroup(G) : GrpMat -&gt; GrpMat</H5>
<BLOCKQUOTE>
The derived subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7654">[Future release] FittingSubgroup(G) : GrpMat -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
The Fitting subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7655">LowerCentralSeries(G) : GrpMat -&gt; [ GrpMat ]</A></H5>
<BLOCKQUOTE>
The lower central series of the matrix group G. The series is returned as a
sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "7656">NilpotencyClass(G) : GrpMat -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The nilpotency class of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7657">H ^ G : GrpMat -&gt; GrpMat</A></H5>
<H5>NormalClosure(G, H) : GrpMat -&gt; GrpMat</H5>
<BLOCKQUOTE>
The normal closure of the subgroup H of group G.
</BLOCKQUOTE>
<H5><A NAME = "7658">SolubleResidual(G) : GrpMat -&gt; GrpMat</A></H5>
<H5>SolvableResidual(G) : GrpMat -&gt; GrpMat</H5>
<BLOCKQUOTE>
The solvable residual of the group G.
</BLOCKQUOTE>
<H5><A NAME = "7659">SubnormalSeries(G, H) : GrpMat, GrpMat -&gt; [ GrpMat ]</A></H5>
<BLOCKQUOTE>
Given a group G and a subnormal subgroup H of G, return a
sequence of subgroups commencing with G and terminating with
H, such that each subgroup is normal in the previous one. If
H is not subnormal in G, the empty sequence is returned.
</BLOCKQUOTE>
<H5><A NAME = "7660">UpperCentralSeries(G) : GrpMat -&gt; [ GrpMat ]</A></H5>
<BLOCKQUOTE>
The upper central series of the matrix group G. The series is returned as a
sequence of subgroups. As the algorithm used requires the
conjugacy classes of G, this function is much more restricted
in its range of application than <TT>DerivedSeries</TT> and <TT>LowerCentralSeries</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7661">Example <TT>GrpMatGen_Series (H64E26)</TT></A></H3>
We demonstrate some of the series functions by applying them
to a soluble subgroup of GL(3, 5).
<P>
<P>
<PRE>
&gt; G := MatrixGroup&lt; 3, GF(5) | [0,1,0, 1,0,0, 0,0,1], 
&gt;                                      [0,1,0, 0,0,1, 1,0,0],
&gt;                                      [2,0,0, 0,1,0, 0,0,1] &gt;;
&gt; Order(G);
384
&gt; DerivedGroup(G);
MatrixGroup(3, GF(5, 1))
Generators:
[0 0 1]
[1 0 0]
[0 1 0]


[2 0 0]
[0 3 0]
[0 0 1]
&gt; D := DerivedSeries(G);
&gt; [ Order(d) : d in D ];
[ 384, 48, 16, 1 ]
&gt; L := LowerCentralSeries(G);
&gt; [ Order(l) : l in L ];
[ 384, 48 ]
&gt; K := sub&lt; G | [ 2,0,0, 0,3,0, 0,0,2 ] &gt;;
&gt; S := SubnormalSeries(G, K);
&gt; [ Order(s) : s in S ];
[ 384, 16, 4 ]
</PRE>
<HR>
<H4><A NAME = "7662">The Soluble Radical and its Quotient</A></H4>

<P>
<P>
The functions in this section enable the user to construct the radical,
its quotient and an elementary abelian series. They are currently restricted
to matrix groups where a base and strong generating set can be constructed
and the base ring is either a field or can be embedded into a field.


<H5><A NAME = "7663">Radical(G) : GrpMat -&gt; GrpMat</A></H5>
<H5>SolubleRadical(G) : GrpMat -&gt; GrpMat</H5>
<H5>SolvableRadical(G) : GrpMat -&gt; GrpMat</H5>
<BLOCKQUOTE>
Given a group G, return the maximal normal solvable subgroup of G.
The algorithm is to compute the radical quotient map, and then compute its
kernel. The algorithm used is described in Unger <A  HREF = "text652.htm#bib_unger">[Ung06b]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7664">RadicalQuotient(G) : GrpMat -&gt; GrpPerm, Hom(Grp), GrpMat</A></H5>
<BLOCKQUOTE>
Given a group G, compute a permutation representation of the quotient 
G/R where R is the (solvable) radical of G.  
Both the permutation group Q isomorphic to G/R and
a homomorphism &phi;: G -&gt; Q are returned. The third return value
is R, the radical of G and the kernel of the homomorphism.
The algorithm used is described in Unger <A  HREF = "text652.htm#bib_unger">[Ung06b]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7665">ElementaryAbelianSeries(G: parameters) : GrpMat -&gt; [ GrpMat ]</A></H5>

<PRE>    LayerSizes: SeqEnum[RngIntElt]      Default: []</PRE>
<BLOCKQUOTE>
An elementary abelian series is a chain of normal subgroups
R = N<sub>1</sub> &gt; N<sub>2</sub> &gt; ... &gt; N<sub>r</sub> = 1 with the property that the quotient of
each pair of successive terms in the series is elementary abelian
and that there is no group R &lt; H &lt; G such that H/R is elementary
abelian and H normal in G.  The top of the series R is called the
solvable radical and is the maximal normal solvable subgroup of G.
<P>
The parameter <TT>LayerSizes</TT> controls possible refinement of the
series. As an example, take
<TT>LayerSizes := [ 2, 5, 3, 4, 7, 3, 11, 2, 17, 1]</TT>.
When constructing an elementary abelian series for the group,
attempt to split 2-layers of size gt 2<sup>5</sup>, 3-layers of size gt 3<sup>4</sup>,
etc. The implied exponent for 13 is 2 and for all primes greater than 17
the exponent is 1. Setting <TT>LayerSizes</TT> to <TT>[2, 1]</TT> will attempt
to split all layers, resulting in a portion of a chief series for G.
</BLOCKQUOTE>
<H5><A NAME = "7666">ElementaryAbelianSeriesCanonical(G) : GrpMat -&gt; [ GrpMat ]</A></H5>
<BLOCKQUOTE>
Gives a similar result to using <TT>ElementaryAbelianSeries</TT>, except the 
series returned depends only on the isomorphism
type of the solvable radical, and consists of characteristic subgroups of G.
This function may be slower than <TT>ElementaryAbelianSeries</TT>.
</BLOCKQUOTE>
<H4><A NAME = "7667">Composition and Chief Factors</A></H4>

<P>
<P>
The functions in this section enable the user to find the composition
factors of a matrix group.
They are restricted to matrix groups where a base and strong generating 
set can be constructed. The chief series and factors functions are further
restricted to groups where the base ring is either a field or can be 
embedded into a field.


<H5><A NAME = "7668">CompositionFactors(G) : GrpMat -&gt; [ &lt;RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Given a matrix group G, return a sequence S of tuples that
represent the composition factors of G, ordered according to some
composition series of G. Each tuple is a triple 
of integers f, d, q that defines the isomorphism type of 
the corresponding composition factor.  A triple &lt; f, d, q &gt;
describes a simple group as follows. The integer f defines
the family to which the group belongs, and d and q are the
parameters of the family.  The length of the sequence S is the 
number of composition factors of G. The numbering of the simple
group families is given in Tables 1 and 2 of the chapter on permutation 
groups<A  HREF = "text1.htm#"></A>.
</BLOCKQUOTE>
<H5><A NAME = "7669">ChiefFactors(G) : GrpMat -&gt; [ &lt;RngIntElt, RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Given a group G, return a sequence of the isomorphism
types &lt;f, d, q, m&gt; of the chief factors.
An isomorphism type in a chief factor should be understood as the
direct product of m copies of the simple group described by &lt;f, d, q&gt;
(see <TT>CompositionFactors</TT> above). For the algorithm, see Unger
<A  HREF = "text652.htm#bib_chief-series-unger">[Ung]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7670">ChiefSeries(G) : GrpMat -&gt; [ GrpMat ], [ &lt;RngIntElt, RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Given a group G, return the chief series of G and a sequence of the
corresponding isomorphism types &lt;f, d, q, m&gt; of the chief factors.
An isomorphism type in a chief factor should be understood as the
direct product of m copies of the simple group described by &lt;f, d, q&gt;
(see <TT>CompositionFactors</TT> above).
The series will be organised to contain the soluble radical of G, and, if
G is insoluble, the socle of the quotient of G by the soluble radical.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7671">Example <TT>GrpMatGen_CompositionFactors (H64E27)</TT></A></H3>
We get the chief factors of a group of degree 4
defined over the cyclotomic field of order 8. 
<P>
<P>
<PRE>
&gt; L&lt;zeta_8&gt; := CyclotomicField(8);
&gt; w := -( - zeta_8^3 - zeta_8^2 + zeta_8);
&gt; // Define sqrt(q)
&gt; rt2 := -1/6*w^3 + 5/6*w;
&gt; // Define sqrt(-1)
&gt; ii := -1/6*w^3 - 1/6*w;
&gt; f := rt2;
&gt; t := f/2 + (f/2)*ii;
&gt; GL4L := GeneralLinearGroup(4, L);
&gt;
&gt; A := GL4L ! [ 1/2, 1/2, 1/2, 1/2, 
&gt;             1/2,-1/2, 1/2,-1/2, 
&gt;             1/2, 1/2,-1/2,-1/2, 
&gt;             1/2,-1/2,-1/2, 1/2 ];
&gt;  
&gt; B := GL4L ! [ 1/f,   0, 1/f,   0,
&gt;               0, 1/f,   0, 1/f,
&gt;             1/f,   0,-1/f,   0,
&gt;               0, 1/f,   0,-1/f ];
&gt;  
&gt; g4 := GL4L ! [  1, 0, 0, 0,
&gt;               0, 1, 0, 0,
&gt;               0, 0, 1, 0,
&gt;               0, 0, 0,-1 ];
&gt;  
&gt; D1 := GL4L ! [ 1, 0, 0, 0,
&gt;              0,ii, 0, 0,
&gt;              0, 0, 1, 0,
&gt;              0, 0, 0,ii ];
&gt;  
&gt; D3 := GL4L ! [ t, 0, 0, 0,
&gt;              0, t, 0, 0,
&gt;              0, 0, t, 0,
&gt;              0, 0, 0, t ];
&gt;  
&gt; G3 := sub&lt; GL4L | A, B, g4, D1, D3 &gt;;
&gt; Order(G3);
92160
&gt; ChiefFactors(G3);
    G
    |  Cyclic(2)
    *
    |  Alternating(6)
    *
    |  Cyclic(2) (4 copies)
    *
    |  Cyclic(2)
    *
    |  Cyclic(2)
    *
    |  Cyclic(2)
    1
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text665.htm">[Next]</A><A  HREF = "text663.htm">[Prev]</A> <A  HREF = "text665.htm">[Right]</A> <A  HREF = "text663.htm">[Left]</A> <A  HREF = "text653.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>