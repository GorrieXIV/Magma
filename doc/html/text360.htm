<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Structure Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text361.htm">[Next]</A><A  HREF = "text359.htm">[Prev]</A> <A  HREF = "text361.htm">[Right]</A> <A  HREF = "text359.htm">[Left]</A> <A  HREF = "text356.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "3399">Structure Operations</A></H3>

<P>
<P>
<P>
In the lists below K always denotes a number field.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text360.htm#3400">General Functions</A>
<LI> <A  HREF = "text360.htm#3403">Related Structures</A>
<LI> <A  HREF = "text360.htm#3417">Representing Fields as Vector Spaces</A>
<LI> <A  HREF = "text360.htm#3421">Invariants</A>
<LI> <A  HREF = "text360.htm#3433">Basis Representation</A>
<LI> <A  HREF = "text360.htm#3439">Ring Predicates</A>
<LI> <A  HREF = "text360.htm#3446">Field Predicates</A>
</UL>
<H4><A NAME = "3400">General Functions</A></H4>

<P>
<P>
Number fields form the Magma category <TT>FldNum</TT>.
The notional power structures exist as parents
of algebraic fields with no operations are allowed.


<H5>Category(K) : FldNum -&gt; Cat</H5>

<H5>Type(K) : FldNum -&gt; Cat</H5>


<H5>ExtendedType(K) : FldNum -&gt; Cat</H5>

<H5>Parent(K) : FldNum -&gt; Pow</H5>
<P>


<H5><A NAME = "3401">AssignNames(~K, s) : FldNum, [ MonStgElt ] -&gt;</A></H5>
<BLOCKQUOTE>
Procedure to change the names of the generating elements in the
number field K to the contents of the sequence of strings s.
<P>
The i-th sequence element will be the name used for the generator of
the (i - 1)-st subfield down from K as determined by the creation of K, 
the first element being used 
as the name for the generator of K. 
In the case where K is defined by more than one polynomial as an absolute
extension, the ith sequence element will be the name used for the 
root of the ith polynomial used in the creation of K.
<P>
This procedure only changes the names used in printing the elements of K.
It does <I>not</I> assign to any identifiers 
the value of a generator in K; to do this, use an assignment statement,
or use angle brackets when creating the field.
<P>
Note that since this is a procedure that modifies K,
it is necessary to have a reference <TT>~K</TT> to K
in the call to this function.
</BLOCKQUOTE>
<H5><A NAME = "3402">Name(K, i) : FldNum, RngIntElt -&gt; FldNumElt</A></H5>
<H5>K . i : FldNum, RngIntElt -&gt; FldNumElt</H5>
<BLOCKQUOTE>
Given a number field K, return the
element which has the i-th name attached to it,
that is, the generator of the (i - 1)-st subfield down from K
as determined by the creation of K.
Here i must be
in the range 1&le;i&le;m, where m is the number of polynomials
used in creating K. If K was created using multiple polynomials 
as an absolute extension, <TT>K.i</TT> will be a root of the ith polynomial
used in creating K.
</BLOCKQUOTE>
<H4><A NAME = "3403">Related Structures</A></H4>

<P>
<P>
Each number field has other structures related to it in various ways.


<H5>PrimeRing(F) : FldNum -&gt; RngRat</H5>

<H5>PrimeField(F) : FldNum -&gt; RngRat</H5>
<P>

<H5>Centre(F) : FldNum -&gt; FldNum</H5>
<P>




<H5><A NAME = "3404">GroundField(F) : FldNum -&gt; Fld</A></H5>
<H5>BaseField(F) : FldNum -&gt; Fld</H5>
<H5><A NAME = "FldNum:CoefficientField">CoefficientField</A>(F) : FldNum -&gt; Fld</H5>
<H5>CoefficientRing(F) : FldNum -&gt; Fld</H5>
<BLOCKQUOTE>
Given a number field F, return the number field over 
which F was defined.
For an absolute number field F, the function returns the rational
field Q.
</BLOCKQUOTE>
<H5><A NAME = "3405"></A><A NAME = "FldNum:AbsoluteField">AbsoluteField</A>(F) : FldNum -&gt; FldNum</H5>
<BLOCKQUOTE>
Given a number field F, this returns an isomorphic number field
L defined as an absolute extension (i.e. over Q).
(For algorithm, see <A  HREF = "text355.htm#bib_Trager_Factorization">[Tra76]</A>)
</BLOCKQUOTE>
<H5><A NAME = "3406"></A><A NAME = "FldNum:SimpleExtension">SimpleExtension</A>(F) : FldNum -&gt; FldNum</H5>
<BLOCKQUOTE>
Given a number field F or an order O,
this returns an isomorphic field
L defined as an absolute simple extension.
(For algorithm, see <A  HREF = "text355.htm#bib_Trager_Factorization">[Tra76]</A>)
</BLOCKQUOTE>
<H5><A NAME = "3407">RelativeField(F, L) : FldNum, FldNum -&gt; FldNum</A></H5>
<H5>RelativeField(Q, L) : FldRat, FldNum -&gt; FldNum</H5>
<BLOCKQUOTE>
Given number fields L and F such that Magma knows
that F is a subfield of L, return an isomorphic number 
field M defined as an extension over F.
</BLOCKQUOTE>
<H5><A NAME = "3408">Components(F) : FldNum -&gt; [FldNum]</A></H5>
<BLOCKQUOTE>
Given a number field F return the sequence of number fields each defined by
a defining polynomial of F.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3409">Example <TT>FldNum_Compositum (H35E6)</TT></A></H3>
It is often desirable to build up a number field by adjoining several
algebraic numbers to Q. The following function returns a number field
that is the composite field of two given number fields K and L, provided that K&cap;L=Q; if K and L have a common subfield larger than Q the function returns a field with the property that it contains a subfield isomorphic to K as well as a subfield
isomorphic to L.
<P>
<P>
<PRE>
&gt; R&lt;x&gt; := PolynomialRing(Integers());
&gt; Composite := function( K, L )
&gt;     T&lt;y&gt; := PolynomialRing( K );
&gt;     f := T!DefiningPolynomial( L );	
&gt;     ff := Factorization(f);
&gt;     LKM := NumberField(ff[1][1]);
&gt;     return AbsoluteField(LKM);
&gt; end function;
</PRE>
To create, for example, the field Q(Sqrt(2), Sqrt(3), Sqrt(5)), the
above function should be applied twice:
<P>
<P>
<PRE>
&gt; K := NumberField(x^2-3);
&gt; L := NumberField(x^2-2);
&gt; M := NumberField(x^2-5);
&gt; KL := Composite(K, L);
&gt; S&lt;s&gt; := PolynomialRing(BaseField(KL));
&gt; KLM&lt;w&gt; := Composite(KL, M);
&gt; KLM;
Number Field with defining polynomial s^8 - 40*s^6 + 352*s^4 - 960*s^2 + 576 
over the Rational Field
</PRE>
Note, that the same field may be constructed with just one call
to <A  HREF = "text359.htm#FldNum:NumberField">NumberField</A> followed by <A  HREF = "text360.htm#FldNum:AbsoluteField">AbsoluteField</A>:
<P>
<P>
<PRE>
&gt; KLM2 := AbsoluteField(NumberField([x^2-3, x^2-2, x^2-5]));
&gt; KLM2;
Number Field with defining polynomial s^8 - 40*s^6 + 352*s^4 - 960*s^2 + 576 
over the Rational Field
</PRE>
or by
<P>
<P>
<PRE>
&gt; AbsoluteField(ext&lt;Rationals() | [x^2-3, x^2-2, x^2-5]&gt;);
Number Field with defining polynomial s^8 - 40*s^6 + 352*s^4 - 960*s^2 + 576 
over the Rational Field
</PRE>
In general, however, the resulting polynomials of KLM and KLM2 will differ.
To see the difference between <TT>SimpleExtension</TT> and <TT>AbsoluteField</TT>,
we will create <TT>KLM2</TT> again:
<P>
<P>
<PRE>
&gt; KLM3 := NumberField([x^2-3, x^2-2, x^2-5]: Abs);
&gt; AbsoluteField(KLM3);
Number Field with defining polynomials [ x^2 - 3, x^2 - 2, 
    x^2 - 5] over the Rational Field
&gt; SimpleExtension(KLM3);
Number Field with defining polynomial s^8 - 40*s^6 + 352*s^4 - 960*s^2 + 576 
over the Rational Field
</PRE>
<HR>
<H5><A NAME = "3410">Embed(F, L, a) : FldNum, FldNum, FldNumElt -&gt;</A></H5>
<BLOCKQUOTE>
Install the embedding of a simple number field F in L 
where the image of the primitive element
of F is the element a of L. This embedding will be used in coercing from 
F into L.
</BLOCKQUOTE>
<H5><A NAME = "3411">Embed(F, L, a) : FldNum, FldNum, [FldNumElt] -&gt;</A></H5>
<BLOCKQUOTE>
Install the embedding of the non-simple number field F in L
where the image of the generating elements
of F are in the sequence a of elements of L. This embedding will be 
used in coercing from F into L.
</BLOCKQUOTE>
<H5><A NAME = "3412">EmbeddingMap(F, L): FldNum, FldNum -&gt; Map</A></H5>
<BLOCKQUOTE>
Returns the embedding map of the number field F in L if an embedding is known.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3413">Example <TT>FldNum_em (H35E7)</TT></A></H3>
Magma does not recognize two independently created number fields as equal
since more than one embedding of a field in a larger field may be possible.
To coerce between them, it is convenient to be able to embed them
in each other.
<P>
<P>
<PRE>
&gt; k := NumberField(x^2-2);
&gt; l := NumberField(x^2-2);
&gt; l!k.1; 
&gt;&gt; l!k.1; 
    ^
Runtime error in '!': Arguments are not compatible
LHS: FldNum
RHS: FldNumElt
&gt; l eq k;
false
&gt; Embed(k, l, l.1);
&gt; l!k.1;           
l.1
&gt; Embed(l, k, k.1);
&gt; k!l.1;
k.1
</PRE>
<TT>Embed</TT> is useful in specifying the embedding of a field in a larger 
field.
<P>
<P>
<PRE>
&gt; l&lt;a&gt; := NumberField(x^3-2);
&gt; L&lt;b&gt; := NumberField(x^6+108);
&gt; Root(L!2, 3);
1/18*b^4
&gt; Embed(l, L, $1);
&gt; L!l.1;
1/18*b^4
</PRE>
Another embedding would be
<P>
<P>
<PRE>
&gt; Roots(PolynomialRing(L)!DefiningPolynomial(l));
[
    &lt;1/36*(-b^4 - 18*b), 1&gt;,
    &lt;1/36*(-b^4 + 18*b), 1&gt;,
    &lt;1/18*b^4, 1&gt;
]
&gt; Embed(l, L, $1[1][1]);
&gt; L!l.1;
1/36*(-b^4 - 18*b)
</PRE>
<HR>
<H5><A NAME = "3414">MinkowskiSpace(F) : FldNum -&gt; Lat, Map</A></H5>
<BLOCKQUOTE>
The Minkowski vector space V of the absolute number field F
as a real vector space, with
inner product given by the T<sub>2</sub>-norm (<A  HREF = "text390.htm#RngOrd:Length">Length</A>) on F, and by the embedding
F -&gt; V.
</BLOCKQUOTE>
<H5><A NAME = "3415"></A><A NAME = "FldNum:Completion1">Completion</A>(K, P) : FldNum, RngOrdIdl -&gt; FldLoc, Map</H5>
<H5>comp&lt;K|P&gt; : FldNum, RngOrdIdl -&gt; FldLoc, Map</H5>

<PRE>    Precision: RngIntElt                Default: 20</PRE>
<BLOCKQUOTE>
For an absolute extension K of Q, compute the
completion at a prime ideal P which must be either a prime ideal
of the maximal order or unramified.
The result will be a local field or ring with relative precision <TT>Precision</TT>.
<P>
The returned map is the canonical injection into the
completion. It allows pointwise inverse operations.
</BLOCKQUOTE>
<H5><A NAME = "3416">Completion(K, P) : FldNum, PlcNumElt -&gt; FldLoc, Map</A></H5>

<PRE>    Precision: RngIntElt                Default: 20</PRE>
<BLOCKQUOTE>
For an absolute extension K over Q and a (finite) place
P, compute the completion at P. The precision and the map
are as described for <A  HREF = "text360.htm#FldNum:Completion1">Completion</A>.
</BLOCKQUOTE>
<H4><A NAME = "3417">Representing Fields as Vector Spaces</A></H4>

<P>
<P>
It is possible to express a number field 
as a vector space of any subfield using the intrinsics below. Such a 
construction also allows one to find properties of elements over these
subfields.


<H5><A NAME = "3418">Algebra(K, J) : FldNum, Fld -&gt; AlgAss, Map</A></H5>
<H5>Algebra(K, J, S) : FldNum, Fld, [FldNumElt] -&gt; AlgAss, Map</H5>
<BLOCKQUOTE>
Returns the associative structure constant algebra which is isomorphic to
the number field K as an algebra over J. Also returns the
isomorphism from K to the algebra mapping w<sup>i</sup> to the i + 1st unit
vector of the algebra where w is a primitive element of K.
<P>
If a sequence S is given it is taken to be a basis of K over J and
the isomorphism will map the ith element of S to the ith unit
vector of the algebra.
</BLOCKQUOTE>
<H5><A NAME = "3419">VectorSpace(K, J) : FldNum, Fld -&gt; ModTupFld, Map</A></H5>
<H5>KSpace(K, J) : FldNum, Fld -&gt; ModTupFld, Map</H5>
<H5>VectorSpace(K, J, S) : FldNum, Fld, [FldNumElt] -&gt; ModTupFld, Map</H5>
<H5>KSpace(K, J, S) : FldNum, Fld, [FldNumElt] -&gt; ModTupFld, Map</H5>
<BLOCKQUOTE>
The vector space isomorphic to the number field K as a vector space
over J and the isomorphism from K to the vector space. The isomorphism
maps w<sup>i</sup> to the i + 1st unit vector of the vector space where w is
a primitive element of K.
<P>
If S is given, the isomorphism will map the ith element of S to
the ith unit vector of the vector space.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3420">Example <TT>FldNum_vector_space_eg (H35E8)</TT></A></H3>
We use the <TT>Algebra</TT> of a relative number field to obtain the minimal
polynomial of an element over a subfield which is not in its coefficient field 
tower.
<P>
<P>
<PRE>
&gt; K := NumberField([x^2 - 2, x^2 - 3, x^2 - 7]);
&gt; J := AbsoluteField(NumberField([x^2 - 2, x^2 - 7]));
&gt; A, m := Algebra(K, J);
&gt; A;
Associative Algebra of dimension 2 with base ring J
&gt; m;
Mapping from: RngOrd: K to AlgAss: A
&gt; m(K.1);
(1/10*(J.1^3 - 13*J.1)                      0)
&gt; m(K.1^2);
(2 0)
&gt; m(K.2);  
(1/470*(83*J.1^3 + 125*J.1^2 - 1419*J.1 - 1735) 1/940*(-24*J.1^3 - 5*J.1^2 + 
    382*J.1 + 295))
&gt; m(K.2^2);
(3 0)
&gt; m(K.3);  
(1/10*(-J.1^3 + 23*J.1)                       0)
&gt; m(K.3^2);
(7 0)
&gt; A.1 @@ m;
1
&gt; A.2 @@ m;
(($.1 - 1)*$.1 - $.1 - 1)*K.1 + ($.1 + 1)*$.1 + $.1 + 1
&gt; 
&gt; r := 5*K.1 - 8*K.2 + K.3;
&gt; m(r);
(1/235*(-238*J.1^3 - 500*J.1^2 + 4689*J.1 + 6940) 1/235*(48*J.1^3 + 10*J.1^2 - 
    764*J.1 - 590))
&gt; MinimalPolynomial($1);
$.1^2 + 1/5*(-4*J.1^3 + 42*J.1)*$.1 + 5*J.1^2 - 180
&gt; Evaluate($1, r);
0
&gt; K:Maximal;

  K
  |
  |
  $1
  |
  |
  $2
  |
  |
  Q

K : $.1^2 - 2
$1 : $.1^2 - 3
$2 : x^2 - 7
&gt; Parent($3);
Univariate Polynomial Ring over J
&gt; J;
Number Field with defining polynomial $.1^4 - 18*$.1^2 + 25 over the Rational 
Field
</PRE>
<HR>
<H4><A NAME = "3421">Invariants</A></H4>

<P>
<P>
Some information describing a number field can be retrieved.


<H5>Characteristic(F) : FldNum -&gt; RngIntElt</H5>
<P>



<H5><A NAME = "3422"></A><A NAME = "FldNum:Degree">Degree</A>(F) : FldNum -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a number field F, return the degree [F:G] of F over
its ground field G.
</BLOCKQUOTE>
<H5><A NAME = "3423">AbsoluteDegree(F) : FldNum -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a number field F, return the absolute
degree of F over Q.
</BLOCKQUOTE>
<H5><A NAME = "3424"></A><A NAME = "FldNum:Discriminant">Discriminant</A>(F) : FldNum  -&gt; RngIntElt</H5>
<H5>Discriminant(F) : FldNum -&gt; RngOrdIdl</H5>
<BLOCKQUOTE>
Given an extension F of Q, return the discriminant
of F. This discriminant is defined to be
the discriminant of the defining polynomial, <B>not</B> as the discriminant
of the maximal order.
<P>
The discriminant 
in a relative extension F is the ideal in the base ring 
generated by the discriminant of
the defining polynomial.
</BLOCKQUOTE>
<H5><A NAME = "3425">AbsoluteDiscriminant(K) : FldNum -&gt; FldRatElt</A></H5>
<BLOCKQUOTE>
Given a number field K, return the absolute value of the
discriminant of K regarded as an
extension of Q.
</BLOCKQUOTE>
<H5><A NAME = "3426">Regulator(K) : FldNum -&gt; FldComElt</A></H5>
<BLOCKQUOTE>
Given a number field K, return the regulator of K
as a real number.
Note that this will trigger the computation of the maximal
order and its unit group if they are not known yet.
This only works in an absolute extension.
</BLOCKQUOTE>
<H5><A NAME = "3427">RegulatorLowerBound(K) : FldNum -&gt; FldComElt</A></H5>
<BLOCKQUOTE>
Given a number field K, return a lower bound on the 
regulator of O or K.
This only works in an absolute extension.
</BLOCKQUOTE>
<H5><A NAME = "3428">Signature(F) : FldAlg -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Given an absolute number field F, returns 
two integers, one being the number of real embeddings, the other the number 
of pairs of complex embeddings of F.
</BLOCKQUOTE>
<H5><A NAME = "3429">UnitRank(K) : FldNum -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The unit rank of the number field K
(one less than the number of real embeddings plus number 
of pairs of complex embeddings).
</BLOCKQUOTE>
<H5><A NAME = "3430">DefiningPolynomial(F) : FldNum -&gt; RngUPolElt</A></H5>
<H5>DefiningPolynomial(F) : FldNum -&gt; [RngUPolElt]</H5>
<BLOCKQUOTE>
Given a number field F,
the polynomial
defining F as an extension of its ground field G is returned.
<P>
For non simple extensions, this will return a list of polynomials.
</BLOCKQUOTE>
<H5><A NAME = "3431">Zeroes(F, n) : FldNum, RngIntElt -&gt; [ FldComElt ]</A></H5>
<BLOCKQUOTE>
Given an absolute number field F, and an 
integer n, return the zeroes of the defining polynomial of F 
with a precision of exactly n decimal digits.
The function returns a sequence of length the degree of F; all of the
real zeroes appear before the complex zeroes.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3432">Example <TT>FldNum_zero (H35E9)</TT></A></H3>
The information provided by <TT>Zeros</TT> and <TT>DefiningPolynomial</TT>
is illustrated below.
<P>
<P>
<PRE>
&gt; L := NumberField(x^6+108);
&gt; DefiningPolynomial(L);
x^6 + 108
&gt; Zeros(L, 30);
[ 1.889881574842309747150815910899999999994 + 
1.0911236359717214035600726141999999999977*i, 
1.889881574842309747150815910899999999994 - 
1.0911236359717214035600726141999999999977*i,  0.E-29 + 
2.1822472719434428071201452283999999999955*i,  0.E-29 - 
2.1822472719434428071201452283999999999955*i, 
-1.889881574842309747150815910899999999994 + 
1.0911236359717214035600726141999999999977*i, 
-1.889881574842309747150815910899999999994 - 
1.0911236359717214035600726141999999999977*i ]
&gt; l := NumberField(x^3 - 2);
&gt; DefiningPolynomial(l);
x^3 - 2
&gt; Zeros(l, 30);
[ 1.259921049894873164767210607299999999994, 
-0.629960524947436582383605303639109999999 + 
1.0911236359717214035600726141999999999977*i, 
-0.629960524947436582383605303639109999999 - 
1.0911236359717214035600726141999999999977*i ]
</PRE>
<HR>
<H4><A NAME = "3433">Basis Representation</A></H4>

<P>
<P>
The basis of a number field can be expressed using elements
from any compatible ring. 


<H5><A NAME = "3434">Basis(F) : FldNum -&gt; [ FldNumElt ]</A></H5>
<H5>Basis(F, R) : FldNum, Rng -&gt; [ RngElt ]</H5>
<BLOCKQUOTE>
Return the current basis for the number field F 
over its ground ring
as a sequence of elements of F or as a sequence 
of elements of R.
</BLOCKQUOTE>
<H5><A NAME = "3435">IntegralBasis(F) : FldNum -&gt; [ FldNumElt ]</A></H5>
<H5>IntegralBasis(F, R) : FldNum, Rng -&gt; [ RngElt ]</H5>
<BLOCKQUOTE>
An integral basis for the algebraic number field F is returned as a
sequence of elements of F or R if given. This is the same as the basis for
the maximal order. Note that the maximal order will be determined
(and stored) if necessary.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3436">Example <TT>FldNum_basis-ring (H35E10)</TT></A></H3>
The following illustrates how a basis can look different when expressed 
in a different ring.
<P>
<P>
<PRE>
&gt; f := x^5 + 5*x^4 - 75*x^3 + 250*x^2 + 65625;
&gt; N := NumberField(f);
&gt; N;
Number Field with defining polynomial x^5 + 5*x^4 - 75*x^3 + 250*x^2 + 65625 
over the Rational Field
&gt; Basis(N);
[
    1,
    N.1,
    N.1^2,
    N.1^3,
    N.1^4
]
&gt; IntegralBasis(N); 
[
    1,
    1/5*N.1,
    1/25*N.1^2,
    1/125*N.1^3,
    1/625*N.1^4
]
&gt; IntegralBasis(N, MaximalOrder(N));
[
    [1, 0, 0, 0, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 1, 0, 0],
    [0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1]
]
</PRE>
<HR>
<H5><A NAME = "3437"></A><A NAME = "FldNum:AbsoluteBasis">AbsoluteBasis</A>(K) : FldNum -&gt; [FldNumElt]</H5>
<BLOCKQUOTE>
Returns an absolute basis for the number field K, i.e. a basis for K as
a Q vector space. The basis will consist of the products of
the basis elements of the intermediate fields.
The expansion is done depth-first.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "3438">Example <TT>FldNum_Bases (H35E11)</TT></A></H3>
We continue our example of a field of degree 4.
<P>
The functions <TT>Basis</TT> and <TT>IntegralBasis</TT> both return
a sequence of elements, that can be accessed using the operators
for enumerated sequences. Note that if, as in our example, O is
the maximal order of K, both functions produce the same output:
<P>
<P>
<PRE>
&gt; R&lt;x&gt; := PolynomialRing(Integers());
&gt; f := x^4 - 420*x^2 + 40000;
&gt; K&lt;y&gt; := NumberField(f);
&gt; O := MaximalOrder(K);
&gt; I := IntegralBasis(K);
&gt; B := Basis(O);
&gt; I, B;
[
    1,
    1/2*y,
    1/40*(y^2 + 10*y),
    1/800*(y^3 + 180*y + 400)
]
[
    O.1,
    O.2,
    O.3,
    O.4
]
&gt; Basis(O, K);
[
    1,
    1/2*y,
    1/40*(y^2 + 10*y),
    1/800*(y^3 + 180*y + 400)
]
</PRE>
<HR>
<H4><A NAME = "3439">Ring Predicates</A></H4>

<P>
<P>
Number fields can be tested for having several properties
that may hold for general rings.


<H5>IsCommutative(R) : Rng -&gt; BoolElt</H5>

<H5>IsUnitary(R) : Rng -&gt; BoolElt</H5>

<H5>IsFinite(R) : Rng -&gt; BoolElt</H5>
<P>

<H5>IsOrdered(R) : Rng -&gt; BoolElt</H5>

<H5>IsField(R) : Rng -&gt; BoolElt</H5>
<P>

<H5>IsNumberField(R) : . -&gt; BoolElt</H5>

<H5>IsAlgebraicField(R) : . -&gt; BoolElt</H5>
<P>

<H5>IsPID(F) : FldNum -&gt; BoolElt</H5>

<H5>IsUFD(F) : FldNum -&gt; BoolElt</H5>
<P>

<H5>IsDomain(R) : FldNum -&gt; BoolElt</H5>
<P>

<H5>F ne L : FldNum, FldNum -&gt; BoolElt</H5>

<H5>K subset L : FldNum, FldNum -&gt; BoolElt</H5>

<H5>K subset L : FldRat, FldNum -&gt; BoolElt</H5>
<P>


<H5><A NAME = "3440">F eq L : FldNum, FldNum -&gt; BoolElt</A></H5>
<H5>F eq L : FldRat, FldNum -&gt; BoolElt</H5>
<H5>F eq L : FldNum, FldRat -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the number fields F
and L are indentical.
<P>
No two number fields which have been created independently of each other
will be considered equal since it is possible that they can be embedded 
into a larger field in more than one way.
</BLOCKQUOTE>
<H5><A NAME = "3441">IsEuclideanDomain(F) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
This is not a check for euclidean number fields. This function will
always return <TT>true</TT>, as all number fields are euclidean domains.
</BLOCKQUOTE>
<H5><A NAME = "3442">IsSimple(F) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Checks if the number field F is defined as a simple extension over the base ring.
</BLOCKQUOTE>
<H5><A NAME = "3443">IsPrincipalIdealRing(F) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Always <TT>true</TT> for number fields.
</BLOCKQUOTE>
<H5><A NAME = "3444"></A><A NAME = "FldNum:HasComplexConjugate">HasComplexConjugate</A>(K) : FldNum -&gt; BoolElt, Map</H5>
<BLOCKQUOTE>
This function returns <TT>true</TT> if there is an automorphism in
the number field K that acts like complex conjugation.
</BLOCKQUOTE>
<H5><A NAME = "3445">ComplexConjugate(x) : FldNumElt -&gt; FldNumElt</A></H5>
<BLOCKQUOTE>
For an element x of a number field K where <A  HREF = "text360.htm#FldNum:HasComplexConjugate">HasComplexConjugate</A>
returns <TT>true</TT> (in particular this includes totally real fields, cyclotomic and
quadratic fields and CM-extensions), the conjugate of x is returned.
</BLOCKQUOTE>
<H4><A NAME = "3446">Field Predicates</A></H4>

<P>
<P>
Here all the predicates that are specific to number fields are listed.


<H5><A NAME = "3447">IsIsomorphic(F, L) : FldNum, FldNum -&gt; BoolElt, Map</A></H5>
<BLOCKQUOTE>
Given two number
fields F and L, this returns <TT>true</TT> as well as an isomorphism
F -&gt; L, if F and L are isomorphic,
and it returns <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "3448">IsSubfield(F, L) : FldNum, FldNum  -&gt; BoolElt, Map</A></H5>
<H5>IsSubfield(F, L) : FldRat, FldNum  -&gt; BoolElt, Map</H5>
<BLOCKQUOTE>
Given two number
fields F and L, this returns <TT>true</TT> as well as an embedding
F -&gt; L, if F is a subfield of L, and
it returns <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "3449">IsNormal(F) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the number field F is a normal extension. At
present this may only be applied if F is an absolute extension
or simple relative extension. In the relative case the result
is obtained via Galois group computation.
</BLOCKQUOTE>
<H5><A NAME = "3450">IsAbelian(F) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the number field F is a normal extension with
abelian Galois group. At present this may only be applied if F is an 
absolute extension or simple relative extension. In the
relative case the result is obtained via Galois Group computation.
</BLOCKQUOTE>
<H5><A NAME = "3451">IsCyclic(F) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the number field F is a normal extension with
cyclic Galois group. At present this may only be applied if F is an 
absolute extension or simple relative extension. In the
relative case the result is obtained via Galois and automorphism
group.
</BLOCKQUOTE>
<H5><A NAME = "3452">IsAbsoluteField(K) : FldNum -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> iff the number field K is a constructed as an absolute extension 
of Q.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text361.htm">[Next]</A><A  HREF = "text359.htm">[Prev]</A> <A  HREF = "text361.htm">[Right]</A> <A  HREF = "text359.htm">[Left]</A> <A  HREF = "text356.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>