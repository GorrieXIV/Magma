<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Constructing Schemes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1325.htm">[Next]</A><A  HREF = "text1323.htm">[Prev]</A> <A  HREF = "text1325.htm">[Right]</A> <A  HREF = "text1323.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "14418">Constructing Schemes</A></H3>

<P>
<P>
<P>
As shown in the examples in the introduction to this chapter, schemes
are defined inside some ambient space, either affine or projective space,
by a collection of polynomials from the coordinate ring associated
with that space.
Schemes may also be defined inside other schemes using polynomials
from the coordinate ring of the bigger scheme or polynomials from the
ambient space.
<P>
There is very little difference between creation methods for affine
and projective schemes.
Of course, in the projective case, the defining polynomials are checked
for homogeneity or if an ideal is used, a check is made that its basis
contains only homogeneous elements.
Otherwise, the only check made at the time of
creation is that the polynomials used
to define the scheme really do lie in, or are coerced automatically into,
the coordinate ring of the chosen ambient space.
<P>
<P>
<P>
<B>Saturation:</B>
<P>
As mentioned in the introduction, for schemes in projective spaces, there is
a largest ideal which defines that scheme. Technically speaking, if I
is any homogeneous defining ideal, this maximal one can be obtained from I by
removing the primary components whose radical contains a certain
<I>redundant ideal</I> of the ambient coordinate ring. This redundant ideal
defines sets of points that are illegal projectively. For example, in
ordinary projective space, there is one illegal point with all coordinates 0
and this is defined by the redundant ideal (x<sub>1</sub>, ..., x<sub>n</sub>). The operation to
remove these primary components is ideal saturation of I by the redundant
ideal, so we refer to the maximal defining ideal as <I>saturated</I> and a
scheme X as saturated if its current ideal (as returned by
<TT>DefiningIdeal(X)</TT>) is known to be the maximal one.
<P>
There are several basic functions that rely on the defining ideal of a scheme
X being saturated. The most important are <TT>IsReduced, IsIrreducible,
Prime/Primary Components, eq</TT> for any projective schemes and
<TT>Dimension, f(X)</TT> (map images) for multi-graded projective schemes. 
<P>
As the process of saturation may be quite expensive in higher dimensional
ambient spaces, the ideal of X is not saturated until the saturation 
property is required and once saturation has been performed, this is
recorded internally. Additionally, scheme constructions like <TT>Union</TT> will
automatically produce a result marked as saturated if that can be
deduced from the construction method and the saturation state of the
argument schemes. In particular, any ambient or scheme
defined by a single equation in an ambient is marked as saturated on
construction. The <TT>ProjectiveClosure</TT> of an affine scheme is also
saturated by construction.
<P>
Furthermore, for all of the basic <TT>Scheme</TT> and <TT>Curve</TT> constructors
where saturation of the ideal generated by the defining equations is not
automatic, there is a <TT>Saturated</TT> parameter that the user can set to
be <TT>true</TT> to mark the initial defining ideal as saturated without further
checking. 


<H5><A NAME = "14419">Scheme(X,f) : Sch,RngMPolElt -&gt; Sch</A></H5>
<H5>Scheme(X,F) : Sch,SeqEnum -&gt; Sch</H5>
<H5>Scheme(X,I) : Sch,RngMPol -&gt; Sch</H5>
<H5>Scheme(X,Q) : Sch,RngMPolRes -&gt; Sch</H5>

<PRE>    Nonsingular: BoolElt                Default: <TT>false</TT></PRE>

<PRE>    Reduced: BoolElt                    Default: <TT>false</TT></PRE>

<PRE>    Irreducible: BoolElt                Default: <TT>false</TT></PRE>

<PRE>    GeometricallyIrreducible: BoolElt   Default: <TT>false</TT></PRE>

<PRE>    Saturated: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Create the scheme inside the scheme X defined by the vanishing of the
polynomial f, or the sequence of polynomials F, or the ideal of polynomials
I, or the ideal in the denominator of the quotient ring Q = R/I.
In each case, the polynomials must be elements of the coordinate ring of
A or automatically coercible into it.
<P>
If any of the optional parameters are set to <TT>true</TT>, Magma will assume 
without checking that the scheme has the corresponding property. 
This may enable subsequent calculations to be done faster; note that 
if the assumption is not correct, <I>arbitrary misbehaviour may result</I>.
The option <TT>Saturated</TT> only makes sense when the ambient is projective,
and refers to the defining ideal rather than the scheme.
</BLOCKQUOTE>
<H5><A NAME = "14420">Cluster(X,f) : Sch,RngMPolElt -&gt; Clstr</A></H5>
<H5>Cluster(X,F) : Sch,SeqEnum -&gt; Clstr</H5>
<H5>Cluster(X,I) : Sch,RngMPol -&gt; Clstr</H5>
<H5>Cluster(X,Q) : Sch,RngMPolRes -&gt; Clstr</H5>

<PRE>    Saturated: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Create the 0-dimensional scheme inside the scheme X defined by the
vanishing of the given polynomials. These can be given as the single polynomial
f, or the sequence of polynomials F, or the ideal of polynomials I, or
the ideal in the denominator of the quotient ring Q = R/I.
In each case, the polynomials must be elements of the coordinate ring of
X or automatically coercible into it.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14421">Example <TT>Scheme_schemes-creation (H118E11)</TT></A></H3>
In this example we simply create three schemes.
The first is an ambient space A, the affine plane, while the others
are subschemes of A.
<P>
<P>
<PRE>
&gt; A&lt;x,y,z&gt; := AffineSpace(Rationals(),3);
&gt; X := Scheme(A,x-y);
&gt; X;
Scheme over Rational Field defined by
x - y
&gt; Y := Scheme(X,[x^2 - z^3,y^3 - z^4]);
&gt; Y;
Scheme over Rational Field defined by
x^2 - z^3
y^3 - z^4
x - y
&gt; Ambient(Y) eq A;
true
</PRE>
Note that since Y was created as a subscheme of X it inherits the equations
of X. The ambient space of Y is still considered to be A.
<HR>
<H5><A NAME = "14422">Spec(R) : RngMPolRes -&gt; Sch,Aff</A></H5>
<BLOCKQUOTE>
The scheme (Spec)(R) associated to the affine algebra R.
A new affine space <TT>Spec(Generic(R))</TT> will be created as the
ambient space of this scheme.
</BLOCKQUOTE>
<H5><A NAME = "14423">Proj(R) : RngMPolRes -&gt; Sch,Prj</A></H5>
<BLOCKQUOTE>
The scheme (Proj)(R) associated to the affine algebra R which will
be interpreted with its grading (which will be the standard grading by
degree if no other has been assigned).
A new projective space <TT>Proj(Generic(R))</TT> will be created as the
ambient space of this scheme.
</BLOCKQUOTE>
<H5><A NAME = "14424">EmptyScheme(X) : Sch -&gt; Sch</A></H5>
<H5>EmptySubscheme(X) : Sch -&gt; Sch, MapSch</H5>
<BLOCKQUOTE>
The subscheme of X defined, for an affine scheme X by the trivial 
polynomial 1, or by maximal ideal (x<sub>1</sub>, ..., x<sub>n</sub>) for a projective 
scheme X. The returned scheme is marked as saturated.
</BLOCKQUOTE>
<H5><A NAME = "14425">X meet Y : Sch,Sch -&gt; Sch</A></H5>
<H5>Intersection(X,Y) : Sch,Sch -&gt; Sch</H5>
<BLOCKQUOTE>
The intersection of schemes X and Y in their common ambient space.
This simply concatenates their defining equations without testing
for emptiness.
</BLOCKQUOTE>
<H5><A NAME = "14426">X join Y : Sch,Sch -&gt; Sch</A></H5>
<H5>Union(X,Y) : Sch,Sch -&gt; Sch</H5>
<BLOCKQUOTE>
The union of schemes X and Y in their common ambient space.
This is formed by creating the intersection of their defining ideals
which is done using a Gr&ouml;bner basis computation. If both X and Y are
saturated then the result is as well and is marked as such.
</BLOCKQUOTE>
<H5><A NAME = "14427">&amp; join S : [Sch] -&gt; Sch</A></H5>
<BLOCKQUOTE>
The union of the schemes in the sequence S in their common ambient space.
</BLOCKQUOTE>
<H5><A NAME = "14428">Difference(X, Y) : Sch, Sch -&gt; Sch</A></H5>
<BLOCKQUOTE>
Returns the scheme that is obtained by taking the closure of the result of
removing {(X meet Y)} from the scheme X, counting multiplicity.
The ideal of the result will be the colon ideal of the ideal of X and the 
ideal of the scheme Y. If X is saturated then the result is as well and is marked
as such.
</BLOCKQUOTE>
<H5><A NAME = "14429">Complement(X, Y) : Sch, Sch -&gt; Sch</A></H5>
<BLOCKQUOTE>
This is like <TT>Difference</TT> except that <I>all</I> points of {(X meet Y)}
are removed from scheme X, irrespective of multiplicity, and the closure is
returned. It corresponds to saturation rather than colon ideal.If X is saturated
then the result is as well and is marked as such. 
</BLOCKQUOTE>
<H5><A NAME = "14430">RemoveLinearRelations(X) : Sch -&gt; Sch, MapIsoSch</A></H5>
<BLOCKQUOTE>
Convenience function that takes linear relations between variables on
X and uses them to eliminate variables. The intrinsic is currently only
available for X in ordinary projective space. The result is scheme Y that
lies in a lower dimensional projective space that can be identified with
the smallest linear subspace of the ambient of X that contains X. Y
is returned along with the (linear) scheme isomorphism from X to Y.
</BLOCKQUOTE>
<H5><A NAME = "14431">Blowup(X,Y) : Sch, Sch  -&gt; Sch, MapSch</A></H5>
<H5>Blowup(X,p) : Sch, Pt  -&gt; Sch, MapSch</H5>

<PRE>    Ordinary: BoolElt                   Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
The first intrinsic constructs the scheme obtained from blowing up subscheme Y
of scheme X (see Section 7, Chapter II of <A  HREF = "text1320.htm#bib_hartshorne">[Har77]</A>). The second is a
user convenience special case that blows up the subscheme consisting of a point
p (and all of its conjugates if it is not defined over the base field) in
a pointset X(K).
<P>
Currently X must lie in an ambient that is affine, ordinary projective or
product projective. If parameter <TT>Ordinary</TT> is <TT>true</TT> (the default), and
X is projective, then the result of the blow-up is embedded in ordinary
projective space via the Segre embedding. Otherwise, the result will lie in
an ambient that is the direct product of the ambient of X and an ordinary
projective space.
<P>
The second return value in each case is the blow-down map from the blow-up back to X.
<P>
An example is given below. For another example, see the second minimal model example
following the description of <A  HREF = "text1382.htm#srfc-can-coord-ideal">CanonicalCoordinateIdeal</A> in
the chapter on algebraic surfaces.
<P>
The implementation makes use of the <A  HREF = "text1217.htm#comm:rees-ideal">ReesIdeal</A> intrinsic.
</BLOCKQUOTE>
<H5><A NAME = "14432">LocalBlowUp(X,Y) : Sch, Sch -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A useful variant of the above blow up intrinsics is this local version that does not
globally embed the result but returns a sequence of affine patches that cover
the blow-up. Here X must be affine and Y, as usual is the subscheme to be
blown up. If X is not a variety, it is assumed that the defining polynomials of Y
that do not lie in the defining ideal of X, are non-zero divisors modulo that ideal.
The return value is a sequence of pairs &lt;S, mp&gt; where S is an affine scheme
which is an open patch of (i.e. it is Zariski-open in) the complete blow-up and
mp is the blow down map from S back to X. Here, the birational blow-down
maps come with their inverses.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14433">Example <TT>Scheme_remove (H118E12)</TT></A></H3>
The behaviour of <TT>Difference</TT> is shown.
<P>
<P>
<PRE>
&gt; A2&lt;x,y&gt;:=AffineSpace(Rationals(),2);
&gt; C:=Scheme(A2,(x*y)); //union of the x- and y-axis
&gt; X2:=Scheme(A2,x^2);  //y-axis with double multiplicity
&gt; Difference(X2,C); //y-axis with mult. 1.
Scheme over Rational Field defined by
x
&gt; O:=Scheme(A2,[x,y]);
&gt; Difference(C,O);   
Scheme over Rational Field defined by
x*y
</PRE>
Removing "ambient" spaces is tricky: Everything is removed.
<P>
<P>
<PRE>
&gt; Difference(C,A2);     
Scheme over Rational Field defined by
1
&gt; A3&lt;x,y,z&gt;:= AffineSpace(Rationals(),3);
&gt; C:=Scheme(A3,Ideal([x,z])*Ideal([y,z])); //again, union of x- and y-axis
&gt; Z:=Scheme(A3,[z]); //the x,y plane
&gt; Difference(C,Z); 
Scheme over Rational Field defined by
x,
y,
z
</PRE>
As one can see, the Z-plane is removed with multiplicities:
all that's left is the origin, which has multiplicity 2 in C and
only multiplicity 1 in Z.
<HR>
<H3><A NAME = "14434">Example <TT>Scheme_sch-blowup-ex (H118E13)</TT></A></H3>
We give an example of blowing-up a line (isomorphic to (P)<sup>1</sup>) in projective
3-space (P)<sup>3</sup>. The inverse image of the line in the blow-up X is isomorphic
to the ruled surface (P)<sup>1</sup> x (P)<sup>1</sup> which is embedded in X as a 
quadric cone.
<P>
<P>
<PRE>
&gt; P3&lt;x,y,z,t&gt; := ProjectiveSpace(Rationals(),3);
&gt; L := Scheme(P3,[z,t]); //the line to be blown up
&gt; X,mp := Blowup(P3,L);
&gt; P&lt;[a]&gt; := Ambient(X); X;
Scheme over Rational Field defined by
a[5] - a[8],
-a[6]*a[7] + a[5]*a[8],
-a[4]*a[7] + a[3]*a[8],
-a[2]*a[7] + a[1]*a[8],
-a[4]*a[5] + a[3]*a[6],
-a[2]*a[5] + a[1]*a[6],
-a[2]*a[3] + a[1]*a[4]
&gt; Y := L @@ mp;  // the inverse image of L
&gt; Dimension(Y);
2
&gt; MinimalBasis(Ideal(Y));
[
    a[8],
    a[7],
    a[6],
    a[5],
    a[2]*a[3] - a[1]*a[4]
]
</PRE>
<HR>
<H5><A NAME = "14435">Saturate(~X) : Sch -&gt;</A></H5>
<BLOCKQUOTE>
If the scheme X is projective and is not already saturated, saturate its
defining ideal.
</BLOCKQUOTE>
<H5><A NAME = "14436">AssignNames(~X,N) : Sch,SeqEnum -&gt;</A></H5>
<BLOCKQUOTE>
Assign the strings in the sequence N to the ambient coordinate functions
of the scheme X.
</BLOCKQUOTE>
<H5><A NAME = "14437">X . i : Sch,RngIntElt -&gt; RngMPolElt</A></H5>
<H5>Name(X,i) : Sch,RngIntElt -&gt; RngMPolElt</H5>
<BLOCKQUOTE>
The ith coordinate function of the ambient space of the scheme X.
The dot notation <TT>X.i</TT> may also be used.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1325.htm">[Next]</A><A  HREF = "text1323.htm">[Prev]</A> <A  HREF = "text1325.htm">[Right]</A> <A  HREF = "text1323.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>