<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction of Codes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1834.htm">[Next]</A><A  HREF = "text1832.htm">[Prev]</A> <A  HREF = "text1834.htm">[Right]</A> <A  HREF = "text1832.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20303">Construction of Codes</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1833.htm#20304">Construction of General Linear  Codes</A>
<LI> <A  HREF = "text1833.htm#20312">Some Trivial Linear Codes</A>
<LI> <A  HREF = "text1833.htm#20322">Some Basic Families of Codes</A>
</UL>
<H4><A NAME = "20304">Construction of General Linear  Codes</A></H4>



<H5><A NAME = "20305">LinearCode&lt;R, n | L&gt; : FldFin, RngIntElt, List -&gt; Code</A></H5>
<BLOCKQUOTE>
Create a code as a subspace of V = R<sup>(n)</sup> which is generated
by the elements specified by the list L, where L is a list of 
one or more items of the following types:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>An element of V.
<DT>(b)</DT><DD>A set or sequence of elements of V.
<DT>(c)</DT><DD>A sequence of n elements of K, defining an element of V.
<DT>(d)</DT><DD>A set or sequence of sequences of type (c).
<DT>(e)</DT><DD>A subspace of V.
<DT>(f)</DT><DD>A set or sequence of subspaces of V.</DL>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20306">Example <TT>CodeFld_TernaryGolayCode (H158E1)</TT></A></H3>
We define the ternary Golay code as a six-dimensional subspace of 
the vector space K<sup>(11)</sup>, where K is GF(3).
The ternary Golay code could be defined in a single statement as follows:
<P>
<P>
<PRE>
&gt; K := FiniteField(3);
&gt; C := LinearCode&lt;K, 11 |  
&gt;    [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1],  
&gt;    [0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 2], [0, 0, 0, 1, 0, 0, 2, 1, 0, 1, 2],  
&gt;    [0, 0, 0, 0, 1, 0, 2, 2, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0]&gt;; 
</PRE>
Alternatively, if we want to see the code as a subspace of K<sup>(11)</sup>,
we would proceed as follows:
<P>
<P>
<PRE>
&gt; K := FiniteField(3);
&gt; K11 := VectorSpace(K, 11);
&gt; C := LinearCode(sub&lt;K11 |
&gt;    [1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 2, 2, 1], 
&gt;    [0, 0, 1, 0, 0, 0, 1, 0, 1, 2, 2], [0, 0, 0, 1, 0, 0, 2, 1, 0, 1, 2], 
&gt;    [0, 0, 0, 0, 1, 0, 2, 2, 1, 0, 1], [0, 0, 0, 0, 0, 1, 1, 2, 2, 1, 0]&gt;); 
</PRE>
<HR>
<H5><A NAME = "20307">LinearCode(U) : ModTupRng -&gt; Code</A></H5>
<BLOCKQUOTE>
Let V be the R-space R<sup>(n)</sup> and suppose that U is a 
subspace of V.  The effect of this function is to define the 
linear code C corresponding to the subspace U.  
Suppose the code C being constructed has dimension k. The
evaluation of this constructor results in the creation of
the following objects:
<P>
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The generator matrix G for C, created as a
k x  n matrix belonging to the R-matrix space, 
R<sup>(k x  n)</sup>.
<P>
<DT>(b)</DT><DD>The parity check matrix H for C, created as an
(n - k) x  n matrix belonging to the R-matrix space, 
R<sup>(n - k) x  n)</sup>.</DL>
</BLOCKQUOTE>
<H5><A NAME = "20308">LinearCode(A) : ModMatRngElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a k x  n matrix A over the ring R, construct 
the linear code generated by the rows of A. Note that it is
not assumed that the rank of A is k. The effect of this 
constructor is otherwise identical to that described above. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20309">Example <TT>CodeFld_CodeFromMatrix (H158E2)</TT></A></H3>
We define a code by constructing a matrix in a K-matrix space and using
its row space to generate the code:
<P>
<P>
<PRE>
&gt; M := KMatrixSpace(FiniteField(5), 2, 4);
&gt; G := M ! [1,1,1,2, 3,2,1,4];
&gt; G;
[1 1 1 2]
[3 2 1 4]
&gt; C := LinearCode(G);
&gt; C;
[4, 2, 2] Linear Code over GF(5)
Generator matrix:
[1 0 4 0]
[0 1 2 2]
</PRE>
<HR>
<H5><A NAME = "20310">PermutationCode(u, G) : ModTupRngElt, GrpPerm -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite permutation group G of degree n, and a 
vector u belonging to the n-dimensional vector space V 
over the ring R, construct the code C corresponding to 
the subspace of V spanned by the set of vectors obtained 
by applying the permutations of G to the vector u. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20311">Example <TT>CodeFld_PermutationCode (H158E3)</TT></A></H3>
We define G to be a permutation group of degree 7 and construct the 
code C as the F<sub>2</sub>-code generated by applying the permutations of G 
to a certain vector:
<P>
<P>
<PRE>
&gt; G := PSL(3, 2);
&gt; G;
Permutation group G of degree 7
    (1, 4)(6, 7)
    (1, 3, 2)(4, 7, 5)
&gt; V := VectorSpace(GF(2), 7);
&gt; u := V ! [1, 0, 0, 1, 0, 1, 1];
&gt; C := PermutationCode(u, G);
&gt; C;
[7, 3, 4] Linear Code over GF(2)
Generator matrix:
[1 0 0 1 0 1 1]
[0 1 0 1 1 1 0]
[0 0 1 0 1 1 1]
</PRE>
<HR>
<H4><A NAME = "20312">Some Trivial Linear Codes</A></H4>



<H5><A NAME = "20313">ZeroCode(R, n) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the [n, 0, n] code
consisting of only the zero code word,
(where the minimum weight is by convention equal to n).
</BLOCKQUOTE>
<H5><A NAME = "20314">RepetitionCode(R, n) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the [n, 1, n]
code over K generated by the all-ones vector.
</BLOCKQUOTE>
<H5><A NAME = "20315">ZeroSumCode(R, n) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the [n, n - 1, 2]
code over R such that for all codewords (c<sub>1</sub>, c<sub>2</sub>, ... , c<sub>n</sub>) we have
&sum;<sub>i</sub> c<sub>i</sub> =0 .
<P>
</BLOCKQUOTE>
<H5><A NAME = "20316">UniverseCode(R, n) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the [n, n, 1]
code consisting of all possible codewords.
<P>
</BLOCKQUOTE>
<H5><A NAME = "20317">EvenWeightCode(n) : RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a positive integer n, return the [n, n - 1, 2] code 
over GF(2) such that all vectors have even weight.
This is equivalent to the zero sum code over GF(2).
<P>
</BLOCKQUOTE>
<H5><A NAME = "20318">EvenWeightSubcode(C) : Code -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a linear code C over GF(2), return the subcode of C
containing the vectors of even weight.
<P>
</BLOCKQUOTE>
<H5><A NAME = "20319">RandomLinearCode(K, n, k) : FldFin, RngIntElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite field K and positive integers n and k, such 
that 0 &lt; k &le;n, the function returns a random linear code
of length n and dimension k over the field K. The method
employed is to successively choose random vectors from K<sup>(n)</sup> 
until generators for a k-dimensional subspace have been found.
</BLOCKQUOTE>
<H5><A NAME = "20320">CordaroWagnerCode(n) : RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Construct the Cordaro--Wagner code of length n, This is the 
2-dimensional repetition code over GF(2) of length n 
and having the largest possible minimum weight.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20321">Example <TT>CodeFld_SimpleCodeChain (H158E4)</TT></A></H3>
Over any specific finite field K, the zero code of length n is 
contained in every code of length n,
and similarly every code of length n is contained in the 
universe code of length n. This is illustrated over GF(2)
for length 6 codes
with an arbitrary code of length 6 dimension 3.
<P>
<P>
<PRE>
&gt; K := GF(2);
&gt; U := UniverseCode(K, 6);
&gt; U;
[6, 6, 1] Linear Code over GF(2)
&gt; Z := ZeroCode(K, 6);
&gt; Z;
[6, 0, 6] Linear Code over GF(2)
&gt; R := RandomLinearCode(K, 6, 3);
&gt; (Z subset R) and (R subset U);
true
</PRE>
<HR>
<H4><A NAME = "20322">Some Basic Families of Codes</A></H4>

<P>
<P>
In this section we describe how to construct three very important
families of codes: cyclic codes, Hamming codes and Reed-Muller codes.
We choose to present these very important families at this stage
since they are easily understood and they give us a nice collection
of codes for use in examples.
<P>
<P>
Many more constructions will be described in subsequent sections.
In particular, variations and generalizations of the cyclic code
construction presented here will be given.


<H5><A NAME = "20323">CyclicCode(n, g) : RngIntElt, RngUPolElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Let K be a finite field.  Given a positive integer n and a univariate
polynomial g(x) &isin;K[x] of degree n - k such that g(x) | x<sup>n</sup> - 1,
construct the [n, k] cyclic code generated by g(x).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20324">Example <TT>CodeFld_CyclicCode (H158E5)</TT></A></H3>
We construct the length 23 Golay code over GF(2) as a cyclic code by
factorizing the polynomial x<sup>23</sup> - 1 over GF(2) and constructing
the cyclic code generated by one of the factors of degree 11.
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(FiniteField(2));
&gt; F := Factorization(x^23 - 1);
&gt; F;
[
    &lt;x + 1, 1&gt;,
    &lt;x^11 + x^9 + x^7 + x^6 + x^5 + x + 1, 1&gt;,
    &lt;x^11 + x^10 + x^6 + x^5 + x^4 + x^2 + 1, 1&gt;
]
&gt; CyclicCode(23, F[2][1]);
[23, 12, 7] Cyclic Code over GF(2)
Generator matrix:
[1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 0]
[0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1]
[0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1 0]
[0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1]
[0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1 0 0]
[0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1 0]
[0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1]
[0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 1]
[0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 1]
[0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 0 1]
</PRE>
<HR>
<H5><A NAME = "20325">HammingCode(K, r) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a positive integer r, and a finite field K of
cardinality q, construct the r-th order Hamming code
over K of cardinality q. This code has length
n = (q<sup>r</sup> - 1)/(q - 1).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20326">Example <TT>CodeFld_HammingCode (H158E6)</TT></A></H3>
We construct the third order Hamming code over GF(2) together with
its parity check matrix.
<P>
<P>
<PRE>
&gt; H := HammingCode(FiniteField(2), 3);
&gt; H;
[7, 4, 3] Hamming code (r = 3) over GF(2)
Generator matrix:
[1 0 0 0 0 1 1]
[0 1 0 0 1 1 0]
[0 0 1 0 1 0 1]
[0 0 0 1 1 1 1]
&gt; ParityCheckMatrix(H);
[1 0 1 0 1 1 0]
[0 1 1 0 0 1 1]
[0 0 0 1 1 1 1]
</PRE>
<HR>
<H5><A NAME = "20327">SimplexCode(r) : RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a positive integer r, construct the [2<sup>r</sup> - 1, r, 2<sup>r - 1</sup>] binary 
simplex code, which is the dual of a Hamming code.
</BLOCKQUOTE>
<H5><A NAME = "20328">ReedMullerCode(r, m) : RngIntElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given positive integers r and m, where 0 &le;r &le;m,
construct the r-th order binary Reed--Muller code of length
n = 2<sup>m</sup>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20329">Example <TT>CodeFld_ReedMullerCode (H158E7)</TT></A></H3>
We construct the first order Reed--Muller code of length 16 and 
count the number of pairs of vectors whose components are 
orthogonal.
<P>
<P>
<P>
<PRE>
&gt; R := ReedMullerCode(1, 4);
&gt; R;
[16, 5, 8] Reed-Muller Code (r = 1, m = 4) over GF(2)
Generator matrix:
[1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1]
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]
[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]
[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]
&gt; #{ &lt;v, w&gt;: v, w in R | IsZero(InnerProduct(v, w)) };
1024
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1834.htm">[Next]</A><A  HREF = "text1832.htm">[Prev]</A> <A  HREF = "text1834.htm">[Right]</A> <A  HREF = "text1832.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>