<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Modular Generators and  q-Expansions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1548.htm">[Next]</A><A  HREF = "text1546.htm">[Prev]</A> <A  HREF = "text1548.htm">[Right]</A> <A  HREF = "text1546.htm">[Left]</A> <A  HREF = "text1539.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "17393">Modular Generators and  q-Expansions</A></H3>

<P>
<P>
<P>
<P>
In the genus 0 cases, the database model is just the projective line (P)<sup>1</sup> and the uniformising parameter
t=x/y (where x, y are the projective coordinates of (P)<sup>1</sup>) is a modular function on X<sub>0</sub>(N). We have
normalised so that this function has a simple zero at the cusp 0 and a simple pole at the cusp &infin; with
q-expansion of the form q<sup> - 1</sup> + ... when N &gt; 1. For N=1 we just take the j-invariant as our parameter.
<P>
In the elliptic and hyperelliptic cases, the model is a minimal Weierstrass equation y<sup>2</sup> + h(x)y=f(x) and the
x and y coordinate functions are modular functions on X<sub>0</sub>(N). We have normalised so that one of the
points at infinity of the model is the cusp &infin;, so x and y have poles there. In the elliptic cases,
there is only one point at infinity. In the hyperelliptic cases, the other point at infinity is always the
image of &infin; under the hyperelliptic involution: &infin; is never a Weierstrass point in these cases.
<P>
We sometimes refer to genus zero, elliptic and hyperelliptic curves by the semi-standard term subhyperelliptic.
The models in the non-subhyperelliptic cases are ordinary projective and are sub-canonical images of X<sub>0</sub>(N).
This means that there are linearly-independent weight 2 cusp forms f<sub>1</sub>, ..., f<sub>r</sub> (which correspond to
holomorphic differentials on X<sub>0</sub>(N)) such that our model is the image of X<sub>0</sub>(N) under the map
z |-&gt; [f<sub>1</sub>(z): ... : f<sub>r</sub>(z)] into (P)<sup>r - 1</sup>.
<P>
As stated earlier, although we sometimes used Magma's modular symbols machinery to compute a basis for forms
when deriving models, we also worked out expressions for the modular functions t, x and y and the forms
f<sub>i</sub> in terms of certain basic types. This gives the models a degree of independence from the modular symbol
machinery and also allows for faster reconstruction of q-expansions of the generating functions/forms.
We describe the basic types here. There is an intrinsic that the user may call to retrieve the information
as to how the forms are built up and one to return the actual q-expansions up to any desired precision.
In some cases, we have used the cusp forms associated to an elliptic curve of conductor N. We would have
liked to avoid this and maybe with a bit more work we may be able to find alternative expressions that avoid
using them. In fact, we should be using more of the theta series associated to quaternion algebras (this was
an oversight only discovered recently: we are currently only using the theta series attached to one isomorphism
class of maximal order for each quaternion algebra).
Leaving aside the forms associated to elliptic curves, the basic types that we have looked at are
all classical. We could also have tried to use some other basic types like the generalised eta products of Y. Yang.
<P>
<P>
The basic types fall into a number of categories:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>Dedekind eta products.
<DT>(ii)</DT><DD>Theta series of binary quadratic forms of various kinds and theta series of quaternion algebras.
<DT>(iii)</DT><DD>Weight 2 Eisenstein series of prime level.
<DT>(iv)</DT><DD>Weight two cusp forms of elliptic curves.
<P>
</DL>
Dedekind eta products for level N are of the form &eta;(d<sub>1</sub>z)<sup>r<sub>1</sub></sup>&eta;(d<sub>2</sub>z)<sup>r<sub>2</sub></sup> ... &eta;(d<sub>n</sub>z)<sup>r<sub>n</sub></sup>
where the d<sub>i</sub> run over a subset of the positive divisors of N, the r<sub>i</sub> are integers and &eta;(z) is
the Dedekind &eta;-function which has q-expansion q<sup>1/24</sup>&prod;<sub>n=1</sub>^&infin;(1 - q<sup>n</sup>). If &sum;r<sub>i</sub>
is even and &sum;r<sub>i</sub>d<sub>i</sub> and &sum;r<sub>i</sub>(N/d<sub>i</sub>) are divisible by 24, the product gives a modular form of
weight (1/2)&sum;r<sub>i</sub> for &Gamma;<sub>0</sub>(N) with a certain character mod N. The form only has zeroes and
poles at cusps with order given by a formula depending on N, r<sub>i</sub> and d<sub>i</sub>. We use these products
to give modular functions and weight 2 forms and occasionally weight one forms to be used in combination
with weight one forms coming from theta series.
<P>
<P>
<P>
The theta series associated to binary quadratic forms come in several flavours.
<P>
If Q(x, y)=ax<sup>2</sup> + bxy + cz<sup>2</sup> (with a, b, c &isin;(Z), a&gt;0) has discriminant -N, then the usual
theta series &theta;<sub>Q</sub>(z) = &sum;_((x, y)&isin;(Z)<sup>2</sup>) q<sup>Q(x, y)</sup> is a weight one form of level N for
the quadratic character given by the Jacobi symbol ((-N/.)). The product of two of these gives a weight
2 integral form for &Gamma;<sub>0</sub>(N).
<P>
If N &equiv; 1 mod 4 and Q(x, y)=ax<sup>2</sup> + bxy + cz<sup>2</sup> is a form with discriminant -4N with a odd and b, c even,
the function &theta;<sup>(1)</sup><sub>Q</sub>(z) = &sum;_((x, y)&isin;(Z)<sup>2</sup>, x odd)( - 1)<sup>y</sup>q<sup>Q(x, y)/4</sup> is a weight one form
of level N for the character ((./N))&chi;<sup>a</sup> where &chi; is the quartic character giving the action of
&Gamma;<sub>0</sub>(1) on &eta;(z)<sup>6</sup>. If Q<sub>1</sub>, Q<sub>2</sub> are two such forms, one of which has a &equiv; 1 mod 4 and
a &equiv; 3 mod 4 for the other, then &theta;<sup>(1)</sup><sub>Q<sub>1</sub></sub>&theta;<sup>(1)</sup><sub>Q<sub>2</sub></sub> is a weight 2 integral
form for &Gamma;<sub>0</sub>(N). Additionally, the function
&theta;<sup>(2)</sup><sub>Q</sub>(z) = &sum;_((x, y)&isin;(Z)<sup>2</sup>, x odd)q<sup>Q(x, y)/4</sup> is a weight one form of level 2N
for the character ((./N))&chi;<sup>a</sup>&delta; where &delta; is the unique non-trivial character that factors
through the quotient &Gamma;<sub>0</sub>(2N)/&Gamma;<sub>0</sub>(4N). Again, &theta;<sup>(2)</sup><sub>Q<sub>1</sub></sub>&theta;<sup>(2)</sup><sub>Q<sub>2</sub></sub> is
a weight 2 form for &Gamma;<sub>0</sub>(2N) if the as for Q<sub>1</sub> and Q<sub>2</sub> are non-congruent mod 4.
<P>
If N &equiv; 3 mod 8 and Q(x, y)=ax<sup>2</sup> + bxy + cz<sup>2</sup> is a form with discriminant -N (here a, b, c must all
be odd), the function &theta;<sup>(3)</sup><sub>Q</sub>(z) = &sum;_((x, y)&isin;(Z)<sup>2</sup>, x odd)( - 1)<sup>y</sup>q<sup>Q(x, y)/2</sup> is
a weight one form of level N for the character ((-N/.))&chi; where &chi; is the quadratic character giving
the action of &Gamma;<sub>0</sub>(1) on &eta;(z)<sup>12</sup>. The product of any two of these gives a weight 2 integral
form for &Gamma;<sub>0</sub>(N).
<P>
If N=p<sub>1</sub> ... p<sub>r</sub> is a product of an odd number of distinct primes, let H<sub>N</sub> be the quaternion algebra
over (Q) which is ramified precisely at &infin; and the primes p<sub>i</sub>. Let O<sub>N</sub> be a maximal
order of H<sub>N</sub>, which is a (Z)-lattice of rank 4, and Q<sub>N</sub> the positive-definite quadratic form on it
given by the reduced norm Nm of H<sub>N</sub>. Then the theta function &theta;<sub>Q<sub>N</sub></sub>(z) = &sum;<sub>x &isin;O<sub>N</sub> </sub> q<sup>Nm(x)</sup>
is a weight two integral form for &Gamma;<sub>0</sub>(N).
<P>
<P>
<P>
The weight 2 Eisenstein series of prime level p is the form pE<sub>2</sub>(pz) - E<sub>2</sub>(z), which is an integral
form of weight 2 for &Gamma;<sub>0</sub>(p). Here E<sub>2</sub>(z) is the usual normalised weight 2 Eisenstein series
(which isn't a modular form for any level) with q-expansion 1 - 24q - 72q<sup>2</sup> - ... . We usually normalise
the prime level Eisenstein series by dividing by GCD(24, p - 1) which is the GCD of its integral
coefficients.
<P>
<P>
<P>
If E is an elliptic curve over Q of conductor N, then the modular form f<sub>E</sub>(z) associated to E,
which is returned by the call <TT>ModularForm(E)</TT>, is a weight 2 cusp form for &Gamma;<sub>0</sub>(N).
<P>
<P>
<P>
We also use three standard operations on forms/functions.
<P>
If f(z) is a modular function on X<sub>0</sub>(N) then D(f) = (1/2&pi; i)(df/dz) is a weight 2 form for &Gamma;<sub>0</sub>(N).
<P>
If f(z) is a form/function on X<sub>0</sub>(M) and d is a positive integer dividing N/M then f(dz) is
a form/function on X<sub>0</sub>(N).
<P>
If f is a form for &Gamma;<sub>0</sub>(N) and &chi; is the quadratic character with conductor d where |d|<sup>2</sup> divides
N, then the twisted form f tensor &chi; is also a form for &Gamma;<sub>0</sub>(N) where if f has the q-expansion
&sum;a<sub>n</sub>q<sup>n</sup> then f tensor &chi; has q-expansion &sum;a<sub>n</sub>&chi;(n)q<sup>n</sup>.
<P>
<P>
<P>
The basic types are forms or functions of types (i)-(iv), possibly operated on by one of the above 3 operations.
Basic functions are functions of basic type or quotients of forms of basic type of the same weight.
We build modular functions as rational functions of basic functions. We build modular forms of weight 2 as
linear combinations of weight 2 forms of basic type or products of modular functions with weight 2 forms of basic
type. We give some examples below.


<H5><A NAME = "17394">qExpansionExpressions(N) : RngIntElt -&gt;</A></H5>
<BLOCKQUOTE>
This procedure prints out a mini-program that is used to compute the modular functions that correspond
to t or to x, y on X<sub>0</sub>(N) in the subhyperelliptic cases or the weight 2 cusp forms f<sub>1</sub>, ..., f<sub>r</sub>
on X<sub>0</sub>(N) in the other cases. These give expressions for the forms/functions in terms of forms/functions
of basic type. The format of the mini-program is as follows.
<P>
<P>
<P>
There are a sequence of statements. Each except the last is of the form v = &lt; expr &gt; where v is a
variable name, &lt; expr &gt; is an expression and the statement assigns the value of the expression
(a modular form or
function on X<sub>0</sub>(N)) to variable v. Each expression is a string of terms separated by binary arithmetic operators
^ * / + - which have their usual meaning, are listed in precedence order and evaluate left to right for
operators of the same precedence. There may also be subexpressions in () brackets. Subexpressions in brackets
are evaluated first and replaced with their value, inner bracketed subexpressions being evaluated before
outer ones. Terms are of one of the following types, possibly modified by an operator:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>An integer. This either multiplies a form/function, is an exponent for powering or gives a constant function.
<DT>(ii)</DT><DD>q. This is just e<sup>2&pi; i z</sup>, the 'q' of the q-expansion. 
<DT>(iii)</DT><DD>A variable that has previously been assigned to.
<DT>(iv)</DT><DD>An eta product. e{&lt; d<sub>1</sub> r<sub>1</sub> &gt;&lt; d<sub>2</sub> r<sub>2</sub> &gt; ... &lt; d<sub>n</sub> r<sub>n</sub> &gt;} represents the
eta product &eta;(d<sub>1</sub>z)<sup>r<sub>1</sub></sup>&eta;(d<sub>2</sub>z)<sup>r<sub>2</sub></sup> ... &eta;(d<sub>n</sub>z)<sup>r<sub>n</sub></sup>.
<DT>(v)</DT><DD>Binary theta functions as described in the introduction. For a positive-definite binary quadratic form
Q(x, y)=Ax<sup>2</sup> + Bxy + Cy<sup>2</sup>,
<DL COMPACT class='compact'>
<DT></DT><DD>th0{A B C} is the usual theta series of Q.
<DT></DT><DD>th1{A B C} is (1/2)q<sup> - a/4</sup>&theta;<sup>(1)</sup><sub>Q</sub> where a is A mod 4. This has q-integral q-expansion.
<DT></DT><DD>th2{A B C} is (1/2)q<sup> - a/4</sup>&theta;<sup>(2)</sup><sub>Q</sub> where a is A mod 4. This has q-integral q-expansion.
<DT></DT><DD>th3{A B C} is (1/2)q<sup> - 1/2</sup>&theta;<sup>(3)</sup><sub>Q</sub>. This has q-integral q-expansion.
</DL>
<DT>(vi)</DT><DD>Theta functions of quaternion algebras as described in the introduction. thQ{N} represents the weight 2
theta function attached to a maximal order of the quaternion algebra of level N, where N is a product of an
odd number of distinct primes. The notation is deficient here. The theta series depends on the
isomorphism class of the maximal order chosen. Currently, we are only using the maximal order returned by
Magma in the call <TT>MaximalOrder(QuaternionAlgebra(N))</TT>.
<DT>(vii)</DT><DD>Eisenstein series. E{p} represents the weight 2 normalised Eisenstein series of prime level p,
(pE<sub>2</sub>(pz) - E<sub>2</sub>(z))/GCD(24, p - 1).
<DT>(viii)</DT><DD>Cusp forms from elliptic curves. f{a<sub>1</sub> a<sub>2</sub> a<sub>3</sub> a<sub>4</sub> a<sub>6</sub>} represents the weight two newform associated
to the elliptic curve over <B>Q</B> with equation y<sup>2</sup> + a<sub>1</sub>xy + a<sub>3</sub>y=x<sup>3</sup> + a<sub>2</sub>x<sup>2</sup> + a<sub>4</sub>x + a<sub>6</sub>.
<P>
<P>
</DL>
Modifying operators are 
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>D. D(f) is (1/2&pi; i)(df/dz), where f is a modular function on X<sub>0</sub>(N).
<DT>(ii)</DT><DD>[d]. d is a positive integer. If f represents a form or function f(z), then f[d] represents
f(dz).
<DT>(iii)</DT><DD>&lt; d &gt;. If f is a form, f&lt; d &gt;  represents the form twisted by the quadratic
character of conductor d.
<P>
</DL>
The last line of the mini-program is of the form [t, 1] if X<sub>0</sub>(N) is of genus 0, [x, y, 1] if 
X<sub>0</sub>(N) is elliptic or hyperelliptic, and [f<sub>1</sub>, ..., f<sub>r</sub>] otherwise, where t, x, y, f<sub>i</sub> are variables
that were assigned to in earlier lines. These give the generating functions/forms for the X<sub>0</sub>(N) model.
</BLOCKQUOTE>
<H5><A NAME = "17395">qExpansionsOfGenerators(N,R,r) : RngIntElt, RngSerLaur, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns q-expansions to precision r as Laurent series in the Laurent series ring R over <B>Q</B>
for the sequence of modular forms/functions of level N that define the small modular curve database model of
X<sub>0</sub>(N). As described in the introduction, the return sequence is of the form [t] if X<sub>0</sub>(N) is of genus 0,
[x, y] if X<sub>0</sub>(N) is elliptic or hyperelliptic, and [f<sub>1</sub>, ..., f<sub>r</sub>] otherwise. Here t, x and y are
Laurent series giving the q-expansions of functions which will have poles at the cusp &infin;, so have
negative power terms, and the f<sub>i</sub> will actually be power series giving the q-expansions of weight 2
cusp forms.
<P>
The q-expansions are computed from the expressions which are given in the mini-program output by
<TT>qExpansionExpressions(N)</TT>, generating the forms/functions from ones of basic
type for which there are fast routines to compute q-expansions.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "17396">Example <TT>SmallModCrv_q_exps_ex_sm_mod_crvs (H135E6)</TT></A></H3>
We give some examples of the mini-programs for various levels
<P>
<P>
<P>
<PRE>
&gt; qExpansionExpressions(8); //genus 0 case
x=e{&lt;1 4&gt;&lt;2 -2&gt;&lt;4 2&gt;&lt;8 -4&gt;}
[x,1]
&gt; qExpansionExpressions(15); //genus 1 case
F=e{&lt;1 1&gt;&lt;3 1&gt;&lt;5 1&gt;&lt;15 1&gt;}
t=e{&lt;1 -3&gt;&lt;3 3&gt;&lt;5 3&gt;&lt;15 -3&gt;}
s=-D(t)/F
x=(t^2-5*t-3+s)/2
y=(t^3-8*t^2-4*t+3+s*(t-3))/2
[x,y,1]
&gt; qExpansionExpressions(30); //hyperelliptic case
F=e{&lt;1 -1&gt;&lt;2 3&gt;&lt;3 1&gt;&lt;5 1&gt;&lt;6 -1&gt;&lt;10 -1&gt;&lt;15 -1&gt;&lt;30 3&gt;}
x=e{&lt;1 2&gt;&lt;2 -2&gt;&lt;3 -1&gt;&lt;5 -1&gt;&lt;6 1&gt;&lt;10 1&gt;&lt;15 2&gt;&lt;30 -2&gt;}
s=-D(x)/F
y=(s+x^4+x^3+x^2)/2
[x,y,1] 
&gt; qExpansionExpressions(64); //genus 3 case
F1=e{&lt;4 2&gt;&lt;8 2&gt;}
F2=F1&lt;-8&gt;
[(F2-F1)/4,(F2+F1)/2,F1[2]]
&gt; qExpansionExpressions(53); //genus 4 case
t1=th1{1 2 54}
t2=th1{3 2 18}
t3=th1{9 2 6}
F1=q*t1*t2
F2=q*t2*t3
F3=(13*thQ{53}-E{53})/18
F4=f{1 -1 1 0 0}
[F1,(5*F1-3*F2-F3-F4)/2,-4*F1+2*F2+F3,-4*F1+F2+F3]
&gt; qExpansionExpressions(63); //genus 5 case
F1=(th0{1 1 16}-th0{4 1 4})*th0{2 1 8}/2
F2=q*th1{1 2 22}*th1{3 6 10}
F3=F2[3]
F4=e{&lt;3 2&gt;&lt;21 2&gt;}
[(F1-F2-F3+F4)/2,(F1-F2-F3-F4)/2,F3]
&gt; R&lt;q&gt; := LaurentSeriesRing(Rationals());
&gt; qExpansionsOfGenerators(49,R,30); //genus 1 case
[
    q^-2 - q^-1 + 1 + q^3 + q^5 - q^10 - q^13 + q^20 + q^24 + O(q^31),
    q^-3 - 2*q^-2 + 2*q^-1 - 1 - q + q^2 - 2*q^3 + q^4 - 2*q^5 - q^9 + 2*q^10 
        + q^11 + 2*q^13 + q^15 + q^16 - 2*q^20 - q^22 - q^23 - 2*q^24 - q^25 -
        q^29 + q^30 + O(q^31)
]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1548.htm">[Next]</A><A  HREF = "text1546.htm">[Prev]</A> <A  HREF = "text1548.htm">[Right]</A> <A  HREF = "text1546.htm">[Left]</A> <A  HREF = "text1539.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>