<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction of a Plane</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1693.htm">[Next]</A><A  HREF = "text1691.htm">[Prev]</A> <A  HREF = "text1693.htm">[Right]</A> <A  HREF = "text1691.htm">[Left]</A> <A  HREF = "text1690.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "18722">Construction of a Plane</A></H3>

<P>
<P>
<P>
All functions which create a plane return three values:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>the plane itself;
<DT>(ii)</DT><DD>the point--set of the plane;
<DT>(iii)</DT><DD>the line--set of the plane.
<P>
<P>
<P>
</DL>
These "sets" ((ii) and (iii)) are used as the parent structures for points
and lines respectively, and are explained more fully in the next section.


<H5><A NAME = "18723">FiniteProjectivePlane&lt; v | X : parameters &gt; : RngIntElt, List -&gt; PlaneProj</A></H5>
<H5>FiniteProjectivePlane&lt; V | X : parameters &gt; : SetIndx, List -&gt; PlaneProj</H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Construct the projective plane P having as point set 
the indexed set V (or {@ 1, 2, ... . v @} if an integer v is given),
and as line set
L = { L<sub>1</sub>, L<sub>2</sub>, ..., L<sub>b</sub> } given by the list X. 
The value of X must be either:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A list of subsets of the set V.
<DT>(b)</DT><DD>A sequence, set or indexed set of subsets of V.
<DT>(c)</DT><DD>A list of lines of an existing plane.
<DT>(d)</DT><DD>A sequence, set or indexed set of lines of an existing plane.
<DT>(e)</DT><DD>A combination of the above.
<DT>(f)</DT><DD>A v x b (0, 1)-matrix A, where A may be defined
over any coefficient ring. The matrix A will be interpreted as the
incidence matrix for the plane P.
<DT>(g)</DT><DD>A set of codewords of a linear code with length v.
The line set of P is taken to be the set of supports of the codewords.
<P>
<P>
</DL>
The optional boolean argument <TT>Check</TT> indicates whether or not to check
that the given data satisfies the projective plane axioms.
</BLOCKQUOTE>
<H5><A NAME = "18724">FiniteProjectivePlane(W) : ModTupFld -&gt; PlaneProj</A></H5>
<H5>FiniteProjectivePlane(F) : FldFin -&gt; PlaneProj</H5>
<H5>FiniteProjectivePlane(q) : RngIntElt -&gt; PlaneProj</H5>
<BLOCKQUOTE>
Given a 3--dimensional vector space W defined over the field 
F = GF(q), construct the classical projective plane defined by the
one--dimensional and two--dimensional subspaces of W.
</BLOCKQUOTE>
<H5><A NAME = "18725">FiniteAffinePlane&lt; v | X : parameters &gt; : RngIntElt, List -&gt; PlaneAff</A></H5>
<H5>FiniteAffinePlane&lt; V | X : parameters &gt; : SetIndx, List -&gt; PlaneAff</H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Construct the affine plane P having as point set 
the indexed set V (or {@ 1, 2, ... . v @} if an integer v is given),
and as line set
L = { L<sub>1</sub>, L<sub>2</sub>, ..., L<sub>b</sub> } given by the list X. 
The value of X must be either:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A list of subsets of the set V.
<DT>(b)</DT><DD>A sequence, set or indexed set of subsets of V.
<DT>(c)</DT><DD>A list of lines of an existing plane.
<DT>(d)</DT><DD>A sequence, set or indexed set of lines of an existing plane.
<DT>(e)</DT><DD>A combination of the above.
<DT>(f)</DT><DD>A v x b (0, 1)-matrix A, where A may be defined
over any coefficient ring. The matrix A will be interpreted as the
incidence matrix for the plane P.
<DT>(g)</DT><DD>A set of codewords of a linear code with length v.
The line set of P is taken to be the set of supports of the codewords.
<P>
<P>
</DL>
The optional boolean argument <TT>Check</TT> indicates whether or not to check
that the given data satisfies the affine plane axioms.
</BLOCKQUOTE>
<H5><A NAME = "18726">FiniteAffinePlane(W) : ModFld -&gt; PlaneAff</A></H5>
<H5>FiniteAffinePlane(F) : FldFin -&gt; PlaneProj</H5>
<H5>FiniteAffinePlane(q) : RngIntElt -&gt; PlaneProj</H5>
<BLOCKQUOTE>
Given a 2--dimensional vector space W defined over the field 
F = GF(q), construct the classical affine plane defined by the cosets 
of the subspaces of W.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "18727">Example <TT>Plane_Constructors (H147E1)</TT></A></H3>
The classical projective plane of order 3 can be constructed by the
following statement:
<P>
<P>
<PRE>
&gt; P, V, L := FiniteProjectivePlane(3);
&gt; P;
Projective Plane PG(2, 3)
&gt; V;
Point-set of Projective Plane PG(2, 3)
&gt; L;
Line-set of Projective Plane PG(2, 3)
</PRE>
A non-classical affine plane of order 2 can be constructed in the following way:
<P>
<P>
<PRE>
&gt; A := FiniteAffinePlane&lt; 4 | Setseq(Subsets({1, 2, 3, 4}, 2)) &gt;;
&gt; A: Maximal;
Affine Plane of order 2
Points: {@ 1, 2, 3, 4 @}
Lines:
    {1, 3},
    {1, 4},
    {2, 4},
    {2, 3},
    {1, 2},
    {3, 4}
</PRE>
To demonstrate the use of the <TT>Check</TT> argument, we recreate the
classical projective plane of order 16 with <TT>Check := true</TT>
(the default) and <TT>Check := false</TT>.
<P>
<P>
<PRE>
&gt; P, V, L := FiniteProjectivePlane(16);
&gt; time P2 := FiniteProjectivePlane&lt;
&gt;     Points(P) | {Set(l): l in L} : Check := true &gt;;
Time: 10.769
&gt; time P2 := FiniteProjectivePlane&lt;
&gt;     Points(P) | {Set(l): l in L} : Check := false &gt;;
Time: 0.030
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1693.htm">[Next]</A><A  HREF = "text1691.htm">[Prev]</A> <A  HREF = "text1693.htm">[Right]</A> <A  HREF = "text1691.htm">[Left]</A> <A  HREF = "text1690.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>