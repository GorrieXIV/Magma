<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creation Functions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text158.htm">[Next]</A><A  HREF = "text156.htm">[Prev]</A> <A  HREF = "text158.htm">[Right]</A> <A  HREF = "text156.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1121">Creation Functions</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text157.htm#1122">Creation of Structures</A>
<LI> <A  HREF = "text157.htm#1124">Creation of Elements</A>
<LI> <A  HREF = "text157.htm#1131">Printing of Elements</A>
<LI> <A  HREF = "text157.htm#1133">Element Conversions</A>
</UL>
<H4><A NAME = "1122">Creation of Structures</A></H4>

<P>
<P>
The ring of integers is automatically created when Magma is first loaded. 
The ring may be formally created (and, if desired, assigned to a variable)
using the function <TT>IntegerRing()</TT>. Subrings of Z are always
ideals; see the section on ideals for details.


<H5><A NAME = "1123">IntegerRing() : -&gt; RngInt</A></H5>
<H5>Integers() : -&gt; RngInt</H5>
<H5>RingOfIntegers() : -&gt; RngInt</H5>
<H5>IntegerRing(Q) : FldRat -&gt; RngInt</H5>
<H5>Integers(Q) : FldRat -&gt; RngInt</H5>
<H5>RingOfIntegers(Q) : FldRat -&gt; RngInt</H5>
<BLOCKQUOTE>
Create the ring of integers Z. 
</BLOCKQUOTE>
<H4><A NAME = "1124">Creation of Elements</A></H4>

<P>
<P>
Since the ring of integers is present when Magma is started up,
integers typed into Magma without any explicit context will be 
regarded as elements of the ring of integers.  Integers can be
specified using both decimal and hexadecimal notation.


<H5>One(Z) : RngInt -&gt; RngIntElt</H5>

<H5>Identity(Z) : RngInt -&gt; RngIntElt</H5><P>

<H5>Zero(Z) : RngInt -&gt; RngIntElt</H5>

<H5>Representative(Z) : RngInt -&gt; RngIntElt</H5><P>


These generic functions 
create 1, 1, 0, and 0 respectively, in the integer ring Z.


<H5><A NAME = "1125">a<sub>1</sub>a<sub>2</sub>...a<sub>r</sub></A></H5>
<BLOCKQUOTE>
Given a succession of decimal digits a<sub>1</sub>, ..., a<sub>r</sub>, create the
corresponding integer. Leading zeros will be ignored.
</BLOCKQUOTE>
<H5><A NAME = "1126">0xa<sub>1</sub>a<sub>2</sub>...a<sub>r</sub></A></H5>
<BLOCKQUOTE>
Given a succession of hexadecimal digits a<sub>1</sub>, ..., a<sub>r</sub>, create the
corresponding integer. Leading zeros will be ignored.
</BLOCKQUOTE>
<H5><A NAME = "1127">elt&lt; Z | a<sub>1</sub>a<sub>2</sub>...a<sub>r</sub> &gt; : RngInt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a succession of decimal digits a<sub>1</sub>, ..., a<sub>r</sub>, create the
corresponding integer as an element of Z.
</BLOCKQUOTE>
<H5><A NAME = "1128">elt&lt; Z | 0xa<sub>1</sub>a<sub>2</sub>...a<sub>r</sub> &gt; : RngInt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a succession of hexadecimal digits a<sub>1</sub>, ..., a<sub>r</sub>, create the
corresponding integer as an element of Z.
</BLOCKQUOTE>
<H5><A NAME = "1129">Z ! a : RngInt, RngElt -&gt; RngIntElt</A></H5>
<H5>Z ! [a] : RngInt, [RngElt] -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Coerce the ring element a into the ring of integers Z. The element a
is allowed to be an element of the ring of integers modulo m
(in which case the result r satisfies 0 &le;r &lt; m), or an element
of a finite field
(in which case the result r satisfies 0 &le;r &lt; p
if a is in the prime field, of characteristic p, and an error
otherwise), or an element of the integers, rationals, a quadratic field,
a cyclotomic field or a number field (in which cases the result is
the obvious integer if a is integral and an error otherwise).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1130">Example <TT>RngInt_Integers (H18E2)</TT></A></H3>
<P>
<P>
<PRE>
&gt; Z := IntegerRing();
&gt; n := 1234567890;
&gt; n in Z;
true
&gt; m := elt&lt; Z | 1234567890 &gt;;
&gt; m eq n;
true
&gt; l := Z ! elt&lt; QuadraticField(3) | 1234567890, 0&gt;;
&gt; l;
1234567890
&gt; k := elt&lt; Z | 0x499602D2 &gt;;
1234567890
</PRE>
<HR>
<H4><A NAME = "1131">Printing of Elements</A></H4>

<P>
<P>
Magma supports the printing of integers in both decimal and hexadecimal form.
The default print method is to print integers in base 10; base 16 printing is
performed using the <TT>Hex</TT> print level.


<HR>
<H3><A NAME = "1132">Example <TT>RngInt_Printing (H18E3)</TT></A></H3>
<P>
<P>
<PRE>
&gt; n := 1234567890;
&gt; n;
1234567890
&gt; n:Hex;
0x499602D2
</PRE>
<HR>
<H4><A NAME = "1133">Element Conversions</A></H4>



<H5><A NAME = "1134">FactorizationToInteger(s) : [ &lt;RngIntElt, RngIntElt&gt; ] -&gt; RngIntElt</A></H5>
<H5>FactorisationToInteger(s) : [ &lt;RngIntElt, RngIntElt&gt; ] -&gt; RngIntElt</H5>
<H5>Facint(s) : [ &lt;RngIntElt, RngIntElt&gt; ] -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a sequence of two-element tuples 
s=[ &lt;p<sub>1</sub>, k<sub>1</sub>&gt;, ..., &lt;p<sub>r</sub>, k<sub>r</sub>&gt; ] containing pairs of integers
&lt;p<sub>i</sub>, k<sub>i</sub>&gt;, 1 &le;i &le;r, with k<sub>i</sub> non-negative, this function 
returns the integer p<sub>1</sub><sup>k<sub>1</sub></sup> ... p<sub>r</sub><sup>k<sub>r</sub></sup>. It is normally
used for converting a factorization sequence to the corresponding integer.
</BLOCKQUOTE>
<H5><A NAME = "1135">IntegerToSequence(n, b) : RngIntElt, RngIntElt -&gt; [RngIntElt]</A></H5>
<H5>Intseq(n, b) : RngIntElt, RngIntElt -&gt; [RngIntElt]</H5>
<BLOCKQUOTE>
Given a non-negative integer n and a positive integer b&ge;2,
return the unique base b representation of n in the form of
a sequence Q. That is, if
n = a<sub>0</sub>b<sup>0</sup> + a<sub>1</sub>b<sup>1</sup> + ... + a<sub>k - 1</sub>b<sup>k - 1</sup> with 0&le;a<sub>i</sub>&lt;b and
a<sub>k - 1</sub>&gt; 0, then Q = [ a<sub>0</sub>, a<sub>1</sub>, ..., a<sub>k - 1</sub> ].  (If n=0, then
Q=[ ].)
</BLOCKQUOTE>
<H5><A NAME = "1136">SequenceToInteger(s, b) : [RngIntElt], RngIntElt -&gt; RngIntElt</A></H5>
<H5>Seqint(s, b) : [RngIntElt], RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a positive integer b&ge;2 and a sequence Q = [ a<sub>0</sub>, ...,
a<sub>k - 1</sub> ] of non-negative integers such that 0 &le;a<sub>i</sub> &lt; b, return the
integer n = a<sub>0</sub>b<sup>0</sup> + a<sub>1</sub>b<sup>1</sup> + ... + a<sub>k - 1</sub>b<sup>k - 1</sup>.  If Q is the
empty sequence, the integer zero is returned.  This function performs 
the inverse operation of the base b representation.
</BLOCKQUOTE>
<H5><A NAME = "1137">IntegerToString(n) : RngIntElt -&gt; ModStgElt</A></H5>
<BLOCKQUOTE>
Create the string consisting of the decimal digits of the integer n.
In the case in which n is negative the first character will be the 
minus sign.
</BLOCKQUOTE>
<H5><A NAME = "1138">IntegerToString(n, b) : RngIntElt, RngIntElt -&gt; ModStgElt</A></H5>
<BLOCKQUOTE>
Create the string consisting of the digits of the integer n in base b.  In
the case in which n is negative the first character will be the minus sign.
The base b can be between 2 and 36.  For b &le;10, the digits are
represented numerically.  For b &gt; 10, the digits are represented both
numerically and alphabetically, so that, 10 is `A', 11 is `B', et cetera.
</BLOCKQUOTE>
<H5><A NAME = "1139">Eltseq(n) : RngIntElt -&gt; [RngIntElt]</A></H5>
<BLOCKQUOTE>
The sequence [n] which can be coerced back into Z. 
</BLOCKQUOTE>
<H5><A NAME = "1140">Denominator(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The denominator of n, ie. 1.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text158.htm">[Next]</A><A  HREF = "text156.htm">[Prev]</A> <A  HREF = "text158.htm">[Right]</A> <A  HREF = "text156.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>