<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creation</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text408.htm">[Next]</A><A  HREF = "text406.htm">[Prev]</A> <A  HREF = "text408.htm">[Right]</A> <A  HREF = "text406.htm">[Left]</A> <A  HREF = "text405.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "4200">Creation</A></H3>

<P>
<P>
The most powerful way to create class fields or abelian extensions in 
Magma is to use the <A  HREF = "text407.htm#FldAb:AbelianExtension">AbelianExtension</A> function that enables
the user to create the extension corresponding to some ideal group.
<P>
So, before we can describe the creation functions for the class fields, we
have to deal with the ideal groups.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text407.htm#4201">Ray Class Groups</A>
<LI> <A  HREF = "text407.htm#4207">Selmer Groups</A>
<LI> <A  HREF = "text407.htm#4210">Maps</A>
<LI> <A  HREF = "text407.htm#4214">Abelian Extensions</A>
<LI> <A  HREF = "text407.htm#4225">Binary Operations</A>
</UL>
<H4><A NAME = "4201">Ray Class Groups</A></H4>

<P>
<P>
<P>
The classical approach to class field theory, which is well suited for
computation, is based on <I>ideal groups</I> which are generalisations
of the ideal class group.
<P>
In this section we describe in detail how to create <I>full</I> ideal
groups, mainly ray class groups. As ray class groups are closely related
to the unit groups of residue class rings of maximal order, these too
are presented here.
<P>
In addition to the functions listed here, 
the <A  HREF = "text394.htm#RngOrd:ChineseRemainderTheoremInf">CRT</A> is relevant in
this context.


<H5><A NAME = "4202"></A><A NAME = "FldAb:RayClassGroup">RayClassGroup</A>(I) : RngOrdIdl -&gt; GrpAb, Map</H5>
<H5>RayClassGroup(I, T) : RngOrdIdl, SeqEnum[RngIntElt] -&gt; GrpAb, Map</H5>
<BLOCKQUOTE>
Given an integral ideal I belonging to the maximal order of a number
field, the <I>ray class group modulo</I> I is the quotient of the
subgroup generated by the ideals coprime to I by the subgroup
generated by the principal ideals generated by elements congruent to
1 modulo I and T if present.
<P>
The sequence T contains the numbers [ i<sub>1</sub>, ..., i<sub>r</sub>] of certain 
real infinite places. When the sequence is supplied, the generators of
the principal ideals
must take positive values at the places indicated by T.
The sequence T must be strictly ascending containing only positive
integers, each not exceeding the number of real embeddings.
<P>
This function requires the class group to be known. If it is not already
stored, it will be computed in such a way that its correctness is not
guaranteed. However, it will almost always be correct. If the user
requires a guaranteed result, then the class group must be verified
by the user or computed up to the proof level required beforehand.
<P>
The ray class group is returned as an abelian group A, together with 
a mapping between A and a set of representatives
for the ray classes.
<P>
The algorithm used is a mixture of Pauli's approach following Hasse
(<A  HREF = "text404.htm#bib_Pau1">[Pau96]</A>, <A  HREF = "text404.htm#bib_Pau2">[HPP97]</A>) and Cohen's method (<A  HREF = "text404.htm#bib_CDOants">[CDO96]</A>, <A  HREF = "text404.htm#bib_CDO1">[CDO97]</A>, <A  HREF = "text404.htm#bib_cohen2">[Coh00]</A>).
</BLOCKQUOTE>
<H5><A NAME = "4203">RayClassGroup(D) : DivNumElt -&gt; GrpAb, Map</A></H5>
<H5>RayClassGroup(P) : PlcNumElt -&gt; GrpAb, Map</H5>
<BLOCKQUOTE>
Given a divisor (or place) of an absolute number field, compute
the Ray class group defined modulo the divisor.
<P>
This function requires the class group to be known. If it is not already
stored, it will be computed in such a way that its correctness is not
guaranteed. However, it will almost always be correct. If the user
requires a guaranteed result, then the class group must be verified
by the user or computed up to the proof level required beforehand.
<P>
The ray class group is returned as an abelian group A, together with 
a mapping between A and a set of representatives
for the ray classes.
<P>
The algorithm used is a mixture of Pauli's approach following Hasse
(<A  HREF = "text404.htm#bib_Pau1">[Pau96]</A>, <A  HREF = "text404.htm#bib_Pau2">[HPP97]</A>) and Cohen's method (<A  HREF = "text404.htm#bib_CDOants">[CDO96]</A>, <A  HREF = "text404.htm#bib_CDO1">[CDO97]</A>, <A  HREF = "text404.htm#bib_cohen2">[Coh00]</A>).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "4204">Example <TT>FldAb_ideal-ray (H40E2)</TT></A></H3>
Some ray class groups are computed below. The example merely illustrates
the fact that ray class groups tend to grow if their defining module grows
and can be arbitrarily large. This should be compared to class groups
where it is rather difficult to give examples of fields having "large"
class groups --- unless one takes imaginary quadratic fields.
<P>
<P>
<PRE>
&gt; R&lt;x&gt; := PolynomialRing(Integers());
&gt; o := MaximalOrder(x^2-10);
&gt; RayClassGroup(2*o, [1,2]);
Abelian Group isomorphic to Z/2 + Z/2
Defined on 2 generators
Relations:
    2*$.1 = 0
    2*$.2 = 0
Mapping from: Abelian Group isomorphic to Z/2 + Z/2
Defined on 2 generators
Relations:
    2*$.1 = 0
    2*$.2 = 0 to Set of ideals of o
&gt; RayClassGroup(2*o);
Abelian Group isomorphic to Z/2
Defined on 1 generator
Relations:
    2*$.1 = 0
Mapping from: Abelian Group isomorphic to Z/2
Defined on 1 generator
Relations:
    2*$.1 = 0 to Set of ideals of o
</PRE>
As one can see, the inclusion of the infinite places only added a C<sub>2</sub>
factor to the group. In general, a set of infinite places containing n
elements can at most add n C<sub>2</sub> factors to the group without 
infinite places.
<P>
Now we enlarge the modulus by small primes. As one can see, the ray class 
group gets bigger.
<P>
<P>
<PRE>
&gt; RayClassGroup(8*3*5*7*11*13*101*o);
Abelian Group isomorphic to Z/2 + Z/2 + Z/2 + Z/4 + Z/4 + Z/24 + Z/24 + Z/120 + 
Z/600
Defined on 9 generators
Relations:
    2*$.1 = 0
    2*$.2 = 0
    2*$.3 = 0
    8*$.4 = 0
    24*$.5 = 0
    4*$.6 = 0
    120*$.7 = 0
    12*$.8 = 0
    600*$.9 = 0
Mapping from: Abelian Group isomorphic to Z/2 + Z/2 + Z/2 + Z/4 + Z/4 + Z/24 + 
Z/24 + Z/120 + Z/600
Defined on 9 generators
Relations:
    2*$.1 = 0
    2*$.2 = 0
    2*$.3 = 0
    8*$.4 = 0
    24*$.5 = 0
    4*$.6 = 0
    120*$.7 = 0
    12*$.8 = 0
    600*$.9 = 0 to Set of ideals of o
</PRE>
<HR>
<H5><A NAME = "4205">RayResidueRing(I) : RngOrdIdl -&gt; GrpAb, Map</A></H5>
<H5>RayResidueRing(I, T) : RngOrdIdl, SeqEnum[RngIntElt] -&gt; GrpAb, Map</H5>
<BLOCKQUOTE>
Given an integral ideal I belonging to the maximal order of a number
field, the <I>ray residue ring modulo</I> I is the unit group
of the maximal order modulo I extended by one C<sub>2</sub> factor for each
element of T.
The sequence T should be viewed as a condition on the signs of the 
numbers factored out.
<P>
Let I be an integral ideal of an absolute maximal order 
and let T be a set of real places given by
an increasing sequence containing integers i, 1&le;i&le;r<sub>1</sub>
where r<sub>1</sub> is the 
number of real zeros of the defining polynomial of the field.
This function computes the group of units mod<sup> * </sup> (I, T). 
The result is a finite abelian group and a map from the group 
to the order to which the ideal belongs.
<P>
When T is not given the unit group 
of the residue ring mod m is returned. This is equivalent to formally
setting T := [ ] to be the empty sequence.
</BLOCKQUOTE>
<H5><A NAME = "4206">RayResidueRing(D) : DivNumElt -&gt; GrpAb, Map</A></H5>
<H5>RayResidueRing(P) : PlcNumElt -&gt; GrpAb, Map</H5>
<BLOCKQUOTE>
Given an effective divisor D of a number field, compute the 
unit group of the residue class ring defined modulo the divisor,
ie. compute the group of elements that for the finite places in the
support of D
approximate 1 and have positive sign at the real infinite places
of the support of D.
</BLOCKQUOTE>
<H4><A NAME = "4207">Selmer Groups</A></H4>

<P>
<P>
<P>
Let S be a finite set of prime ideals in a number field K.  
For an integer p, the p-Selmer group of S is defined as
K<sub>p</sub>(S) := { x &isin;K<sup> x </sup>/(K<sup> x </sup>)<sup>p</sup> | v<sub>Q</sub>(x) = 0 mod p forall Q &notin;S }
K<sub>p</sub>(S) is a finite abelian group of exponent p.


<H5><A NAME = "4208"></A><A NAME = "FldAb:pSelmerGroup">pSelmerGroup</A>(p, S) : RngIntElt, { RngOrdIdl } -&gt; GrpAb, Map</H5>

<PRE>    Integral: BoolElt                   Default: <TT>true</TT></PRE>

<PRE>    Nice: BoolElt                       Default: <TT>true</TT></PRE>

<PRE>    Raw: BoolElt                        Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
For a prime integer p and a set of prime ideals S in a number field K,
the function returns the p-Selmer group of S as an abstract group G, 
together with a map m from K to G.  The map comes with an inverse.
<P>
In principle, the domain of m is the set of x in K satisfying the 
condition in the definition of K<sub>p</sub>(S) above.
When m(x) is invoked for x in K, it is assumed without checking that
x satisfies the condition.  If x does not, either a runtime error occurs,
or the map returns a random element of G.
(Checking the condition would require a far more expensive computation.  
The algorithm identifies the class of x in K<sub>p</sub>(S) by computing the 
multiplicative orders of residues of x, and of the group generators,
modulo some unrelated primes.)
<P>
The role of the optional parameters is as follows.
The p-Selmer group is realized as a subgroup of a quotient of a
suitable group of tilde S-units of the number field, the images of the
map returned by <TT>pSelmerGroup</TT> are tilde S-units.
Initially, tilde S is chosen as S and then enlarged until the
p-part of the ideal class group of K is generated by the ideals in S.
The parameter <TT>Raw</TT> is related to the same parameter in 
<TT>SUnitGroup</TT>, see <A  HREF = "text394.htm#RngOrd:SUnitGroup">SUnitGroup</A> for more information.
If the parameter is set to <TT>true</TT>, the objects returned as images
of the <TT>pSelmerGroup</TT> map are exponent vectors that are applied to
a fixed sequence of elements to get actual S-units, see the following 
example for a demonstration.
<P>
<P>
In addition to changing the return type, <TT>Raw</TT> also implies
a reduction of the results, elements returned under <TT>Raw</TT>
are reduced by removing the projection of the lattice generated by pth
powers of tilde S-units. As a side effect of this reduction, elements
are no longer guaranteed to be integral. To offset this, the
parameter <TT>Integral</TT> can be set to <TT>true</TT>, in which case the 
sequence of multiplicative generators will be extended to contain 
uniformizing elements for all ideals in tilde S and the exponent
vectors will be supplemented accordingly to achieve integrality.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "4209">Example <TT>FldAb_Selmer-group (H40E3)</TT></A></H3>
We compute the 3-Selmer group of Q(&#8730;(10)) with respect to the primes
above 2, 3, 11:
<P>
<P>
<PRE>
&gt; k := NumberField(Polynomial([-10, 0,1]));
&gt; m := MaximalOrder(k);
&gt; lp := Factorization(2*3*11*m);
&gt; S := [ i[1] : i in lp];
&gt; KpS, mKpS := pSelmerGroup(3, Set(S));
&gt; KpS;
Abelian Group isomorphic to Z/3 + Z/3 + Z/3 + Z/3 + Z/3
Defined on 5 generators
Relations:
    3*KpS.1 = 0
    3*KpS.2 = 0
    3*KpS.3 = 0
    3*KpS.4 = 0
    3*KpS.5 = 0
&gt; mKpS;
Mapping from: RngOrd: m to GrpAb: KpS given by a rule
&gt; mKpS(m!11);
KpS.2
&gt; mKpS(m!11*2);
KpS.2 + 2*KpS.3 + 2*KpS.5
&gt; mKpS(m!11*2*17^3);
KpS.2 + 2*KpS.3 + 2*KpS.5
</PRE>
So as long as the argument to <TT>mKpS</TT> is only multiplied by cubes, the
image will be stable.
Next, we do the same again, but this time using <TT>Raw</TT>:
<P>
<P>
<PRE>
&gt; KpS, mKpS, mB, B := pSelmerGroup(3, Set(S):Raw);
&gt; B;
(-m.1 -11/1*m.1 3/1*m.1 2/1*m.1 13/1*m.1 5/1*m.1 31/1*m.1 
    3/1*m.1 - 2/1*m.2 3/1*m.1 + 2/1*m.2 m.1 - 2/1*m.2 m.1 
    + 2/1*m.2 m.2 m.1 + m.2 m.1 - m.2 -2/1*m.1 - m.2 m.2 
    3/1*m.1 3/1*m.1 11/1*m.1)
&gt; #Eltseq(B);
19
&gt; mB;
Mapping from: GrpAb: KpS to Full RSpace of degree 19 over 
Integer Ring given by a rule [no inverse]
&gt; r := KpS.1 + KpS.2 + 2*KpS.4 + KpS.5;
&gt; r @@ mKpS;
396/1*m.1 + 99/1*m.2
&gt; r @ mB;
( 0  1 -2  0  0  0  0  0  0  0  0  0  1  0  1  0  3  0  0)
&gt; PowerProduct(B, $1);
396/1*m.1 + 99/1*m.2
</PRE>
<HR>
<H4><A NAME = "4210">Maps</A></H4>



<H5><A NAME = "4211">InducedMap(m1, m2, h, c) : Map, Map, Map, RngIntElt -&gt; Map</A></H5>
<BLOCKQUOTE>
Given maps m<sub>1</sub>: G<sub>1</sub> to I<sub>1</sub>, m<sub>2</sub>: G<sub>2</sub> to I<sub>2</sub> from some 
finite abelian groups into the ideals
of some maximal order, and a map h:I<sub>1</sub> to I<sub>2</sub> on the ideals, compute the map
induced by h on the abelian groups.
<P>
For this to work, m<sub>1</sub>, and m<sub>2</sub> need to be maps that can be used to define
abelian extensions. This implies that m<sub>i</sub> has to be a composition of maps 
where the last component is either the map returned by <TT>ClassGroup</TT> or by
<TT>RayClassGroup</TT>.  The argument c should be a multiple of the 
minima of the defining moduli.
<P>
The result is the map as defined by
<P>
<P>
<P>
<PRE>
        hom&lt;G_1 -&gt; G_2 | [ h(r_1(G_1.x)) @@ r_2 : x in [1..Ngens(G_1)]]&gt;
</PRE>
<P>
For larger modules however, this function is much faster than the 
straightforward approach. This function tries to find a set of "small" 
generators for both groups. Experience shows that ray class groups (and their 
quotients) can usually defined by a "small" set of "small" prime ideals.
Since solving the discrete logarithm in ray class groups
depends upon solving the discrete
logarithm for class groups which is quite slow for "large" ideals, it is
much faster in general to use this rather roundabout approach.
"Small" ideal in this context means "small" norm.
</BLOCKQUOTE>
<H5><A NAME = "4212">InducedAutomorphism(r, h, c) : Map, Map, RngIntElt -&gt; Map</A></H5>
<BLOCKQUOTE>
An abbreviation for <TT>InducedMap(r, r, h, c)</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "4213">Example <TT>FldAb_inducedMap (H40E4)</TT></A></H3>
Consider a "large" ray class group over k := Q[Sqrt(10), &zeta;<sub>16</sub>]
<P>
<P>
<PRE>
&gt; k := NumberField([Polynomial([-10, 0, 1]), CyclotomicPolynomial(16)]);
&gt; k := OptimizedRepresentation(AbsoluteField(k));
&gt; o := MaximalOrder(k);
&gt; ClassGroup(o : Proof := "GRH");
Abelian Group of order 1
Mapping from: Abelian Group of order 1 to Set of ideals of o
&gt; IndependentUnits(o);
&gt; SetOrderUnitsAreFundamental(o);
&gt; p := &amp;* [113, 193, 241];
&gt; r, mr := RayClassGroup(p*o);
&gt; #r; Ngens(r);
1706131176377019905236218856143547400125963963181004962861678592\
000000000
26
</PRE>
The automorphisms of k act on this group. One way of obtaining the action
is:
<P>
<P>
<PRE>
&gt; autk := Automorphisms(k);
&gt; time m1 := hom&lt;r -&gt; r | [ autk[2](mr(r.i))@@ mr : i in [1..Ngens(r)]]&gt;;
Time: 1.080
</PRE>
In contrast, using <TT>InducedAutomorphism</TT>:
<P>
<P>
<PRE>
&gt; time InducedAutomorphism(mr, autk[2], p);
Time: 1.010
</PRE>
Now we increase p:
<P>
<P>
<PRE>
&gt; p *:= 257*337;
&gt; r, mr := RayClassGroup(p*o);
&gt; #r; Ngens(r);
3831748420755023278212540125628635035038808247955859769266388851\
8259419871708134228623706727453425990974892633470189282997043200\
0000000
42
&gt; time m1 := hom&lt;r -&gt; r | [ autk[2](mr(r.i))@@ mr : i in [1..Ngens(r)]]&gt;;
Time: 2.950
&gt; time InducedAutomorphism(mr, autk[2], p);
Time: 6.200
</PRE>
For "small" examples the direct approach is much faster, but for
large ones, especially if one is only interested in certain quotients,
the other approach is faster.
<HR>
<H4><A NAME = "4214">Abelian Extensions</A></H4>

<P>
<P>
<P>
The ultimate goal of class field theory is the classification of
all abelian extensions of a given number field. Although the theoretical
question was settled in the 1930's, it is still 
difficult to explicitly compute defining equations for class fields. 
For extensions of imaginary quadratic fields, there are well known
analytic methods available.
This section explains the basic operations implemented to 
create class fields in Magma. 


<H5><A NAME = "4215">RayClassField(m) : Map -&gt; FldAb</A></H5>
<H5><A NAME = "FldAb:AbelianExtension:Map">AbelianExtension</A>(m) : Map -&gt; FldAb</H5>
<H5>RayClassField(m, I, T) : Map, RngOrdIdl, [RngIntElt] -&gt; FldAb</H5>
<H5><A NAME = "FldAb:AbelianExtension">AbelianExtension</A>(m, I, T) : Map, RngOrdIdl, [RngIntElt] -&gt; FldAb</H5>
<H5>RayClassField(m, I) : Map, RngOrdIdl -&gt; FldAb</H5>
<H5>AbelianExtension(m, I) : Map, RngOrdIdl -&gt; FldAb</H5>
<BLOCKQUOTE>
Given a map m : G to I<sub>k</sub> where G is a finite abelian group
and I<sub>k</sub> is the set of ideals of some absolute maximal order
construct the class field defined by m. 
<P>
More formally, m<sup> - 1</sup> must be a homomorphism from some ray class 
group R onto a finite abelian group G.  If either I or I 
and T are given, they must define R.  This implies that I has 
to be an integral ideal and that T has to be a sequence containing 
the relevant infinite places.  Otherwise, Magma will try to extract 
this information from m.  The class field defined by m has Galois 
group isomorphic to R/ker(m<sup> - 1</sup>) under the Artin map.
<P>
Note that Magma cannot check whether the map passed in is valid. If an
invalid map is supplied, the output will most likely be garbage.
</BLOCKQUOTE>
<H5><A NAME = "4216">AbelianExtension(I) : RngOrdIdl -&gt; FldAb</A></H5>
<BLOCKQUOTE>
Creates the full ray class field modulo the ideal I.
</BLOCKQUOTE>
<H5><A NAME = "4217">RayClassField(D) : DivNumElt -&gt; FldAb</A></H5>
<H5>RayClassField(P) : PlcNumElt -&gt; FldAb</H5>
<BLOCKQUOTE>
Create the full Ray class field defined modulo the divisor D, ie.
an abelian extension that is unramified outside the support of D and
such that the (abelian) automorphism group is canonically isomorphic to 
the ray class group modulo D.
</BLOCKQUOTE>
<H5><A NAME = "4218">AbelianpExtension(m, p) : Map, RngIntElt -&gt; FldAb</A></H5>
<BLOCKQUOTE>
For a map m as in <A  HREF = "text407.htm#FldAb:AbelianExtension:Map">AbelianExtension</A> and a prime number p,
create the maximal
p-field, i.e. the maximal subfield having degree a p--power.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "4219">Example <TT>FldAb_class-field (H40E5)</TT></A></H3>
The abelian extensions of Q are known to lie
in some cyclotomic field.
<P>
We demonstrate this by computing the 12-th cyclotomic field using
class fields:
<P>
Unfortunately, as ray class groups are not defined for Z in Magma, we 
must work in a degree 1 extension of Q:
<P>
<P>
<PRE>
&gt; x := ext&lt;Rationals()|&gt;.1;
&gt; Q := ext&lt;Rationals()| x-1 :DoLinearExtension&gt;;
&gt; M := MaximalOrder(Q);
</PRE>
The ray class group that defines Q(&zeta;<sub>12</sub>) is defined
mod (12, &infin;) where &infin; is the unique infinite place of Q. There
are at least two ways of looking at this:
First, since Q(&zeta;<sub>12</sub>) is a totally complex field, the infinite
place of Q must ramify (by convention: C is ramified over R), so
we must include the infinite place in the definition of the ray class group.
<P>
Secondly, the ray class group mod (12) without the infinite place is
too small. We know &phi;(12) = 4, (Z/12Z)<sup> * </sup> = {1, 5, 7, 11} =
{&#8723; 1, &#8723; 5}. As ideals we have (1) = o = ( - 1) = (11) and
(5) = ( - 5) = (7) so that Cl<sub>12</sub> isomorphic to C<sub>2</sub>. By introducing T = [1],
we distinguish &#8723; 1 and &#8723; 5.
<P>
<P>
<PRE>
&gt; G, m := RayClassGroup(12*M, [1]);
&gt; G;
Abelian Group isomorphic to Z/2 + Z/2
Defined on 2 generators
Relations:
    2*G.1 = 0
    2*G.2 = 0
&gt; A := AbelianExtension(m);
&gt; E := EquationOrder(A);
&gt; Ea := SimpleExtension(E);
&gt; Ma := MaximalOrder(Ea);
&gt; Discriminant(Ma);
144
&gt; Factorization(Polynomial(Ma, CyclotomicPolynomial(12)));
[
    &lt;ext&lt;Ma|&gt;.1 + [0, 1, 0, -1], 1&gt;,
    &lt;ext&lt;Ma|&gt;.1 + [0, -1, 0, 0], 1&gt;,
    &lt;ext&lt;Ma|&gt;.1 + [0, 1, 0, 0], 1&gt;,
    &lt;ext&lt;Ma|&gt;.1 + [0, -1, 0, 1], 1&gt;
]
</PRE>
The main advantage of this method over the use of the cyclotomic polynomials
is the fact that we can directly construct certain subfields:
<P>
<P>
<PRE>
&gt; x := ext&lt;Integers()|&gt;.1;
&gt; M := MaximalOrder(x^2-10);
&gt; G, m := RayClassGroup(3615*M, [1,2]);
&gt; G; m;
Abelian Group isomorphic to Z/2 + Z/2 + Z/4 + Z/80 + Z/240
Defined on 5 generators
Relations:
    4*G.1 = 0
    80*G.2 = 0
    240*G.3 = 0
    2*G.4 = 0
    2*G.5 = 0
Mapping from: GrpAb: G to Set of ideals of M
</PRE>
We will only compute the 5-part of this field:
<P>
<P>
<PRE>
&gt; h := hom&lt;G -&gt; G | [5*G.i : i in [1..#Generators(G)]]&gt;;
&gt; Q, mq := quo&lt;G|Image(h)&gt;;
&gt; mm := Inverse(mq) * m;
&gt; mm;
Mapping from: GrpAb: Q to Set of ideals of M
&gt; A := AbelianExtension(mm);
&gt; E := EquationOrder(A);
&gt; E;
Non-simple Equation Order defined by x^5 - [580810, 0]*x^3 +
    [24394020, -40656700]*x^2 + [15187310285, 2799504200]*x 
    + [1381891263204, 530506045900], x^5 - [580810, 0]*x^3 +
    [-109192280, 34848600]*x^2 + [30584583385, 
    16797025200]*x + [-341203571896, 109180663800] over its 
ground order
&gt; C := Components(A);
</PRE>
The function <A  HREF = "text409.htm#FldAb:Components">Components</A> gives a list of cyclic extensions of M
that correspond to the cyclic factors of G.
<P>
<P>
<PRE>
&gt; GaloisGroup(NumberField(C[1]));
Permutation group acting on a set of cardinality 5
Order = 5
    (1, 4, 2, 5, 3)
[ -9 + O(41), 15 + O(41), 6 + O(41), 18 + O(41), 11 + O(41) ]
GaloisData over Z_Prime Ideal
Two element generators:
[41, 0]
[25, 1] - relative case
&gt; GaloisGroup(NumberField(C[2]));
Order = 5
    (1, 4, 2, 5, 3)
[ 38 + O(79), -28 + O(79), -31 + O(79), 27 + O(79), -6 + O(79) ]
GaloisData over Z_Prime Ideal
Two element generators:
[79, 0]
[57, 1] - relative case
</PRE>
Thus the Galois group is indeed proven to be C<sub>5</sub> x C<sub>5</sub>.
<HR>
<H5><A NAME = "4220">AbelianExtension(I, P) : RngOrdIdl, [RngIntElt] -&gt; FldAb</A></H5>
<BLOCKQUOTE>
Creates the full ray class field modulo the ideal I and the infinite places
in P.
</BLOCKQUOTE>
<H5><A NAME = "4221">HilbertClassField(K) : FldAlg -&gt; FldAb</A></H5>
<BLOCKQUOTE>
Creates the Hilbert class field of K, i.e. the maximal unramified
abelian extension of K. This is equivalent to
<TT>AbelianExtension(1*MaximalOrder(K))</TT>.
</BLOCKQUOTE>
<H5><A NAME = "4222">MaximalAbelianSubfield(M) : RngOrd -&gt; FldAb</A></H5>
<H5>MaximalAbelianSubfield(F): FldOrd  -&gt; FldAb</H5>
<H5>MaximalAbelianSubfield(K) : FldNum -&gt; FldAb</H5>

<PRE>    Conductor: [RngOrdIdl, [RngIntElt]] Default: [ ]</PRE>
<BLOCKQUOTE>
Let k be the coefficient field of the given number field K.
This function creates the maximal abelian extension A of k inside K.
If <TT>Conductor</TT> is given, it must contain a multiple of the true conductor.
If no value is specified, the discriminant of K is used.
<P>
The correctness of this function is based on some heuristics. The algorithm
is similar to <A  HREF = "text404.htm#bib_cohen2">[Coh00, Algorithm 4.4.3]</A>
</BLOCKQUOTE>
<H5><A NAME = "4223">AbelianExtension(K) : FldAlg -&gt; FldAb</A></H5>
<H5>AbelianExtension(M): RngOrd  -&gt; FldAb</H5>

<PRE>    Conductor: [RngOrdIdl, [RngIntElt]] Default: [ ]</PRE>
<BLOCKQUOTE>
Creates an abelian extension A of k the coefficient field of the input K
that is isomorphic to K.
If a value for <TT>Conductor</TT> is given, it must contain a multiple of the
true conductor,
otherwise the discriminant of K is used to be more specific,
in case K is a number field, the discriminant of it's maximal
order is used as an initial guess, while for field of fractions of
orders (K of type <TT>FldOrd</TT>), the defining order gives the initial
guess.
<P>
In contrast to <TT>MaximalAbelianSubfield</TT>, provided the field is
abelian, this function always
computes a correct answer.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "4224">Example <TT>FldAb_hilbert-class-field (H40E6)</TT></A></H3>
We will compute the Hilbert class field of the sextic field defined by
a zero of the polynomial x<sup>6</sup> - 3x<sup>5</sup> + 6x<sup>4</sup> + 93x<sup>3</sup> - 144x<sup>2</sup> - 153x + 2601
which has a class group
isomorphic to C<sub>3</sub> x C<sub>3</sub>.
<P>
<P>
<PRE>
&gt; m := LLL(MaximalOrder(Polynomial([2601, -153, -144, 93, 6, -3, 1 ])));
</PRE>
The call to LLL is not necessary, but quite frequently class group
computations are faster if the order basis is LLL-reduced first.
<P>
<P>
<PRE>
&gt; a, b := ClassGroup(m : Proof := "GRH");
&gt; a;
Abelian Group isomorphic to Z/3 + Z/3
Defined on 2 generators
Relations:
    3*a.1 = 0
    3*a.2 = 0
</PRE>
<TT>HilbertClassField</TT> on <TT>m</TT> computes a Non-simple number field
defining the Hilbert class field of <TT>m</TT>.
<P>
<P>
<PRE>
&gt; H := HilbertClassField(NumberField(m)); H;
Number Field with defining polynomial [ $.1^3 + 1/595*(-460*$.1^5
    + 2026*$.1^4 - 4052*$.1^3 - 52572*$.1^2 + 229338*$.1 - 
    529159), $.1^3 + 1/37485*(82*$.1^5 + 4344*$.1^4 + 8805*$.1^3 
    + 15990*$.1^2 + 410931*$.1 + 1098693)] over its ground field
&gt; time _ := MaximalOrder(H);
Time: 2.200
</PRE>
However, in order to access more of the structural information of <TT>H</TT>
we have to create it as an abelian extension, using <TT>b</TT>.
<P>
<P>
<PRE>
&gt; A := AbelianExtension(b);
&gt; HH := NumberField(A);
</PRE>
Now we are able to compute the maximal order of <TT>HH</TT> using <TT>A</TT>
and verify the discriminant:
<P>
<P>
<PRE>
&gt; time M := MaximalOrder(A:Al := "Discriminant");
Time: 0.170
&gt; Discriminant(M);
Ideal of m
Basis:
[1 0 0 0 0 0]
[0 1 0 0 0 0]
[0 0 1 0 0 0]
[0 0 0 1 0 0]
[0 0 0 0 1 0]
[0 0 0 0 0 1]
</PRE>
Note, that as a side effect, the maximal order of <TT>HH</TT> is now known:
<P>
<P>
<PRE>
&gt; time MaximalOrder(HH);
Maximal Order of Equation Order with defining polynomials x^3 + [841, 841, 312,
    -534, 222, 0], x^3 + [25, -2, -9, 7, -11, -8] over m
Time: 0.000
</PRE>
We will continue this example following the next section.
<HR>
<H4><A NAME = "4225">Binary Operations</A></H4>

<P>
<P>
The model underlying the class field theory as implemented in Magma is based
on the (generalized) ideal class groups. Based on this group-theoretical
description, certain binary operations are easily possible:


<H5><A NAME = "4226">A eq B : FldAb, FldAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Gives two abelian extensions with the same base field, decide if they
are the same.
</BLOCKQUOTE>
<H5><A NAME = "4227">A subset B : FldAb, FldAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Gives two abelian extensions with the same base field, decide if they
are contained in each other. 
</BLOCKQUOTE>
<H5><A NAME = "4228">A * B : FldAb, FldAb -&gt; FldAb</A></H5>
<BLOCKQUOTE>
Given two abelian extensions with the same base field, find the smallest
abelian extension containing both.
</BLOCKQUOTE>
<H5><A NAME = "4229">A meet B : FldAb, FldAb -&gt; FldAb</A></H5>
<BLOCKQUOTE>
Given two abelian extensions with the same base field, find the largest
common subfield.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text408.htm">[Next]</A><A  HREF = "text406.htm">[Prev]</A> <A  HREF = "text408.htm">[Right]</A> <A  HREF = "text406.htm">[Left]</A> <A  HREF = "text405.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>