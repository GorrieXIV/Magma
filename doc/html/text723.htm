<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>More About Presentations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text724.htm">[Next]</A><A  HREF = "text722.htm">[Prev]</A> <A  HREF = "text724.htm">[Right]</A> <A  HREF = "text722.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8267">More About Presentations</A></H3>

<P>
<P>
Each pc-group can have up to three pc-presentations associated with it.
If the user specifies a consistent presentation in the
<TT>PolycyclicGroup</TT>-constructor, then this presentation (the "user" presentation)
will be used for all printing and interpretation of element input.  If the
specified presentation is inconsistent, a runtime error is generated.
<P>
Internally, Magma uses a "conditioned" presentation for computation.
The composition series associated with this presentation is guaranteed to
refine a normal series with elementary abelian factors.  If G is a p-group,
then the composition series is guaranteed to be a central series and the first
d pc-generators are a minimal set of generators for the group.  Hence, their
images generate the Frattini factor group.  If the user presentation satisfies
these conditions, then it is used as the conditioned presentation.  Otherwise,
a separate presentation is computed automatically.
<P>
Several algorithms rely on a "special" presentation for the group.  This
presentation exhibits Hall &pi;-subgroups and a characteristic series
with elementary abelian factors.  When needed, such a presentation is computed
and elements are automatically translated between presentations.
<P>
The "compact" presentation is not a presentation used in computation.  Rather
it provides an efficient means to input and output large pc-groups.  This is
especially useful for stored collections of groups (libraries or databases).



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text723.htm#8268">Conditioned Presentations</A>
<LI> <A  HREF = "text723.htm#8278">Special Presentations</A>
<LI> <A  HREF = "text723.htm#8288">CompactPresentation</A>
</UL>
<H4><A NAME = "8268">Conditioned Presentations</A></H4>

<P>
<P>
Magma will compute a pc-presentation which will be used for internal
computation, but the user's presentation will be used for all input and output.
The recommended way to access the conditioned internal presentation is via the
intrinsic <TT>ConditionedGroup</TT>.


<H5><A NAME = "8269">Structure Operations</A></H5>



<H5><A NAME = "8270">ConditionedGroup(G) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
The internally used, conditioned presentation of the pc-group G.  The returned
group is recorded as a subgroup of G in the relationship tables, so
coercion can be used to move between presentations.
</BLOCKQUOTE>
<H5><A NAME = "8271">IsConditioned(G) : GrpPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Reutrns <TT>true</TT> if G uses the user presentation as the
internal presentation, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8272">Element Operations</A></H5>



<H5><A NAME = "8273">LeadingTerm(x) : GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Given an element x of a pc-group G with n pc-generators and
a conditioned presentation, where x is of the form
a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>,
return a<sub>i</sub><sup>&alpha;<sub>i</sub></sup> for the smallest i such that &alpha;<sub>i</sub> &gt; 0.
If x is the identity of G, then the identity is returned.
</BLOCKQUOTE>
<H5><A NAME = "8274">LeadingGenerator(x) : GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Given an element x of a pc-group G with n pc-generators and
a conditioned presentation, where x is of the form
a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>,
return a<sub>i</sub> for the smallest i such that &alpha;<sub>i</sub> &gt; 0.
If x is the identity of G, then the identity is returned.
</BLOCKQUOTE>
<H5><A NAME = "8275">LeadingExponent(x) : GrpPCElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given an element x of a pc-group G with n pc-generators and
a conditioned presentation, where x is of the form
a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>,
return &alpha;<sub>i</sub> for the smallest i such that &alpha;<sub>i</sub> &gt; 0.
If x is the identity of G, then 0 is returned.
</BLOCKQUOTE>
<H5><A NAME = "8276">Depth(x) : GrpPCElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given an element x of a pc-group G with n pc-generators and
a conditioned presentation, where x is of the form
a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>,
return the smallest i such that &alpha;<sub>i</sub> &gt; 0.  If
x is the identity of G, then 0 is returned.
</BLOCKQUOTE>
<H5><A NAME = "8277">PCClass(x) : GrpPCElt -&gt; RngIntElt</A></H5>
<H5>WeightClass(x) : GrpPCElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The weight class of the element x.  The <TT>WeightClass</TT> of an
arbitrary element of a pc-group G is defined to be k if
x&isin;G_(&delta;<sub>k - 1</sub>) and x&notin;G_(&delta;<sub>k</sub>).  If x is
the identity of G, then <TT>WeightClass</TT> returns n + 1.
</BLOCKQUOTE>
<H4><A NAME = "8278">Special Presentations</A></H4>

<P>
<P>
A special presentation is one which has several properties described by
C. R. Leedham-Green:  
<P>
<DL COMPACT class='compact'>
<DT>(1)</DT><DD>The composition series defined by the
pc-generators refines the LG-series.  The LG-series is a characteristic
series which refines the nilpotent series.  Within each nilpotent
section, it refines the series of successive Frattini factors.  Factors
of successive terms in the LG-series are elementary abelian p-groups,
with p increasing through each Frattini factor.
<P>
<DT>(2)</DT><DD>The presentation exhibits a Sylow system.  By this we mean
that if &pi; is a set of primes, then the pc-generators whose
corresponding prime lies in &pi; will generate a Hall &pi;-subgroup.
<P>
<DT>(3)</DT><DD>The presentation exhibits "head splittings".  These are
certain complements in factors of the group as follows:  If N is a
term of the nilpotent series of G, M the next term (so N/M is a
maximal nilpotent factor of N), and F/M is the Frattini subgroup of
N/M, then it is possible to show that N/F has a complement in
G/F.  We say the presentation exhibits this complement (or
"splitting") if the pc-generators of G which are not in N generate
a complement for N mod F.
<P>
<P>
</DL>
Several algorithms rely on having a special presentation for the given
group.  In these cases, Magma will automatically compute a special
presentation.  However, if the user wishes to have a special
presentation as the user presentation for a group, the function <TT>SpecialPresentation</TT> can be used.  This is typically used when
implementing new algorithms which rely on the properties of a special
presentation.  The other functions allow one to identify specific
characteristics of a special presentation.  They are not defined for
arbitrary presentations.


<H5><A NAME = "8279">SpecialPresentation(G) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
Returns a new group H which is defined by a special
presentation.  H is in fact a subgroup of G (equal to G) and
so one can use the coercion operator (!) to translate elements
between the two presentations.  Furthermore, any subgroup of H is
automatically a subgroup of G.  For instance, if one computed the
center Z of H (using some algorithm relying on the special
presentation), Z would be a subgroup of G, and would be the
center of G.
</BLOCKQUOTE>
<H5><A NAME = "8280">SpecialWeights(G) : GrpPC -&gt; [ &lt;RngIntElt, RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
A sequence of triples of integers is returned, with one triple
corresponding to each pc-generator.  The first integer in a triple
gives the number of the nilpotent section containing the generator, 
the second gives the number of the square-free exponent abelian 
section of that nilpotent section containing it, and the third 
gives the number of the elementary abelian p-group layer that
contains the generator.  The prime for the generator is not included 
in the triple (see <TT>PCPrimes</TT>).
</BLOCKQUOTE>
<H5><A NAME = "8281">NilpotentLength(G) : GrpPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of nilpotent factors in the nilpotent series.
</BLOCKQUOTE>
<H5><A NAME = "8282">NilpotentBoundary(G,i) : GrpPC, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The subscript of the last generator in the ith nilpotent section, where
i lies between 1 and <TT>NilpotentLength(G)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8283">MinorLength(G,i) : GrpPC, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of minor sections (Frattini factors) in the ith nilpotent
section of G.
</BLOCKQUOTE>
<H5><A NAME = "8284">MinorBoundary(G,i,j) : GrpPC, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The subscript of the last generator in the jth minor section of
the ith nilpotent section, where j lies between 1 and <TT>MinorLength(G,i)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8285">LayerLength(G,i,j) : GrpPC, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of elementary abelian p-group layers in the jth minor
section of the ith nilpotent section of G.
</BLOCKQUOTE>
<H5><A NAME = "8286">LayerBoundary(G,i,j,k) : GrpPC, RngIntElt, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The subscript of the last generator in the kth elementary abelian p-group layer
of the jth minor section of the ith nilpotent section, where k lies
between 1 and <TT>LayerLength(G,i,j)</TT>.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8287">Example <TT>GrpPC_SpecialPresentation (H68E35)</TT></A></H3>
We show how user presentations and special
presentations can differ.  If we define a
wreath product using <TT>PolycyclicGroup</TT>,
the given presentation becomes the user
presentation, but this is not a special
presentation for the group.
<P>
<P>
<PRE>
&gt; T := PolycyclicGroup&lt;a,b,c,d|a^3,b^3,c^3,d^3,
&gt;                          b^a=c, c^a=d, d^a=b&gt;;
&gt; T;
GrpPC : T of order 81 = 3^4
PC-Relations:
    T.2^T.1 = T.3, 
    T.3^T.1 = T.4, 
    T.4^T.1 = T.2
&gt; S := SpecialPresentation(T);
&gt; S;
GrpPC : S of order 81 = 3^4
PC-Relations:
    S.2^S.1 = S.2 * S.3^2 * S.4, 
    S.3^S.1 = S.3 * S.4^2
</PRE>
<P>
Here we build another
wreath product and construct
a special presentation.
<P>
<P>
<PRE>
&gt; C6 := CyclicGroup(GrpPC,6);
&gt; C2 := CyclicGroup(GrpPC,2);
&gt; G := WreathProduct(C2,C6);
&gt; G;
GrpPC : G of order 384 = 2^7 * 3
PC-Relations:
    G.1^2 = G.2, 
    G.2^3 = Id(G), 
    G.3^2 = Id(G), 
    G.4^2 = Id(G), 
    G.5^2 = Id(G), 
    G.6^2 = Id(G), 
    G.7^2 = Id(G), 
    G.8^2 = Id(G), 
    G.3^G.1 = G.8, 
    G.3^G.2 = G.5, 
    G.4^G.1 = G.6, 
    G.4^G.2 = G.3, 
    G.5^G.1 = G.7, 
    G.5^G.2 = G.4, 
    G.6^G.1 = G.3, 
    G.6^G.2 = G.8, 
    G.7^G.1 = G.4, 
    G.7^G.2 = G.6, 
    G.8^G.1 = G.5, 
    G.8^G.2 = G.7
&gt; H := SpecialPresentation(G);
&gt; H;
GrpPC : H of order 384 = 2^7 * 3
PC-Relations:
    H.1^2 = Id(H), 
    H.2^2 = Id(H), 
    H.3^3 = Id(H), 
    H.4^2 = Id(H), 
    H.5^2 = Id(H), 
    H.6^2 = Id(H), 
    H.7^2 = Id(H), 
    H.8^2 = Id(H), 
    H.2^H.1 = H.2 * H.4, 
    H.5^H.3 = H.6, 
    H.6^H.3 = H.5 * H.6, 
    H.7^H.1 = H.6 * H.7, 
    H.7^H.3 = H.8, 
    H.8^H.1 = H.5 * H.6 * H.8, 
    H.8^H.3 = H.7 * H.8
</PRE>
We can coerce between the presentations.
<P>
<P>
<PRE>
&gt; G!(H.2), H!(G.2);
G.6 * G.7 * G.8 H.3
</PRE>
Look at some specific features of the presentation.
<P>
<P>
<PRE>
&gt; SpecialWeights(H);
[ &lt;1, 1, 1&gt;, &lt;1, 1, 1&gt;, &lt;1, 1, 2&gt;, &lt;1, 2, 1&gt;, &lt;2, 1, 1&gt;, &lt;2, 1, 1&gt;, &lt;2, 1, 1&gt;, 
&lt;2, 1, 1&gt; ]
&gt; MinorLength(H,1);
2
&gt; MinorBoundary(H,1,1);
3
</PRE>
<HR>
<H4><A NAME = "8288">CompactPresentation</A></H4>

<P>
<P>
When the Magma parser reads in large group presentations of the form
<P>
<P>
<PRE>
S4 := PolycyclicGroup&lt; a, b, c, d | a^2 = 1, b^3 = 1, c^2 = 1,
       d^2 = 1, b^a = b^2, c^a = c * d, c^b = c * d, d^b = c &gt;;
</PRE>
a large amount of memory and time is used to build all of the expressions
involved in the statement.  This time is most noticeable when loading in
large libraries of Magma code containing many large presentations.  The
following intrinsics provide a way to avoid this overhead.


<H5><A NAME = "8289">CompactPresentation(G) : GrpPC -&gt; [RngIntElt]</A></H5>
<BLOCKQUOTE>
Given a pc-group G, return a sequence of integers that contains the
information needed to define the group's presentation.
</BLOCKQUOTE>
<H5><A NAME = "8290">PCGroup(Q : parameters ) : [RngIntElt] -&gt; GrpPC</A></H5>

<PRE>    Check: BoolElt                      Default: <TT>false</TT></PRE>

<PRE>    ExponentLimit: RngIntElt            Default: 20</PRE>
<BLOCKQUOTE>
Return a group G in category <TT>GrpPC</TT>, whose presentation is provided
by the integer sequence Q.  Constructing the group from the integer
sequence has very low overhead in the parser. The time taken to construct
the group is less when the presentation is conditioned.
<P>
The parameter <TT>Check</TT> indicates whether or not the presentation is
checked for consistency. Leaving the <TT>Check</TT> parameter set to false 
speeds the construction of the group, but will be disastrous if the sequence
Q does not represent a consistent pc-presentation. 
<P>
Parameter <TT>ExponentLimit</TT> determines the amount of
space that will be used by the group to speed calculations.  Given
<TT>ExponentLimit := e</TT>, the group will store the products a<sup>i</sup> * b<sup>j</sup>
where a and b are generators and i and j are in the range 1 to e.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8291">Example <TT>GrpPC_CompactPresentation (H68E36)</TT></A></H3>
If the user wants to store the definition of a group in a library,
the following may be done.
<P>
<P>
<PRE>
&gt; S4 := PolycyclicGroup&lt; a, b, c, d | a^2 = 1, b^3 = 1, c^2 = 1, d^2 = 1,
&gt;              b^a = b^2, c^a = c * d, c^b = c * d, d^b = c &gt;;
&gt; Q := CompactPresentation( S4 );
&gt; Q;
[ 4, -2, -3, -2, 2, 33, 218, 114, 55 ]
</PRE>
<P>
The library code would then be
<P>
<P>
<PRE>
&gt; Make:=func&lt; | PCGroup(\[4, 2, 3, 2, 2, 33, 218, 114, 55] : Check := false) &gt;;
</PRE>
Note the use of a literal sequence here --- see Chapter <A  HREF = "text96.htm#736">SEQUENCES</A>.
<HR>
<PRE></PRE> <A  HREF = "text724.htm">[Next]</A><A  HREF = "text722.htm">[Prev]</A> <A  HREF = "text724.htm">[Right]</A> <A  HREF = "text722.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>