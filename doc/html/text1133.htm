<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Finitely Presented Lie Algebras</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1134.htm">[Next]</A><A  HREF = "text1132.htm">[Prev]</A> <A  HREF = "text1134.htm">[Right]</A> <A  HREF = "text1132.htm">[Left]</A> <A  HREF = "text1130.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "12675">Finitely Presented Lie Algebras</A></H3>

<P>
<P>
<P>
<P>
A finitely presented Lie algebra is constructed as the quotient
of a free Lie algebra on a finite number of generators. Denote the set
of generators by X={x<sub>1</sub>, ..., x<sub>n</sub>}.  Let F denote the base
ring. Then the free Lie algebra generated by the x<sub>i</sub> over the ring
F is denoted by L<sub>F</sub>(X). The free magma on X is the set of the
x<sub>i</sub> together with all bracketed expressions in the x<sub>i</sub>, e.g.,
((x<sub>1</sub>, x<sub>2</sub>), ((x<sub>1</sub>, x<sub>3</sub>), x<sub>2</sub>))).  The free Lie algebra L<sub>F</sub>(X) is
spanned by M(X). However, the elements of this set are not linearly
independent. It is a nontrivial problem to describe a basis of the
free Lie algebra. One of several possibilities is the well-known
<I>Hall basis</I>. Currently Magma does not support calculations
involving bases of the free Lie algebra, as they are of little use
for our main problem: the construction of a basis and multiplication
table for a finitely-presented Lie algebra.
<P>
<P>
It is convenient to define an ordering on the elements of M(X).
First of all, each generator is assigned a degree. Usually, the degree
of all x<sub>i</sub> is taken to be one, but it is also possible to assign
different degrees. The degree of a bracket (a, b) is defined to be
the sum of the degrees of a and b.  Let m, m' be two elements of
M(X). Then define m&lt;m' if the degree of m is less than the degree
of m'. If their degrees are equal, then define m&lt;m' if m=x<sub>i</sub>
and m'=(a', b'), for some a', b' in M(X).  If both m and m'
are generators of the same degree, so that m=x<sub>i</sub>, m'=x<sub>j</sub>, then
define m&lt;m' if i&lt;j. Finally, if both m and m' are bracketed
expressions, that is, m=(a, b) and m'=(a', b'), then define m&lt;m'
if a&lt;a' or a=a' and b&lt;b'.
<P>
<P>
In the free Lie algebra, the relations (a, b) = - (b, a), and (a, a)=0
hold.  In Magma this is used to rewrite an arbitrary element as a
linear combination of elements of the form (a, b) with a&lt;b. If
instead we were to work relative to a basis for L<sub>F</sub>(X), then
the use of the Jacobi identity when rewriting elements can lead to
rather large expressions. Thus, mathematically speaking, in Magma
rather than work in the free Lie algebra, we actually work in the
free nonassociative anticommutative algebra.  However, as our main
interest lies in finitely-presented Lie algebras, this is usually
not a problem.  



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1133.htm#12676">Construction of the Free Lie Algebra</A>
<LI> <A  HREF = "text1133.htm#12679">Properties of the Free Lie Algebra</A>
<LI> <A  HREF = "text1133.htm#12682">Operations on Elements of the Free Lie Algebra</A>
<LI> <A  HREF = "text1133.htm#12687">Construction of a Finitely- Presented Lie Algebra</A>
<LI> <A  HREF = "text1133.htm#12695">Homomorphisms of the Free Lie Algebra</A>
</UL>
<H4><A NAME = "12676">Construction of the Free Lie Algebra</A></H4>



<H5><A NAME = "12677">FreeLieAlgebra(F, n) : Rng, RngIntElt -&gt; AlgFPLie</A></H5>
<BLOCKQUOTE>
Given a ring F and a positive integer n, this function creates the 
free n-generator Lie algebra over the ring F. The generators are 
ordered, with the first generator being the biggest in the ordering, and 
the last generator the smallest.  The angle bracket notation can be used 
to assign names to the generators.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12678">Example <TT>AlgLie_FreeLie (H106E3)</TT></A></H3>
The following statement creates the Magma object corresponding to the
free Lie algebra on three generators over the field GF(2).
<P>
<P>
<P>
<PRE>
&gt; L&lt;a,b,c&gt;:= FreeLieAlgebra(GF(2), 3);
</PRE>
<HR>
<H4><A NAME = "12679">Properties of the Free Lie Algebra</A></H4>



<H5><A NAME = "12680"></A><A NAME = "AlgFPLieRank">Rank</A>(L) : AlgFPLie -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of generators of the free Lie algebra L.
</BLOCKQUOTE>
<H5><A NAME = "12681">CoefficientRing(L) : AlgFPLie -&gt; Rng</A></H5>
<H5>BaseRing(L) : AlgFPLie -&gt; Rng</H5>
<BLOCKQUOTE>
The coefficient ring of L.
</BLOCKQUOTE>
<H4><A NAME = "12682">Operations on Elements of the Free Lie Algebra</A></H4>

<P>
<P>
<P>
<P>
Once a free Lie algebra has been created the user can construct a 
bracketed expression (a, b), either by simply typing it literally 
as <TT>(a,b)</TT>, or by using the multiplication operator as in 
<TT>a*b</TT>.  Recall that Magma rewrites elements so they are in the
form (a, b) with a&lt;b. On some occasions this can lead to the
introduction of a minus sign.  Also, if an element contains a 
subexpression of the form (a, a), it will be rewritten to 0. 
<P>
We can multiply and add elements, and multiply them by scalars. 


<H5>x + y : AlgFPLieElt, AlgFPLieElt -&gt; AlgFPLieElt</H5>

<H5>x - y : AlgFPLieElt, AlgFPLieElt -&gt; AlgFPLieElt</H5>

<H5>x * y : AlgFPLieElt, AlgFPLieElt -&gt; AlgFPLieElt</H5><P>



<H5><A NAME = "12683">L ! 0 : AlgFPLie, RngIntElt -&gt; AlgFPLieElt</A></H5>
<H5>Zero(L) : AlgFPLie -&gt; AlgFPLieElt</H5>
<BLOCKQUOTE>
The zero element of the free Lie algebra L.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12684">Example <TT>AlgLie_FreeLieAlgebra (H106E4)</TT></A></H3>
<P>
<P>
<PRE>
&gt; L&lt;z,y,x&gt; := FreeLieAlgebra(Rationals(), 3);
&gt; x*y;
(x, y)
&gt; (x, y);
(x, y)
&gt; ((x*y)*z);                        
-(z, (x, y))
&gt; ((x, y), z);                        
-(z, (x, y))
&gt; ((x, y),(y, x));
0
&gt; 2*((x, y), z) - ((x, z), (y, z)) + 1/2*(x, (x, (y, z)));
-((x, z), (y, z)) + 1/2*(x, (x, (y, z))) - 2*(z, (x, y))
</PRE>
<HR>
<H5><A NAME = "12685">IsLeaf(m) : AlgFPLieElt -&gt; BoolElt, AlgFPLieElt, AlgFPLieElt</A></H5>
<BLOCKQUOTE>
Given a monomial element m of the free Lie algebra L, 
return <TT>true</TT> if m is a generator and <TT>false</TT> otherwise. 
If the result is <TT>true</TT> then the second return value is an integer i 
such that m is <TT>L.i</TT>. If the result is <TT>false</TT> then a, b &isin;L
are also returned such that m is a multiple of (a, b). 
<P>
<P>
Note that in the latter case m is not equal to (a, b), but merely 
equal to a scalar multiple of (a, b). See the example for a possible
method of retrieving the appropriate scalar.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12686">Example <TT>AlgLie_IsLeaf (H106E5)</TT></A></H3>
<P>
<P>
<PRE>
&gt; L&lt;z,y,x&gt;:= FreeLieAlgebra(Rationals(), 3);
&gt; IsLeaf(x);
true 3
&gt; m := 2*((x, y), z); 
&gt; m;
-2*(z, (x, y))
&gt; il, a, b := IsLeaf(m);
&gt; il, a, b;
false z 
(x, y)
&gt; m eq (a, b);
false
&gt; m eq LeadingCoefficient(m)*(a,b);
true
</PRE>
<HR>
<H4><A NAME = "12687">Construction of a Finitely- Presented Lie Algebra</A></H4>



<H5><A NAME = "12688"></A><A NAME = "FPL:LieAlgebra">LieAlgebra</A>(R) : [ AlgFPLieElt ] -&gt; AlgLie, SeqEnum, SeqEnum, Map</H5>
<H5>LieAlgebra(R) : { AlgFPLieElt } -&gt; AlgLie, SeqEnum, SeqEnum, Map</H5>
<BLOCKQUOTE>
Given a set or sequence R of elements of a free Lie algebra L, let
I be the ideal of L generated by the elements of R. It is assumed
that the quotient algebra Q = L/I is finite dimensional. This function 
returns the structure constant Lie algebra K isomorphic to the quotient 
Q. If the quotient Q is infinite dimensional then the program will 
not terminate.  (The question of determining whether the quotient is 
finite dimensional is known to be undecidable.)   The function can be
interrupted by pressing <TT>Ctrl-C</TT>. The elements of R are referred
to as <I>relations</I>. 
<P>
This function works if the base ring is either a field or equal to the
ring of integers. In these two cases slightly different objects are returned.
<P>
If the base ring is a field then four values are returned:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A structure constant algebra K isomorphic to the quotient Q;
<DT>(b)</DT><DD>A sequence G comprising sequences of integers;
<DT>(c)</DT><DD>A sequence B of elements of the free Lie algebra L;
<DT>(d)</DT><DD>A map f : B x B -&gt; L.
<P>
</DL>
The sequence B maps to a basis of the quotient algebra, so it is a 
basis of a complement of the ideal I in the free Lie algebra L. 
The elements of B are in one-to-one correspondence with the basis 
elements of K.
<P>
If all the relations of R are homogeneous (i.e., if they are linear 
combinations of elements of the same degree), then Q is graded. 
The sequence G contains information about the grading. It consists 
of sequences of length two. The first element of each subsequence is 
the degree of a homogeneous subspace H, while the second element
is the dimension of H. The basis elements of K are ordered with 
respect to increasing degree. So from G it is straightforward to 
read off the degree of each basis element. If the relations are not 
homogeneous then the sequence G is empty.
Finally, f is a map that takes two elements from B as arguments, 
and returns their product (in L) modulo the ideal I.
The algorithm used is described in <A  HREF = "text1129.htm#bib_wdg-lie-alg">[dG00]</A>, Para 7.4.
<P>
Secondly, in the case in which the base ring is the ring of integers, 
four values are returned:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A structure constant algebra K isomorphic to the quotient Q;
<DT>(b)</DT><DD>A sequence G comprising sequences of integers;
<DT>(c)</DT><DD>A sequence B that is always empty;
<DT>(d)</DT><DD>A map f : K -&gt; L.
<P>
</DL>
Here the structure constant algebra is defined over the ring of integers,
so it may have torsion. The sequence G is nonempty only if the input
relations are homogeneous in which case it contains the dimensions of 
the homogeneous components.  The function f is a map
that takes an element u of K and returns an element of the free algebra
L that maps to u under the projection map (from the free algebra to the
quotient).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12689">Example <TT>AlgLie_LieAlgebra (H106E6)</TT></A></H3>
In this example we compute the subalgebra K of E<sub>7</sub> spanned by the
positive root spaces.
<P>
<P>
<PRE>
&gt; L&lt;x7,x6,x5,x4,x3,x2,x1&gt;:= FreeLieAlgebra(RationalField(), 7);
&gt; pp:= { [1,3], [3,4], [2,4], [4,5], [5,6], [6,7] };
&gt; R:= [ ];
&gt; g:= [ L.i : i in [1..7] ];
&gt; for i in [1..7] do
&gt;     for j in [i+1..7] do
&gt;         if [i,j] in pp then
&gt;            a:= (g[i],(g[i],g[j]));
&gt;            Append( ~R, a );
&gt;            Append( ~R, (g[j],(g[j],g[i])) );
&gt;         else
&gt;            Append( ~R, (g[i],g[j]) );
&gt;         end if;
&gt;     end for;
&gt; end for;
&gt; R;
[
    -(x6, x7), -(x7, (x5, x7)), (x5, (x5, x7)), -(x4, x7),
    -(x3, x7), -(x2, x7), -(x1, x7), -(x5, x6), -(x6, (x4, x6)),
    (x4, (x4, x6)), -(x3, x6), -(x2, x6), -(x1, x6), -(x5, (x4, x5)),
    (x4, (x4, x5)), -(x3, x5), -(x2, x5), -(x1, x5), -(x4, (x3, x4)),
    (x3, (x3, x4)), -(x2, x4), -(x1, x4), -(x3, (x2, x3)), (x2, (x2, x3)),
    -(x1, x3), -(x2, (x1, x2)), (x1, (x1, x2))
]
&gt; time K, G, B, f := LieAlgebra(R);
Time: 0.280
&gt; K;
Lie Algebra of dimension 63 with base ring Rational Field
&gt; #B;
63
&gt; B[63];
(x7, (x5, (x4, (x3, (x2, (x1, (x6, (x4, (x3, (x2, (x5, (x4,
    (x3, (x6, (x4, (x5, x7))))))))))))))))
</PRE>
<HR>
<H3><A NAME = "12690">Example <TT>AlgLie_LieRing (H106E7)</TT></A></H3>
In this example we construct a finitely presented Lie ring (i.e., Lie 
algebra over the integers).
<P>
<P>
<PRE>
&gt; L&lt;y,x&gt;:= FreeLieAlgebra( Integers(), 2 );
&gt; R:= [ x*(x*(x*y))-2*x*y, 2*y*(x*(x*y)), 3*y*(y*(x*y))-x*(x*y),
&gt;  x*(y*(x*(y*(x*y)))) ];
&gt; K,g,b,f:= LieAlgebra( R );
&gt; K;
Lie Algebra of dimension 8 with base ring Integer Ring
Column moduli: [2, 2, 2, 8, 8, 8, 0, 0]
&gt; f(K.4);
(y, (x, y))
&gt; LowerCentralSeries( K );
[
    Lie Algebra of dimension 8 with base ring Integer Ring
    Column moduli: [2, 2, 2, 8, 8, 8, 0, 0],
    Lie Algebra of dimension 6 with base ring Integer Ring
    Column moduli: [2, 2, 2, 8, 8, 8],
    Lie Algebra of dimension 6 with base ring Integer Ring
    Column moduli: [2, 2, 2, 4, 8, 8],
    Lie Algebra of dimension 6 with base ring Integer Ring
    Column moduli: [2, 2, 2, 4, 4, 8],
    Lie Algebra of dimension 6 with base ring Integer Ring
    Column moduli: [2, 2, 2, 4, 4, 4],
    Lie Algebra of dimension 5 with base ring Integer Ring
    Column moduli: [2, 2, 2, 4, 4],
    Lie Algebra of dimension 4 with base ring Integer Ring
    Column moduli: [2, 2, 2, 4],
    Lie Algebra of dimension 3 with base ring Integer Ring
    Column moduli: [2, 2, 2],
    Lie Algebra of dimension 2 with base ring Integer Ring
    Column moduli: [2, 2],
    Lie Algebra of dimension 1 with base ring Integer Ring
    Column moduli: [2],
    Lie Algebra of dimension 0 with base ring Integer Ring
]
</PRE>
<HR>
<H5><A NAME = "12691">quo&lt;L | R&gt; : AlgFPLie, [ AlgFPLieElt ] -&gt; AlgLie, Map</A></H5>
<H5>quo&lt;L | R&gt; : AlgFPLie, { AlgFPLieElt } -&gt; AlgLie, Map</H5>
<BLOCKQUOTE>
This function is similar to the function <A  HREF = "text1133.htm#FPL:LieAlgebra">LieAlgebra</A> in that
it constructs a structure constant Lie algebra K isomorphic to the 
quotient L/I, where I is the ideal of L generated by the elements
(relations) of the sequence R. In addition to K, an invertible map
from L to K is returned.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12692">Example <TT>AlgLie_QuoAlgFPLie (H106E8)</TT></A></H3>
In this example we demonstrate the use of the quotient constructor
for finitely presented Lie algebras.
<P>
<P>
<PRE>
&gt; L&lt;x,y&gt; := FreeLieAlgebra(Rationals(), 2);
&gt; R := [ x*(x*y)-2*x, y*(y*x)-2*y ];
&gt; K, phi := quo&lt;L | R&gt;;
&gt; K;
Lie Algebra of dimension 3 with base ring Rational Field
&gt; SemisimpleType(K);
A1 
&gt; [ b @@ phi : b in Basis(K) ];
[
   y,
   x,
   (y, x)
]
&gt; phi(x*y);
( 0  0 -1)
</PRE>
<HR>
<H5><A NAME = "12693">NilpotentQuotient(R, d) : [ AlgFPLieElt ], RngIntElt -&gt; AlgLie, SeqEnum, SeqEnum, UserProgram</A></H5>
<H5>NilpotentQuotient(R, d) : { AlgFPLieElt, RngIntElt } -&gt; AlgLie, SeqEnum, SeqEnum, UserProgram</H5>
<BLOCKQUOTE>
Given a set or sequence R of elements of a free Lie algebra L, let
I be the ideal of L generated by the elements of R. Let d be a
positive integer or <TT>Infinity()</TT>. 
This function constructs the class d nilpotent 
quotient of the Lie algebra L/I, a finite dimensional algebra. The
function returns the same values as <A  HREF = "text1133.htm#FPL:LieAlgebra">LieAlgebra</A>.
<P>
This function is similar to the function <A  HREF = "text1133.htm#FPL:LieAlgebra">LieAlgebra</A> except 
that the quotient is constructed in the free nilpotent Lie algebra of 
class d.  All elements of degree strictly larger than <TT>d</TT> will 
be added to the ideal, so the quotient will be finite-dimensional and 
nilpotent of class at most <TT>d</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12694">Example <TT>AlgLie_NilpotentQuotient (H106E9)</TT></A></H3>
In this example, we compute a nilpotent quotient.
<P>
<P>
<PRE>
&gt; L&lt;y,x&gt; := FreeLieAlgebra(Rationals(), 2);
&gt; R := [(x, (x, (x, y))) - (y, (y, (x, y)))];
&gt; time K, G, B, f := NilpotentQuotient(R, 10);
Time: 0.040
&gt; K;
Lie Algebra of dimension 109 with base ring Rational Field
&gt; #B;
109
&gt; B[100];
(y, (x, (x, (y, (x, (y, (x, (x, (x, y)))))))))
&gt; G;
[
    [ 1, 2 ],
    [ 2, 1 ],
    [ 3, 2 ],
    [ 4, 2 ],
    [ 5, 4 ],
    [ 6, 5 ],
    [ 7, 10 ],
    [ 8, 15 ],
    [ 9, 26 ],
    [ 10, 42 ]
]
&gt; f(B[3], B[13]);
-(y, (x, (x, (x, (x, (y, (x, y))))))) + (x, (y, (x, (x, (x, (y, (x, y)))))))
</PRE>
<HR>
<H4><A NAME = "12695">Homomorphisms of the Free Lie Algebra</A></H4>



<H5><A NAME = "12696">hom&lt;L -&gt; M | Q&gt; : AlgFPLie, AlgFPLie, [ AlgFPLieElt ] -&gt; Map</A></H5>
<H5>hom&lt;L -&gt; M | Q&gt; : AlgFPLie, TupMod, [ TupModElt ] -&gt; Map</H5>
<BLOCKQUOTE>
Given a free Lie algebra L of dimension n over R and either
a Lie algebra M over R or a module M over R,
construct the homomorphism from L to M specified by Q.
The sequence Q must have length <A  HREF = "text1133.htm#AlgFPLieRank">Rank</A><TT>(L)</TT> 
and be of the form [m<sub>1</sub>, ..., m<sub>n</sub>] (m<sub>i</sub> &isin;M) indicating that 
the i-th generator of L maps to m<sub>i</sub>.
<P>
<P>
Note that this is in general only a module homomorphism, and it is not checked
whether it is an algebra homomorphism.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12697">Example <TT>AlgLie_AlgFPLHom (H106E10)</TT></A></H3>
We construct the Lie algebra of type A<sub>1</sub> as quotient of a free Lie algebra,
using homomorphisms between a free Lie algebra and a structure constant Lie algebra.
First, we construct the free Lie algebra and a structure constant Lie algebra of 
type A<sub>1</sub>. The elements of a Chevalley basis are obtained by a call to <A  HREF = "text1138.htm#ChevalleyBasis">ChevalleyBasis</A>.
<P>
<P>
<PRE>
&gt; L&lt;e,f&gt; := FreeLieAlgebra(Rationals(), 2);
&gt; M := LieAlgebra("A1", Rationals() : Isogeny := "SC");
&gt; pos, neg, cart := ChevalleyBasis(M);
&gt; pos, neg, cart;
[ (0 0 1) ]
[ (1 0 0) ]
[ (0 1 0) ]
</PRE>
Next, we construct a homomorphism from L to M that sends e to the 
positive root element, and f to the negative root element. We construct 
a map from M to L that sends the positive root to e, the negative
root to f, and the Cartan element to -(e, f).
<P>
<P>
<PRE>
&gt; phi := hom&lt;L -&gt; M | [ pos[1], neg[1] ]&gt;;
&gt; phi(e), phi(f), phi(e*f);
(0 0 1) (1 0 0) ( 0 -1  0)
&gt; imgs := [ L | f, (f,e), e];
&gt; psi := map&lt;M -&gt; L | x :-&gt; &amp;+[ x[i]*imgs[i] : i in [1..3] ]&gt;;
&gt; psi(cart[1]); 
-(f, e)
&gt; psi(phi((e,(e,f))));
-2*e
&gt; assert forall{b : b in Basis(M) | phi(psi(b)) eq b };
</PRE>
Finally, we create a sequence of relations showing that the maps <TT>phi</TT> 
and <TT>psi</TT> are each others inverses for a small set of elements of L. 
We then compute the quotient of the free Lie algebra with respect to these 
relations.
<P>
<P>
<PRE>
&gt; R := { x - psi(phi(x)) : x in {e, f, (e,f), (e,(e,f)), (f,(f,e))} };
&gt; L2 := quo&lt;L | R&gt;;
&gt; L2;
Lie Algebra of dimension 3 with base ring Rational Field
&gt; SemisimpleType(L2);
A1 
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1134.htm">[Next]</A><A  HREF = "text1132.htm">[Prev]</A> <A  HREF = "text1134.htm">[Right]</A> <A  HREF = "text1132.htm">[Left]</A> <A  HREF = "text1130.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>