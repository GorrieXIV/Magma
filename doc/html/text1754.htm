<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Element Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1755.htm">[Next]</A><A  HREF = "text1753.htm">[Prev]</A> <A  HREF = "text1755.htm">[Right]</A> <A  HREF = "text1753.htm">[Left]</A> <A  HREF = "text1750.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19412">Element Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1754.htm#19413">Parent and Category</A>
<LI> <A  HREF = "text1754.htm#19414">Print Styles</A>
<LI> <A  HREF = "text1754.htm#19417">Additive Arithmetic Operators</A>
<LI> <A  HREF = "text1754.htm#19418">Multiplication</A>
<LI> <A  HREF = "text1754.htm#19421">Plethysm</A>
<LI> <A  HREF = "text1754.htm#19424">Boolean Operators</A>
<LI> <A  HREF = "text1754.htm#19427">Accessing Elements</A>
<LI> <A  HREF = "text1754.htm#19433">Multivariate Polynomials</A>
<LI> <A  HREF = "text1754.htm#19437">Frobenius Homomorphism</A>
<LI> <A  HREF = "text1754.htm#19440">Inner Product</A>
<LI> <A  HREF = "text1754.htm#19443">Combinatorial Objects</A>
<LI> <A  HREF = "text1754.htm#19445">Symmetric Group Character</A>
<LI> <A  HREF = "text1754.htm#19448">Restrictions</A>
</UL>
<H4><A NAME = "19413">Parent and Category</A></H4>

<P>
<P>
<P>
The category for elements in algebras of symmetric functions
is
<TT>AlgSymElt</TT>.


<H5>Parent(f) : AlgSymElt -&gt; AlgSym</H5> 

<H5>Category(f) : AlgSymElt -&gt; Cat</H5><P>
 




<H4><A NAME = "19414">Print Styles</A></H4>

<P>
<P>
<P>
By default, elements are printed using a lexicographical ordering on the
partitions indexing the basis elements. For partitions of the same weight w
this ordering is the reverse of that in <TT>Partitions(w)</TT>. More generally,
basis elements indexed by partitions with smaller entries print first 
(see <A  HREF = "text101.htm#820">Testing Order Relations</A>).
It is possible to rearrange the linear combination
of basis elements so that the basis elements indexed by the longest partition
print first and also so that the basis elements indexed by the partition
with greatest maximal part (first entry) print first.


<H5><A NAME = "19415">A ` PrintStyle : AlgSym -&gt; MonStgElt</A></H5>
<BLOCKQUOTE>
Retrieve or set the style in which elements of the algebra A will print. The default
is the lexicographical ordering described above, <TT>"Lex"</TT>. Other options
are <TT>"Length"</TT> and <TT>"MaximalPart"</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19416">Example <TT>AlgSym_print-style (H152E8)</TT></A></H3>
We demonstrate the setting of the <TT>PrintStyle</TT> and the corresponding
printing of elements.
<P>
<P>
<PRE>
&gt; M := SFAMonomial(Rationals());
&gt; M`PrintStyle;
Lex
&gt; P := Partitions(3);
&gt; P;
[
    [ 3 ],
    [ 2, 1 ],
    [ 1, 1, 1 ]
]
&gt; f := &amp;+[M.p : p in P];
&gt; f;
M.[1,1,1] + M.[2,1] + M.[3]
&gt; M`PrintStyle := "Length";
&gt; f;
M.[3] + M.[2,1] + M.[1,1,1]
&gt; M`PrintStyle := "MaximalPart";
&gt; f;
M.[1,1,1] + M.[2,1] + M.[3]
</PRE>
<HR>
<H4><A NAME = "19417">Additive Arithmetic Operators</A></H4>

<P>
<P>
<P>
The usual unary and binary ring element operations are available
for symmetric functions. 
It is possible to combine elements of different algebras (so long as
the coefficient rings are compatible) in these operations.
Where the elements are written with respect to different bases, the
result will be written with respect to the basis of the second operand.


<H5>+ a : AlgSymElt -&gt; AlgSymElt</H5> 

<H5>- a : AlgSymElt -&gt; AlgSymElt</H5>
<P>

<H5>a + b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</H5> 

<H5>a - b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</H5> 
<P>

<H5>a +:= b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</H5> 

<H5>a -:= b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</H5><P>
 


<H4><A NAME = "19418">Multiplication</A></H4>

<P>
<P>
<P>
Where the elements being multiplied are expressed with respect to different
bases, the result will again be expressed with respect to the basis 
of the second operand. The algorithm used for multiplication is
dependent on the bases with respect to which the elements are expressed.


<H5>a ^ k : AlgSymElt, RngIntElt -&gt; AlgSymElt</H5><P>


<H5><A NAME = "19419">a * b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</A></H5>
<H5>a *:= b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</H5>
<BLOCKQUOTE>
The product of the symmetric functions a and b.
<P>
If b is expressed with respect to a Schur basis and a is expressed
with respect to a power sum, elementary or monomial basis then the algorithm
based on Muirs rule <A  HREF = "text1749.htm#bib_Mu">[Mui60]</A> is used. If a is expressed with respect to 
a homogeneous basis the algorithm based on the Pieri rule <A  HREF = "text1749.htm#bib_MacD">[Mac95]</A> is used
and if a is also expressed with respect to a Schur basis then the method of
Schubert polynomials <A  HREF = "text1749.htm#bib_LasSch">[LS85]</A> is used.
<P>
Special algorithms are also used if b is expressed with respect to a 
monomial basis and a is expressed with
respect to a homogeneous, elementary or monomial basis.
<P>
When both a and b have a homogeneous, elementary or power sum basis,
the multiplication of basis elements involves the merging of the parts of 
the partitions.
This follows from the definition of the basis elements 
f<sub>&lambda;</sub> = &prod;<sub>i</sub> f<sub>&lambda;<sub>i</sub></sub> where f<sub>&lambda;</sub> is a 
homogeneous, elementary or
power sum basis element.
<P>
Otherwise a is coerced into the parent of b before the elements are 
multiplied.
<P>
The degree of the result is the sum of the degrees of both
the operands.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19420">Example <TT>AlgSym_mult (H152E9)</TT></A></H3>
<P>
<P>
<PRE>
&gt; Q := Rationals();
&gt; s := SFASchur(Q);
&gt; m := SFAMonomial(Q);
&gt; m.[3]*s.[2,1];
s.[2,1,1,1,1] + s.[5,1] - s.[2,2,2] - s.[3,3]
</PRE>
To illustrate the merging of the partitions : 
<P>
<P>
<PRE>
&gt; E := SFAElementary(Q);
&gt; E.4*E.3*E.1;  
E.[4,3,1]
</PRE>
This is the definition of e<sub>[4, 3, 1]</sub>.
<HR>
<H4><A NAME = "19421">Plethysm</A></H4>

<P>
<P>
<P>
Plethysm is also referred to as composition of symmetric functions.
<P>
<P>


<P>
<H5><A NAME = "19422">a ~ b : AlgSymElt, AlgSymElt -&gt; AlgSymElt</A></H5>
<BLOCKQUOTE>
This operator computes the plethysm or composition 
of the symmetric functions a and b.
The result is given with respect to the basis of the second operand.
<P>
The degree of the result is the product of the degrees of 
operands which may be very large.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19423">Example <TT>AlgSym_pleth (H152E10)</TT></A></H3>
<P>
<P>
<PRE>
&gt; Q := Rationals();
&gt; s := SFASchur(Q);
&gt; m := SFAMonomial(Q);
&gt; m.[3]~s.[2,1];
s.[4,1,1,1,1,1] - s.[3,2,1,1,1,1] - s.[5,1,1,1,1] + s.[2,2,2,1,1,1] + 
s.[3,3,1,1,1] + s.[6,1,1,1] - s.[2,2,2,2,1] - s.[3,3,2,1] - s.[6,2,1] + 
s.[4,4,1] + s.[3,2,2,2] + s.[5,2,2] - s.[4,3,2] + 2*s.[3,3,3] + s.[6,3] - 
s.[5,4]
</PRE>
<HR>
<H4><A NAME = "19424">Boolean Operators</A></H4>

<P>
<P>
<P>
<P>


<H5>IsZero(s) : AlgSymElt -&gt; BoolElt</H5>

<H5>IsOne(s) : AlgSymElt -&gt; BoolElt</H5> 

<H5>IsMinusOne(s) : AlgSymElt -&gt; BoolElt</H5><P>


<H5><A NAME = "19425">IsHomogeneous(s): AlgSymElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the partitions indexing the basis elements
present in the symmetric function s are all of the same weight. This implies that each term
has the same degree so is the same as the polynomial expansion of s
being a homogeneous polynomial.
</BLOCKQUOTE>
<H5><A NAME = "19426">s eq t : AlgSymElt, AlgSymElt -&gt; BoolElt</A></H5>
<H5>s ne t : AlgSymElt, AlgSymElt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the symmetric functions s and t are (not) the same.
<P>
<P>
</BLOCKQUOTE>
<H4><A NAME = "19427">Accessing Elements</A></H4>

<P>
<P>
<P>
<P>


<H5><A NAME = "19428">Coefficient(s, p) : AlgSymElt, SeqEnum -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Given a symmetric function s return the coefficient of the basis 
element A<sub>p</sub>, where A is the parent of s and p is a sequence
defining a partition. The coefficient may be zero.
</BLOCKQUOTE>
<H5><A NAME = "19429">Support(s) : AlgSymElt -&gt; [SeqEnum], [RngElt]</A></H5>
<BLOCKQUOTE>
Return two parallel sequences of the partitions indexing the basis elements
and the coefficients of those basis elements in the symmetric function s,
which is a linear combination of basis elements.
</BLOCKQUOTE>
<H5><A NAME = "19430">Length(s) : AlgSymElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a symmetric function s, return the length of s, i.e.,
the number of basis elements having non zero coefficients in s, 
with respect to the current basis.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19431">Example <TT>AlgSym_support (H152E11)</TT></A></H3>
We pull apart an element and show that we can put it back together again. 
<P>
<P>
<PRE>
&gt; H := SFAHomogeneous(Rationals());
&gt; P := Partitions(4);
&gt; f := &amp;+[Random(1, 5)*H.p : p in P];
&gt; f;
H.[1,1,1,1] + 4*H.[2,1,1] + 4*H.[2,2] + 5*H.[3,1] + 5*H.[4]
&gt; s, e := Support(f);
&gt; s, e;
[
    [ 1, 1, 1, 1 ],
    [ 2, 1, 1 ],
    [ 2, 2 ],
    [ 3, 1 ],
    [ 4 ]
]
[ 1, 4, 4, 5, 5 ]
&gt; f eq &amp;+[e[i]*H.s[i] : i in [1 .. Length(f)]];
true
</PRE>
<HR>
<H5><A NAME = "19432">Degree(s) : AlgSymElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a symmetric function s, return the degree of s, i.e.,
the maximal degree of the basis elements having non zero coefficients
in s, which is the maximal weight of the partitions indexing those basis
elements.
<P>
<P>
</BLOCKQUOTE>
<H4><A NAME = "19433">Multivariate Polynomials</A></H4>

<P>
<P>
<P>
A symmetric function may be seen as a polynomial in any number of 
variables.


<H5><A NAME = "19434">P ! s : RngMPol, AlgSymElt -&gt; RngMPolElt</A></H5>
<BLOCKQUOTE>
Return the polynomial expansion of the symmetric function s in the polynomial ring P.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19435">Example <TT>AlgSym_symmetric polynomials and symmetric functions (H152E12)</TT></A></H3>
<P>
<P>
<PRE>
&gt; S := SFASchur(GF(7));
&gt; s := S.[3,1];
</PRE>
Now we compute the multivariate polynomial we get by restricting to
5 variables.
<P>
<P>
<PRE>
&gt; G&lt;e1, e2, e3, e4, e5&gt; := PolynomialRing(GF(7), 5);
&gt; p := G!s;
&gt; p;
e1^3*e2 + e1^3*e3 + e1^3*e4 + e1^3*e5 + e1^2*e2^2 + 2*e1^2*e2*e3 + 2*e1^2*e2*e4
    + 2*e1^2*e2*e5 + e1^2*e3^2 + 2*e1^2*e3*e4 + 2*e1^2*e3*e5 + e1^2*e4^2 +
    2*e1^2*e4*e5 + e1^2*e5^2 + e1*e2^3 + 2*e1*e2^2*e3 + 2*e1*e2^2*e4 +
    2*e1*e2^2*e5 + 2*e1*e2*e3^2 + 3*e1*e2*e3*e4 + 3*e1*e2*e3*e5 + 2*e1*e2*e4^2 +
    3*e1*e2*e4*e5 + 2*e1*e2*e5^2 + e1*e3^3 + 2*e1*e3^2*e4 + 2*e1*e3^2*e5 +
    2*e1*e3*e4^2 + 3*e1*e3*e4*e5 + 2*e1*e3*e5^2 + e1*e4^3 + 2*e1*e4^2*e5 +
    2*e1*e4*e5^2 + e1*e5^3 + e2^3*e3 + e2^3*e4 + e2^3*e5 + e2^2*e3^2 +
    2*e2^2*e3*e4 + 2*e2^2*e3*e5 + e2^2*e4^2 + 2*e2^2*e4*e5 + e2^2*e5^2 + e2*e3^3
    + 2*e2*e3^2*e4 + 2*e2*e3^2*e5 + 2*e2*e3*e4^2 + 3*e2*e3*e4*e5 + 2*e2*e3*e5^2
    + e2*e4^3 + 2*e2*e4^2*e5 + 2*e2*e4*e5^2 + e2*e5^3 + e3^3*e4 + e3^3*e5 +
    e3^2*e4^2 + 2*e3^2*e4*e5 + e3^2*e5^2 + e3*e4^3 + 2*e3*e4^2*e5 + 2*e3*e4*e5^2
    + e3*e5^3 + e4^3*e5 + e4^2*e5^2 + e4*e5^3
</PRE>
To check the polynomial is actually symmetric, we can 
use the Magma intrinsic <TT>IsSymmetric</TT>, which also
computes an expansion as a sum of elementary symmetric polynomials.
<P>
<P>
<PRE>
&gt; IsSymmetric(p,G);
true e1^2*e2 + 6*e1*e3 + 6*e2^2 + e4
</PRE>
Which is identical to the result of
<P>
<P>
<PRE>
&gt; E := SFAElementary(GF(7));
&gt; E!s;
E.[2,1,1] + 6*E.[2,2] + 6*E.[3,1] + E.[4]
</PRE>
<HR>
<H3><A NAME = "19436">Example <TT>AlgSym_ChangeOfAlphabet (H152E13)</TT></A></H3>
These conversions may be used to change the alphabet of a symmetric function.
For example, if we substitute the variable x<sub>i</sub> by x<sub>i</sub> + 1, the
result is again a symmetric function, however we use polynomials to 
do the evaluation. 
<P>
<P>
<P>
<PRE>
&gt; S := SFASchur(Rationals());
&gt; R&lt;a, b, c, d, e&gt; := PolynomialRing(Rationals(), 5);
&gt; p := Polynomial(S.[3,2], R);
&gt; q := Evaluate(p, [a+1, b+1, c+1, d+1, e+1]);
&gt; x, y := IsCoercible(S, q);
&gt; y;
175 + 175*S.[1] + 70*S.[1,1] + 70*S.[2] + 35*S.[2,1] + 7*S.[2,2] + 10*S.[3] + 
5*S.[3,1] + S.[3,2]
</PRE>
<HR>
<H4><A NAME = "19437">Frobenius Homomorphism</A></H4>

<P>
<P>
<P>
There is an automorphism which maps the elementary symmetric function to
the homogeneous symmetric function.


<P>
<P>
<H5><A NAME = "19438">Frobenius(s) : AlgSymElt -&gt; AlgSymElt</A></H5>
<BLOCKQUOTE>
Given any symmetric function s, compute the image of s under 
the Frobenius automorphism. The image will have the same
parent as s.
When the power sum symmetric functions
are involved, it may be necessary to work with a coefficient ring which allows
division by an integer.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19439">Example <TT>AlgSym_Frobenius automorphism (H152E14)</TT></A></H3>
It is known that the Frobenius automorphism on the Schur functions acts just
by conjugating the indexing partitions.
<P>
<P>
<PRE>
&gt; S := SFASchur(Integers());
&gt; E := SFAElementary(Integers());
&gt; h := S!E.[3,3,3];
&gt; h;
S.[1,1,1,1,1,1,1,1,1] + 2*S.[2,1,1,1,1,1,1,1] + S.[3,1,1,1,1,1,1] +
3*S.[2,2,1,1,1,1,1] + 2*S.[3,2,1,1,1,1] + 4*S.[2,2,2,1,1,1] + S.[3,3,1,1,1] +
3*S.[3,2,2,1,1] + 2*S.[2,2,2,2,1] + 2*S.[3,3,2,1] + S.[3,2,2,2] + S.[3,3,3]
</PRE>
Now apply the Frobenius automorphism.
<P>
<P>
<PRE>
&gt; f:=Frobenius(h);
&gt; f;
S.[3,3,3] + 2*S.[4,3,2] + S.[4,4,1] + S.[5,2,2] + 3*S.[5,3,1] + 2*S.[5,4] + 
2*S.[6,2,1] + 4*S.[6,3] + S.[7,1,1] + 3*S.[7,2] + 2*S.[8,1] + S.[9]
</PRE>
To check whether the coefficient of the basis element 
indexed by a partition in one element is the same as the coefficient 
of the basis element indexed by the conjugate partition in the other :
<P>
<P>
<PRE>
&gt; p:=Partitions(f);
&gt; for pp in p do
&gt;    if Coefficient(h, ConjugatePartition(pp)) ne Coefficient(f, pp) then
&gt;       print pp;
&gt;    end if;
&gt; end for;
</PRE>
<HR>
<H4><A NAME = "19440">Inner Product</A></H4>

<P>
<P>
<P>
An inner product on &Lambda; is defined by
<P>
&lt; m<sub>&lambda;</sub>, h<sub>&lambda; '</sub> &gt; = &delta;<sub>&lambda;, &lambda; '</sub>.
<P>
This definition ensures that the bases (m<sub>&lambda;</sub>) and (h<sub>&lambda;</sub>) are 
dual to each other. This is the inner product used by Magma.


<H5><A NAME = "19441">InnerProduct(a,b): AlgSymElt, AlgSymElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
Computes the inner product of the symmetric functions a and b. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19442">Example <TT>AlgSym_Inner-Product (H152E15)</TT></A></H3>
The inner product of a elementary symmetric function indexed by a partition
and the homogeneous symmetric function indexed by the conjugate partition is 1.
(This allows the computation of irreducible representations of the symmetric group.)
To check this with Magma, we do the following:
<P>
<P>
<P>
<PRE>
&gt; E := SFAElementary(Rationals());
&gt; H := SFAHomogeneous(Rationals());
&gt; p:=RandomPartition(45);
&gt; pc:=ConjugatePartition(p);
&gt; InnerProduct(E.p,H.pc);
1
</PRE>
As it should be the result is 1.
<HR>
<H4><A NAME = "19443">Combinatorial Objects</A></H4>

<P>
<P>
<P>
The Schur function is the generating function of standard tableaux.
Therefore, it is possible to get the corresponding tableaux. 


<H5><A NAME = "19444">Tableaux(sf, m): AlgSymElt, RngIntElt -&gt; SetMulti</A></H5>
<BLOCKQUOTE>
Given a Schur function sf over the integers with positive coefficients, 
return the multiset of the
tableaux, with maximal entry m, for which sf is the generating function.
</BLOCKQUOTE>
<H4><A NAME = "19445">Symmetric Group Character</A></H4>

<P>
<P>
<P>
A Schur function indexed by a single partition, i.e. a basis element,
corresponds to an irreducible character of the symmetric 
group.  


<H5><A NAME = "19446">SymmetricCharacter(sf): AlgSymElt -&gt; AlgChtrElt</A></H5>
<BLOCKQUOTE>
Given an element sf of an algebra of symmetric functions return
a linear combination of irreducible characters of the symmetric group,
whose coefficients are the coefficients of sf with respect to the Schur
function basis.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19447">Example <TT>AlgSym_symmetric-polynomials-and-symmetric-functions (H152E16)</TT></A></H3>
We look at a result in the representation theory of the symmetric group.
There is exactly one irreducible character contained in both the induced 
character from the identity character of a Young subgroup indexed by the 
partition I and the induced character from the alternating character of a 
Young subgroup indexed by the partition J, conjugate to I.
As the induced character of the identity character of a Young subgroup
corresponds to the homogeneous symmetric function h<sub>I</sub> and the
induced character of the alternating character corresponds to
the elementary symmetric function e<sub>J</sub>, we can verify this using
the following routine:
<P>
<P>
<PRE>
&gt; H := SFAHomogeneous(Rationals());
&gt; E := SFAElementary(Rationals());
&gt; p := Partitions(7);             
&gt; for I in p do
&gt;     a := SymmetricCharacter(H.I);
&gt;     J := ConjugatePartition(I);
&gt;     b := SymmetricCharacter(E.J);
&gt;     i := InnerProduct(a,b);
&gt;     if i ne 1 then print i; end if;
&gt; end for;
</PRE>
And there should be no output.
<HR>
<H4><A NAME = "19448">Restrictions</A></H4>

<P>
<P>
<P>
It is possible to form symmetric functions 
whose support is a subset of the support of a given symmetric function, subject
to some restrictions.


<H5><A NAME = "19449">RestrictDegree(a, n): AlgSymElt, RngIntElt -&gt; AlgSymElt</A></H5>

<PRE>    Exact: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Return the symmetric function which is a linear combination of those basis 
elements of the symmetric function a with degree n. This is the restriction
of a into the submodule &Lambda;<sup>n</sup>. If <TT>Exact</TT> is <TT>false</TT> then
the basis elements included will have degree &le;n. This is the restriction
of a into bigcup<sub>k &le;n</sub> &Lambda;<sup>k</sup>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "19450">RestrictPartitionLength(a, n): AlgSymElt, RngIntElt -&gt; AlgSymElt</A></H5>

<PRE>    Exact: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Return the symmetric function which is a linear combination of those basis
elements of the symmetric function a whose indexing partitions are 
of length n. If <TT>Exact</TT>
is <TT>false</TT>, then the indexing partitions will be of length &le;n.
</BLOCKQUOTE>
<H5><A NAME = "19451">RestrictParts(a, n): AlgSymElt, RngIntElt -&gt; AlgSymElt</A></H5>

<PRE>    Exact: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Return the symmetric function which is a linear combination of those basis 
elements of the symmetric function a whose indexing partitions have 
maximal part n. If <TT>Exact</TT> is <TT>false</TT>, then the indexing partitions will
have maximal part &le;n.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1755.htm">[Next]</A><A  HREF = "text1753.htm">[Prev]</A> <A  HREF = "text1755.htm">[Right]</A> <A  HREF = "text1753.htm">[Left]</A> <A  HREF = "text1750.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>