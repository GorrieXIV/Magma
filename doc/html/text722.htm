<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Transfer Between Group Categories</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text723.htm">[Next]</A><A  HREF = "text721.htm">[Prev]</A> <A  HREF = "text723.htm">[Right]</A> <A  HREF = "text721.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8256">Transfer Between Group Categories</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text722.htm#8257">Transfer to GrpPC</A>
<LI> <A  HREF = "text722.htm#8262">Transfer from GrpPC</A>
</UL>
<H4><A NAME = "8257">Transfer to GrpPC</A></H4>

<P>
<P>
The <TT>PolycyclicGroup</TT>-constructor allows complete flexibility
in defining a pc-group.  However, it is often more convenient to
have Magma compute a pc-presentation based on some other description
of the group.  The <TT>PCGroup</TT> function will produce a
pc-presentation for a finite group in various categories such as
<A  HREF = "text630.htm#GrpPerm"> <TT>GrpPerm</TT></A> and <A  HREF = "text654.htm#GrpMat"> <TT>GrpMat</TT></A>.  Converting from a <A  HREF = "text809.htm#GrpFP"> <TT>GrpFP</TT></A>
group is trickier, since the original group need not be finite.
There are two functions provided to produce pc-presentations for
certain quotients of finitely-presented groups.  The <TT>pQuotient</TT>
function constructs a pc-presentation for the largest p-group
quotient having specified lower exponent-p class.  Similarly,
<TT>SolubleQuotient</TT> will compute the largest soluble quotient
subject to certain restrictions.
Each of these functions also provides a homomorphism (isomorphism in the
case of <TT>PCGroup</TT>) from the original group to the new pc-group.
More information on each of
the two quotient functions can be found in Chapter <A  HREF = "text823.htm#9460">FINITELY PRESENTED GROUPS: ADVANCED</A>.


<H5><A NAME = "8258">PCGroup(G) : GrpPerm -&gt; GrpPC, Map</A></H5>
<H5>PCGroup(G) : GrpMat -&gt; GrpPC, Map</H5>
<H5>[Future release] PCGroup(G) : GrpFP -&gt; GrpPC</H5>
<BLOCKQUOTE>
A <TT>GrpPC</TT> representation of the group G and the isomorphism.
</BLOCKQUOTE>
<H5><A NAME = "8259">pQuotient(F, p, c : parameters ) : GrpFP, RngIntElt, RngIntElt -&gt; GrpPC, Map</A></H5>

<PRE>    Workspace: RngIntElt                Default: 1000000</PRE>

<PRE>    Metabelian: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    Exponent: RngIntElt                 Default: 0</PRE>

<PRE>    Print: RngIntElt                    Default: 0</PRE>
<BLOCKQUOTE>
Given a finitely presented group F, a prime p, and a positive
integer c, this function constructs a consistent power-conjugate
presentation for the largest p-quotient H of F having
lower exponent-p class at most c. If c is given as zero,
then the limit 127 is placed on the class.
The function returns both the p-quotient H defined by a pc-presentation
and the homomorphism from F to H.
</BLOCKQUOTE>
<H5><A NAME = "8260">SolubleQuotient(G) : Grp -&gt; GrpPC, Map</A></H5>
<H5>SolvableQuotient(G) : Grp -&gt; GrpPC, Map</H5>
<BLOCKQUOTE>
A <TT>GrpPC</TT> representation P of the largest solvable quotient of G and
the homomorphism &phi;: G -&gt; P.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8261">Example <TT>GrpPC_pcgroup (H68E33)</TT></A></H3>
We use <TT>PCGroup</TT> to produce a pc-presentation for
a matrix group.
<P>
<P>
<PRE>
&gt; GL := GeneralLinearGroup(4,GF(3));
&gt; S3 := Sylow(GL,3);
&gt; P := PCGroup(S3);
&gt; P;
GrpPC : P of order 729 = 3^6
PC-Relations:
    P.2^P.1 = P.2 * P.4^2,
    P.3^P.1 = P.3 * P.5^2,
    P.3^P.2 = P.3 * P.6^2,
    P.5^P.2 = P.4 * P.5,
    P.6^P.1 = P.4 * P.6
</PRE>
<HR>
<H4><A NAME = "8262">Transfer from GrpPC</A></H4>

<P>
<P>
Given a pc-group, it is straight-forward to convert it to
a <A  HREF = "text809.htm#GrpFP"> <TT>GrpFP</TT></A> or <A  HREF = "text832.htm#GrpGPC"> <TT>GrpGPC</TT></A> representation by
using the appropriate transfer function.  If one wishes
to have a permutation representation of the group, this
requires more cleverness.  The <TT>CosetAction</TT> function
can be used to compute the permutation representation of
a group on a subgroup.  If the subgroup is chosen to
have trivial core, then the permutation group obtained
will be isomorphic to the original group.


<H5><A NAME = "8263">AbelianGroup(G) : GrpPC -&gt; GrpAb, Map</A></H5>
<BLOCKQUOTE>
Given an abelian pc-group G, return a <TT>GrpAb</TT> group H
isomorphic to G and an isomorphism &phi;: G -&gt; H.
</BLOCKQUOTE>
<H5><A NAME = "8264">FPGroup(G) : GrpPC -&gt; GrpFP, Map</A></H5>
<BLOCKQUOTE>
A <A  HREF = "text809.htm#GrpFP"> <TT>GrpFP</TT></A> representation F of G and the isomorphism from G to F.
</BLOCKQUOTE>
<H5><A NAME = "8265">GPCGroup(G) : GrpPC -&gt; GrpGPC, Map</A></H5>
<BLOCKQUOTE>
A <A  HREF = "text832.htm#GrpGPC"> <TT>GrpGPC</TT></A> representation F of G and the isomorphism
from G to F.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8266">Example <TT>GrpPC_pc-to-perm (H68E34)</TT></A></H3>
Take one of the groups of order 2<sup>6</sup> * 3<sup>2</sup>.
<P>
<P>
<PRE>
&gt; G := SmallGroup(576, 4123);
&gt; G;
GrpPC : G of order 576 = 2^6 * 3^2
PC-Relations:
    G.1^2 = Id(G),
    G.2^2 = Id(G),
    G.3^2 = G.5,
    G.4^3 = Id(G),
    G.5^2 = G.7,
    G.6^2 = G.7,
    G.7^2 = Id(G),
    G.8^3 = Id(G),
    G.2^G.1 = G.2 * G.6,
    G.6^G.1 = G.6 * G.7,
    G.6^G.2 = G.6 * G.7,
    G.8^G.1 = G.8^2
</PRE>
Since G is small, we can search for a minimum degree
permutation presentation by brute force.  First we build
a set containing all the subgroups.
<P>
<P>
<PRE>
&gt; SL := Subgroups(G);
&gt; T := {X`subgroup: X in SL};
&gt; #T;
243
</PRE>
Then, we select those subgroups with trivial core, and
find one with the smallest index.
<P>
<P>
<PRE>
&gt; TrivCore := {H:H in T| #Core(G,H) eq 1};
&gt; mdeg := Min({Index(G,H):H in TrivCore});
&gt; Good := {H: H in TrivCore| Index(G,H) eq mdeg};
&gt; #Good;
3
&gt; H := Rep(Good);
</PRE>
We then use CosetAction to construct the permutation representation
on the cosets of H.
<P>
<P>
<PRE>
&gt; f,P,K := CosetAction(G,H);
&gt; #K;
1
&gt; IsPrimitive(P);
false
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text723.htm">[Next]</A><A  HREF = "text721.htm">[Prev]</A> <A  HREF = "text723.htm">[Right]</A> <A  HREF = "text721.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>