<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Operations on Forms</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text349.htm">[Next]</A><A  HREF = "text347.htm">[Prev]</A> <A  HREF = "text349.htm">[Right]</A> <A  HREF = "text347.htm">[Left]</A> <A  HREF = "text344.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "3315">Operations on Forms</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text348.htm#3316">Arithmetic</A>
<LI> <A  HREF = "text348.htm#3320">Matrix Action</A>
<LI> <A  HREF = "text348.htm#3322">Reduction</A>
<LI> <A  HREF = "text348.htm#3327">Attribute Access</A>
<LI> <A  HREF = "text348.htm#3330">Boolean Operations</A>
<LI> <A  HREF = "text348.htm#3336">Maps of Forms</A>
<LI> <A  HREF = "text348.htm#3340">Related Structures</A>
</UL>
<H4><A NAME = "3316">Arithmetic</A></H4>



<H5><A NAME = "3317">Conjugate(f) : QuadBinElt -&gt; QuadBinElt</A></H5>
<BLOCKQUOTE>
Given a form f = ax<sup>2</sup> + bxy + cy<sup>2</sup>, returns the conjugate form 
ax<sup>2</sup> - bxy + cy<sup>2</sup>.
</BLOCKQUOTE>
<H5><A NAME = "3318">f * g : QuadBinElt, QuadBinElt -&gt; QuadBinElt</A></H5>
<H5>Composition(f, g) : QuadBinElt, QuadBinElt -&gt; QuadBinElt</H5>

<PRE>    Al: MonStgElt                       Default: "Gauss"</PRE>

<PRE>    Reduction: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Returns the composition of two binary quadratic forms f and g.  
The operator <TT>`*'</TT> returns a reduced form equivalent to the product 
using a fast composition algorithm of Shanks.   
In contrast, by default <TT>Composition</TT> returns the true composition
in the group of forms, unless the parameter <TT>Reduction := true</TT>.
The function <TT>Composition</TT> takes a further parameter <TT>Al</TT> which 
specifies whether the algorithm of Gauss or Shanks, set to <TT>"Gauss"</TT> by 
default.
The algorithm of Shanks performs partial intermediate reductions, so it
is not allowed to select <TT>Al := "Shanks"</TT> and <TT>Reduction := false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "3319">f ^ n : QuadBinElt, RngIntElt -&gt; QuadBinElt</A></H5>
<H5>Power(f, n) : QuadBinElt, RngIntElt -&gt; QuadBinElt</H5>

<PRE>    Al: MonStgElt                       Default: "Gauss"</PRE>

<PRE>    Reduction: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Returns the n-th power of a form f.  The operator <TT>`^'</TT> returns 
a reduced representative, using the fast composition algorithm of Shanks.  
In contrast, by default <TT>Power</TT> returns the true composition 
in the group of forms, unless the parameter <TT>Reduction := true</TT>.
The function <TT>Power</TT> takes the further parameter <TT>Al</TT> which
specifies whether the algorithm of Gauss or Shanks is used, set to 
<TT>"Gauss"</TT> by default.  
The algorithm of Shanks performs partial intermediate reductions, so it
is not allowed to select <TT>Al := "Shanks"</TT> and <TT>Reduction := false</TT>.
</BLOCKQUOTE>
<H4><A NAME = "3320">Matrix Action</A></H4>

<P>
<P>
The right action of SL(2, Z) on the set of quadratic forms of discriminant D
is given by the rule
<P>
f(x, y) ((r s atop t u)) = f(rx + sy, tx + uy).


<H5><A NAME = "3321">f * M : QuadBinElt, GrpMatElt -&gt; QuadBinElt</A></H5>
<BLOCKQUOTE>
The right action of M &isin;SL(2, Z) on the binary quadratic form f.
</BLOCKQUOTE>
<H4><A NAME = "3322">Reduction</A></H4>



<H5><A NAME = "3323">Reduction(f) : QuadBinElt -&gt; QuadBinElt, Mtrx</A></H5>
<H5>ReducedForm(f) : QuadBinElt -&gt; QuadBinElt, Mtrx</H5>
<BLOCKQUOTE>
Returns a reduced quadratic form equivalent to f,
and the transformation matrix.
</BLOCKQUOTE>
<H5><A NAME = "3324">ReductionStep(f) : QuadBinElt -&gt; QuadBinElt</A></H5>
<BLOCKQUOTE>
The result of applying one reduction step to the quadratic form f.
</BLOCKQUOTE>
<H5><A NAME = "3325">ReductionOrbit(f) : QuadBinElt -&gt; {@ QuadBinElt @}</A></H5>
<BLOCKQUOTE>
For a binary quadratic form f of positive discriminant, 
this returns an indexed set containing all reduced forms 
equivalent to f.  These are obtained by iterating the 
<TT>ReductionStep</TT> operator, starting with <TT>Reduction(f)</TT>. 
<P>
</BLOCKQUOTE>
<H5><A NAME = "3326">Order(f) : QuadBinElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
For a binary quadratic form f of discriminant D, this returns 
the order of f in the class group for discriminant D
(see <A  HREF = "text350.htm#QuadBin:ClassGroup">ClassGroup</A>).  
Note that the class group is defined using the equivalence relation 
<TT>IsEquivalent(f1, f2 : Narrow := false)</TT>.
</BLOCKQUOTE>
<H4><A NAME = "3327">Attribute Access</A></H4>

<P>
<P>
The coefficient sequence can be accessed as a sequence of integers,
providing the inverse operation to the forms coercion constructor. 


<H5><A NAME = "3328">f[i] : QuadBinElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The i-th coefficient of f, where 1 &le;i &le;3.
</BLOCKQUOTE>
<H5><A NAME = "3329">Eltseq(f) : QuadBinElt -&gt; SeqEnum[RngIntElt]</A></H5>
<H5>ElementToSequence(f) : QuadBinElt -&gt; SeqEnum[RngIntElt]</H5>
<BLOCKQUOTE>
The sequence [a, b, c] where f is the form ax<sup>2</sup> + bxy + cy<sup>2</sup>.
<P>
</BLOCKQUOTE>
<H4><A NAME = "3330">Boolean Operations</A></H4>



<H5><A NAME = "3331">f in Q : QuadBinElt, QuadBin -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if f is in Q, that is f and Q have the same 
discriminant.
</BLOCKQUOTE>
<H5><A NAME = "3332">f eq g : QuadBinElt, QuadBinElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the quadratic form f and g are equal and <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "3333">IsIdentity(f) : QuadBinElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if f is the principal form in its parent structure.
</BLOCKQUOTE>
<H5><A NAME = "3334">IsReduced(f) : QuadBinElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the quadratic form f is reduced; <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "3335">IsEquivalent(f, g) : QuadBinElt, QuadBinElt -&gt; BoolElt, AlgMatElt</A></H5>

<PRE>    Narrow: BoolElt                     Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
For binary quadratic forms f and g of the same discriminant, 
this returns whether the forms are equivalent, i.e. can be obtained
from each other by a unimodular transformation.  When the discriminant
is negative and the forms are equivalent, a transformation matrix is 
also returned. 
<P>
If the parameter <TT>Narrow</TT> is <TT>false</TT>, the function tests a 
different notion of equivalence in the case of positive discriminant,
which may be weaker.  This is defined by merging the equivalence classes 
of forms &lt; a, b, c &gt; and &lt; - a, b, - c &gt; into
a single equivalence class.  (Another way to describe it is as follows:
forms are equivalent iff their associated ideals are in the same 
ordinary ideal class.  On the other hand, "narrow" equivalence 
of forms corresponds to narrow ideal classes.)
</BLOCKQUOTE>
<H4><A NAME = "3336">Maps of Forms</A></H4>



<H5><A NAME = "3337">FundamentalQuotient(Q) : QuadBin -&gt; Map</A></H5>
<BLOCKQUOTE>
The quotient homomorphism from the class group of Q to the class group
of fundamental discriminant.
</BLOCKQUOTE>
<H5><A NAME = "3338">QuotientMap(Q1, Q2) : QuadBin, QuadBin -&gt; Map</A></H5>
<BLOCKQUOTE>
Given two structures of quadratic forms Q<sub>1</sub> and Q<sub>2</sub>, such that the 
discriminant of Q<sub>1</sub> equals a square times the discriminant of Q<sub>2</sub>,
the quotient homomorphism from Q<sub>1</sub> to Q<sub>2</sub> is returned as a map.
</BLOCKQUOTE>
<H5><A NAME = "3339">Q ! f : QuadBin, QuadBinElt -&gt; QuadBinElt</A></H5>
<BLOCKQUOTE>
The <TT>!</TT> operator coerces a binary quadratic form f into the structure Q,
when they are compatible.  This requires that Q is <TT>QuadraticForms(D)</TT> and
f has discriminant m<sup>2</sup>D for some integer m.
</BLOCKQUOTE>
<H4><A NAME = "3340">Related Structures</A></H4>



<H5>Parent(f) : QuadBinElt -&gt; QuadBin</H5><P>


<H5>Category(Q) : QuadBin -&gt; Cat</H5><P>


<H5><A NAME = "3341">QuadraticOrder(Q) : QuadBin -&gt; RngQuad</A></H5>
<BLOCKQUOTE>
Given a structure of quadratic forms of discriminant D, 
returns the quadratic order of discriminant D.
</BLOCKQUOTE>
<H5><A NAME = "3342">Ideal(f) : QuadBinElt -&gt; RngQuadIdl</A></H5>
<BLOCKQUOTE>
Given a quadratic form f = ax<sup>2</sup> + bxy + cy<sup>2</sup>, returns the ideal 
(a, ( - b + Sqrt(D))/2) in the quadratic order Z[(t + Sqrt(D))/2],
where t equals 0 or 1. 
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text349.htm">[Next]</A><A  HREF = "text347.htm">[Prev]</A> <A  HREF = "text349.htm">[Right]</A> <A  HREF = "text347.htm">[Left]</A> <A  HREF = "text344.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>