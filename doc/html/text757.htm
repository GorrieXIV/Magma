<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Database of Soluble  Irreducible Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text758.htm">[Next]</A><A  HREF = "text756.htm">[Prev]</A> <A  HREF = "text758.htm">[Right]</A> <A  HREF = "text756.htm">[Left]</A> <A  HREF = "text742.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8697">Database of Soluble  Irreducible Groups</A></H3>

<P>
<P>
<P>
This database contains one representative of each conjugacy class of
irreducible soluble subgroups of (GL)(n, p), p prime, 
They may be accessed through specifying a group by its label in the
database, as described in the section on basic functions, or
through searching using predicates, or through a process. 
The database was constructed by Mark Short <A  HREF = "text741.htm#bib_short">[Sho92]</A>.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text757.htm#8698">Basic Functions</A>
<LI> <A  HREF = "text757.htm#8708">Searching with Predicates</A>
<LI> <A  HREF = "text757.htm#8715">Associated Functions</A>
<LI> <A  HREF = "text757.htm#8718">Processes</A>
</UL>
<H4><A NAME = "8698">Basic Functions</A></H4>

<P>
<P>
<P>
The basic access functions for the database are described in this section.
The label of a group in the database is three integers, d, p, i.
The first, d &ge;2, is the degree of the matrix group. 
The second, a prime p,
specifies the base field of the group. The third is the number of the group
in this degree/field set. 


<H5><A NAME = "8699">IsolGroupDatabase() : -&gt; DB</A></H5>
<BLOCKQUOTE>
Open the database and return a 
reference to it. This reference may be passed to other functions
so that they do fewer file operations.
</BLOCKQUOTE>
<H5><A NAME = "8700"></A><A NAME = "GrpData:IsolGroup">IsolGroup</A>(n, p, i) : RngIntElt, RngIntElt, RngIntElt -&gt; GrpMat</H5>
<H5>Group(D, n, p, i) : DB, RngIntElt, RngIntElt, RngIntElt -&gt; GrpMat</H5>
<BLOCKQUOTE>
Given a positive integer o &le;1000 (with o != 512 or 768) and 
a positive integer n, return the n-th group of order o.
</BLOCKQUOTE>
<H5><A NAME = "8701">IsolNumberOfDegreeField(n, p) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of groups in the database of degree n over GF(p).
</BLOCKQUOTE>
<H5><A NAME = "8702">IsolInfo(n, p, i) : RngIntElt, RngIntElt, RngIntElt -&gt; MonStgElt</A></H5>
<BLOCKQUOTE>
This function returns a string which gives some information about a group
in the database given its label. In particular, it contains the
order and primitivity information about the group.
</BLOCKQUOTE>
<H5><A NAME = "8703">IsolOrder(n, p, i) : RngIntElt, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
This function returns the order of a group given its label.
</BLOCKQUOTE>
<H5><A NAME = "8704">IsolMinBlockSize(n, p, i) : RngIntElt, RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
This function returns the minimal block size of a group given
its label.  If it is primitive, it returns 0.
</BLOCKQUOTE>
<H5><A NAME = "8705">IsolIsPrimitive(n, p, i) : RngIntElt, RngIntElt, RngIntElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
This function returns whether a group is primitive given its label.
</BLOCKQUOTE>
<H5><A NAME = "8706">IsolGuardian(n, p, i) : RngIntElt, RngIntElt, RngIntElt -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
This function returns the "guardian" of a group given its label,
i.e., the maximal subgroup of GL(n, p) of which the group is a
subgroup.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8707">Example <TT>GrpData_IsolGroup (H71E20)</TT></A></H3>
We find a group of degree 3 and its guardian.
<P>
<P>
<PRE>
&gt; IsolNumberOfDegreeField(3, 5);
22
&gt; G := IsolGroup(3, 5, 10);
&gt; #G;
62
&gt; GG := IsolGuardian(3, 5, 10);
&gt; #GG;
372
&gt; G;
MatrixGroup(3, GF(5)) of order 62 = 2 * 31
Generators:
  [0 0 1]
  [3 0 4]
  [2 3 1]
&gt; GG;
MatrixGroup(3, GF(5)) of order 372 = 2^2 * 3 * 31
Generators:
  [1 0 0]
  [3 2 2]
  [1 4 2]


  [0 1 0]
  [0 0 1]
  [3 0 4]
</PRE>
<HR>
<H4><A NAME = "8708">Searching with Predicates</A></H4>

<P>
<P>
<P>
We may search the database for a group satisfying some predicate.
A predicate for a group in this database is one of the following:
<DL COMPACT class='compact'>
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>A function f (which may either be an intrinsic function or a 
user defined function) which takes a matrix group and returns a boolean value.
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>A tuple of one function &lt; g &gt;, where g takes a label
and returns a boolean value. Again g is either intrinsic or user defined.
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>A tuple of two functions &lt; g, f &gt; where g, f are as above.
In this case, the tested predicate will be g first, then f.
This form is introduced to avoid expanding the group from
its label until absolutely necessary.</DL>


<H5><A NAME = "8709">IsolGroupSatisfying(f) : Any -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
Given a predicate f, return a group satisfying it.
This function runs through all the stored groups and applies
the predicate until it finds a suitable one.
If no group is found, an error message is printed.
</BLOCKQUOTE>
<H5><A NAME = "8710">IsolGroupOfDegreeSatisfying(d, f) : RngIntElt, Any -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
As <TT>IsolGroupSatisfying(f)</TT>, except it only runs through the groups
of degree d.
</BLOCKQUOTE>
<H5><A NAME = "8711">IsolGroupOfDegreeFieldSatisfying(d, p, f) : RngIntElt, RngIntElt, Any -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
As <TT>IsolGroupSatisfying(f)</TT>, except it only runs through the groups
of degree d and defined over GF(p).
</BLOCKQUOTE>
<H5><A NAME = "8712">IsolGroupsSatisfying(f) : Any -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
As <TT>IsolGroupSatisfying(f)</TT>, except a sequence of all such groups
is returned.
</BLOCKQUOTE>
<H5><A NAME = "8713">IsolGroupsOfDegreeSatisfying(d, f) : RngIntElt, Any -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
As <TT>IsolGroupOfDegreeSatisfying(d, f)</TT>, except a sequence of all
such groups is returned.
</BLOCKQUOTE>
<H5><A NAME = "8714">IsolGroupsOfDegreeFieldSatisfying(d, p, f) : RngIntElt, RngIntElt, Any -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
As <TT>IsolGroupOfDegreeFieldSatisfying(d, p, f)</TT>, except a sequence of all
such groups is returned.
</BLOCKQUOTE>
<H4><A NAME = "8715">Associated Functions</A></H4>

<P>
<P>
<P>
Associated with this database are two functions useful for constructing
semidirect product of a finite vector space and an irreducible matrix group.
Thus for constructing soluble affine permutation groups.


<H5><A NAME = "8716">Getvecs(G) : GrpMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
This function takes a matrix group G over a finite prime field and returns 
a sequence, Q say, containing all the vectors of the natural
module for G. The ordering of Q does <I>not</I> depend on G, 
but only on its natural module.
</BLOCKQUOTE>
<H5><A NAME = "8717">Semidir(G, Q) : GrpMat, SeqEnum  -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Given an irreducible matrix group G of degree n and over a finite 
prime field of size p and the sequence Q obtained from <TT>Getvecs</TT>,
this function returns the permutation group H of degree p<sup>n</sup> that is 
the semidirect product of G with its natural module. H acts on the set 
{1 ... p<sup>n</sup>} and G is isomorphic to each of the point stabilizers. 
It is well known that H is primitive, and that every primitive permutation 
group with soluble socle arises in this way. 
Note that if <TT>Semidir</TT> is to be called more than once for subgroups 
of the same general linear group, then <TT>Getvecs</TT> need
only be called on the first occasion, since the ordering of Q depends 
only on n and p. This is why the call to <TT>Getvecs</TT> is not made by
<TT>Semidir</TT> itself.
</BLOCKQUOTE>
<H4><A NAME = "8718">Processes</A></H4>

<P>
<P>
<P>
A small group process enables iteration over all
groups with  specified degrees and fields, without
having to create and store all such groups together.
<P>
A process is created via the function
<TT>IsolProcess</TT>  and its variants.
The standard process functions <TT>IsEmpty</TT>, <TT>Current</TT>,
<TT>CurrentLabel</TT> and <TT>Advance</TT> can then be applied to the process.
<P>
A specifier for degree or field is one of a valid degree (field size), or 
a tuple &lt; l, h &gt;, of valid degrees (field sizes) which is 
interpreted to mean all degrees (prime field sizes) in [l, h].


<H5><A NAME = "8719">IsolProcess() : -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process which will iterate though all
groups in the database.
</BLOCKQUOTE>
<H5><A NAME = "8720">IsolProcessOfDegree(d) : . -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process which will iterate though all
groups in the database of degree d.
</BLOCKQUOTE>
<H5><A NAME = "8721">IsolProcessOfField(p) : . -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process which will iterate though all groups in the database
over the specified field.
</BLOCKQUOTE>
<H5><A NAME = "8722">IsolProcessOfDegreeField(d, p) : ., . -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process for iterating over all the stored groups with
degree specifier d and field specifier p.  Initially it points
to the first such group (the principal key is the degree).
</BLOCKQUOTE>
<H5><A NAME = "8723">IsEmpty(p) : Process -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the process p has passed its last group.
</BLOCKQUOTE>
<H5><A NAME = "8724">Current(p) : Process -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
Return the current group of the process p.
</BLOCKQUOTE>
<H5><A NAME = "8725">CurrentLabel(p) : Process -&gt; RngIntElt, RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the label of the current group of the process p.
That is, return d, n and i such that the current group is
<TT>IsolGroup(d, n, i)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8726">Advance(~p) : Process -&gt;</A></H5>
<BLOCKQUOTE>
Move the process p to its next group.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8727">Example <TT>GrpData_sg-process (H71E21)</TT></A></H3>
We use a small group process to look at all the groups of
degree 3. 
<P>
<P>
<PRE>
&gt; P := IsolProcessOfDegree(3);    
&gt; ords := {* *};
&gt; repeat
&gt;   Include(~ords, #Current(P));
&gt;   Advance(~P);
&gt; until IsEmpty(P);
&gt; ords;
{* 31, 62, 93, 7, 124, 96^^4, 39, 12^^2, 186, 13, 192^^2, 48^^4, 
21, 24^^6, 26 *}
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text758.htm">[Next]</A><A  HREF = "text756.htm">[Prev]</A> <A  HREF = "text758.htm">[Right]</A> <A  HREF = "text756.htm">[Left]</A> <A  HREF = "text742.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>