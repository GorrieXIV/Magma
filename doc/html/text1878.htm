<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Weight Distributions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1879.htm">[Next]</A><A  HREF = "text1877.htm">[Prev]</A> <A  HREF = "text1879.htm">[Right]</A> <A  HREF = "text1877.htm">[Left]</A> <A  HREF = "text1874.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20912">Weight Distributions</A></H3>

<P>
<P>
<P>
In the case of a linear code, weight and distance distributions
 are equivalent (in particular minimum weight and minimum distance
are equivalent).



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1878.htm#20913">Hamming Weight</A>
<LI> <A  HREF = "text1878.htm#20918">Lee Weight</A>
<LI> <A  HREF = "text1878.htm#20928">Euclidean Weight</A>
</UL>
<H4><A NAME = "20913">Hamming Weight</A></H4>

<P>
<P>
For an element x&isin;R for any finite ring R,
the <I>Hamming weight</I> w<sub>H</sub>(x)
is defined by:
w<sub>H</sub>(x) = 0 iff x = 0, qquad w<sub>H</sub>(x) = 1 iff x &ne;0
The <I>Hamming weight</I> w<sub>H</sub>(v) of a vector v&isin;(R<sup>n</sup>) is defined
to be the sum (in Z) of the Hamming weights of its components.
<P>
The <I>Hamming weight</I> is often referred to as simply the <I>weight</I>.


<H5><A NAME = "20914">MinimumWeight(C) : Code -&gt; RngIntElt</A></H5>
<H5>MinimumDistance(C) : Code -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Determine the minimum (Hamming) weight of the words
belonging to the code C, which
is also the minimum distance between any two codewords.
</BLOCKQUOTE>
<H5><A NAME = "20915">WeightDistribution(C) : Code -&gt; [ &lt;RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Determine the (Hamming) weight distribution for the code C. The
distribution is returned in the form of a sequence of tuples,
where the i-th tuple contains the i-th weight, w<sub>i</sub> say,
and the number of codewords having weight w<sub>i</sub>.
</BLOCKQUOTE>
<H5><A NAME = "20916">DualWeightDistribution(C) : Code -&gt; [ &lt;RngIntElt, RngIntElt&gt; ]</A></H5>
<BLOCKQUOTE>
Determine the (Hamming) weight distribution of the dual code of 
C.  The distribution is returned in the form of a sequence of 
tuples, where the i-th tuple contains the i-th weight, 
w<sub>i</sub> say, and the number of codewords having weight w<sub>i</sub>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20917">Example <TT>CodeZ4_weight-dist-k8 (H162E15)</TT></A></H3>
In this example, the weight distribution of a quadratic residue 
code over Z<sub>4</sub> and its dual are computed. 
<P>
<P>
<P>
<PRE>
&gt; C := QRCodeZ4(17);
&gt; C;

((17, 4^9 2^0)) Cyclic Linear Code over IntegerRing(4)

Generator matrix:
[1 0 0 0 0 0 0 0 0 1 1 3 0 3 0 3 1]
[0 1 0 0 0 0 0 0 0 3 0 2 3 1 3 1 2]
[0 0 1 0 0 0 0 0 0 2 1 2 2 1 1 1 3]
[0 0 0 1 0 0 0 0 0 1 3 0 2 1 1 0 2]
[0 0 0 0 1 0 0 0 0 2 3 1 0 0 1 3 2]
[0 0 0 0 0 1 0 0 0 2 0 1 1 2 0 3 1]
[0 0 0 0 0 0 1 0 0 3 1 1 1 2 2 1 2]
[0 0 0 0 0 0 0 1 0 2 1 3 1 3 2 0 3]
[0 0 0 0 0 0 0 0 1 1 3 0 3 0 3 1 1]

&gt; WeightDistribution(C);                                                                                   
[ &lt;0, 1&gt;, &lt;5, 34&gt;, &lt;6, 68&gt;, &lt;7, 748&gt;, &lt;8, 2567&gt;, &lt;9, 6817&gt;, &lt;10, 17612&gt;, 
  &lt;11, 34340&gt;, &lt;12, 50014&gt;, &lt;13, 56168&gt;, &lt;14, 50728&gt;, &lt;15, 30872&gt;, 
  &lt;16, 9826&gt;, &lt;17, 2349&gt; ]

&gt; DualWeightDistribution(C);
[ &lt;0, 1&gt;, &lt;6, 68&gt;, &lt;8, 935&gt;, &lt;9, 1632&gt;, &lt;10, 4148&gt;, &lt;11, 8568&gt;, &lt;12, 12886&gt;, 
  &lt;13, 14280&gt;, &lt;14, 11968&gt;, &lt;15, 7752&gt;, &lt;16, 2890&gt;, &lt;17, 408&gt; ]

</PRE>
<HR>
<H4><A NAME = "20918">Lee Weight</A></H4>

<P>
<P>
<P>
<P>
For an element x&isin;Z<sub>4</sub>, the <I>Lee weight</I> w<sub>L</sub>(x) is defined by:
w<sub>L</sub>(0) = 0,   w<sub>L</sub>(1) = w<sub>L</sub>(3) = 1,   w<sub>L</sub>(2) = 2.
The <I>Lee weight</I> w<sub>L</sub>(v) of a vector v&isin;(Z<sub>4</sub><sup>n</sup>) is defined
to be the sum (in Z) of the Lee weights of its components.  See
<A  HREF = "text1873.htm#bib_Wan_Z4">[Wan97, p. 16]</A>.


<H5><A NAME = "20919">LeeWeight(a) : RngIntRes -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Lee weight of the element a&isin;Z<sub>4</sub>.
</BLOCKQUOTE>
<H5><A NAME = "20920">LeeWeight(v) : ModTupRngElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Lee weight of the codeword v.
</BLOCKQUOTE>
<H5><A NAME = "20921">LeeDistance(u, v) : ModTupRngElt, ModTupRngElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Lee distance between the codewords u and v,
where u and v belong to the same code C.  This is defined
to be the Lee weight of (u - v).
</BLOCKQUOTE>
<H5><A NAME = "20922">MinimumLeeWeight(C) : Code -&gt; RngIntElt</A></H5>
<H5>MinimumLeeDistance(C) : Code -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The minimum Lee weight of the code C.
</BLOCKQUOTE>
<H5><A NAME = "20923">LeeWeightDistribution(C) : Code -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The Lee weight distribution of the code C.
</BLOCKQUOTE>
<H5><A NAME = "20924">DualLeeWeightDistribution(C) : Code -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The Lee weight distribution of the dual of the code C (see <TT>LeeWeightDistribution</TT>)
</BLOCKQUOTE>
<H5><A NAME = "20925">WordsOfLeeWeight(C, w) : Code, RngIntElt -&gt; SetEnum</A></H5>

<PRE>    Cutoff: RngIntElt                   Default: &infin;</PRE>
<BLOCKQUOTE>
Given a linear code C, return the set of all words of C having Lee
weight w. If <TT>Cutoff</TT> is set to a non-negative integer c, then
the algorithm will terminate after a total of c words have been
found.
</BLOCKQUOTE>
<H5><A NAME = "20926">WordsOfBoundedLeeWeight(C, l, u) : Code, RngIntElt, RngIntElt -&gt; SetEnum</A></H5>

<PRE>    Cutoff: RngIntElt                   Default: &infin;</PRE>
<BLOCKQUOTE>
Given a linear code C, return the set of all words of C having Lee
weight between l and u, inclusive.
If <TT>Cutoff</TT> is set to a non-negative integer c, then
the algorithm will terminate after a total of c words have been
found.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20927">Example <TT>CodeZ4_lee-dist (H162E16)</TT></A></H3>
We calculate the Lee weight distribution of a Reed Muller code 
over Z<sub>4</sub> and enumerate all words of Lee weight 8.
<P>
<P>
<PRE>
&gt; C := ReedMullerCodeZ4(1, 3);
&gt; C;
(8, 256, 4) Linear Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 3 1 2 1]
[0 1 0 0 2 1 1 3]
[0 0 1 0 1 1 3 2]
[0 0 0 1 3 2 3 3]
&gt; LeeWeightDistribution(C);
[ &lt;0, 1&gt;, &lt;6, 112&gt;, &lt;8, 30&gt;, &lt;10, 112&gt;, &lt;16, 1&gt; ]
&gt; W := WordsOfLeeWeight(C, 8);
&gt; #W;
30
</PRE>
<HR>
<H4><A NAME = "20928">Euclidean Weight</A></H4>

<P>
<P>
<P>
For an element x&isin;Z<sub>4</sub>, the <I>Euclidean weight</I> w<sub>E</sub>(x) is defined by:
w<sub>E</sub>(0) = 0,   w<sub>E</sub>(1) = w<sub>E</sub>(3) = 1,   w<sub>E</sub>(2) = 4.
The <I>Euclidean weight</I> w<sub>E</sub>(v) of a vector v&isin;(Z<sub>4</sub><sup>n</sup>) is defined
to be the sum (in Z) of the Euclidean weights of its components.  See
<A  HREF = "text1873.htm#bib_Wan_Z4">[Wan97, p. 16]</A>.


<H5><A NAME = "20929">EuclideanWeight(a) : RngIntRes -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Euclidean weight of the element a&isin;Z4.
</BLOCKQUOTE>
<H5><A NAME = "20930">EuclideanWeight(v) : ModTupRngElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Euclidean weight of the Z<sub>4</sub>-codeword v.
</BLOCKQUOTE>
<H5><A NAME = "20931">EuclideanDistance(u, v) : ModTupRngElt, ModTupRngElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The Euclidean distance between the Z<sub>4</sub>-codewords u and v,
where u and v belong to the same code C.  This is defined
to be the Euclidean weight of (u - v).
</BLOCKQUOTE>
<H5><A NAME = "20932">MinimumEuclideanWeight(C) : Code -&gt; RngIntElt</A></H5>
<H5>MinimumEuclideanDistance(C) : Code -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The minimum Euclidean weight of the Z<sub>4</sub>-code C.
</BLOCKQUOTE>
<H5><A NAME = "20933">EuclideanWeightDistribution(C) : Code -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The Euclidean weight distribution of the Z<sub>4</sub>-code C.
</BLOCKQUOTE>
<H5><A NAME = "20934">DualEuclideanWeightDistribution(C) : Code -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The Euclidean weight distribution of the dual of the Z<sub>4</sub>-code C.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20935">Example <TT>CodeZ4_euclidean-dist (H162E17)</TT></A></H3>
The Euclidean weight distribution is calculated for a quadratic 
residue code over Z<sub>4</sub>
<P>
<P>
<PRE>
&gt; C := QRCodeZ4(17);
&gt; C;
(17, 262144) Cyclic Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 0 0 0 0 0 1 1 3 0 3 0 3 1]
[0 1 0 0 0 0 0 0 0 3 0 2 3 1 3 1 2]
[0 0 1 0 0 0 0 0 0 2 1 2 2 1 1 1 3]
[0 0 0 1 0 0 0 0 0 1 3 0 2 1 1 0 2]
[0 0 0 0 1 0 0 0 0 2 3 1 0 0 1 3 2]
[0 0 0 0 0 1 0 0 0 2 0 1 1 2 0 3 1]
[0 0 0 0 0 0 1 0 0 3 1 1 1 2 2 1 2]
[0 0 0 0 0 0 0 1 0 2 1 3 1 3 2 0 3]
[0 0 0 0 0 0 0 0 1 1 3 0 3 0 3 1 1]
&gt; EuclideanWeightDistribution(C);
[ &lt;0, 1&gt;, &lt;7, 136&gt;, &lt;8, 170&gt;, &lt;9, 170&gt;, &lt;10, 408&gt;, &lt;11, 544&gt;, &lt;12, 986&gt;, 
&lt;13, 1768&gt;, &lt;14, 3128&gt;, &lt;15, 5032&gt;, &lt;16, 6120&gt;, &lt;17, 6360&gt;, &lt;18, 8432&gt;, 
&lt;19, 12512&gt;, &lt;20, 12682&gt;, &lt;21, 11152&gt;, &lt;22, 14416&gt;, &lt;23, 17680&gt;, &lt;24, 16048&gt;, 
&lt;25, 15164&gt;, &lt;26, 17952&gt;, &lt;27, 16864&gt;, &lt;28, 13328&gt;, &lt;29, 14144&gt;, &lt;30, 14144&gt;, 
&lt;31, 10064&gt;, &lt;32, 7837&gt;, &lt;33, 8024&gt;, &lt;34, 6800&gt;, &lt;35, 4896&gt;, &lt;36, 3485&gt;, 
&lt;37, 2992&gt;, &lt;38, 2992&gt;, &lt;39, 1768&gt;, &lt;40, 510&gt;, &lt;41, 1258&gt;, &lt;42, 1224&gt;, 
&lt;44, 238&gt;, &lt;45, 408&gt;, &lt;46, 136&gt;, &lt;47, 136&gt;, &lt;48, 34&gt;, &lt;68, 1&gt; ]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1879.htm">[Next]</A><A  HREF = "text1877.htm">[Prev]</A> <A  HREF = "text1879.htm">[Right]</A> <A  HREF = "text1877.htm">[Left]</A> <A  HREF = "text1874.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>