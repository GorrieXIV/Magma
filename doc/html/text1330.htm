<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Local Geometry of Schemes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1331.htm">[Next]</A><A  HREF = "text1329.htm">[Prev]</A> <A  HREF = "text1331.htm">[Right]</A> <A  HREF = "text1329.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "14520">Local Geometry of Schemes</A></H3>

<P>
<P>
<P>
<P>
We now discuss intrinsics which apply to a scheme at a single point.
At the expense of increasing the number of intrinsics, we try to follow
the convention that an intrinsic may simply take a point as its argument
or it may take both a point and a scheme as its arguments.
In the former case, the implicit scheme argument is taken to be the scheme
associated to the point set of the point.
In the latter case, it is first checked that the point can be coerced into some
point set of the given scheme argument.
There are reasons for allowing both methods.
Of course, if one is confident about which scheme, X say, a point p lies on
then there is no ambiguity about writing, say, <TT>IsNonsingular(p)</TT>
rather than <TT>IsNonsingular(X,p)</TT>.
On the other hand, the second expression is easier to read, and also guards
against the possibility of accidentally referring to the wrong scheme;
that is a particular risk here since the answer makes sense even if p
lies on some other scheme---imagine the confusion that could arise given
a point of a nonsingular curve lying on a singular surface inside
a nonsingular ambient space, for instance.
But also there are trivial cases when scheme arguments are necessary,
<TT>IntersectionNumber(C,D,p)</TT> for example.
In fact, that particular example exemplifies the value of points being
highly coercible---it is very convenient that the point p could
lie in a point set of either C or D or indeed neither of these
as long as it could be coerced to them if necessary.
<P>
Sometimes a function will require that the point argument is rational, 
that is, has coordinates in the base ring.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1330.htm#14521">Point Conditions</A>
<LI> <A  HREF = "text1330.htm#14525">Point Computations</A>
<LI> <A  HREF = "text1330.htm#14529">Analytically Hypersurface Singularities</A>
</UL>
<H4><A NAME = "14521">Point Conditions</A></H4>



<H5><A NAME = "14522">IsSingular(p) : Pt -&gt; BoolElt</A></H5>
<H5>IsSingular(X,p) : Sch,Pt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the point p is a singular point of the scheme X.
</BLOCKQUOTE>
<H5><A NAME = "14523">IsNonsingular(p) : Pt -&gt; BoolElt</A></H5>
<H5>IsNonsingular(X,p) : Sch,Pt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the point p is a nonsingular point of the scheme X.
</BLOCKQUOTE>
<H5><A NAME = "14524">IsOrdinarySingularity(p) : Pt -&gt; BoolElt</A></H5>
<H5>IsOrdinarySingularity(X,p) : Sch,Pt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the tangent cone to the scheme X at the point p
is reduced and X is singular at p.
Currently, the scheme X must be a hypersurface.
</BLOCKQUOTE>
<H4><A NAME = "14525">Point Computations</A></H4>



<H5><A NAME = "14526">Multiplicity(p) : Pt -&gt; RngIntElt</A></H5>
<H5>Multiplicity(X,p) : Sch,Pt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The multiplicity of the point p as a point of the scheme X.
If X is not a hypersurface, computed using local Groebner bases.
</BLOCKQUOTE>
<H5><A NAME = "14527">TangentSpace(p) : Pt -&gt; Sch</A></H5>
<H5>TangentSpace(X,p) : Sch,Pt -&gt; Sch</H5>
<BLOCKQUOTE>
The tangent space to the scheme X at the point p.
This linear space is embedded as a scheme in the same ambient space as X.
An error will be signalled if p is a singular point of X or is not a
rational point of X.
</BLOCKQUOTE>
<H5><A NAME = "14528">TangentCone(p) : Pt -&gt; Sch</A></H5>
<H5>TangentCone(X,p) : Sch,Pt -&gt; Sch</H5>
<BLOCKQUOTE>
The tangent cone to X at the point 
p embedded as a scheme in the same ambient space.
If the scheme X is not a hypersurface, the computation uses
local Groebner bases.
</BLOCKQUOTE>
<H4><A NAME = "14529">Analytically Hypersurface Singularities</A></H4>

<P>
<P>
<P>
<P>
We will say that an isolated singular point p in a pointset X(k) over a field k is
a <I>hypersurface singularity</I> if the completion of its local ring is isomorphic
to the quotient of a power series ring k[[x<sub>1</sub>, ..., x<sub>d</sub>]] by a single power series
F(x<sub>1</sub>, ..., x<sub>d</sub>). That is, it is analytically equivalent to the singularity of
an analytic hypersurface defined by F at the origin. Clearly d is equal to the
dimension of the tangent space at p here. This type of singularity occurs
quite commonly (e.g., singular points on actual hypersurfaces, A-D-E singularities
on surfaces).
<P>
This section contains intrinsics to test whether such a p is a hypersurface singularity
and compute the equivalent analytic equation F to given precision, to increase the
precision of F at a later stage and to expand a rational function on X to the
corresponding element in the field of fractions of k[[x<sub>1</sub>, ..., x<sub>d</sub>]] to
any required precision.


<H5><A NAME = "14530">IsHypersurfaceSingularity(p,prec) : Pt, RngIntElt -&gt; BoolElt, RngMPolElt, SeqEnum, Rec</A></H5>
<BLOCKQUOTE>
The point p is a singular point in X(k) for a field k. It should be an isolated singularity
on X and should only lie on irreducible components of X whose dimension d is maximal,
i.e. the dimension of X (these conditions are not checked). 
The integer prec should be positive.
<P>
The function returns whether p is a hypersurface singularity on X as defined above.
This is also equivalent to the conditions that the tangent space of p has dimension
d + 1 and that the local ring at p is a local complete intersection ring (if X is reduced
at p - for example, if X is a variety - the second condition follows automatically from
the first).
<P>
If this is true, the function also returns extra values. The second return value is a multivariate
polynomial F<sub>1</sub> in  a polynomial ring k[x<sub>1</sub>, ..., x<sub>d + 1</sub>] such that the singularity
p is analytically equivalent to that of the analytic hypersurface  F &isin;k[[x<sub>1</sub>, ..., x<sub>d + 1</sub>]]
at the origin and F<sub>1</sub> is equal to F for terms of degree less than or equal to prec.
<P>
The third is a sequence of simple rational functions on X/k (i.e., quotients of polynomials
in the coordinate ring of the ambient of X that, if X is projective, have the same degree for
all gradings) such that x<sub>i</sub> corresponds to the ith rational function of the sequence.
If X is affine, these rational functions will all be k-linear forms in the coordinate variables
and if X is ordinary projective, linear forms in the coordinate variables divided by a particular
variable that is non-zero at p.
<P>
The fourth return value is a data record that is needed if the user wants to later expand F
to higher precision or to expand arbitrary rational functions on X/k at p.
<P>
The implementation makes use of Magma's local Groebner bases, after localising p to an affine
patch and translating it to the origin.
</BLOCKQUOTE>
<H5><A NAME = "14531">HypersurfaceSingularityExpandFurther(dat,prec,R): Rec, RngIntElt, RngMPol -&gt; RngMPolElt</A></H5>
<BLOCKQUOTE>
The record dat should be the data record returned for a hypersurface singularity p in X(k)
by the intrinsic above, prec a positive integer and R a polynomial ring over k
of rank d + 1 (d is the dimension of X).
<P>
Returns a polynomial that expands the equation of the analytic hypersurface F to
include all terms of degree less than or equal to prec. The result will be returned
as an element of R (with the ith variable of R corresponding to the analytic
variable denoted x<sub>i</sub> in the exposition of the previous intrinsic).
<P>
This intrinsic is very useful to expand F to higher precision after the
original call that determined that p was a hypersurface singularity.
</BLOCKQUOTE>
<H5><A NAME = "14532">HypersurfaceSingularityExpandFunction(dat,f,prec,R): Rec, FldFunRatMElt, RngIntElt, RngMPol -&gt; RngMPolElt, RngMPolElt</A></H5>
<BLOCKQUOTE>
The record dat should be the data record returned for a hypersurface singularity p in X(k)
by the first intrinsic of this subsection, prec a positive integer and R a polynomial ring over k
of rank d + 1 (d is the dimension of X). f should be a rational function on X/k
given as an element of the field of fractions of the coordinate ring of the ambient of X
or the base change of X to k, if k isn't the base ring of X. f can in fact be given
as an element of any rational function field over k whose rank is equal to the rank
of the coordinate ring of X. In any case, when X is projective, the numerator and 
denominator of f have to be homogeneous and have the same degree with respect to all gradings
of X.
<P>
Returns f pulled back to the analytic coordinate ring at p (identified with
k[[x<sub>1</sub>, ..., x<sub>d + 1</sub>]]/(F) in the notation introduced above) and expanded to
required precision. In fact, the return value is given as two polynomials a and b
in R, whose variables are identified with the x<sub>i</sub>, such that a/b is the finite
approximation to the value of the pullback. a and b are actually just the pullbacks
of the numerator and denominator of f expanded to include all terms of degree less than or
equal to prec. The value is returned as two polynomials rather than a quotient as
b may be zero if prec is sufficiently small even when the denominator of
f doesn't vanish on X.
</BLOCKQUOTE>
<H5><A NAME = "14533">MilnorNumberAnalyticHypersurface(dat) : Rec -&gt; RngIntElt</A></H5>
<H5>TjurinaNumberAnalyticHypersurface(dat) : Rec -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The record dat should be the data record returned for a hypersurface singularity p in X(k)
by the first intrinsic of this subsection. It represents a specific power series
F(x<sub>1</sub>, ..., x<sub>d + 1</sub>) &isin;k[[x<sub>1</sub>, ..., x<sub>d + 1</sub>]] as described above.
<P>
Returns the Milnor (resp. Tjurina) number of this power series F.
That is, the k-dimension of the
quotient of k[[x<sub>1</sub>, ..., x<sub>d + 1</sub>]] by the ideal generated by the formal derivatives of F
(resp. the formal derivatives of F and F).
This may be infinite, in which case <TT>Infinity</TT> is returned. The Tjurina number
is infinite if an only if p is <I>not</I> an
isolated singularity. The same is true for the Milnor number if the characteristic of
k is 0.
Note that the Milnor number can depend on the choice of F (F multiplied by any power
series with non-zero constant term defines the same analytic hypersurface singularity)
whereas the Tjurina number doesn't - it only depends on the ideal generated by F.  
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14534">Example <TT>Scheme_an-hyp-sing-ex (H118E18)</TT></A></H3>
We consider a singular degree 4 Del Pezzo surface in P<sup>4</sup> over (Q) with two
conjugate singular points defined over a quadratic extension. 
<P>
<P>
<P>
<PRE>
&gt; P4&lt;x,y,z,t,u&gt; := ProjectiveSpace(Rationals(),4);
&gt; X := Scheme(P4,[x^2+y^2-2*z^2, x*t+t^2-y*u+2*u^2]);
&gt; IsIrreducible(X);
true
&gt; sngs := SingularSubscheme(X);
&gt; Support(sngs);

&gt; pts := PointsOverSplittingField(sngs);
&gt; pts;
{@ (0 : 0 : 0 : r1 : 1), (0 : 0 : 0 : r2 : 1) @}
&gt; pt := pts[1];
&gt; k := Ring(Parent(pt));
&gt; k;
Algebraically closed field with 2 variables over Rational Field
Defining relations:
[
    r2^2 + 2,
    r1^2 + 2
]
&gt; p := X(k)!Eltseq(pt);
&gt; boo,F,seq,dat := IsHypersurfaceSingularity(p,3);  
&gt; boo;
true
&gt; R&lt;a,b,c&gt; := Parent(F);
&gt; F;
2*r1*a*b^2 - 2*a^2*c - 3/2*r1*a*c^2 + 8*a^2 - 4*b^2 + 4*r1*a*c + c^2
&gt; HypersurfaceSingularityExpandFurther(dat,4,R);
-a^4 - r1*a^3*c + 1/2*a^2*c^2 + 2*r1*a*b^2 - 2*a^2*c - 3/2*r1*a*c^2 +
	8*a^2 - 4*b^2 + 4*r1*a*c + c^2
&gt; Rk&lt;p,q,r,s,w&gt; := PolynomialRing(k,5); 
&gt;  //can use Rk as base-changed coordinate ring here
&gt; HypersurfaceSingularityExpandFunction(dat,(p^2+q*s)/w^2,3,R);
2*r1*a^3 - 3*a^2*c - 1/2*r1*a*c^2 + 4*a^2 + (2*r1 + 1)*a*c - 1/2*c^2 + r1*c
1
&gt; // Both singularities are simple $A_1$ singularities which are
&gt; // characterised by having Milnor number 1.
&gt; MilnorNumberAnalyticHypersurface(dat);
1
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1331.htm">[Next]</A><A  HREF = "text1329.htm">[Prev]</A> <A  HREF = "text1331.htm">[Right]</A> <A  HREF = "text1329.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>