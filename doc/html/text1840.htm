<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Families of Linear Codes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1841.htm">[Next]</A><A  HREF = "text1839.htm">[Prev]</A> <A  HREF = "text1841.htm">[Right]</A> <A  HREF = "text1839.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20475">Families of Linear Codes</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1840.htm#20476">Cyclic and Quasicyclic Codes</A>
<LI> <A  HREF = "text1840.htm#20487">BCH Codes and their Generalizations</A>
<LI> <A  HREF = "text1840.htm#20500">Quadratic Residue Codes and their Generalizations</A>
<LI> <A  HREF = "text1840.htm#20509">Reed--Solomon and Justesen Codes</A>
<LI> <A  HREF = "text1840.htm#20515">Maximum Distance Separable  Codes</A>
</UL>
<H4><A NAME = "20476">Cyclic and Quasicyclic Codes</A></H4>



<H5><A NAME = "20477">CyclicCode(u) : ModTupRngElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a vector u belonging to the R-space R<sup>(n)</sup>, 
construct the [n, k] cyclic code generated by the 
right cyclic shifts of the vector u.
</BLOCKQUOTE>
<H5><A NAME = "20478">CyclicCode(n, T, K) : RngIntElt, [ FldFinElt ], FldFin -&gt; Code</A></H5>
<H5>CyclicCode(n, T, K) : RngIntElt, { FldFinElt }, FldFin -&gt; Code</H5>
<BLOCKQUOTE>
Given a positive integer n and a set or sequence T of primitive
n-th roots of unity from a finite field L, together with a subfield
K of L, construct the cyclic code C over K of length n, such
that the generator polynomial for C is the polynomial of least degree
having the elements of T as roots.
</BLOCKQUOTE>
<H5><A NAME = "20479">QuasiCyclicCode(n, Gen) : RngIntElt, [ RngUPolElt ] -&gt; Code</A></H5>
<BLOCKQUOTE>
Constructs the quasi-cyclic code of length n with generator
polynomials given by the sequence of polynomials in Gen. Created by
<TT>HorizontalJoin</TT> of each <TT>GeneratorMatrix</TT> from the <TT>CyclicCode</TT>'s generated by the polynomials in Gen. Requires that
|Gen| | n.
</BLOCKQUOTE>
<H5><A NAME = "20480">QuasiCyclicCode(Gen) : [ ModTupRngElt ] -&gt; Code</A></H5>
<BLOCKQUOTE>
Constructs the quasi-cyclic code of length n generated by 
simultaneous cyclic shifts of the
vectors in Gen.
</BLOCKQUOTE>
<H5><A NAME = "20481">QuasiCyclicCode(n, Gen, h) : RngIntElt, [ RngUPolElt ], RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Constructs the quasi-cyclic code of length n with generator polynomials
given by the sequence of polynomials in Gen. The <TT>GeneratorMatrix</TT>'s are
joined 2 dimensionally, with height h. Requires that h | (|Gen|) 
and (|Gen|/h) | n.
</BLOCKQUOTE>
<H5><A NAME = "20482">QuasiCyclicCode(Gen, h) : [ModTupRngElt] , RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Constructs the quasi cyclic code generated by simultaneous cyclic shifts of the
vectors in Gen, arranging them two dimensionally with height h.
</BLOCKQUOTE>
<H5><A NAME = "20483">ConstaCyclicCode(n, f, alpha) : RngUPolElt, RngIntElt, FldFinElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Return the length n code generated by consta-cyclic shifts by &alpha; of the 
coefficients of f.
</BLOCKQUOTE>
<H5><A NAME = "20484">QuasiTwistedCyclicCode(n, Gen, alpha) : RngIntElt, [RngUPolElt], FldFinElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Construct the quasi-twisted cyclic code of length n pasting together the
constacyclic codes with parameter &alpha; generated by the polynomials in 
Gen.
</BLOCKQUOTE>
<H5><A NAME = "20485">QuasiTwistedCyclicCode(Gen, alpha) : [ModTupRngElt], FldFinElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Construct the quasi-twisted cyclic code generated by simultaneous 
constacyclic shifts w.r.t. &alpha; of the codewords in Gen.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20486">Example <TT>CodeFld_ChainCyclic (H158E25)</TT></A></H3>
Let the m factors of x<sup>n</sup> - 1 be f<sub>i</sub>(x),i=0, ..., m in any particular
order. Then we can construct a chain of polynomials
g<sub>k</sub>(x) = &prod;<sub>i=0</sub><sup>k</sup>f<sub>i</sub>(x) such that g<sub>k</sub>(x) | g<sub>k + 1</sub>(x).
This chain of polynomials will generate a nested chain of cyclic codes
of length n, which is illustrated here for n=7.
<P>
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(GF(2));
&gt; n := 7;
&gt; F := Factorization(x^n-1);
&gt; F;
[
    &lt;x + 1, 1&gt;,
    &lt;x^3 + x + 1, 1&gt;,
    &lt;x^3 + x^2 + 1, 1&gt;
]
&gt; Gens := [ &amp;*[F[i][1]:i in [1..k]] : k in [1..#F] ];
&gt; Gens;
[
    x + 1,
    x^4 + x^3 + x^2 + 1,
    x^7 + 1
]
&gt; Codes := [ CyclicCode(n, Gens[k]) : k in [1..#Gens] ];
&gt; Codes;
[
    [7, 6, 2] Cyclic Code over GF(2)
    Generator matrix:
    [1 0 0 0 0 0 1]
    [0 1 0 0 0 0 1]
    [0 0 1 0 0 0 1]
    [0 0 0 1 0 0 1]
    [0 0 0 0 1 0 1]
    [0 0 0 0 0 1 1],

    [7, 3, 4] Cyclic Code over GF(2)
    Generator matrix:
    [1 0 0 1 0 1 1]
    [0 1 0 1 1 1 0]
    [0 0 1 0 1 1 1],
    [7, 0, 7] Cyclic Code over GF(2)
]
&gt; { Codes[k+1] subset Codes[k] : k in [1..#Codes-1] };
{ true }
</PRE>
<HR>
<H4><A NAME = "20487">BCH Codes and their Generalizations</A></H4>



<H5><A NAME = "20488">BCHCode(K, n, d, b) : FldFin, RngIntElt, RngIntElt, RngIntElt -&gt; Code</A></H5>
<H5>BCHCode(K, n, d) : FldFin, RngIntElt, RngIntElt -&gt; Code</H5>
<BLOCKQUOTE>
Given a finite field K=F<sub>q</sub> and positive integers n, d and b 
such that gcd(n, q) = 1, we define m to be the smallest integer 
such that n | (q<sup>m</sup> - 1), and &alpha; to be a primitive n-th root 
of unity in the degree m extension of K, GF(q<sup>m</sup>). This function
constructs the BCH code of designated distance d as the cyclic code 
with generator polynomial
  g(x) = lcm{ m<sub>1</sub>(x), ..., m<sub>d - 1</sub>(x)}
where m<sub>i</sub>(x) is the minimum polynomial of &alpha;<sup>b + i - 1</sup>.
The BCH code is an [n, &ge;(n - m(d - 1)), &ge;d] code over K.
If b is omitted its value is taken to be 1, in which case the
corresponding code is a <I>narrow sense</I> BCH code.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20489">Example <TT>CodeFld_BCHCode (H158E26)</TT></A></H3>
We construct a BCH code of length 13 over GF(3) and designated
minimum distance 3 
<P>
<P>
<P>
<P>
<PRE>
&gt; C := BCHCode(GF(3), 13, 3);   
&gt; C;
[13, 7, 4] BCH code (d = 3, b = 1) over GF(3)
Generator matrix:
[1 0 0 0 0 0 0 1 2 1 2 2 2]
[0 1 0 0 0 0 0 1 0 0 0 1 1]
[0 0 1 0 0 0 0 2 2 2 1 1 2]
[0 0 0 1 0 0 0 1 1 0 1 0 0]
[0 0 0 0 1 0 0 0 1 1 0 1 0]
[0 0 0 0 0 1 0 0 0 1 1 0 1]
[0 0 0 0 0 0 1 2 1 2 2 2 1]
</PRE>
<HR>
<H5><A NAME = "20490">GoppaCode(L, G) : [ FldFinElt ], RngUPolElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Let K be the field GF(q), let G(z) = G be a polynomial
defined over the degree m extension field F of K (i.e. the
field GF(q<sup>m</sup>)) and let L = [&alpha;<sub>1</sub>, ..., &alpha;<sub>n</sub>]
be a sequence of elements of F such that G(&alpha;<sub>i</sub>) != 0
for all &alpha;<sub>i</sub> &isin;L. This function constructs the Goppa code
&Gamma;(L, G) over K. If the degree of G(z) is r,
this is an [n, k &ge;n - mr, d &ge;r + 1] code.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20491">Example <TT>CodeFld_GoppaCode (H158E27)</TT></A></H3>
We construct a Goppa code of length 31 over GF(2) with generator
polynomial G(z) = z<sup>3</sup> + z + 1.
<P>
<P>
<P>
<PRE>
&gt; q := 2^5;
&gt; K&lt;w&gt; := FiniteField(q);
&gt; P&lt;z&gt; := PolynomialRing(K);
&gt; G := z^3 + z + 1;
&gt; L := [w^i : i in [0 .. q - 2]];
&gt; C := GoppaCode(L, G);
&gt; C:Minimal;
[31, 16, 7] Goppa code (r = 3) over GF(2)
&gt; WeightDistribution(C);
[ &lt;0, 1&gt;, &lt;7, 105&gt;, &lt;8, 295&gt;, &lt;9, 570&gt;, &lt;10, 1333&gt;, &lt;11, 2626&gt;, 
 &lt;12, 4250&gt;, &lt;13, 6270&gt;, &lt;14, 8150&gt;, &lt;15, 9188&gt;, &lt;16, 9193&gt;, 
 &lt;17, 8090&gt;, &lt;18, 6240&gt;, &lt;19, 4270&gt;, &lt;20, 2590&gt;, &lt;21, 1418&gt;, 
 &lt;22, 650&gt;, &lt;23, 195&gt;, &lt;24, 55&gt;, &lt;25, 36&gt;, &lt;26, 11&gt; ]
</PRE>
<HR>
<H5><A NAME = "20492">ChienChoyCode(P, G, n, S) : RngUPolElt, RngUPolElt, RngIntElt, FldFin -&gt; Code</A></H5>
<BLOCKQUOTE>
Let P and G be polynomials over a finite field F, let n be an
integer greater than one, and let S be a subfield of F.  Suppose also
that n is coprime to the cardinality of S, F is the splitting field
of x<sup>n</sup> - 1 over S, P and G are both coprime to x<sup>n</sup> - 1 and both have
degree less than n.  This function constructs the Chien-Choy generalised
BCH code with parameters P, G, n over S.
<P>
<P>
</BLOCKQUOTE>
<H5><A NAME = "20493">AlternantCode(A, Y, r, S) :    [ FldFinElt ], [ FldFinElt ], RngIntElt, FldFin -&gt; Code</A></H5>
<H5>AlternantCode(A, Y, r) : [ FldFinElt ], [ FldFinElt ], RngIntElt -&gt; Code</H5>
<BLOCKQUOTE>
Let A = [&alpha;<sub>1</sub>, ..., &alpha;<sub>n</sub>] be a sequence of n
distinct elements taken from the degree m extension K of
the finite field S, and let
Y = [y<sub>1</sub>, ..., y<sub>n</sub>] be a sequence of n non-zero
elements from K. Let r be a positive integer. Given such
A, Y, r, and S, this function constructs the alternant code
A(A, Y) over S.  This is an [n, k &ge;n - mr, d &ge;r + 1] code.
If S is omitted, S is taken to be the prime subfield of K.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20494">Example <TT>CodeFld_AlternantCode (H158E28)</TT></A></H3>
We construct an alternant code over GF(2) based on sequences of elements in
the extension field GF(2<sup>4</sup>) of GF(2).  The parameter r is taken to be
4, so the minimum weight 6 is greater than r + 1.
<P>
<P>
<P>
<PRE>
&gt; q := 2^4;
&gt; K&lt;w&gt; := GF(q);
&gt; A := [w ^ i : i in [0 .. q - 2]];
&gt; Y := [K ! 1 : i in [0 .. q - 2]];
&gt; r := 4;
&gt; C := AlternantCode(A, Y, r);
&gt; C;
[15, 6, 6] Alternant code over GF(2)
Generator matrix:
[1 0 0 0 0 0 1 1 0 0 1 1 1 0 0]
[0 1 0 0 0 0 0 1 1 0 0 1 1 1 0]
[0 0 1 0 0 0 0 0 1 1 0 0 1 1 1]
[0 0 0 1 0 0 1 1 0 1 0 1 1 1 1]
[0 0 0 0 1 0 1 0 1 0 0 1 0 1 1]
[0 0 0 0 0 1 1 0 0 1 1 1 0 0 1]
</PRE>
<HR>
<H5><A NAME = "20495">NonPrimitiveAlternantCode(n, m, r) : RngIntElt,RngIntElt,RngIntElt-&gt;Code</A></H5>
<BLOCKQUOTE>
Returns the [n, k, d] non-primitive alternant code over GF(2), where
n - mr &le;k &le;n - r and d &ge;r + 1.
<P>
<P>
</BLOCKQUOTE>
<H5><A NAME = "20496">FireCode(h, s, n) : RngUPolElt, RngIntElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Let K be the field GF(q).
Given a polynomial h in K[X], a nonnegative integer s, and a positive
integer n, this function constructs a Fire code of length n with
generator polynomial h(X<sup>s</sup> - 1).
</BLOCKQUOTE>
<H5><A NAME = "20497">GabidulinCode(A, W, Z, t) : [ FldFinElt ], [ FldFinElt ], [ FldFinElt ], RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given sequences A = [a<sub>1</sub>, ...a<sub>n</sub>], W = [w<sub>1</sub>, ...w<sub>s</sub>], and
Z=[z<sub>1</sub>, ... z<sub>k</sub>], such that the n + s elements of A and W are distinct
and the elements of Z are non-zero, together with a positive integer t,
construct the Gabidulin MDS code with parameters A, W, Z, t.
</BLOCKQUOTE>
<H5><A NAME = "20498">SrivastavaCode(A, W, mu, S) :   [ FldFinElt ], [ FldFinElt ], RngIntElt, FldFin -&gt; Code</A></H5>
<BLOCKQUOTE>
Given sequences A = [&alpha;<sub>1</sub>, ..., &alpha;<sub>n</sub>], W = [w<sub>1</sub>, ..., w<sub>s</sub>]
of elements from the extension field K of the finite field S,
such that the elements of A are non-zero and the n + s elements of A
and W are distinct, together with an integer &mu;, construct the
Srivastava code of parameters A, W, mu, over S.
</BLOCKQUOTE>
<H5><A NAME = "20499">GeneralizedSrivastavaCode(A, W, Z, t, S) : [ FldFinElt ], [ FldFinElt ], [ FldFinElt ], RngIntElt, FldFin -&gt; Code</A></H5>
<BLOCKQUOTE>
Given sequences A = [&alpha;<sub>1</sub>, ..., &alpha;<sub>n</sub>], W = [w<sub>1</sub>, ..., w<sub>s</sub>],
and Z = [z<sub>1</sub>, ... z<sub>k</sub>] of elements from the extension field K of the
finite field S, such that the elements of A and Z are non-zero and the
n + s elements of A and W are distinct, together with a positive integer
t, construct the generalized Srivastava code with parameters A, W, Z,
t, over S.
</BLOCKQUOTE>
<H4><A NAME = "20500">Quadratic Residue Codes and their Generalizations</A></H4>

<P>
<P>
<P>
If p is an odd prime, the <I>quadratic residues modulo p</I> consist 
of the set of non-zero squares modulo p while the set of non-squares
modulo p are termed the <I>quadratic nonresidues modulo p</I>.


<H5><A NAME = "20501">QRCode(K, n) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite field K = F<sub>q</sub> and an odd prime n such that q is 
a quadratic residue modulo n, this function returns the quadratic 
residue code of length n over K. This corresponds to the cyclic
code with generator polynomial g<sub>0</sub>(x) = &prod;(x - &alpha;<sup>r</sup>),
where &alpha; is a primitive n-th root of unity in some extension 
field of K, and the product is taken over all quadratic residues 
modulo p.
</BLOCKQUOTE>
<H5><A NAME = "20502">GolayCode(K, ext) : FldFin, BoolElt -&gt; Code</A></H5>
<BLOCKQUOTE>
If the field K is GF(2), construct the binary Golay
code. If the field K is GF(3), construct the ternary
Golay code. If the boolean argument ext is <TT>true</TT>,
construct the extended code in each case.
</BLOCKQUOTE>
<H5><A NAME = "20503">DoublyCirculantQRCode(p) : RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given an odd prime p, this function returns the doubly circulant 
binary [2p, p] code based on quadratic residues modulo p. A 
doubly circulant code has generator matrix of the form [I | A],
where A is a circulant matrix.
</BLOCKQUOTE>
<H5><A NAME = "20504">DoublyCirculantQRCodeGF4(m, a) : RngIntElt, RngElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a prime power m that is greater than 2 and an integer a
that is either 0 or 1, return a [2m, m] doubly circulant linear
code over GF(4). For details see <A  HREF = "text1830.htm#bib_Gaborit02">[Gab02]</A>.
</BLOCKQUOTE>
<H5><A NAME = "20505">BorderedDoublyCirculantQRCode(p, a, b) : RngIntElt, RngElt, RngElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given an odd prime p and integers a and b, this function returns the 
bordered doubly circulant binary [2p + 1, p + 1] code based on quadratic 
residues modulo p. The construction is similar to that of a doubly 
circulant code except that the first p rows are extended by a mod 2 
while the p + 1-th row is extended by b mod 2.
</BLOCKQUOTE>
<H5><A NAME = "20506">TwistedQRCode(l, m) : RngIntElt,RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given positive integers l and m, both coprime to 2, return
a binary "twisted QR" code of length l * m. 
</BLOCKQUOTE>
<H5><A NAME = "20507">PowerResidueCode(K, n, p) : FldFin, RngIntElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite field K=F<sub>q</sub>, a positive integer n and a prime p
such that q is a p-th power residue modulo n, construct the 
p-th power residue code of length n. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20508">Example <TT>CodeFld_QuadraticResidueCode (H158E29)</TT></A></H3>
We construct a quadratic residue code of length 23 over GF(3).
<P>
<P>
<PRE>
&gt; QRCode(GF(3), 23);
[23, 12, 8] Quadratic Residue code over GF(3)
Generator matrix:
[1 0 0 0 0 0 0 0 0 0 0 0 2 2 2 1 1 0 2 0 2 0 0]
[0 1 0 0 0 0 0 0 0 0 0 0 0 2 2 2 1 1 0 2 0 2 0]
[0 0 1 0 0 0 0 0 0 0 0 0 0 0 2 2 2 1 1 0 2 0 2]
[0 0 0 1 0 0 0 0 0 0 0 0 2 2 2 0 0 2 0 1 2 2 0]
[0 0 0 0 1 0 0 0 0 0 0 0 0 2 2 2 0 0 2 0 1 2 2]
[0 0 0 0 0 1 0 0 0 0 0 0 2 2 1 0 0 0 2 2 2 1 2]
[0 0 0 0 0 0 1 0 0 0 0 0 2 1 1 2 1 0 2 2 1 2 1]
[0 0 0 0 0 0 0 1 0 0 0 0 1 0 2 0 1 1 1 2 0 1 2]
[0 0 0 0 0 0 0 0 1 0 0 0 2 0 2 0 1 1 0 1 1 0 1]
[0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 2 1 2 0 2 1 0]
[0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 1 2 1 2 0 2 1]
[0 0 0 0 0 0 0 0 0 0 0 1 1 1 2 2 0 1 0 1 0 0 2]
</PRE>
<HR>
<H4><A NAME = "20509">Reed--Solomon and Justesen Codes</A></H4>



<P>
<P>
<P>
<H5><A NAME = "20510">ReedSolomonCode(K, d, b) : FldFin, RngIntElt, RngIntElt -&gt; Code</A></H5>
<H5>ReedSolomonCode(K, d) : FldFin, RngIntElt -&gt; Code</H5>
<BLOCKQUOTE>
Given a finite field K=F<sub>q</sub> and a positive integer d, return the  
Reed--Solomon code of length n=q - 1 with design distance d. This
corresponds to <TT>BCHCode(K, q-1, d)</TT>.  For details see 
<A  HREF = "text1830.htm#bib_sloane">[MS78, p.294]</A>.
<P>
If b is given as a non-negative integer then 
the primitive element is first raised to the b-th power.
</BLOCKQUOTE>
<H5><A NAME = "20511">ReedSolomonCode(n, d) : RngIntElt, RngIntElt -&gt; Code</A></H5>
<H5>ReedSolomonCode(n, d, b) : RngIntElt, RngIntElt, RngIntElt -&gt; Code</H5>
<BLOCKQUOTE>
Given an integer n such that q=n + 1 is a prime power, and a positive
integer d, return the Reed--Solomon code over F<sub>q</sub> of length n 
and designed minimum distance d.
<P>
If b is given as a non-negative integer then 
the primitive element is first raised to the b-th power.
<P>
</BLOCKQUOTE>
<H5><A NAME = "20512">GRSCode(A, V, k) : [ FldFinElt ], [ FldFinElt ], RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Let A = [&alpha;<sub>1</sub>, ..., &alpha;<sub>n</sub>] be a sequence of n
distinct elements taken from the finite field K, and let
V = [v<sub>1</sub>, ..., v<sub>n</sub>] be a sequence of n non-zero
elements from K. Let k be a non-negative integer. Given such
A, V, and k, this function constructs the generalized Reed--Solomon code
GRS<sub>k</sub>(A, V) over K.  This is an [n, k' &le;k] code.
For details see <A  HREF = "text1830.htm#bib_sloane">[MS78, p.303]</A>.
</BLOCKQUOTE>
<H5><A NAME = "20513">JustesenCode(N, K) : Code, FldFinElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given an integer N such that N=2<sup>m</sup> - 1 and a positive integer K,
construct the binary linear Justesen code of length 2mN and dimension mK. 
For details see <A  HREF = "text1830.htm#bib_sloane">[MS78, p.307]</A>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20514">Example <TT>CodeFld_GRSCode (H158E30)</TT></A></H3>
We construct a generalized Reed--Solomon code over GF(2) based on sequences of
elements in the extension field GF(2<sup>3</sup>) of GF(2).  The parameter k is
taken to be 3, so the dimension 3 is at most k.
<P>
<P>
<PRE>
&gt; q := 2^3;
&gt; K&lt;w&gt; := GF(q);
&gt; A := [w ^ i : i in [0 .. q - 2]];
&gt; V := [K ! 1 : i in [0 .. q - 2]];
&gt; k := 3;
&gt; C := GRSCode(A, V, k);
[7, 3, 5] GRS code over GF(2^3)
Generator matrix:
[  1   0   0 w^3   w   1 w^3]
[  0   1   0 w^6 w^6   1 w^2]
[  0   0   1 w^5 w^4   1 w^4]
</PRE>
<HR>
<H4><A NAME = "20515">Maximum Distance Separable  Codes</A></H4>



<H5><A NAME = "20516">MDSCode(K, k) : FldFin, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite field GF(q = 2<sup>m</sup>), this function constructs the 
[q + 1, k, q - k + 2] maximum distance separable code.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1841.htm">[Next]</A><A  HREF = "text1839.htm">[Prev]</A> <A  HREF = "text1841.htm">[Right]</A> <A  HREF = "text1839.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>