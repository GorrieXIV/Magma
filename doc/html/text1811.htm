<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction of Multigraphs</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1812.htm">[Next]</A><A  HREF = "text1810.htm">[Prev]</A> <A  HREF = "text1812.htm">[Right]</A> <A  HREF = "text1810.htm">[Left]</A> <A  HREF = "text1809.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20038">Construction of Multigraphs</A></H3>

<P>
<P>
<P>
<P>
<P>
In this implementation, the order n of a multigraph or multidigraph
  is bounded by 134217722.
See Section <A  HREF = "text1784.htm#19679">Bounds on the Graph Order</A> in Chapter <A  HREF = "text1782.htm#19676">GRAPHS</A> 
  for more details.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1811.htm#20039">Construction of a General Multigraph</A>
<LI> <A  HREF = "text1811.htm#20042">Construction of a General Multidigraph</A>
<LI> <A  HREF = "text1811.htm#20045">Printing of a Multi(di)graph</A>
<LI> <A  HREF = "text1811.htm#20046">Operations on the Support</A>
</UL>
<H4><A NAME = "20039">Construction of a General Multigraph</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
Undirected multigraphs are constructed in a similar way to graphs
  (Subsection <A  HREF = "text1784.htm#19682">Construction of a General Graph</A>).


<H5><A NAME = "20040">MultiGraph&lt;n | edges &gt; : RngIntElt, List -&gt; GrphMultUnd, GrphVertSet, GrphEdgeSet</A></H5>
<H5>MultiGraph&lt;S | edges &gt; : SetEnum, List -&gt; GrphMultUnd, GrphVertSet, GrphEdgeSet</H5>
<H5>MultiGraph&lt;S | edges &gt; : SetIndx, List -&gt; GrphMultUnd, GrphVertSet, GrphEdgeSet</H5>
<BLOCKQUOTE>
Construct the multigraph G with vertex-set
V = {@ v<sub>1</sub>, v<sub>2</sub>, ..., v<sub>n</sub> @}
(where v<sub>i</sub> = i for each i if the first form of the constructor is used,
or the ith element of the enumerated or indexed set S otherwise),
and edge-set
E = { e<sub>1</sub>, e<sub>2</sub>, ..., e<sub>q</sub> }.
This function returns three values: The multigraph G,
  the vertex-set V of G; and the edge-set E of G.
<P>
The elements of E are specified by the list edges, where the items of
edges may be objects of the following types:
<P>
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A pair {v<sub>i</sub>, v<sub>j</sub>} of vertices in V.  The undirected edge 
  {v<sub>i</sub>, v<sub>j</sub>} from v<sub>i</sub> to v<sub>j</sub>  will be added 
  to the edge-set for G.
<P>
<DT>(b)</DT><DD>A tuple of the form &lt; v<sub>i</sub>, N<sub>i</sub> &gt; where N<sub>i</sub>
will be interpreted as a set of neighbours for the vertex v<sub>i</sub>.
The elements of the sets N<sub>i</sub> must be elements of V.
If N<sub>i</sub> = { u<sub>1</sub>, u<sub>2</sub>, ..., u<sub>r</sub> },
the edges {v<sub>i</sub>, u<sub>1</sub>}, ..., {v<sub>i</sub>, u<sub>r</sub>} will be added to G.
<P>
<DT>(c)</DT><DD>A sequence [ N<sub>1</sub>, N<sub>2</sub>, ..., N<sub>n</sub> ] of n sets, where N<sub>i</sub>
will be interpreted as a set of neighbours for the vertex v<sub>i</sub>.
The edges {v<sub>i</sub>, u<sub>i</sub>}, u<sub>i</sub> &isin;N<sub>i</sub>, are added to G.
<P>
<P>
<P>
</DL>
In addition to these three basic ways of specifying the edges
  list, the items in edges may also be:
<P>
<DL COMPACT class='compact'>
<DT>(d)</DT><DD>An edge e of a graph or digraph or  multigraph or
   multidigraph or network of order n.
If e is an edge from u to v, then the edge {u, v} is added
   to G.
<P>
<DT>(e)</DT><DD>An edge-set E of a graph or digraph or  multigraph or
  multidigraph or network of order n.
  Every edge e in E will be added to G according to the rule
  set out for a single edge.
<P>
<DT>(f)</DT><DD>A graph or a digraph or a multigraph or a multidigraph
  or a network H of order n.
  Every edge e  in H's edge-set is added to G according to the rule
  set out for a single edge.
<P>
<DT>(g)</DT><DD>A set of 
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>Pairs of the form {v<sub>i</sub>, v<sub>j</sub>} of vertices in V.
<DT>(ii)</DT><DD>Tuples of the form &lt; v<sub>i</sub>, N<sub>i</sub> &gt; where N<sub>i</sub>
will be interpreted as a set of neighbours for the vertex v<sub>i</sub>.
<DT>(iii)</DT><DD>Edges of a graph or digraph or  multigraph or
   multidigraph or network of order n.
<DT>(iv)</DT><DD>Graphs or digraphs or multigraphs or 
   multidigraphs or networks of order n.
<P>
</DL>
<DT>(h)</DT><DD>A sequence of 
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>Tuples of the form &lt; v<sub>i</sub>, N<sub>i</sub> &gt; where N<sub>i</sub>
will be interpreted as a set of neighbours for the vertex v<sub>i</sub>.</DL>
</DL>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20041">Example <TT>MultiGraph_GrphMultUnd_Constr (H156E1)</TT></A></H3>
<P>
<P>
<PRE>
&gt; G := MultiGraph&lt; 3 | &lt; 1, {2, 3} &gt;, &lt; 1, {2} &gt;, &lt; 2, {2, 3} &gt; &gt;;
&gt; G;
Multigraph
Vertex  Neighbours

1       2 3 2 ;
2       3 2 2 1 1 ;
3       2 1 ;

</PRE>
<HR>
<H4><A NAME = "20042">Construction of a General Multidigraph</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
Multidigraphs are constructed in the same way as digraphs
  (Subsection <A  HREF = "text1784.htm#19687">Construction of a General Digraph</A>).


<H5><A NAME = "20043">MultiDigraph&lt;n | edges &gt; : RngIntElt, List -&gt; GrphMultDir, GrphVertSet, GrphEdgeSet</A></H5>
<H5>MultiDigraph&lt;S | edges &gt; : SetEnum, List -&gt; GrphMultDir, GrphVertSet, GrphEdgeSet</H5>
<H5>MultiDigraph&lt;S | edges &gt; : SetIndx, List -&gt; GrphMultDir, GrphVertSet, GrphEdgeSet</H5>
<BLOCKQUOTE>
Construct the multidigraph G with vertex-set
V = {@ v<sub>1</sub>, v<sub>2</sub>, ..., v<sub>n</sub> @}
(where v<sub>i</sub> = i for each i if the first form of the constructor is used,
or the ith element of the enumerated or indexed set S otherwise),
and edge-set
E = { e<sub>1</sub>, e<sub>2</sub>, ..., e<sub>q</sub> }.
This function returns three values: The multidigraph G,
  the vertex-set V of G; and the edge-set E of G.
<P>
The elements of E are specified by the list edges, where the items of
edges may be objects of the following types:
<P>
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A pair [v<sub>i</sub>, v<sub>j</sub>] of vertices in V.  The directed edge 
  [v<sub>i</sub>, v<sub>j</sub>]
from v<sub>i</sub> to v<sub>j</sub> will be added 
to the edge-set for G.
<P>
<DT>(b)</DT><DD>A tuple of the form &lt; v<sub>i</sub>, N<sub>i</sub> &gt; where N<sub>i</sub>
will be interpreted as a set of out-neighbours for the vertex v<sub>i</sub>.
The elements of the sets N<sub>i</sub> must be elements of V.
If N<sub>i</sub> = { u<sub>1</sub>, u<sub>2</sub>, ..., u<sub>r</sub> },
the edges [v<sub>i</sub>, u<sub>1</sub>], ..., [v<sub>i</sub>, u<sub>r</sub>] will be added to G.
<P>
<DT>(c)</DT><DD>A sequence [ N<sub>1</sub>, N<sub>2</sub>, ..., N<sub>n</sub> ] of n sets, where N<sub>i</sub>
will be interpreted as a set of out-neighbours for the vertex v<sub>i</sub>.
All the edges [v<sub>i</sub>, u<sub>i</sub>], u<sub>i</sub> &isin;N<sub>i</sub>, are added to G.
<P>
<P>
<P>
</DL>
In addition to these four basic ways of specifying the edges
  list, the items in edges may also be:
<P>
<DL COMPACT class='compact'>
<DT>(d)</DT><DD>An edge e of a graph or digraph or  multigraph or
   multidigraph or network of order n.
If e is an edge from u to v, then the edge [u, v] is added
   to G.
Thus, if e is an undirected edge from u to v, both edges
  [u, v] and [v, u] are added to G.
<P>
<DT>(e)</DT><DD>An edge-set E of a graph or digraph or  multigraph or
   multidigraph or network of order n.
  Every edge e in E will be added to G according to the rule
  set out for a single edge.
<P>
<DT>(f)</DT><DD>A graph or a digraph or a multigraph or a multidigraph
  or a network H of order n.
  Every edge e  in H's edge-set is added to G according to the rule
  set out for a single edge.
<P>
<DT>(g)</DT><DD>A set of 
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>Pairs of the form [v<sub>i</sub>, v<sub>j</sub>] of vertices in V.
<DT>(ii)</DT><DD>Tuples of the form &lt; v<sub>i</sub>, N<sub>i</sub> &gt; where N<sub>i</sub>
will be interpreted as a set of out-neighbours for the vertex v<sub>i</sub>.
<DT>(iii)</DT><DD>Edges of a graph or digraph or  multigraph or
   multidigraph or network of order n.
<DT>(iv)</DT><DD>Graphs or digraphs or multigraphs or 
   multidigraphs or networks of order n.
<P>
</DL>
<DT>(h)</DT><DD>A sequence of 
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>Tuples of the form &lt; v<sub>i</sub>, N<sub>i</sub> &gt; where N<sub>i</sub>
will be interpreted as a set of out-neighbours for the vertex v<sub>i</sub>.</DL>
</DL>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20044">Example <TT>MultiGraph_GrphMultDir_Constr (H156E2)</TT></A></H3>
<P>
<P>
<PRE>
&gt; G := MultiDigraph&lt; 3 | &lt; 1, {2, 3} &gt;, &lt; 1, {2} &gt;, &lt; 2, {2, 3} &gt; &gt;;
&gt; G; 
Multidigraph
Vertex  Neighbours

1       2 3 2 ;
2       3 2 ;
3       ;

</PRE>
<HR>
<H4><A NAME = "20045">Printing of a Multi(di)graph</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
A multi(di)graph is displayed by listing, for each vertex, all of
its adjacent vertices.  If the multigraph has multiple edges from 
u to v, then the adjacency list of u contains as many
copies of the vertex v as there are edges from u to v.
<P>
The vertices in the adjacency list are not ordered,
they appear in the order in which they were created.
See the previous examples <A  HREF = "text1811.htm#20041">H156E1</A> 
  and <A  HREF = "text1811.htm#20044">H156E2</A>.


<H4><A NAME = "20046">Operations on the Support</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
The support of a multi(di)graph is subject to exactly the same operations
as simple graphs (see Subsection <A  HREF = "text1784.htm#19691">Operations on the Support</A>).


<H5><A NAME = "20047">Support(G) : GrphMult -&gt; SetIndx</A></H5>
<H5>Support(V) : GrphVertSet -&gt; SetIndx</H5>
<BLOCKQUOTE>
The indexed set used in the construction of G 
  (or the graph for which V
  is the vertex-set), or the standard set {@ 1, ..., n @}
  if it was not given.
</BLOCKQUOTE>
<H5><A NAME = "20048">ChangeSupport(G, S) : GrphMult, SetIndx -&gt; GrphMult, GrphVertSet, GrphEdgeSet</A></H5>
<BLOCKQUOTE>
If G is a graph having n vertices and S is an indexed set
   of cardinality n, return a new graph H equal to G but whose 
   support is S.
That is, H is structurally equal to G and its vertex and edge
  decorations are the <I>same</I> as those for G
  (see Sections <A  HREF = "text1813.htm#20067">Vertex Decorations: Labels</A> 
      and <A  HREF = "text1813.htm#20081">Edge Decorations</A>).
</BLOCKQUOTE>
<H5><A NAME = "20049">ChangeSupport(~G, S) : GrphMult, SetIndx -&gt;</A></H5>
<BLOCKQUOTE>
The procedural version of the above function.
</BLOCKQUOTE>
<H5><A NAME = "20050">StandardGraph(G) : GrphMult -&gt; GrphMult</A></H5>
<BLOCKQUOTE>
Returns a graph H that is isomorphic to G but defined on the standard support.
That is, H is structurally equal to G and its vertex and edge
  decorations are the same as those for G.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20051">Example <TT>MultiGraph_GrphMult_Support (H156E3)</TT></A></H3>
<P>
<P>
<PRE>
&gt; S := {@ "a", "b", "c" @};
&gt; G := MultiGraph&lt; S | &lt; 1, {2, 3} &gt;, &lt; 1, {2} &gt;, &lt; 2, {2, 3} &gt; &gt;;
&gt; G;
Multigraph
Vertex  Neighbours

c       b a b ;
b       a b b c c ;
a       b c ;

&gt; StandardGraph(G);
Multigraph
Vertex  Neighbours

1       2 3 2 ;
2       3 2 2 1 1 ;
3       2 1 ;

</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1812.htm">[Next]</A><A  HREF = "text1810.htm">[Prev]</A> <A  HREF = "text1812.htm">[Right]</A> <A  HREF = "text1810.htm">[Left]</A> <A  HREF = "text1809.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>