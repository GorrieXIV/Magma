<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Testing Finiteness</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text688.htm">[Next]</A><A  HREF = "text686.htm">[Prev]</A> <A  HREF = "text688.htm">[Right]</A> <A  HREF = "text686.htm">[Left]</A> <A  HREF = "text684.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7899">Testing Finiteness</A></H3>

<P>
<P>
In this section, K is a finite degree extension of the field 
F(x<sub>1</sub>, ..., x<sub>m</sub>), where F is Q, a number field, or a 
finite field. Also m &ge;0 if char F = 0, and m &gt; 0 
otherwise.


<H5><A NAME = "7900">IsFinite(G : parameters) : GrpMat -&gt; BoolElt, RngIntElt</A></H5>

<PRE>    NumberRandom: RngIntElt             Default: 10</PRE>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Algebra: BoolElt                    Default: <TT>true</TT></PRE>

<PRE>    Nilpotent: BoolElt                  Default: <TT>false</TT></PRE>

<PRE>    UseCongruence: BoolElt              Default: <TT>false</TT></PRE>

<PRE>    DetermineOrder: BoolElt             Default: <TT>false</TT></PRE>

<PRE>    Prime: RngintElt                    Default: 3</PRE>
<BLOCKQUOTE>
Let G be a finitely generated subgroup of GL(n, K). If
G is finite then the function returns <TT>true</TT>, otherwise <TT>false</TT>. The function is an implementation of algorithms from
<A  HREF = "text683.htm#bib_Recog">[DFO13b]</A>, <A  HREF = "text683.htm#bib_Zero">[DF09]</A>, <A  HREF = "text683.htm#bib_Positive">[DFO09]</A>, <A  HREF = "text683.htm#bib_Draft">[DF08]</A>.
<P>
The algorithm first tests whether <TT>NumberRandom</TT> random elements of G 
have finite order.
<P>
If the optional parameter <TT>Algebra</TT> is <TT>true</TT> and K is 
a function field of characteristic 
zero (resp. positive characteristic), then we use the "algebra algorithm" of 
<A  HREF = "text683.htm#bib_Zero">[DF09]</A> (resp. <A  HREF = "text683.htm#bib_Positive">[DFO09]</A>) to decide finiteness. 
<P>
Otherwise, we prove that G is finite by first constructing a congruence
homomorphism, then a presentation for the congruence image, and
finally evaluates its relations to obtain normal generators for 
the congruence kernel.   If char K = 0, then the kernel should 
be trivial, otherwise the kernel is unipotent. 
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how
the presentation is constructed. If its value is "CT", then we
use the presentation provided by <TT>CompositionTreeVerify</TT>. If
its value is "PC" and the image is soluble, then we use a
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or
<TT>FPGroupStrong</TT>. If the order of the congruence image is less
than the value of the optional argument <TT>Small</TT>, then we use
<TT>FPGroup</TT> to construct the presentation; if it is less than
the value of the optional argument <TT>OrderLimit</TT>, then we use
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we
use the presentation provided by <TT>CompositionTreeVerify</TT>.
<P>
If K is Q or a number field and <TT>UseCongruence</TT> is <TT>true</TT>, then use congruence homomorphism machinery to decide; 
otherwise use default algorithm. 
<P>
If G is known to be nilpotent then by setting the optional parameter 
<TT>Nilpotent</TT> to <TT>true</TT>, the function will call a special 
procedure for testing finiteness of nilpotent groups (see 
<A  HREF = "text683.htm#bib_Draft">[DF08, Section 4.3]</A>).
<P>
If the optional parameter <TT>DetermineOrder</TT> is set to <TT>true</TT>, and G is finite, then the function returns the order of 
G. This may sometimes be more expensive than deciding 
finiteness.
<P>
The optional parameter <TT>Prime</TT> applies if K has
characteristic 0: if <TT>Prime</TT> is positive, then it is a lower
bound for the characteristic of the congruence image; if it is 0
then the function constructs a congruence image defined over a field
of characteristic 0.
</BLOCKQUOTE>
<H5><A NAME = "7901">IsomorphicCopy(G : parameters) : GrpMat -&gt; BoolElt, GrpMat, HomGrp</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Verify: BoolElt                     Default: <TT>false</TT></PRE>

<PRE>    Algebra: BoolElt                    Default: <TT>false</TT></PRE>

<PRE>    StartDegree: RngIntElt              Default: 1</PRE>

<PRE>    EndDegree: RngIntElt                Default: 5</PRE>

<PRE>    CompletelyReducible: BoolElt        Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The input is a finite subgroup G of GL(n, K). If the 
function succeeds, then it returns <TT>true</TT> and an isomorphic 
copy of G in GL(n, GF(q)) where q is a prime power; 
otherwise it returns <TT>false</TT>. A description of the method 
used is in <A  HREF = "text683.htm#bib_Recog">[DFO13b, Section 4.3]</A>. If char K &gt; 0, 
then GF(q) has the same characteristic. Note that the function 
always succeeds if K has zero characteristic. 
<P>
If the optional parameter <TT>Algebra</TT> is <TT>true</TT> and
K is a function field of characteristic zero (resp. positive
characteristic), then we use the "algebra algorithm" of
<A  HREF = "text683.htm#bib_Zero">[DF09]</A> (resp. <A  HREF = "text683.htm#bib_Positive">[DFO09]</A>) to construct an isomorphic
copy.
<P>
Otherwise we prove that a congruence homomorphism is an isomorphism by
constructing a presentation for the congruence image and
evaluating its relations to obtain normal generators for the
congruence kernel.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how 
the presentation is constructed. If its value is "CT", then we 
use the presentation provided by <TT>CompositionTreeVerify</TT>. If 
its value is "PC" and the image is soluble, then we use a 
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value 
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or 
<TT>FPGroupStrong</TT>. If the order of the congruence image is less 
than the value of the optional argument <TT>Small</TT>, then we use 
<TT>FPGroup</TT> to construct the presentation; if it is less than 
the value of the optional argument <TT>OrderLimit</TT>, then we use 
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we 
use the presentation provided by <TT>CompositionTreeVerify</TT>.
<P>
If the optional parameter <TT>Verify</TT> is set to <TT>true</TT> then 
we first check whether G is finite.
<P>
If the characteristic of the coefficient field F is positive,
then we investigate extensions of F in the range <TT>StartDegree</TT> ... <TT>EndDegree</TT>.
<P>
If the optional parameter <TT>CompletelyReducible</TT> is set to <TT>true</TT> then we use a more efficient algorithm to construct the 
isomorphic copy.
</BLOCKQUOTE>
<H5><A NAME = "7902">Order(G : parameters) : GrpMat -&gt; RngIntElt</A></H5>

<PRE>    Verify: BoolElt                     Default: <TT>false</TT></PRE>

<PRE>    UseCongruence: BoolElt              Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Given a finite subgroup G of GL(n, K), the function
returns the order of G by applying <TT>IsomorphicCopy</TT> to G.
<P>
If the optional parameter <TT>Verify</TT> is set to <TT>true</TT>, then
we first check that G is finite.
<P>
If K is Q or a number field and <TT>UseCongruence</TT> is <TT>true</TT>, then use congruence homomorphism machinery to decide; 
otherwise use default algorithm. 
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text688.htm">[Next]</A><A  HREF = "text686.htm">[Prev]</A> <A  HREF = "text688.htm">[Right]</A> <A  HREF = "text686.htm">[Left]</A> <A  HREF = "text684.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>