<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Normal Subgroups and  Subgroup Series</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text717.htm">[Next]</A><A  HREF = "text715.htm">[Prev]</A> <A  HREF = "text717.htm">[Right]</A> <A  HREF = "text715.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8151">Normal Subgroups and  Subgroup Series</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text716.htm#8152">Characteristic Subgroups</A>
<LI> <A  HREF = "text716.htm#8162">Subgroup Series</A>
<LI> <A  HREF = "text716.htm#8179">Series for p-groups</A>
<LI> <A  HREF = "text716.htm#8185">Normal Subgroups and  Complements</A>
</UL>
<H4><A NAME = "8152">Characteristic Subgroups</A></H4>



<H5><A NAME = "8153">Centre(G) : GrpPC -&gt; GrpPC</A></H5>
<H5>Center(G) : GrpPC -&gt; GrpPC</H5>
<BLOCKQUOTE>
The centre of the group G.
</BLOCKQUOTE>
<H5><A NAME = "8154">CommutatorSubgroup(G) : GrpPC -&gt; GrpPC</A></H5>
<H5>DerivedSubgroup(G) : GrpPC -&gt; GrpPC</H5>
<H5>DerivedGroup(G) : GrpPC -&gt; GrpPC</H5>
<BLOCKQUOTE>
The derived subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "8155">FittingSubgroup(G) : GrpPC -&gt; GrpPC</A></H5>
<H5>FittingGroup(G) : GrpPC -&gt; GrpPC</H5>
<BLOCKQUOTE>
The Fitting subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "8156">FrattiniSubgroup(G) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
The Frattini subgroup of the group G.
</BLOCKQUOTE>
<H5><A NAME = "8157">FrattiniQuotientRank(G) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
The rank of the Frattini quotient of the p-group G.
</BLOCKQUOTE>
<H5><A NAME = "8158">Hypercentre(G) : GrpPC -&gt; GrpPC</A></H5>
<H5>Hypercenter(G) : GrpPC -&gt; GrpPC</H5>
<BLOCKQUOTE>
The hypercentre of the group G, i.e. the stationary term in the 
upper central series for G.
</BLOCKQUOTE>
<H5><A NAME = "8159">MinimalNormalSubgroups(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
A sequence containing all minimal normal subgroups of G.
</BLOCKQUOTE>
<H5><A NAME = "8160">pCore(G, S) : GrpPC, { RngIntElt }  -&gt; GrpPC</A></H5>
<H5>pCore(G, S) : GrpPC, RngIntElt -&gt; GrpPC</H5>
<BLOCKQUOTE>
The maximal normal &pi;-subgroup of G, O<sub>&pi;</sub>(G), where &pi; is defined by S.  The argument
S may be a set of primes, a single prime, 
or the negation of a single prime.  If S = - p,
then O<sub>p'</sub>(G) is returned.
</BLOCKQUOTE>
<H5><A NAME = "8161">Socle(G) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
The socle of G.
</BLOCKQUOTE>
<H4><A NAME = "8162">Subgroup Series</A></H4>



<H5><A NAME = "8163">PrimaryAbelianBasis(G) : GrpPC -&gt; [ GrpPCElt ], [ RngIntElt ]</A></H5>
<H5>AbelianBasis(G) : GrpPC -&gt; [ GrpPCElt ], [ RngIntElt ]</H5>
<BLOCKQUOTE>
Given an abelian group G, return sequences B and I such that
(order)(B[i]) = I[i] and &lt; B &gt; = G and the terms
of I give the types of each p-primary component of G.
The non-primary form uses the Smith form invariants, i.e. each element of
the sequence divides the next.
</BLOCKQUOTE>
<H5><A NAME = "8164">PrimaryAbelianInvariants(G) : GrpPC -&gt; [RngIntElt]</A></H5>
<H5>AbelianInvariants(G) : GrpPC -&gt; [RngIntElt]</H5>
<BLOCKQUOTE>
Given an abelian group G, return a sequence Q containing
the types of each p-primary component of G.
The non-primary form gives the Smith form invariants, i.e. each element of
the sequence divides the next.
</BLOCKQUOTE>
<H5><A NAME = "8165">ChiefSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
A chief series for the group G. The series is returned as a sequence
of subgroups of G.
</BLOCKQUOTE>
<H5><A NAME = "8166">CompositionSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
A composition series for the group G. The series is returned as a sequence
of subgroups of G.  The i-th term of the composition series has a
presentation given by the generators <TT>G.i</TT> through 
<TT>G.NPCgens(G)</TT> and
relations involving those generators only.
</BLOCKQUOTE>
<H5><A NAME = "8167">CompositionFactors(G) : GrpPC -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence of integer tuples that describe the composition
factors, ordered according to some composition series
for the group G.  Since each factor will be a cyclic
group of prime order, the tuples will each be of
the form &lt;19, 0, q&gt; representing the cyclic group
of order q.  The sequence has a custom print routine.
</BLOCKQUOTE>
<H5><A NAME = "8168">CompositionSeries(G, i) : GrpPC, RngIntElt -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
The i + 1-th entry of the composition series for the group G.
Its presentation is given by the generators <TT>G.(i+1)</TT> through 
<TT>G.m</TT>, where m is the number of pc-generators of G and 
relations involving these generators only.
</BLOCKQUOTE>
<H5><A NAME = "8169">DerivedSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
The derived series of the group G. The series is returned as a
sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "8170">DerivedLength(G) : GrpPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The derived length of the group G.
</BLOCKQUOTE>
<H5><A NAME = "8171">ElementaryAbelianSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
An elementary abelian series is a chain of
normal subgroups with the property that the quotient of each pair of
successive terms in the series is elementary abelian.
The elementary abelian series
for the group G is returned as a sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "8172">ElementaryAbelianSeriesCanonical(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
Gives a similar result to using <TT>ElementaryAbelianSeries</TT>, except the 
series returned depends only on the isomorphism 
type of the group, and consists of characteristic subgroups.
This function may be slower than <TT>ElementaryAbelianSeries</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8173">LowerCentralSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
The lower central series for the group G. The series is returned 
as a sequence of subgroups.
</BLOCKQUOTE>
<H5><A NAME = "8174">NilpotencyClass(G) : GrpPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
If G is nilpotent, return the nilpotence class of G.
Otherwise, -1 is returned.
</BLOCKQUOTE>
<H5><A NAME = "8175">pCentralSeries(G, p) : GrpPC, RngIntElt -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
The p-central series for G, where p is a prime dividing |G|.
The series is returned as a sequence of subgroups. The p-central series
P<sub>1</sub> triangleright P<sub>2</sub>  triangleright ... triangleright  P<sub>i</sub>
of a soluble group G is defined inductively
as follows:
<DL COMPACT class='compact'>
<DT></DT><DD>P<sub>1</sub> = G,
<DT></DT><DD>P<sub>i + 1</sub> = (G, P<sub>i</sub>)P<sub>i</sub><sup>p</sup>, for  i &gt; 0.</DL>
</BLOCKQUOTE>
<H5><A NAME = "8176">SubnormalSeries(G, H) : GrpPC, GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
Given a group G and a subgroup H of G, return a sequence
of subgroups commencing with G and terminating with H, such that
each subgroup is normal in the previous one.  If H is not subnormal
in G, the empty sequence is returned.
</BLOCKQUOTE>
<H5><A NAME = "8177">UpperCentralSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
The upper central series of G. The series is returned as a sequence
of subgroups.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8178">Example <TT>GrpPC_EAS (H68E20)</TT></A></H3>
The elementary abelian series of the group D<sub>3</sub> wreath D<sub>5</sub> has terms of 
the following orders:
<P>
<P>
<PRE>
&gt; H := DihedralGroup(GrpPerm, 5);
&gt; G := WreathProduct(DihedralGroup(GrpPC, 3), DihedralGroup(GrpPC, 5),
&gt;       [H.2, H.1]);
&gt; EAS := ElementaryAbelianSeries(G);
&gt; for i := 1 to #EAS do
&gt;    print FactoredOrder(EAS[i]);
&gt; end for;
    [ &lt;2, 6&gt;, &lt;3, 5&gt;, &lt;5, 1&gt; ]
    [ &lt;2, 4&gt;, &lt;3, 5&gt;, &lt;5, 1&gt; ]
    [ &lt;2, 4&gt;, &lt;3, 5&gt; ]
    [ &lt;3, 5&gt; ]
    []
</PRE>
Hence the elementary abelian factors can be seen to have sizes 2<sup>2</sup>,
5, 2<sup>4</sup>, and 3<sup>5</sup>, reading from top to bottom.
<HR>
<H4><A NAME = "8179">Series for p-groups</A></H4>

<P>
<P>
The following functions are only defined for a pc-group which is a
p-group.


<H5><A NAME = "8180">Agemo(G, i) : GrpPC, RngIntElt -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
Given a p-group G, return the characteristic subgroup of G
generated by the elements x<sup>p<sup>i</sup></sup>, x &isin;G, where i is a
positive integer.
</BLOCKQUOTE>
<H5><A NAME = "8181">Omega(G, i) : GrpPC, RngIntElt -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
Given a p-group G, return the characteristic subgroup of G
generated by the elements of order dividing p<sup>i</sup>, where i is a
positive integer.
</BLOCKQUOTE>
<H5><A NAME = "8182">JenningsSeries(G) : GrpPC -&gt; [GrpPC]</A></H5>
<BLOCKQUOTE>
Given a p-group G, return the Jennings series for G. The series is
returned as a sequence of subgroups. The Jennings series
J<sub>1</sub> triangleright J<sub>2</sub> triangleright ... triangleright J<sub>i</sub> ... of a p-group G is defined inductively as follows:
<DL COMPACT class='compact'>
<DT></DT><DD>J<sub>1</sub> = G,
<DT></DT><DD>J<sub>i + 1</sub> = &lt;(J<sub>i</sub>, G), J<sub>k</sub><sup>p</sup>&gt;, with k = &lceil;(i + 1)/p&rceil;, i &gt; 0.</DL>
</BLOCKQUOTE>
<H5><A NAME = "8183">pClass(G) : GrpPC  -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The lower exponent-p class of the p-group G.
</BLOCKQUOTE>
<H5><A NAME = "8184">pRanks(G) : GrpPC-&gt; [ RngIntElt ]</A></H5>
<BLOCKQUOTE>
A sequence whose i-th entry is the number of
pc-generators for the lower exponent-p class i
quotient of the p-group G.
</BLOCKQUOTE>
<H4><A NAME = "8185">Normal Subgroups and  Complements</A></H4>



<H5><A NAME = "8186">NormalSubgroups(G) : GrpPC -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The collection of all normal subgroups of G returned as
a sequence.
</BLOCKQUOTE>
<H5><A NAME = "8187">NormalLattice(G) : GrpPC -&gt; SubGrpLat</A></H5>
<BLOCKQUOTE>
The lattice of normal subgroups of G.
</BLOCKQUOTE>
<H5><A NAME = "8188">MinimalNormalSubgroup(G) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
An elementary abelian minimal normal subgroup of the soluble group G.
</BLOCKQUOTE>
<H5><A NAME = "8189">MinimalNormalSubgroup(G, N) : GrpPC -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
Given a non-trivial, normal subgroup N of G, return an elementary
abelian minimal normal subgroup of G contained in N.
</BLOCKQUOTE>
<H5><A NAME = "8190">Complements(G, N) : GrpPC, GrpPC -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a normal subgroup N of G, return conjugacy
class representatives of all complements of N in G.
This function implements the first cohomology computation
described in <A  HREF = "text705.htm#bib_CNW_compls">[CNW90]</A>.
</BLOCKQUOTE>
<H5><A NAME = "8191">NormalComplements(G, N) : GrpPC, GrpPC -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a normal subgroup N of G, return
all normal complements of N in G.
This function implements the first cohomology computation
described in <A  HREF = "text705.htm#bib_CNW_compls">[CNW90]</A>.
</BLOCKQUOTE>
<H5><A NAME = "8192">NormalComplements(G, H, N) : GrpPC, GrpPC, GrpPC -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a normal subgroup N of G, and a normal
subgroup H of G containing N,
return all complements of N in H which are
normal in G.
This function implements the first cohomology computation
described in <A  HREF = "text705.htm#bib_CNW_compls">[CNW90]</A>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8193">Example <TT>GrpPC_NormalComplements (H68E21)</TT></A></H3>
We define the direct product of an extraspecial group of
order 3<sup>3</sup> and D<sub>3</sub> and let N be the first factor
of this product.  Inside the Sylow 3-subgroup, we
see that N has 11 classes of complements, three of
which are normal. 
<P>
<P>
<PRE>
&gt; A := ExtraSpecialGroup(GrpPC,3,1);
&gt; B := DihedralGroup(GrpPC,3);
&gt; G,f,p := DirectProduct(A,B);
&gt; N := f[1](A);
&gt; S3 := Sylow(G,3);
&gt; cS := Complements(S3,N);
&gt; [Index(S3,Normalizer(S3,t)):t in cS];
[ 1, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3 ]
</PRE>
We can compute only the normal
complements by using <TT>NormalComplements</TT>.
<P>
<P>
<PRE>
&gt; ncS := NormalComplements(S3,N);
&gt; #ncS;
3
</PRE>
We can check that precisely one of these three complements
is actually normal in G.
<P>
<P>
<PRE>
&gt; [IsNormal(G,t):t in ncS];
[ true, false, false ]
</PRE>
Since N has a G-normal complement in S3,
we must have S3 normal in G.  We can verify
this.  Using the three-parameter version
of <TT>NormalComplements</TT> we can directly
compute the G-normal complements of N in S3.
<P>
<P>
<PRE>
&gt; IsNormal(G,S3);
true
&gt; ncG := NormalComplements(G,S3,N);
&gt; #ncG;
1
&gt; #NormalComplements(G,N);
1
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text717.htm">[Next]</A><A  HREF = "text715.htm">[Prev]</A> <A  HREF = "text717.htm">[Right]</A> <A  HREF = "text715.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>