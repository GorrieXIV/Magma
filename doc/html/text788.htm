<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction of a Finitely Presented Abelian Group and its Elements</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text789.htm">[Next]</A><A  HREF = "text787.htm">[Prev]</A> <A  HREF = "text789.htm">[Right]</A> <A  HREF = "text787.htm">[Left]</A> <A  HREF = "text786.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8900">Construction of a Finitely Presented Abelian Group and its Elements</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text788.htm#8901">The Free Abelian Group</A>
<LI> <A  HREF = "text788.htm#8904">Relations</A>
<LI> <A  HREF = "text788.htm#8910">Specification of a Presentation</A>
<LI> <A  HREF = "text788.htm#8915">Accessing the Defining Generators  and Relations</A>
</UL>
<H4><A NAME = "8901">The Free Abelian Group</A></H4>



<H5><A NAME = "8902">FreeAbelianGroup(n) : RngIntElt -&gt; GrpAb</A></H5>
<BLOCKQUOTE>
Construct the free abelian group F on n generators, where n is a 
positive integer. The i-th generator may be referenced by the 
expression <TT>F.i</TT>, i = 1, ..., n. Note that a special form of 
the assignment statement is provided which enables the user to assign 
names to the generators of F. In this form of assignment, the list
of generator names is enclosed within angle brackets and appended to 
the variable name on the <I>left hand side</I> of the assignment 
statement.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8903">Example <TT>GrpAb_FreeAbelianGroup (H74E1)</TT></A></H3>
The statement
<P>
<P>
<PRE>
&gt; F := FreeAbelianGroup(2);
</PRE>
creates the free abelian group on two generators. Here the generators may be 
referenced using the standard names, F.1 and F.2.
<P>
<P>
The statement
<P>
<P>
<PRE>
&gt; F&lt;x, y&gt; := FreeAbelianGroup(2);
</PRE>
defines F to be the free abelian group on two generators and assigns 
the names x and y to the generators.
<HR>
<H4><A NAME = "8904">Relations</A></H4>

<P>
<P>
<P>
<P>


<H5><A NAME = "8905">w<sub>1</sub> = w<sub>2</sub> : GrpAbElt, GrpAbElt -&gt; Rel</A></H5>
<BLOCKQUOTE>
Given words w<sub>1</sub> and w<sub>2</sub> over the generators of an abelian 
group A, create the relation w<sub>1</sub> = w<sub>2</sub>. Note that this relation 
is not automatically added to the existing set of defining relations
R for S. It may be added to R, for example, through use of
the <TT>quo</TT>-constructor (see below).
<P>
</BLOCKQUOTE>
<H5><A NAME = "8906">r[1] : GrpAbRel, RngIntElt -&gt; GrpAbElt</A></H5>
<H5>LHS(r) : Rel -&gt; GrpAbElt</H5>
<BLOCKQUOTE>
Given a relation r over the generators of A,
return the left hand side of the relation r.
The object returned is a word over the generators of A.
</BLOCKQUOTE>
<H5><A NAME = "8907">r[2] : GrpAbRel, RngIntElt -&gt; GrpAbElt</A></H5>
<H5>RHS(r) : Rel -&gt; GrpAbElt</H5>
<BLOCKQUOTE>
Given a relation r over the generators of A,
return the right hand side of the relation r.
The object returned is a word over the generators of A.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8908">Parent(r) : RelElt -&gt; GrpAb</A></H5>
<BLOCKQUOTE>
Group over which the relation r is taken.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8909">Example <TT>GrpAb_Relations (H74E2)</TT></A></H3>
We may define a group and a set of relations as follows:
<P>
<P>
<PRE>
&gt; F&lt;x, y&gt; := FreeAbelianGroup(2);
&gt; rels := { 2*x = 3*y, 4*x + 4*y = Id(F) } ;
</PRE>
<P>
To replace one side of a relation, the easiest way is to
reassign the relation. So for example, to replace the relation
2 x = 3 y by 2 x = 4 y:
<P>
<P>
<PRE>
&gt; r := 2*x = 3*y;
&gt; r := LHS(r) = 4*y;
</PRE>
<HR>
<H4><A NAME = "8910">Specification of a Presentation</A></H4>

<P>
<P>
<P>
An abelian group with non-trivial relations is constructed as a quotient 
of an existing abelian group, possibly a free abelian group.


<P>
A simple way of specifying an abelian group is as a product of cyclic
groups.
<H5><A NAME = "8911">AbelianGroup&lt; X | R &gt; : List(Var), List(GrpAbRel) -&gt; GrpAb, Hom(GrpAb)</A></H5>
<BLOCKQUOTE>
Given a list X of variables x<sub>1</sub>, ..., x<sub>r</sub>, and a list of
relations R  over these generators, let F be the free abelian group on 
the generators x<sub>1</sub>, ..., x<sub>r</sub>.  Then construct (a) an abelian group A
isomorphic to the quotient of F by the subgroup of F defined by R,
and (b) the natural homomorphism &phi; : F -&gt; A.
<P>
Each term of the list R is either a <I>word</I>, a 
<I>relation</I>, a <I>relation list</I> or a <I>subgroup</I> of F.
<DL COMPACT class='compact'>
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>A <I>relation</I> consists of a pair of words, separated by `='.
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>A <I>word</I> w is interpreted as a <I>relator</I>, that is, it is equivalent to the relation w = 0.
(See above).
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>A <I>relation list</I> consists of a list of words, where each pair
of adjacent words is separated by `=':
  w<sub>1</sub> = w<sub>2</sub> = ... = w<sub>r</sub>.
This is interpreted as the set of relations 
      w<sub>1</sub> = w<sub>r</sub>, ..., w<sub>r - 1</sub> = w<sub>r</sub>.
Note that the relation list construct is only meaningful in the
context of the <TT>quo</TT>-constructor.
<P>
<P>
</DL>
A <I>subgroup</I> H appearing in the list R contributes its generators
to the relation set for A, i.e., each generator of H is interpreted
as a relator for A.
<P>
The group F may be referred to by the special symbol <TT>$</TT> in any word 
appearing to the right of the `<TT>|</TT>' symbol in the <TT>quo</TT>-constructor.
Also, in the context of the <TT>quo</TT>-constructor, the identity element
(empty word) may be represented by the digit 0.
<P>
<P>
The function returns:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The quotient group A;
<DT>(b)</DT><DD>The natural homomorphism &phi; : F -&gt; A.</DL>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8912">Example <TT>GrpAb_AbelianGroup (H74E3)</TT></A></H3>
We create the abelian group defined by the presentation
&lt; a, b, c | 7a + 4b + c, 8a + 5b + 2c, 9a + 6b + 3c &gt;.
<P>
<P>
<PRE>
&gt; F&lt;a, b, c&gt; := FreeAbelianGroup(3);
&gt; A := quo&lt; F | 7*a + 4*b + c, 8*a + 5*b + 2*c, 9*a + 6*b + 3*c &gt;;
&gt; A;
AbelianGroup isomorphic to Z_3 + Z
Defined on 2 generators
Relations:
    3*A.1 = 0
</PRE>
<HR>
<H5><A NAME = "8913">AbelianGroup([n<sub>1</sub>,...,n<sub>r</sub>]): [ RngIntElt ] -&gt; GrpAb</A></H5>
<BLOCKQUOTE>
Construct the abelian group defined by the sequence [n<sub>1</sub>, ..., n<sub>r</sub>] 
of non-negative integers as an abelian group. The function returns the 
direct product 
of cyclic groups C<sub>n<sub>1</sub></sub> x C<sub>n<sub>2</sub></sub> x ... x C<sub>n<sub>r</sub></sub>, 
where C<sub>0</sub> is interpreted as an infinite cyclic group.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8914">Example <TT>GrpAb_AbelianGroup2 (H74E4)</TT></A></H3>
We create the abelian group 
Z<sub>2</sub> x Z<sub>3</sub> x Z<sub>4</sub> x Z<sub>5</sub> x Z<sub>6</sub> x Z x Z.
<P>
<P>
<PRE>
&gt; G&lt;[x]&gt; := AbelianGroup([2,3,4,5,6,0,0]);
&gt; G;
Abelian Group isomorphic to Z/2 + Z/6 + Z/60 + Z + Z
Defined on 7 generators
Relations:
    2*G.1 = 0
    3*G.2 = 0
    4*G.3 = 0
    5*G.4 = 0
    6*G.5 = 0
</PRE>
<HR>
<H4><A NAME = "8915">Accessing the Defining Generators  and Relations</A></H4>

<P>
<P>
The functions described here provide access to basic information 
stored for an abelian group A.


<H5><A NAME = "8916">A . i : GrpAb, RngIntElt -&gt; GrpAbElt</A></H5>
<BLOCKQUOTE>
The i-th defining generator for A.
</BLOCKQUOTE>
<H5><A NAME = "8917">Generators(A) : GrpAb -&gt; { GrpAbElt }</A></H5>
<BLOCKQUOTE>
A set containing the generators for A.
</BLOCKQUOTE>
<H5><A NAME = "8918">NumberOfGenerators(A) : GrpAb -&gt; RngIntElt</A></H5>
<H5>Ngens(A) : GrpAb -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of generators for A.
</BLOCKQUOTE>
<H5><A NAME = "8919">Parent(u) : GrpAbElt -&gt; GrpAb</A></H5>
<BLOCKQUOTE>
The parent group A of the word u.
</BLOCKQUOTE>
<H5><A NAME = "8920">Relations(A) : GrpAb -&gt; [ Rel ]</A></H5>
<BLOCKQUOTE>
A sequence containing the defining relations for A.
</BLOCKQUOTE>
<H5><A NAME = "8921">RelationMatrix(A) : GrpAb -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
A matrix where each row corresponds to one of the defining relations of A.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text789.htm">[Next]</A><A  HREF = "text787.htm">[Prev]</A> <A  HREF = "text789.htm">[Right]</A> <A  HREF = "text787.htm">[Left]</A> <A  HREF = "text786.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>