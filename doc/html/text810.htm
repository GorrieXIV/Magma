<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Free Groups and Words</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text811.htm">[Next]</A><A  HREF = "text809.htm">[Prev]</A> <A  HREF = "text811.htm">[Right]</A> <A  HREF = "text809.htm">[Left]</A> <A  HREF = "text808.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9093">Free Groups and Words</A></H3>

<P>



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text810.htm#9094">Construction of a Free Group</A>
<LI> <A  HREF = "text810.htm#9097">Construction of Words</A>
<LI> <A  HREF = "text810.htm#9101">Access Functions for Words</A>
<LI> <A  HREF = "text810.htm#9109">Arithmetic Operators for Words</A>
<LI> <A  HREF = "text810.htm#9115">Comparison of Words</A>
<LI> <A  HREF = "text810.htm#9123">Relations</A>
</UL>
<H4><A NAME = "9094">Construction of a Free Group</A></H4>



<H5><A NAME = "9095"></A><A NAME = "GrpFP_1:FreeGroup">FreeGroup</A>(n) : RngIntElt -&gt; GrpFP</H5>
<BLOCKQUOTE>
Construct the free group F of rank n, where n is a positive
integer. 
<P>
The i-th generator of F may be referenced by the expression
<TT>F.i</TT>, i = 1, ..., n. Note that a special form of the assignment
statement is provided which enables the user to assign names to the
generators of F. In this form of assignment, the list of generator
names is enclosed within angle brackets and appended to the variable
name on the <I>left hand side</I> of the assignment statement:
<TT>F&lt; v<sub>1</sub>, ..., v<sub>n</sub> &gt; := FreeGroup(n);</TT>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9096">Example <TT>GrpFP_1_Free (H75E1)</TT></A></H3>
The statement
<P>
<P>
<PRE>
&gt; F := FreeGroup(2);
</PRE>
creates the free group of rank 2. Here the generators may be referenced using
the standard names, <TT>F.1</TT> and <TT>F.2</TT>.
<P>
The statement
<P>
<P>
<PRE>
&gt; F&lt;x, y&gt; := FreeGroup(2);
</PRE>
defines F to be the free group of rank 2 and assigns the names x and
y to the two generators.
<HR>
<H4><A NAME = "9097">Construction of Words</A></H4>

<P>
<P>
The operations in this section apply to both, free groups and arbitrary 
fp-groups.


<H5><A NAME = "9098">G ! [ i<sub>1</sub>, ..., i<sub>s</sub> ] : GrpFP, [ RngIntElt ] -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given a group G defined on r generators and a sequence
[i<sub>1</sub>, ..., i<sub>s</sub>] of integers lying in the range [ - r, r],
excluding 0, construct the word
G.|i<sub>1</sub>|<sup>&epsilon;<sub>1</sub></sup> * G.|i<sub>2</sub>|<sup>&epsilon;<sub>2</sub></sup> * ... * G.|i<sub>s</sub>|<sup>&epsilon;<sub>s</sub></sup>
where &epsilon;<sub>j</sub> is +1 if i<sub>j</sub> is positive, and -1 if i<sub>j</sub> is
negative.
</BLOCKQUOTE>
<H5><A NAME = "9099">Identity(G) : GrpFP -&gt; GrpFPElt</A></H5>
<H5>Id(G) : GrpFP -&gt; GrpFPElt</H5>
<H5>G ! 1 : GrpFP, RngIntElt -&gt; GrpFPElt</H5>
<BLOCKQUOTE>
Construct the identity element, represented as the empty word, for the 
fp-group G.
For a sample application of this function, see Example
<A  HREF = "text810.htm#9122">H75E3</A>.
</BLOCKQUOTE>
<H5><A NAME = "9100">Random(G, m, n) : GrpFP, RngIntElt, RngIntElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
A random word of length l in the generators of the group G,
where m &le;l &le;n.
For a sample application of this function, see Example
<A  HREF = "text810.htm#9122">H75E3</A>.
</BLOCKQUOTE>
<H4><A NAME = "9101">Access Functions for Words</A></H4>

<P>
<P>
This section describes some basic access functions for words. These operations
apply to both, free groups and arbitrary fp-groups.


<H5><A NAME = "9102"># w : GrpFPElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The length of the word w.
</BLOCKQUOTE>
<H5><A NAME = "9103">ElementToSequence(w) : GrpFPElt -&gt; [ RngIntElt ]</A></H5>
<H5>Eltseq(w) : GrpFPElt -&gt; [ RngIntElt ]</H5>
<BLOCKQUOTE>
The sequence Q obtained by decomposing the word w into its constituent
generators and generator inverses. Suppose w is a word in the
group G. Then, if w = G.i<sub>1</sub><sup>e<sub>1</sub></sup> ... G.i<sub>m</sub><sup>e<sub>m</sub></sup>, with each e<sub>i</sub> equalling plus or minus 1,
then Q[j] = i<sub>j</sub> if e<sub>j</sub> = + 1 and Q[j] = - i<sub>j</sub> if e<sub>j</sub> = (-1), for
j = 1, ..., m.
</BLOCKQUOTE>
<H5><A NAME = "9104">ExponentSum(w, x) : GrpFPElt, GrpFPElt -&gt; RngIntElt</A></H5>
<H5>Weight(w, x) : GrpFPElt, GrpFPElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a word w, and the name of a generator x of a group G,
compute the sum of the exponents of the generator x in the word w.
For a sample application of this function, see Example
<A  HREF = "text810.htm#9122">H75E3</A>.
</BLOCKQUOTE>
<H5><A NAME = "9105">GeneratorNumber(w) : GrpFPElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Suppose w is a word belonging to a group G. Assume x is the
name of the i-th generator of G.  Then
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>if w = <TT>Identity(G)</TT>, <TT>GeneratorNumber(w)</TT> is 0;
<DT>(ii)</DT><DD>if w = x * w', w' a word in G, <TT>GeneratorNumber(w)</TT> is i;
<DT>(iii)</DT><DD>if w = x<sup> - 1</sup> * w', w' a word in G, <TT>GeneratorNumber(w)</TT> is -i.</DL>
</BLOCKQUOTE>
<H5><A NAME = "9106"></A><A NAME = "GrpFP_1:LeadingGenerator">LeadingGenerator</A>(w) : GrpFPElt -&gt; GrpFPElt</H5>
<BLOCKQUOTE>
Suppose w is a word belonging to a group G. If w = x<sup>&epsilon;</sup> * w',
w' a word in G, x a generator of G and &epsilon;&isin;{-1, + 1}, the
functions returns x<sup>&epsilon;</sup>.  If w= <TT>Identity(G)</TT>, it returns
<TT>Identity(G)</TT>. For a sample application of this function, see Example
<A  HREF = "text810.htm#9122">H75E3</A>.
</BLOCKQUOTE>
<H5><A NAME = "9107">Parent(w) : GrpFPElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
The parent group G of the word w.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9108">Example <TT>GrpFP_1_WordAccess (H75E2)</TT></A></H3>
Consider the free group F on 6 generators
<P>
<P>
<PRE>
&gt; F&lt;u,v,w,x,y,z&gt; := FreeGroup(6);
</PRE>
and the sequence of words
<P>
<P>
<PRE>
&gt; rels := [ (u*v)^42, (v,x), (x*z^2)^4,
&gt;           v^2*y^3, (v*z)^3, y^4, (x*z)^3 ];
</PRE>
The abelianised relation matrix of the quotient
 &lt; u, v, w, x, y, z |
    (uv)<sup>42</sup>, (v, x), (xz<sup>2</sup>)<sup>4</sup>, v<sup>2</sup>y<sup>3</sup>, (vz)<sup>3</sup>, y<sup>4</sup>, (xz)<sup>3</sup> &gt; 
can be obtained using the following construction
<P>
<P>
<PRE>
&gt; R := Matrix(Integers(), 
&gt;        [ [ Weight(r, F.j) : j in [1..6] ] : r in rels ]);
&gt; R;
[42 42  0  0  0  0]
[ 0  0  0  0  0  0]
[ 0  0  0  4  0  8]
[ 0  2  0  0  3  0]
[ 0  3  0  0  0  3]
[ 0  0  0  0  4  0]
[ 0  0  0  3  0  3]
</PRE>
(The function <TT>Matrix</TT> constructs a matrix from a sequence of row vectors.)
<HR>
<H4><A NAME = "9109">Arithmetic Operators for Words</A></H4>

<P>
<P>
Suppose G is an fp-group for which generators have already been defined. 
This subsection defines the elementary arithmetic operations on words that
are derived
from the multiplication and inversion operators. The availability of the
operators defined here enables the user to construct an element 
(<I>word</I>) of G in terms of the generators as follows:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A generator is a word;
<DT>(ii)</DT><DD>The expression (u) is a word, where u is a word;
<DT>(iii)</DT><DD>The product u * v of the words u and v is a word;
<DT>(iv)</DT><DD>The conjugate u<sup>v</sup> of the word u by the word v, is a word 
(u<sup>v</sup> expands into the word v<sup> - 1</sup> * u * v);
<DT>(v)</DT><DD>The power of a word, u<sup>n</sup>, where u is a word and n is an
integer, is a word;
<DT>(vi)</DT><DD>The commutator (u, v) of the words u and v is a word ((u, v) expands into the word u<sup> - 1</sup> * v<sup> - 1</sup> * u * v).  Note that (u, v, w) is 
equivalent to ((u, v), w), i.e. commutators are <I>left-normed</I>.
<P>
<P>
</DL>
The word operations defined here may be applied either to the
words of a free group or the words of a group with non-trivial relations.
If such an operator is applied to a group possessing non-trivial relations,
only free reduction will be applied to the resulting words.


<H5><A NAME = "9110">u * v : GrpFPElt, GrpFPElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given words u and v belonging to the same fp-group G, return
the product of u and v.
</BLOCKQUOTE>
<H5><A NAME = "9111">u ^ n : GrpFPElt, RngIntElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
The n-th power of the word u, where n is an integer. When invoked
with n = (-1), the function computes the inverse of u. When invoked
with n = 0, the function returns the identity element.
</BLOCKQUOTE>
<H5><A NAME = "9112">u ^ v : GrpFPElt, GrpFPElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given words u and v belonging to the same fp-group G, return
the conjugate v<sup> - 1</sup> * u * v of the word u by the word v.
</BLOCKQUOTE>
<H5><A NAME = "9113">(u, v) : GrpFPElt, GrpFPElt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given words u and v belonging to the same fp-group G, return
the commutator u<sup> - 1</sup>v<sup> - 1</sup>uv of the words u and v.
</BLOCKQUOTE>
<H5><A NAME = "9114">(u<sub>1</sub>, ..., u<sub>n</sub>) : List(GrpFPElt) -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given the n words u<sub>1</sub>, ..., u<sub>n</sub> belonging to the same
fp-group G, return their commutator.  Commutators are
<I>left-normed</I>, so that they are evaluated from left to right.
</BLOCKQUOTE>
<H4><A NAME = "9115">Comparison of Words</A></H4>

<P>
<P>
Words in an fp-group may be compared both for equality and for their
relationship with respect to a natural lexicographic ordering. It should
be noted that even when a pair of words belong to a group defined by 
non-trivial relations, only the free reductions of the words are compared.
Thus, a pair of words belonging to a group G may be declared to be
distinct even though they may represent the same element of G.
<P>
The words of an fp-group G are ordered first by length and then
lexicographically.
The lexicographic ordering is determined by the following ordering on the
generators and their inverses:
G.1  &lt;  G.1<sup> - 1</sup> &lt; G.2 &lt; G.2<sup> - 1</sup> &lt; ... Here, u and v are words belonging to some common fp-group.


<H5><A NAME = "9116">u eq v : GrpFPElt, GrpFPElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the free reductions of the words u and v are identical.
</BLOCKQUOTE>
<H5><A NAME = "9117">u ne v : GrpFPElt, GrpFPElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the free reductions of the words u and v are not identical.
</BLOCKQUOTE>
<H5><A NAME = "9118">u lt v : GrpFPElt, GrpFPElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the word u precedes the word v, with respect to the
ordering defined above for elements of an fp-group. The words u and 
v are freely reduced before the comparison is made.
</BLOCKQUOTE>
<H5><A NAME = "9119">u le v : GrpFPElt, GrpFPElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the word u either precedes, or is equal to, the word v,
with respect to the ordering defined above for elements of an fp-group.
The words u and v are freely reduced before the comparison is made.
</BLOCKQUOTE>
<H5><A NAME = "9120">u ge v : GrpFPElt, GrpFPElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the word u either follows, or is equal to, the word v,
with respect to the ordering defined above for elements of an fp-group.
The words u and v are freely reduced before the comparison is made.
</BLOCKQUOTE>
<H5><A NAME = "9121">u gt v : GrpFPElt, GrpFPElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the word u follows the word v, with respect to the
ordering defined above for elements of an fp-group. The words u and 
v are freely reduced before the comparison is made.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9122">Example <TT>GrpFP_1_Words (H75E3)</TT></A></H3>
We construct the free group on three generators and generate a random word
<P>
w of length between 4 and 6.
<P>
<P>
<PRE>
&gt; F&lt;a,b,c&gt; := FreeGroup(3);
&gt; 
&gt; w := Random(F, 4, 6);
&gt; w;
b^-1 * a^-1 * b^2 * a^-1
</PRE>
We print the length of w and the weight (the exponent sum) of generator
a in w.
<P>
<P>
<PRE>
&gt; #w;
5
&gt; 
&gt; Weight(w, a);
-2
</PRE>
We now strip the generators from w one by one, using arithmetic and
comparison operators for words and the access function
<A  HREF = "text810.htm#GrpFP_1:LeadingGenerator">LeadingGenerator</A>.
<P>
<P>
<PRE>
&gt; while w ne Identity(F) do
&gt;    g := LeadingGenerator(w);
&gt;    print g;
&gt;    w := g^-1 * w;
&gt; end while;
b^-1
a^-1
b
b
a^-1
</PRE>
<HR>
<H4><A NAME = "9123">Relations</A></H4>

<P>
<P>
A <I>relation</I> is an equality between two words in a fp-group. To
facilitate working with relations, a <I>relation type</I> is provided.


<H5><A NAME = "9124">w<sub>1</sub> = w<sub>2</sub> : GrpFPElt, GrpFPElt -&gt; GrpFPRel</A></H5>
<BLOCKQUOTE>
Given words w<sub>1</sub> and w<sub>2</sub> over the generators of an fp-group G, create 
the relation w<sub>1</sub> = w<sub>2</sub>. Note that this relation is not automatically added 
to the existing set of defining relations R for G. It may be added to R, 
for example, through use of the <A  HREF = "text811.htm#GrpFP_1:quo">quo</A>-constructor (see below).
</BLOCKQUOTE>
<H5><A NAME = "9125">r[1] : RelElt, RngIntElt -&gt; GrpFPElt</A></H5>
<H5>LHS(r) : RelElt -&gt; GrpFPElt</H5>
<BLOCKQUOTE>
Given a relation r over the generators of G, return the left hand side of 
the relation r.  The object returned is a word over the generators of G.
</BLOCKQUOTE>
<H5><A NAME = "9126">r[2] : RelElt, RngIntElt -&gt; GrpFPElt</A></H5>
<H5>RHS(r) : RelElt -&gt; GrpFPElt</H5>
<BLOCKQUOTE>
Given a relation r over the generators of G, return the right hand side of 
the relation r. The object returned is a word over the generators of G.
</BLOCKQUOTE>
<H5><A NAME = "9127">r[1] = w : GrpFPRel, RngIntElt, GrpFPElt -&gt; GrpFPRel</A></H5>
<BLOCKQUOTE>
Redefine the left hand side of the relation r to be the word w.
</BLOCKQUOTE>
<H5><A NAME = "9128">r[2] = w : GrpFPRel, RngIntElt, GrpFPElt -&gt; GrpFPRel</A></H5>
<BLOCKQUOTE>
Redefine the right hand side of the relation r to be the word w.
</BLOCKQUOTE>
<H5><A NAME = "9129">f(r) : Hom(GrpFP), GrpFPRel -&gt; GrpFPRel</A></H5>
<BLOCKQUOTE>
Given a homomorphism of the group G for which r is a relation, return
the image of r under f.
</BLOCKQUOTE>
<H5><A NAME = "9130">Parent(r) : RelElt -&gt; GrpFP</A></H5>
<BLOCKQUOTE>
Group over which the relation r is taken.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9131">Example <TT>GrpFP_1_Relations (H75E4)</TT></A></H3>
We may define a group and a set of relations as follows:
<P>
<P>
<PRE>
&gt; F&lt;x, y&gt; := FreeGroup(2);
&gt; rels := { x^2 = y^3, (x*y)^4 = Id(F) } ;
</PRE>
<P>
To replace one side of a relation, the easiest way is to
reassign the relation. So for example, to replace the relation
x<sup>2</sup>=y<sup>3</sup> by x<sup>2</sup>=y<sup>4</sup>, we go:
<P>
<P>
<PRE>
&gt; r := x^2 = y^3;
&gt; r := LHS(r) = y^4;
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text811.htm">[Next]</A><A  HREF = "text809.htm">[Prev]</A> <A  HREF = "text811.htm">[Right]</A> <A  HREF = "text809.htm">[Left]</A> <A  HREF = "text808.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>