<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Introduction</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text157.htm">[Next]</A><A  HREF = "text155.htm">[Prev]</A> <A  HREF = "text157.htm">[Right]</A> [____] <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1115">Introduction</A></H3>

<P>
<P>
This online help node and the nodes below it describe
the operators and functions for working with 
the ring of rational integers Z.
<P>
Integers are the most commonly used objects in Magma. They can
be created by just typing in the literal (decimal) digits. Integers thus
created
are elements of the ring of integers which is automatically created when
Magma is started up. There is just one single object `integer ring'
around, but references to it (new `names' for it) can be created using
the <TT>IntegerRing</TT> function.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text156.htm#1116">Representation</A>
<LI> <A  HREF = "text156.htm#1117">Coercion</A>
<LI> <A  HREF = "text156.htm#1118">Homomorphisms</A>
</UL>
<H4><A NAME = "1116">Representation</A></H4>

<P>
<P>
Since large integers occur so frequently, the first requirement
for a computer algebra system is to support fast arithmetic for
integers of arbitrary size. Indeed, within the bounds set by
the available memory, it is possible to operate reasonably efficiently
with integers of any number of decimal digits.
<P>
Although it is well possible to use the integer facilities without
being aware of the internal representation of (large) integers, it
is sometimes useful to know how integers are stored. The most important
fact is that
integers smaller than 
2<sup>30</sup>=1073741824 in absolute value are `single precision', and in
many circumstances such `small integers' allow considerably faster arithmetic
(they are treated slightly differently internally and escape the overhead of
memory management used to deal with multi-precision integers).


<H4><A NAME = "1117">Coercion</A></H4>

<P>
<P>
Integers will be automatically coerced into almost every unitary ring R
using the identification of 1 and 1<sub>R</sub>. This means that integer arguments
are allowed for almost any ring element function, and that it is not
necessary to convert an integer before applying binary operators (such as
+) on a combination of arguments consisting of an integer and another ring
element.


<H4><A NAME = "1118">Homomorphisms</A></H4>

<P>
<P>
Ring homomorphisms are required to be unitary. Therefore, to specify a
homomorphism with the integers as its domain requires merely the specification
of the codomain.


<H5><A NAME = "1119">hom&lt; Z -&gt; R | &gt; : RngInt, Rng -&gt; Map</A></H5>
<BLOCKQUOTE>
The natural homomorphism from Z to the ring R.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1120">Example <TT>RngInt_hom (H18E1)</TT></A></H3>
<P>
<P>
<PRE>
&gt; h := hom&lt; Integers() -&gt; MatrixRing(RealField(12), 3) | &gt;;
&gt; h(2)^-1;                                  
[0.5   0   0]
[  0 0.5   0]
[  0   0 0.5]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text157.htm">[Next]</A><A  HREF = "text155.htm">[Prev]</A> <A  HREF = "text157.htm">[Right]</A> [____] <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>