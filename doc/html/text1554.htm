<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Structure of Congruence  Subgroups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1555.htm">[Next]</A><A  HREF = "text1553.htm">[Prev]</A> <A  HREF = "text1555.htm">[Right]</A> <A  HREF = "text1553.htm">[Left]</A> <A  HREF = "text1551.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "17428">Structure of Congruence  Subgroups</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1554.htm#17436">Cusps and Elliptic Points of Congruence Subgroups</A>
</UL>
<H5><A NAME = "17429">CosetRepresentatives(G) : GrpPSL2 -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
If G is a subgroup of finite index in PSL<sub>2</sub>(Z), then
returns a sequence of coset representatives of G in PSL<sub>2</sub>(Z).
</BLOCKQUOTE>
<H5><A NAME = "17430">Generators(G) : GrpPSL2 -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns a sequence of generators of the congruence subgroup G.
</BLOCKQUOTE>
<H5><A NAME = "17431">FindWord(G,g) : GrpPSL2, GrpPSL2Elt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
For a congruence subgroup G, and an element g of G,
this function returns a sequence of integers corresponding to an
expression for g in terms of a fixed set of generators for G.
Let L be the list of generators for G output by the function
<TT>Generators</TT>.  Then the return sequence
[e<sub>1</sub>n<sub>1</sub>, e<sub>2</sub>n<sub>2</sub>, ..., e<sub>m</sub> n<sub>m</sub>],
where n<sub>i</sub> are positive integers, and e<sub>i</sub>=1 or -1, means that
g=L[n<sub>1</sub>]<sup>e<sub>1</sub></sup>L[n<sub>2</sub>]<sup>e<sub>2</sub></sup> ... L[n<sub>m</sub>]<sup>e<sub>m</sub></sup>.
Note that since the computation is in PSL<sub>2</sub>(R), this equality
only holds up to multiplication by &#8723; 1.
</BLOCKQUOTE>
<H5><A NAME = "17432">Genus(G) : GrpPSL2 -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The genus of the upper half plane quotiented by the congruence
   subgroup G.
</BLOCKQUOTE>
<H5><A NAME = "17433">FundamentalDomain(G) : GrpPSL2  -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
For G a subgroup of PSL<sub>2</sub>(Z)
returns a sequence of points in the Upper Half plane which are the
vertices of a fundamental domain for G.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "17434">Example <TT>GrpPSL2_Example-of-finding-coset-representatives (H136E3)</TT></A></H3>
In this example we compute a set of generators for 
&Gamma;<sub>0</sub>(12).
<P>
<P>
<PRE>
&gt; G := CongruenceSubgroup(0,12);
&gt; Generators(G);
[
    [1 1]
    [0 1],

    [ 5 -1]
    [36 -7],

    [  5  -4]
    [ 24 -19],

    [  7  -5]
    [ 24 -17],

    [ 5 -3]
    [12 -7]        
]
&gt; C := CosetRepresentatives(G);
&gt; H&lt;i,r&gt; := UpperHalfPlaneWithCusps();
&gt; triangle := [H|Infinity(),r,r-1];
&gt; translates := [g*triangle : g in C];
</PRE>
<HR>
<H3><A NAME = "17435">Example <TT>GrpPSL2_Element-of-congruence-subgroup-in-terms-of-generators (H136E4)</TT></A></H3>
This example illustrates how any element of a congruence
subgroup can be written in terms of the set of generators
output by the <TT>generators</TT> function.
<P>
<P>
<P>
<PRE>
&gt; N := 34;
&gt; Chi := DirichletGroup(N, CyclotomicField(EulerPhi(N)));
&gt; GaloisConjugacyRepresentatives(Chi);
[
    1,
    $.1,
    $.1^2,
    $.1^4,
    $.1^8
]
&gt; char := Chi.1^8;
&gt; G := CongruenceSubgroup([N,Conductor(char),1],char);
&gt; G;
Gamma_0(2) intersection Gamma_1(17) with character $.1^8
&gt; gens := Generators(G);
&gt; #gens;
21
&gt; g := G! [21, 4, 68, 13];
&gt; // express g in terms of Generators(G)
&gt; FindWord(G, g);
[ -8, 1 ]
&gt; // This means that up to sign, g = gens[8]^(-1) * gens[1]
&gt; gens[8]^(-1) * gens[1];
[-21  -4]
[-68 -13]
</PRE>
<HR>
<H4><A NAME = "17436">Cusps and Elliptic Points of Congruence Subgroups</A></H4>



<H5><A NAME = "17437">Cusps(G) : GrpPSL2 -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns a sequence of inequivalent cusps of 
the congruence subgroup G.
</BLOCKQUOTE>
<H5><A NAME = "17438">CuspWidth(G,x) : GrpPSL2, SetCspElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the width of x as a cusp  of the congruence
subgroup G.
</BLOCKQUOTE>
<H5><A NAME = "17439">EllipticPoints(G) : GrpPSL2 -&gt; [SpcHypElt]</A></H5>
<H5>EllipticPoints(G,H) : GrpPSL2, SpcHyp -&gt; [SpcHypElt]</H5>
<BLOCKQUOTE>
Returns a list of inequivalent elliptic points for the congruence subgroup G.
A second argument may be given to specify the upper half plane H
containing these elliptic points.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "17440">Example <TT>GrpPSL2_cusp-example (H136E5)</TT></A></H3>
We can compute a set of representative cusps for
&Gamma;<sub>1</sub>(12), and their widths as follows:
<P>
<P>
<PRE>
&gt; G := CongruenceSubgroup(0,12);
&gt; Cusps(G);
[
    oo,
    0,
    1/6,
    1/4,
    1/3,
    1/2
]
&gt; Widths(G);
[ 1, 12, 1, 3, 4, 3 ]
&gt; // Note that the sum of the cusp widths is the same as the Index:
&gt; &amp;+Widths(G);
24
&gt; Index(G);
24
</PRE>
<P>
In the following example we find which group &Gamma;<sub>0</sub>(N) has the
most elliptic points for N less than 20, and list the elliptic points
in this case.
<P>
<P>
<P>
<PRE>
&gt; H := UpperHalfPlaneWithCusps();
&gt; [#EllipticPoints(Gamma0(N),H) : N in [1..20]];
[ 2, 1, 1, 0, 2, 0, 2, 0, 0, 2, 0, 0, 4, 0, 0, 0, 2, 0, 2, 0 ]   
&gt; // find the index where the maximal number of elliptic points is attained:
&gt; Max($1);
4 13
&gt; // find the elliptic points for Gamma0(13):
&gt; EllipticPoints(Gamma0(13));
[
    5/13 + (1/13)*root(-1),
    8/13 + (1/13)*root(-1),
    7/26 + (1/26)*root(-3),
    19/26 + (1/26)*root(-3)
]      
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1555.htm">[Next]</A><A  HREF = "text1553.htm">[Prev]</A> <A  HREF = "text1555.htm">[Right]</A> <A  HREF = "text1553.htm">[Left]</A> <A  HREF = "text1551.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>