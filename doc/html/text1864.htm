<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Constructions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1865.htm">[Next]</A><A  HREF = "text1863.htm">[Prev]</A> <A  HREF = "text1865.htm">[Right]</A> <A  HREF = "text1863.htm">[Left]</A> <A  HREF = "text1862.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20725">Constructions</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1864.htm#20726">General Linear Codes</A>
<LI> <A  HREF = "text1864.htm#20734">Simple Linear Codes</A>
<LI> <A  HREF = "text1864.htm#20741">General Cyclic Codes</A>
</UL>
<H4><A NAME = "20726">General Linear Codes</A></H4>



<H5><A NAME = "20727">LinearCode&lt;R, n | L&gt; : Rng, RngIntElt, List -&gt; Code</A></H5>
<BLOCKQUOTE>
Create a code as a subspace of the R-space V = R<sup>(n)</sup> which is generated
by the elements specified by the list L, where L is a list of 
one or more items of the following types:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>An element of V.
<DT>(b)</DT><DD>A set or sequence of elements of V.
<DT>(c)</DT><DD>A sequence of n elements of R, defining an element of V.
<DT>(d)</DT><DD>A set or sequence of sequences of type (c).
<DT>(e)</DT><DD>A subspace of V.
<DT>(f)</DT><DD>A set or sequence of subspaces of V.</DL>
</BLOCKQUOTE>
<H5><A NAME = "20728">LinearCode(U) : ModTupRng -&gt; Code</A></H5>
<BLOCKQUOTE>
Let V be the R-space R<sup>(n)</sup> and suppose that U is a 
subspace of V.  The effect of this function is to define the 
linear code C corresponding to the subspace U.  
</BLOCKQUOTE>
<H5><A NAME = "20729">LinearCode(A) : ModMatRngElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a k x  n matrix A over the ring R, construct 
the linear code generated by the rows of A. Note that it is
not assumed that the rank of A is k. The effect of this 
constructor is otherwise identical to that described above. 
</BLOCKQUOTE>
<H5><A NAME = "20730">PermutationCode(u, G) : ModTupRngElt, GrpPerm -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite permutation group G of degree n, and a 
vector u belonging to the n-dimensional vector space V 
over the ring R, construct the code C corresponding to 
the subspace of V spanned by the set of vectors obtained 
by applying the permutations of G to the vector u. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20731">Example <TT>CodeRng_TernaryGolayCode (H161E1)</TT></A></H3>
The octacode O<sub>8</sub> over Z<sub>4</sub> <A  HREF = "text1861.htm#bib_Wan_Z4">[Wan97, Ex. 1.3]</A> can be defined as follows:
<P>
<P>
<PRE>
&gt; Z4 := IntegerRing(4);
&gt; O8 := LinearCode&lt;Z4, 8 |
&gt;     [1,0,0,0,3,1,2,1],
&gt;     [0,1,0,0,1,2,3,1],
&gt;     [0,0,1,0,3,3,3,2],
&gt;     [0,0,0,1,2,3,1,1]&gt;;
&gt; O8;
[8, 4, 4] Linear Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 3 1 2 1]
[0 1 0 0 1 2 3 1]
[0 0 1 0 3 3 3 2]
[0 0 0 1 2 3 1 1]
</PRE>
Alternatively, if we want to see the code as a subspace of R<sup>(8)</sup>,
where R=Z<sub>4</sub>, we could proceed as follows:
<P>
<P>
<PRE>
&gt; O8 := LinearCode(sub&lt;RSpace(Z4, 8) |
&gt;     [1,0,0,0,3,1,2,1],
&gt;     [0,1,0,0,1,2,3,1],
&gt;     [0,0,1,0,3,3,3,2],
&gt;     [0,0,0,1,2,3,1,1]&gt;);
</PRE>
<HR>
<H3><A NAME = "20732">Example <TT>CodeRng_CodeFromMatrix (H161E2)</TT></A></H3>
We define a code by constructing a matrix over <TT>GR</TT>(4, 3),
and using its rowspace to generate the code:
<P>
<P>
<PRE>
&gt; R&lt;w&gt; := GaloisRing(4,3);
&gt; S := [1, 1, 0, w^2, w, w + 2, 2*w^2, 2*w^2 + w + 3];
&gt; G := Matrix(R, 2, 4, S);
&gt; G;
[            1             1             0           w^2]
[            w         w + 2         2*w^2 2*w^2 + w + 3]
&gt; C := LinearCode(G);
&gt; C;
(4, 512, 3) Linear Code over GaloisRing(2, 2, 3)
Generator matrix:
[          1           1           0         w^2]
[          0           2       2*w^2 2*w^2 + 2*w]
&gt; #C;
512
</PRE>
<HR>
<H3><A NAME = "20733">Example <TT>CodeRng_PermutationCode (H161E3)</TT></A></H3>
We define G to be a permutation group of degree 7 and construct the 
code C as the Z<sub>4</sub>-code generated by applying the permutations of G 
to a certain vector:
<P>
<P>
<PRE>
&gt; G := PSL(3, 2);
&gt; G;
Permutation group G of degree 7
    (1, 4)(6, 7)
    (1, 3, 2)(4, 7, 5)
&gt; Z4 := IntegerRing(4);
&gt; V := RSpace(Z4, 7);
&gt; u := V ! [1, 0, 0, 1, 0, 1, 1];
&gt; C := PermutationCode(u, G);
&gt; C;
[7, 6, 2] Linear Code over IntegerRing(4)
Generator matrix:
[1 0 0 1 0 1 1]
[0 1 0 1 1 1 0]
[0 0 1 0 1 1 1]
[0 0 0 2 0 0 2]
[0 0 0 0 2 0 2]
[0 0 0 0 0 2 2]
</PRE>
<HR>
<H4><A NAME = "20734">Simple Linear Codes</A></H4>



<H5><A NAME = "20735">ZeroCode(R, n) : Rng, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the (n, 0, n) code
consisting of only the zero code word. By convention the minimum weight 
of the zero code is n).
</BLOCKQUOTE>
<H5><A NAME = "20736">RepetitionCode(R, n) : Rng, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the length n
code with minimum Hamming weight n, generated by the all-ones vector. 
</BLOCKQUOTE>
<H5><A NAME = "20737">ZeroSumCode(R, n) : Rng, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the length n
code over R such that for all codewords (c<sub>1</sub>, c<sub>2</sub>, ... , c<sub>n</sub>) we have
&sum;<sub>i</sub> c<sub>i</sub> =0 .
<P>
</BLOCKQUOTE>
<H5><A NAME = "20738">UniverseCode(R, n) : Rng, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a ring R and positive integer n, return the length n
code with minimum Hamming weight 1, consisting of all possible codewords.
</BLOCKQUOTE>
<H5><A NAME = "20739">RandomLinearCode(R, n, k) : Rng, RngIntElt, RngIntElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a finite ring R and positive integers n and k, such 
that 0 &lt; k &le;n, the function returns a random linear code
of length n over R with k generators. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20740">Example <TT>CodeRng_simple-finite-ring (H161E4)</TT></A></H3>
The repetition and zero sum codes are dual over all rings.
<P>
<P>
<PRE>
&gt; R := Integers(9);
&gt; C1 := RepetitionCode(R, 5);
&gt; C1;
(5, 9, 5) Linear Code over IntegerRing(9)
Generator matrix:
[1 1 1 1 1]
&gt; C2 := ZeroSumCode(R, 5);
&gt; C2;
(5, 6561, 2) Linear Code over IntegerRing(9)
Generator matrix:
[1 0 0 0 8]
[0 1 0 0 8]
[0 0 1 0 8]
[0 0 0 1 8]
&gt; C1 eq Dual(C2);
true
</PRE>
<HR>
<H4><A NAME = "20741">General Cyclic Codes</A></H4>

<P>
<P>
Cyclic codes form an important family of linear codes over all rings.
A cyclic code is one which is generated by all of the cyclic shifts of a 
given codeword:
(c<sub>0</sub>, c<sub>1</sub>, ..., c<sub>n - 1</sub>, c<sub>n</sub>), (c<sub>n</sub>, c<sub>0</sub>, ..., c<sub>n - 2</sub>, c<sub>n - 1</sub>), ..., 
(c<sub>1</sub>, c<sub>2</sub>, ..., c<sub>n</sub>, c<sub>0</sub>)
<P>
Using the correspondence (c<sub>0</sub>, c<sub>1</sub>, ..., c<sub>n</sub>) iff c<sub>0</sub> + c<sub>1</sub>x + ... + c<sub>n</sub>x<sup>n</sup>,
the cyclic codes of length n over the ring R are in one-to-one
correspondence with the principal ideals of R[x]/(x<sup>n</sup> - 1)R[x].


<H5><A NAME = "20742">CyclicCode(u) : ModTupRngElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Given a vector u belonging to the R-space R<sup>(n)</sup>, 
construct the length n cyclic code generated by the 
right cyclic shifts of the vector u.
</BLOCKQUOTE>
<H5><A NAME = "20743">CyclicCode(n, g) : RngIntElt, RngUPolElt -&gt; Code</A></H5>
<BLOCKQUOTE>
Let R be a ring.  Given a positive integer n and a univariate
polynomial g(x) &isin;R[x],
construct the length n cyclic code generated by g(x).
</BLOCKQUOTE>
<H5><A NAME = "20744">CyclotomicFactors(R, n) : Rng, RngIntElt -&gt; [RngUPolElt]</A></H5>
<BLOCKQUOTE>
Given a Galois ring R (which is possibly an integer residue ring
with a prime power modulus), and a positive integer n which is 
coprime to the characteristic of R, return a 
factorisation of x<sup>n</sup> - 1 over R.
<P>
Note that since factorisation is not necessarily unique over R, 
the factorisation returned is the one obtained by first factoring 
over the residue field of R and then performing Hensel lifting.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20745">Example <TT>CodeRng_CyclicCode (H161E5)</TT></A></H3>
We construct some cyclic codes over Z<sub>4</sub> by factorizing x<sup>n</sup> - 1 over
Z<sub>4</sub> for n=7, 23 and using some of the irreducible factors found.
<P>
<P>
<PRE>
&gt; Z4 := IntegerRing(4);
&gt; P&lt;x&gt; := PolynomialRing(Z4);
&gt; n := 7; L := CyclotomicFactors(Z4, n); L;
[
    x + 3,
    x^3 + 2*x^2 + x + 3,
    x^3 + 3*x^2 + 2*x + 3
]
&gt; CyclicCode(n, L[1]);
[7, 6, 2] Cyclic Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 0 0 3]
[0 1 0 0 0 0 3]
[0 0 1 0 0 0 3]
[0 0 0 1 0 0 3]
[0 0 0 0 1 0 3]
[0 0 0 0 0 1 3]
&gt; CyclicCode(n, L[2]);
[7, 4, 3] Cyclic Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 3 1 2]
[0 1 0 0 2 1 1]
[0 0 1 0 1 1 3]
[0 0 0 1 3 2 3]
&gt; CyclicCode(n, L[3]);
[7, 4, 3] Cyclic Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 3 2 3]
[0 1 0 0 3 1 1]
[0 0 1 0 1 1 2]
[0 0 0 1 2 1 3]
&gt; n := 23; L := CyclotomicFactors(Z4, n); L;
[
    x + 3,
    x^11 + 2*x^10 + 3*x^9 + 3*x^7 + 3*x^6 + 3*x^5 + 2*x^4 + x + 3,
    x^11 + 3*x^10 + 2*x^7 + x^6 + x^5 + x^4 + x^2 + 2*x + 3
]
&gt; CyclicCode(n, L[2]);
[23, 12] Cyclic Code over IntegerRing(4)
Generator matrix:
[1 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 2 3 3 3 0 3 2]
[0 1 0 0 0 0 0 0 0 0 0 0 2 1 1 0 0 0 1 1 3 2 3]
[0 0 1 0 0 0 0 0 0 0 0 0 3 3 1 1 2 3 3 0 1 2 0]
[0 0 0 1 0 0 0 0 0 0 0 0 0 3 3 1 1 2 3 3 0 1 2]
[0 0 0 0 1 0 0 0 0 0 0 0 2 2 3 3 1 3 0 1 3 2 1]
[0 0 0 0 0 1 0 0 0 0 0 0 1 1 2 3 1 2 0 1 1 0 0]
[0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 2 3 1 2 0 1 1 0]
[0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 2 3 1 2 0 1 1]
[0 0 0 0 0 0 0 0 1 0 0 0 1 3 0 1 3 3 0 2 2 1 3]
[0 0 0 0 0 0 0 0 0 1 0 0 3 2 3 0 3 2 2 3 2 1 3]
[0 0 0 0 0 0 0 0 0 0 1 0 3 0 2 3 2 2 1 1 3 1 3]
[0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 2 1 1 1 0 1 2 3]
</PRE>
<HR>
<H3><A NAME = "20746">Example <TT>CodeRng_cyclic-galois-ring (H161E6)</TT></A></H3>
We create a cyclic code of length 5 over <TT>GR</TT>(4, 2).
<P>
<P>
<PRE>
&gt; R&lt;w&gt; := GR(4,2);
&gt; P&lt;x&gt; := PolynomialRing(R);
&gt; g := CyclotomicFactors(R, 5)[2];
&gt; g;
x^2 + (3*w + 2)*x + 1
&gt; C := CyclicCode(5, g);
&gt; C;
(5, 4096, 3) Cyclic Code over GaloisRing(2, 2, 2)
Generator matrix:
[      1       0       0       1 3*w + 2]
[      0       1       0   w + 2   w + 2]
[      0       0       1 3*w + 2       1]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1865.htm">[Next]</A><A  HREF = "text1863.htm">[Prev]</A> <A  HREF = "text1865.htm">[Right]</A> <A  HREF = "text1863.htm">[Left]</A> <A  HREF = "text1862.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>