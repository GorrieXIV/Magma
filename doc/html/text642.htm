<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Presentations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text643.htm">[Next]</A><A  HREF = "text641.htm">[Prev]</A> <A  HREF = "text643.htm">[Right]</A> <A  HREF = "text641.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7247">Presentations</A></H3>

<P>
<P>
In this section we describe how to compute a presentation in terms of
generators and relations for a permutation group and also how to obtain
a representation of a permutation as word in the defining generators.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text642.htm#7248">Generators and Relations</A>
<LI> <A  HREF = "text642.htm#7252">Permutations as Words</A>
</UL>
<H4><A NAME = "7248">Generators and Relations</A></H4>



<H5><A NAME = "7249">FPGroup(G) : GrpPerm :-&gt; GrpFP, Hom(Grp)</A></H5>
<BLOCKQUOTE>
Construct a presentation for the permutation group G on the set of
defining generators and return the presentation in the form of a finitely 
presented group F that is isomorphic to G. The presentation is
obtained by first computing the regular representation of G and then
using the Todd-Coxeter Schreier algorithm to construct a presentation on 
the strong generators.  In this situation the strong generators are
identical to the defining generators.
<P>
A group homomorphism &phi;: F -&gt; G, defining G as a permutation 
representation of F, is also returned. 
</BLOCKQUOTE>
<H5><A NAME = "7250">FPGroup(G, N) : GrpPerm, GrpPerm :-&gt; GrpFP, Hom(Grp)</A></H5>
<H5>FPQuotient(G, N) : GrpPerm, GrpPerm :-&gt; GrpFP, Hom(Grp)</H5>
<BLOCKQUOTE>
Given a normal subgroup N of G, compute an fp-group representation F
of the quotient G/N and the homomorphism &phi;: G -&gt; F.
</BLOCKQUOTE>
<H5><A NAME = "7251">FPGroupStrong(G: parameters) : GrpPerm :-&gt; GrpFP, Hom(Grp)</A></H5>

<PRE>    Random: BoolElt                     Default: <TT>true</TT></PRE>

<PRE>    Run: RngIntElt                      Default: 20</PRE>
<BLOCKQUOTE>
Construct a presentation for the permutation group G on a set of strong
generators and return the presentation in the form of a finitely presented
group F that is isomorphic to G. In Magma, a combination of the 
Schreier Todd-Coxeter Sims algorithm  and the Brownie-Cannon-Sims verification
procedure is used to construct the presentation. See Leon <A  HREF = "text628.htm#bib_Leon3">[Leo80]</A> and
Gebhardt <A  HREF = "text628.htm#bib_gebhardt_presentations">[Geb00]</A> for more details of the individual
algorithms. 
<P>
If strong generators
are not already known for G, they will be constructed. If strong generators
have to be constructed, the parameters <TT>Random</TT> and
<TT>Run</TT> may be used to control the application of the random schreier
algorithm to construct a probable BSGS before commencing the construction of
the presentation. If <TT>Random</TT> is set to false then no randomising is 
performed, and the algorithm becomes the straight STCS algorithm.
In the case in which strong generators are already
known for G, the presentation will be on these strong generators. 
<P>
The presentation will have the property that it includes a presentation
for each group in the stabilizer chain of the BSGS.
<P>
The group isomorphism &phi;: F -&gt; G, defining G as a permutation 
representation of F, is also returned. 
</BLOCKQUOTE>
<H4><A NAME = "7252">Permutations as Words</A></H4>

<P>
<P>
Consider a permutation group G defined on d generators. The <I>word group</I> of G is a free group W of rank d. Then we regard G
as a homomorphic image of F with associated homomorphism &phi;: W -&gt; G. All operations involving words in the generators of G
will be performed in W.


<H5><A NAME = "7253">WordGroup(G) : GrpPerm -&gt; GrpBB, Map</A></H5>
<BLOCKQUOTE>
Given a permutation group G defined on d generators, return
(a) a free group W on d generators represented as a group whose 
elements are defined by straight-line programs (SLP group), and (b) the
homomorphism &phi; from W to G such that W.i -&gt; G.i, for i = 1, ..., d. The group W associated with G
by this function will be referred to as the <I>word group</I> for G.
</BLOCKQUOTE>
<H5><A NAME = "7254">InverseWordMap(G) : GrpPerm -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a permutation group G and its associated word group W with
canonical homomorphism &phi;:W -&gt; G, construct the inverse
mapping &rho;. Thus, given a permutation g of G, g@&rho; returns
an element in the preimage of g under &phi;. If the word group W
does not already exist, it will be created.
</BLOCKQUOTE>
<H5><A NAME = "7255">ActingWord(G, x, y) : GrpPerm, Elt, Elt -&gt; GrpFPElt</A></H5>
<BLOCKQUOTE>
Given points x and y belonging to the same G-orbit of the
natural G-set X, return a word w in the word group W of G
such that x<sup>&phi;(w)</sup> = y.  Here &phi; is the canonical
homomorphism from W to G.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text643.htm">[Next]</A><A  HREF = "text641.htm">[Prev]</A> <A  HREF = "text643.htm">[Right]</A> <A  HREF = "text641.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>