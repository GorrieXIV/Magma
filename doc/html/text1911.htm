<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Number Theoretic Bit Generators</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1912.htm">[Next]</A><A  HREF = "text1910.htm">[Prev]</A> <A  HREF = "text1912.htm">[Right]</A> <A  HREF = "text1910.htm">[Left]</A> <A  HREF = "text1908.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "21255">Number Theoretic Bit Generators</A></H3>



<H5><A NAME = "21256">RandomSequenceRSA(b, t) : RngIntElt, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Generates a sequence of t bits using the RSA pseudo-random bit generator 
with an  RSA modulus of approximately b bits in length.
The modulus n is computed by finding (pseudo-)random primes with the 
<TT>RandomPrime</TT> function.  If gcd(&phi;(n),  3) is 1, then the exponent 
3 will be used.  Otherwise, a (pseudo-)random exponent e is chosen so
that gcd( &phi;(n),  e)=1.
The seed is also chosen as a (pseudo-)random number modulo n.
Bits are represented as elements of GF(2).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21257">Example <TT>PseudoRandom_rsa_stats (H165E2)</TT></A></H3>
The code below counts the number of 1's that appear in a sequence
of 1000 bits generated from a 100-bit RSA modulus.
<P>
<P>
<P>
<PRE>
&gt; Z := Integers();
&gt; &amp;+[ Z | b : b in RandomSequenceRSA(100, 1000) ];
497
</PRE>
<HR>
<H5><A NAME = "21258">RandomSequenceRSA(n, e, s, t) : RngIntElt, RngIntElt, RngIntElt,RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Generates a sequence of t bits using the RSA pseudo-random bit generator 
with modulus n, exponent e, and seed value s.
Bits are represented as elements from GF(2).
The integer n must be larger than 1.
</BLOCKQUOTE>
<H5><A NAME = "21259">RSAModulus(b) : RngIntElt -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Returns an RSA Modulus n of b bits in length, and an exponent e such that
<TT>Gcd(EulerPhi(n),e)=1</TT>.
The resulting values can be used to generate random bits with
the function <TT>RandomSequenceRSA</TT>.
The argument b must be at least 16.
<I>Warning</I>: RSA Moduli generated by Magma  should
not be used for real world cryptographic applications.
Such applications require a "true random" source to seed the
random number generator.  Magma's method of seeding may
not be sufficiently random to meet the requirements of
cryptographic standards.
</BLOCKQUOTE>
<H5><A NAME = "21260">RSAModulus(b, e) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns an RSA Modulus n of b bits in length such that
<TT>Gcd(EulerPhi(n),e)=1</TT>. 
The resulting value can be used with e for the exponent to
generate random bits with the function <TT>RandomSequenceRSA</TT>.
The argument b must be at least 16. The argument e must be odd and 
must also be in
the range 1 &lt; e &lt; 2<sup>b</sup>.
<I>Warning</I>: RSA Moduli generated by Magma  should
not be used for real world cryptographic applications.
Such applications require a "true random" source to seed the
random number generator.  Magma's method of seeding may
not be sufficiently random to meet the requirements of
cryptographic standards.
</BLOCKQUOTE>
<H5><A NAME = "21261">RandomSequenceBlumBlumShub(b, t) : RngIntElt, RngIntElt -&gt; SeqEnum</A></H5>
<H5>BlumBlumShub(b, t) : RngIntElt, RngIntElt -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Generates a sequence of t bits using the Blum-Blum-Shub pseudo-random bit 
generator with a Blum-Blum-Shub modulus of approximately b bits
in length.
The modulus n is computed within Magma by finding (pseudo-)random primes
with the <TT>RandomPrime</TT> function (the condition being that
the primes are congruent to 3 mod 4).
The seed is  chosen as a (pseudo-)random number modulo n.
Bits are represented as elements from GF(2).
b must be at least 16.
</BLOCKQUOTE>
<H5><A NAME = "21262">RandomSequenceBlumBlumShub(n, s, t) : RngIntElt, RngIntElt, RngIntElt -&gt; SeqEnum</A></H5>
<H5>BlumBlumShub(n, s, t) : RngIntElt, RngIntElt, RngIntElt -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Generates a sequence of t bits using the Blum-Blum-Shub pseudo-random bit 
generator with modulus n and seed value s.
Bits are represented as elements from GF(2).
The argument n must be larger than 1 and gcd(s, n) must be 1.
</BLOCKQUOTE>
<H5><A NAME = "21263">BBSModulus(b) : RngIntElt -&gt; RngIntElt</A></H5>
<H5>BlumBlumShubModulus(b) : RngIntElt -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Returns a Blum-Blum-Shub Modulus b bits in length.
The resulting value can be used to
generate random bits with the function <TT>RandomSequenceBlumBlumShub</TT>.
The argument b must be at least 16.
<I>Warning</I>: Blum-Blum-Shub Moduli generated by Magma should
not be used for real world cryptographic applications.
Such applications require a "true random" source to seed the
random number generator.  Magma's method of seeding may
not be sufficiently random to meet the requirements of
cryptographic standards.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1912.htm">[Next]</A><A  HREF = "text1910.htm">[Prev]</A> <A  HREF = "text1912.htm">[Right]</A> <A  HREF = "text1910.htm">[Left]</A> <A  HREF = "text1908.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>