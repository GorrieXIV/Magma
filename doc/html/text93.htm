<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Reduction and Iteration over Sets</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text96.htm">[Next]</A><A  HREF = "text92.htm">[Prev]</A> [_____] <A  HREF = "text92.htm">[Left]</A> <A  HREF = "text85.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "730">Reduction and Iteration over Sets</A></H3>

<P>
<P>
Both enumerated and indexed sets allow enumeration of their
elements; formal sets do not. For indexed sets the enumeration will
occur according to the order given by the indexing.
<P>
Instead of using a loop to apply the same binary associative
operator to all elements of an enumerated or
indexed set, it is in certain cases possible
to use the <I>reduction operator</I> <TT>&amp;</TT>.


<H5><A NAME = "731">x in S</A></H5>
<BLOCKQUOTE>
Enumerate the elements of an enumerated or indexed set S. This can
be used in <I>loops</I>, as well as in the set and sequence
<I>constructors</I>.
</BLOCKQUOTE>
<H5><A NAME = "732">&amp; o S : Op, SetIndx -&gt; Elt</A></H5>
<H5>&amp; o S : Op, SetEnum -&gt; Elt</H5>
<BLOCKQUOTE>
Given an enumerated or indexed
set S = { a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> } of 
elements belonging to an algebraic structure U, and an 
(associative) operator <IMG SRC="open.gif" ALT="" WIDTH=7 HEIGHT=7> : U x U -&gt; U,
form the element 
a<sub>i<sub>1</sub></sub> <IMG SRC="open.gif" ALT="" WIDTH=7 HEIGHT=7> a<sub>i<sub>2</sub></sub> <IMG SRC="open.gif" ALT="" WIDTH=7 HEIGHT=7> a<sub>i<sub>3</sub></sub> <IMG SRC="open.gif" ALT="" WIDTH=7 HEIGHT=7> ... <IMG SRC="open.gif" ALT="" WIDTH=7 HEIGHT=7> a<sub>i<sub>n</sub></sub>,
for some permutation i<sub>1</sub>, ..., i<sub>n</sub> of 1, ..., n.
<P>
Currently, the following operators may be used to reduce enumerated
sets: <TT>+, *, and, or, join, meet</TT> and
<TT>+, *, and, or</TT> to reduce indexed sets. An error will occur if
the operator is not defined on U.
<P>
If S contains a single element a, then the value returned
is a. If S is the null set (empty and no universe specified)
or S is empty with universe U (and the operation is defined in U),
then the 
result (or error) depends on the operation and upon U.
The following table defines the return value:
<PRE>

           EMPTY     NULL
   &amp;+       U!0      error
   &amp;*       U!1      error
   &amp;and    true      true
   &amp;or     false     false
   &amp;join   empty     null
   &amp;meet   error     error
</PRE>
Warning: since the reduction may take place in an arbitrary order
on the arguments a<sub>1</sub>, ..., a<sub>n</sub>, the result is not unambiguously defined
if the operation is not commutative on the arguments!
</BLOCKQUOTE>
<HR>
<H3><A NAME = "733">Example <TT>Set_Reduction (H9E14)</TT></A></H3>
The function <TT>choose</TT> defined below takes a set S and an integer k
as input, and produces a set of all subsets of S with cardinality k.
<P>
<P>
<PRE>
&gt; function choose(S, k)
&gt;    if k eq 0 then
&gt;       return { { } };
&gt;    else
&gt;       return &amp;join{ { s join { x } : s in choose(S diff { x }, k-1) } : x in S };
&gt;    end if;  
&gt; end function;
</PRE>
So, for example:
<P>
<P>
<PRE>
&gt;  S := { 1, 2, 3, 4 };   
&gt; choose(S, 2);  
{ 
       { 1, 3 },
       { 1, 4 },
       { 2, 4 },
       { 2, 3 },
       { 1, 2 },
       { 3, 4 }
 }
</PRE>
Try to guess what happens if k &lt; 0.
<PRE></PRE> <A  HREF = "text96.htm">[Next]</A><A  HREF = "text92.htm">[Prev]</A> [_____] <A  HREF = "text92.htm">[Left]</A> <A  HREF = "text85.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>