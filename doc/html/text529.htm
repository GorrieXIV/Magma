<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Constructors</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text530.htm">[Next]</A><A  HREF = "text528.htm">[Prev]</A> <A  HREF = "text530.htm">[Right]</A> <A  HREF = "text528.htm">[Left]</A> <A  HREF = "text526.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "5712">Constructors</A></H3>

<P>
<P>
<P>
Using constructors one can construct power series starting from polynomial data or using other power series recursively.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text529.htm#5717">Rational Puiseux Expansions</A>
</UL>
<H5><A NAME = "5713">PolyToSeries(s) : RngMPolElt -&gt; RngPowAlgElt</A></H5>
<BLOCKQUOTE>
Given a multivariate polynomial s,  returns the series representation of s.
</BLOCKQUOTE>
<H5><A NAME = "5714"></A><A NAME = "rpa:aps">AlgebraicPowerSeries</A>(dp, ip, L, e) : RngUPolElt, RngMPolElt, Lat, RngIntElt -&gt; RngPowAlgElt</H5>
<H5>AlgebraicPowerSeries(dp, ip, e) : RngUPolElt, RngMPolElt, RngIntElt -&gt; RngPowAlgElt</H5>
<H5>AlgebraicPowerSeries(dp, ip) : RngUPolElt, RngMPolElt -&gt; RngPowAlgElt</H5>

<PRE>    subs: SeqEnum                       Default: []</PRE>
<BLOCKQUOTE>
Define a power series root of a polynomial p using an initial expansion ip and its exponent lattice 1/e L. The defining polynomial p is either dp when subs is empty or obtained by substituting the elements of subs into the variables of dp. The initial expansion has to be sufficiently long in order to uniquely identify a root, see <A  HREF = "text525.htm#bib_TB2007">[Bec07, Cond. 4.3]</A>. In this initial
finite expansion and in subsequent ones, the variables occurring actually
represent e-th roots, <I>ie</I> x<sub>1</sub>x<sub>2</sub><sup>2</sup> is really x<sub>1</sub><sup>1/e</sup>x<sub>2</sub><sup>2/e</sup>.
All exponents of monomials occurring in these expansions and the coefficients of p
should lie in L (although this is not checked in many places), monomials of p
giving true values rather than e-th roots.
<P>
There are simpler constructors where L is omitted (when it is assumed to be the
standard integral lattice) or e is (when it is taken as 1).
<P>
As noted earlier, no strong checks are performed at construction time 
on the correctness of L or e
or whether ip is indeed the initial expansion of a unique root in this
"raw data" constructor. Incorrect initial data will only be revealed when
failure occurs in further expansion of the series. The preferred methods of series
creation are <A  HREF = "text529.htm#rpa:imp">ImplicitFunction</A>, <A  HREF = "text529.htm#rpa:eval">EvaluationPowerSeries</A> and
<A  HREF = "text529.htm#rpa:pui">RationalPuiseux</A> because in these cases the sanity checks are more
easily verified.
</BLOCKQUOTE>
<H5><A NAME = "5715"></A><A NAME = "rpa:eval">EvaluationPowerSeries</A>(s, nu, v) : Tup, SeqEnum, SeqEnum -&gt; RngPowAlgElt</H5>
<BLOCKQUOTE>
Given a series s, a sequence nu of vectors in the dual of its exponent lattice
of s and a sequence v (of the same length) of power series in some other common 
domain (with compatible coefficient field). Returns the series obtained by 
substituting xu<sup>&mu;</sup> |-&gt; &prod;<sub>i</sub> v[i]^(&lt; nu[i], &mu; 
 &gt;). This requires that nu and v fulfill a certain condition on the 
orders to guarantee convergence of the resulting series, see <A  HREF = "text525.htm#bib_TB2007">[Bec07, Cond. 4.6]</A>.
</BLOCKQUOTE>
<H5><A NAME = "5716"></A><A NAME = "rpa:imp">ImplicitFunction</A>(dp) : RngUPolElt -&gt; RngPowAlgElt</H5>

<PRE>    subs: SeqEnum                       Default: []</PRE>
<BLOCKQUOTE>
The unique series with zero constant term defined by a polynomial p &isin;k[x<sub>1</sub>, .., x<sub>n</sub>][z] or k[[x<sub>1</sub>, ..., x<sub>n</sub>]][z], fulfilling the conditions of 
the implicit function theorem, <I>i.e.</I>, p(0, ..., 0)=0 and &part;p / 
&part;z(0, ..., 0) != 0. The polynomial p is equal to dp possibly 
substituted with the series in subs as in <A  HREF = "text529.htm#rpa:aps">AlgebraicPowerSeries</A>. dp should
have coefficients in a multivariate polynomial ring.
</BLOCKQUOTE>
<H4><A NAME = "5717">Rational Puiseux Expansions</A></H4>

<P>
<P>
<P>
Let p &isin;k[[x<sub>1</sub>, ..., x<sub>n</sub>]][z] be a quasi-ordinary polynomial over a field k of characteristic zero. This means that p is non-zero, squarefree and monic (i.e., its leading coefficient in z is a unit in the power series ring) and if d &isin;k[[x<sub>1</sub>, ..., x<sub>n</sub>]] denotes its discriminant then d = x<sub>1</sub><sup>e<sub>1</sub></sup> ... x<sub>n</sub><sup>e<sub>n</sub></sup> u(x<sub>1</sub>, ..., x<sub>n</sub>) where u is a unit in the power series ring.
<P>
In this case the Theorem of Jung-Abhyankar states that p has deg(p) distinct Puiseux series roots, i.e., power series roots with fractionary exponents and coefficients in the algebraic closure of k.
<P>
These roots are computed by a generalization of the so called Newton-Puiseux algorithm. Also Duval's extension for computing rational parametrization has been implemented.


<H5><A NAME = "5718"></A><A NAME = "rpa:pui">RationalPuiseux</A>(p) : RngUPolElt -&gt; Tup, SeqEnum, RngIntElt</H5>

<PRE>    Gamma: Lattice                      Default: StandardLattice</PRE>

<PRE>    subs: SeqEnum                       Default: []</PRE>

<PRE>    Duval: BoolElt                      Default: <TT>false</TT></PRE>

<PRE>    OnlySingular: BoolElt               Default: <TT>false</TT></PRE>

<PRE>    ExtName: MonStgElt                  Default: "gamma"</PRE>

<PRE>    ExtCount: RngIntElt                 Default: 0</PRE>
<BLOCKQUOTE>
We first specify the behavior of this function in the case that no special value of subs has been given. This function assumes that p is a univariate polynomial over a multivariate polynomial ring S = k[x<sub>1</sub>, ..., x<sub>r</sub>] and that p is quasi-ordinary. In this case it will compute a set of rational parametrizations of p. Note that for reasons of efficiency the user has to make sure that p is actually quasi-ordinary! (Otherwise, further processing of the output may result in runtime errors.)
<P>
The first return value will be the exponent lattice of the input polynomial in 
the usual format &lt;&Gamma;<sub>0</sub>, e<sub>0</sub>&gt;. If the parameter <TT>Gamma</TT> has been 
specified, then &Gamma;<sub>0</sub> = Gamma and e<sub>0</sub> = 1. In this case <TT>Gamma</TT> has 
to be an integral `r'-dimensional lattice of full rank containing all the 
exponents of p. Otherwise &Gamma;<sub>0</sub> will be set to the r-dimensional standard lattice and again e<sub>0</sub>=1.
<P>
As a second value a complete list of rational parametrizations in the format &lt;&lambda;, s, N, E&gt; is returned. Here &lambda; is a sequence of r field elements and s is a fractionary algebraic power series of type <TT>RngPowAlgElt</TT>. Let p<sub>1</sub> denote the image of p under the transformation x<sup>&mu;<sub>i</sub></sup> |-&gt; &lambda;<sub>i</sub> x<sup>&mu;<sub>i</sub></sup> where (&mu;<sub>i</sub>)<sub>i</sub> is the basis of the exponent lattice e<sub>0</sub><sup> - 1</sup> &Gamma;<sub>0</sub> then s is a solution of p<sub>1</sub>, i.e., we have p<sub>1</sub>(s) = 0. Note that if neither <TT>Gamma</TT> nor <TT>subs</TT> have been supplied this just means that x<sub>i</sub> is substituted by &lambda;<sub>i</sub> x<sub>i</sub>. Finally N is the index of e<sub>0</sub><sup> - 1</sup> &Gamma;<sub>0</sub> in the exponent lattice of s and E is the degree of the extension of the coefficient field needed for defining s.
<P>
The behavior described above corresponds to the Newton-Puiseux algorithm with Duval's trick. The field extensions that are used for expressing the series fulfill a certain minimality condition. If <TT>Duval</TT> is set to <TT>false</TT> then the function returns a complete set of representatives (up to conjugacy) of Puiseux series roots of the original polynomial p, in other words, the &lambda;-vectors will always be vectors of ones. 
<P>
If <TT>OnlySingular</TT> is set to <TT>true</TT> then only those parametrizations that correspond to singular branches are returned.
<P>
If the ground field has to be extended, the algebraic elements will be assigned 
the name ExtName<sub>i</sub> where i starts from <TT>ExtCount</TT>. The last return value is the value of <TT>ExtCount</TT> plus the number of field extensions that have been introduced during the computation.
<P>
Finally, if the parameter <TT>subs</TT> is passed, then it has to be a sequence of 
r power series in a common domain and internally the variables in p will be substituted by the corresponding series. Again the resulting polynomial has to be quasi-ordinary. In this case &Gamma;<sub>0</sub> and e<sub>0</sub> are determined by building the sum of the exponent lattices of all series in <TT>subs</TT>. The parameter 
<TT>Gamma</TT> then has no effect.
<P>
For further details on the algorithm and other references see
<A  HREF = "text525.htm#bib_TB2007">[Bec07, Sec. 4.3]</A>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "5719">Example <TT>RngPowAlg_constructors (H51E1)</TT></A></H3>
We illustrate the constructors by examples. For displaying results we already use the command <A  HREF = "text530.htm#rpa:exp">Expand</A> that will be explained later.
<P>
<P>
<P>
<PRE>
&gt; Q := Rationals(); Qs&lt;s&gt; := FunctionField(Q);
&gt; Qxy&lt;x,y&gt; := PolynomialRing(Q, 2, "glex");
&gt; Qxyz&lt;z&gt; := PolynomialRing(Qxy);
&gt; Qst&lt;t&gt; := PolynomialRing(Qs, 1, "glex");
&gt; Qstu&lt;u&gt; := PolynomialRing(Qst);
</PRE>
<P>
One can consider polynomials as series.
<P>
<P>
<P>
<PRE>
&gt; s0 := PolyToSeries(1 - 3*x + x^2*y + y^20);
&gt; Expand(s0, 10);
true x^2*y - 3*x + 1
</PRE>
<P>
One can define series by the implicit function theorem at the origin.
<P>
<P>
<P>
<PRE>
&gt; s1 := ImplicitFunction(z*(1 - x - y) - x - y);
&gt; Expand(s1, 4);
true x^3 + 3*x^2*y + 3*x*y^2 + y^3 + x^2 + 2*x*y + y^2 + x + y
</PRE>
<P>
One can define a power series if an initial expansion is known. Note that the following power series has exponent lattice Z (tfrac(1)(5), - tfrac(2)(5)) + Z (tfrac(2)(5), tfrac(1)(5)) but its "expansions" are polynomials supported on Z (1, - 2) +  Z (2, 1).
<P>
<P>
<P>
<PRE>
&gt; defpol := (1+5*y+10*y^3+10*y^2+5*y^4+y^5)*z^5+(-20*y^3*x-
&gt;   30*y^2*x-5*y^4*x-5*x-20*y*x)*z^4+(10*x^2+30*y^2*x^2+10*y^3*x^2+
&gt;   30*x^2*y)*z^3+(-20*y*x^3-10*x^3-10*y^2*x^3)*z^2+
&gt;   (5*y*x^4+5*x^4)*z-x^5-x^2*y;
&gt; Gamma := Lattice(RMatrixSpace(Integers(), 2, 2) ! [1,-2, 2,1]);
&gt; init := x^2*y;
&gt; s2 := AlgebraicPowerSeries(defpol, init, Gamma, 5);
&gt; Expand(s2, 20);
true
-x^2*y^16 + x^5*y^10 + x^2*y^11 - x^5*y^5 - x^2*y^6 + x^5 + x^2*y
</PRE>
<P>
We can "substitute" series into each other.
<P>
<P>
<P>
<PRE>
&gt; X := AlgebraicPowerSeries(u^3-t+s*t^2, t, StandardLattice(1), 3);
&gt; Y := PolyToSeries(t);
&gt; duals := [RSpace(Integers(), 2) | [1, 3], [2, 1]];
&gt; s3 := EvaluationPowerSeries(s2, duals, [X, Y]);
&gt; Expand(s3, 13);
true (-1/9*s^2 - 1/3*s - 1)*t^10 + (-1/3*s + 1)*t^7 + t^4
</PRE>
<P>
We can compute all the Puiseux series roots of a quasi-ordinary polynomial up to conjugacy over Q.
<P>
<P>
<P>
<PRE>
&gt; qopol := z^6 + 3*x*y^2*z^4 + x*y*z^3 + 3*x^2*y^4*z^2 + x^3*y^6;
&gt; _, prms := RationalPuiseux(qopol : Duval := false); prms;
[*
    &lt;[ 1, 1 ], Algebraic power series -x*y, 3, 1&gt;,
    &lt;[ 1, 1 ], Algebraic power series gamma_0*x*y, 3, 2&gt;,
    &lt;[ 1, 1 ], Algebraic power series -x^2*y^5, 3, 1&gt;,
    &lt;[ 1, 1 ], Algebraic power series gamma_1*x^2*y^5, 3, 2&gt;
*]
&gt; Domain(prms[2][2]); ExponentLattice(prms[2][2]);
Polynomial ring of rank 2 over Number Field with defining
polynomial $.1^2 - $.1 + 1 over the Rational Field
Graded Lexicographical Order
Variables: x, y
&lt;
    Lattice of rank 2 and degree 2
    Basis:
    ( 1  1)
    ( 1 -2),

    3
&gt;
&gt; Expand(prms[2][2], 15);
true x^3*y^9 + (gamma_0 - 1)*x^2*y^5 + gamma_0*x*y
</PRE>
<P>
We find that the sum over all field extensions 1 + 2 + 1 + 2 = 6 is equal to the degree of the defining polynomial <TT>qopol</TT>. The third parametrization involves a field extension of Q by <TT>gamma_0</TT> s.t. gamma<sub>0</sub><sup>2</sup> - gamma<sub>0</sub> + 1 = 0 and an extension of the exponent lattice to Z(tfrac(1)(3), tfrac(1)(3)) + Z(tfrac(1)(3), - tfrac(2)(3)). It turns out that the field extension is not necessary if we are only interested in parametrizations.
<P>
<P>
<P>
<PRE>
&gt; _, prms := RationalPuiseux(qopol : Duval := true); prms;
[*
    &lt;[ -1, -1 ], Algebraic power series -x*y, 3, 1&gt;,
    &lt;[ -1, 1 ], Algebraic power series -x^2*y^5, 3, 1&gt;
*]
</PRE>
<P>
No field extensions have been introduced, but this required the application of automorphisms Q ll x, y rr to Q ll x, y rr in advance (more precisely x |-&gt; - x, y |-&gt; - y resp. x |-&gt; - x, y |-&gt; y). This time we can sum up the overall extension degrees (<I>i.e.</I>, for fields and lattices) 3 .1 + 3 .1 = 6 to the degree of <TT>qopol</TT>.
<HR>
<PRE></PRE> <A  HREF = "text530.htm">[Next]</A><A  HREF = "text528.htm">[Prev]</A> <A  HREF = "text530.htm">[Right]</A> <A  HREF = "text528.htm">[Left]</A> <A  HREF = "text526.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>