<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Rational Curves and Conics</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1418.htm">[Next]</A><A  HREF = "text1416.htm">[Prev]</A> <A  HREF = "text1418.htm">[Right]</A> <A  HREF = "text1416.htm">[Left]</A> <A  HREF = "text1415.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "16008">Rational Curves and Conics</A></H3>

<P>
<P>
<P>
The general tools for constructing and analysing curves are described
in Chapter <A  HREF = "text1356.htm#14904">ALGEBRAIC CURVES</A>. We do not repeat them here, but rather give some
examples in Section <A  HREF = "text1417.htm#16020">Rational Curve and Conic Examples</A>
to demonstrate those basics that the user will need.
In this section we describe the main parametrisation
function for rational curves and functions which enable type change
from a curve of genus zero to a rational curve.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1417.htm#16009">Rational Curve and Conic Creation</A>
<LI> <A  HREF = "text1417.htm#16017">Access Functions</A>
<LI> <A  HREF = "text1417.htm#16020">Rational Curve and Conic Examples</A>
</UL>
<H4><A NAME = "16009">Rational Curve and Conic Creation</A></H4>

<P>
<P>
<P>
<P>
Rational curves and conics are the specialised types for nonsingular
plane curves of genus zero defined by polynomials of degree 1 and 2,
respectively.  The condition of nonsingularity is equivalent to that
of absolute irreducibility for conics, and imposes no condition on a
linear equation in the plane.


<H5><A NAME = "16010">Conic(coeffs) : [RngElt] -&gt; CrvCon</A></H5>

<PRE>    Ambient: Sch                        Default: </PRE>
<BLOCKQUOTE>
This creates a conic curve with the given sequence of coefficients
(which should have length 3 or 6). A sequence [a, b, c] designates the conic
aX<sup>2</sup> + bY<sup>2</sup> + cZ<sup>2</sup>, while a sequence [a, b, c, d, e, f] designates the conic
aX<sup>2</sup> + bY<sup>2</sup> + cZ<sup>2</sup> + dXY + eYZ + fXZ.
<P>
The optional parameter <TT>Ambient</TT> may be used to give the specific
ambient projective space in which to create the conic; otherwise a new
ambient will be created for it to lie in.
</BLOCKQUOTE>
<H5><A NAME = "16011">Conic(M) : Mtrx -&gt; CrvCon</A></H5>

<PRE>    Ambient: Sch                        Default: </PRE>
<BLOCKQUOTE>
This creates a conic curve associated to M, which must be a symmetric
3 x 3 matrix.
Explicitly, the equation of the conic is [X, Y, Z]M[X, Y, Z]<sup>tr</sup>.
<P>
The optional parameter <TT>Ambient</TT> may be used to give the specific
ambient projective space in which to create the conic; otherwise a new
ambient will be created for it to lie in.
</BLOCKQUOTE>
<H5><A NAME = "16012">Conic(X, f) : Prj, RngMPolElt -&gt; CrvCon</A></H5>
<BLOCKQUOTE>
Returns the conic defined by the polynomial f in the
projective plane X.
</BLOCKQUOTE>
<H5><A NAME = "16013">IsConic(S) : Sch -&gt; BoolElt, CrvCon</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the scheme S is a nonsingular plane curve
of degree 2, in which case it also returns a curve (of type <TT>CrvCon</TT>)
with the same defining polynomial as S.
</BLOCKQUOTE>
<H5><A NAME = "16014">RationalCurve(X, f) : Prj, RngMPolElt -&gt; CrvRat</A></H5>
<BLOCKQUOTE>
Returns the rational curve defined by the linear polynomial f in the
projective plane X.
</BLOCKQUOTE>
<H5><A NAME = "16015">IsRationalCurve(S) : Sch -&gt; BoolElt, CrvRat</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the scheme S is defined by a linear
polynomial in some projective plane P<sup>2</sup>; if so, it also returns a
curve of type <TT>CrvRat</TT>
with the same defining polynomial as S in P<sup>2</sup>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16016">Example <TT>CrvCon_ConicCreation (H125E1)</TT></A></H3>
In the following example we create a degree two curve over the rational
field, then create a new curve of conic type using <TT>IsConic</TT>.
<P>
<P>
<PRE>
&gt; P2&lt;x,y,z&gt; := ProjectivePlane(Rationals());
&gt; C0 := Curve(P2, x^2 + 3*x*y + 2*y^2 - z^2);
&gt; C0;
Curve over Rational Field defined by
x^2 + 3*x*y + 2*x^2 - z^2
&gt; bool, C1 := IsConic(C0);
</PRE>
This creates a new curve C<sub>1</sub> in the same ambient space P<sub>2</sub>, 
explicitly as a conic curve.
<P>
<P>
<PRE>
&gt; C1;
Conic over Rational Field defined by
x^2 + 3*x*y + 2*y^2 - z^2
&gt; AmbientSpace(C0) eq AmbientSpace(C1);
true
&gt; DefiningIdeal(C0) eq DefiningIdeal(C1);
true
&gt; Type(C0), Type(C1);
CrvPln CrvCon
</PRE>
<HR>
<H4><A NAME = "16017">Access Functions</A></H4>

<P>
<P>
<P>
The basic access functions for rational curves and conics are inherited
from the general machinery for plane curves and hypersurface schemes.


<H5>BaseRing(C) : Crv -&gt; Rng</H5>

<H5>BaseField(C) : Crv -&gt; Rng</H5><P>



Returns the base ring of the curve C.







<H5>Category(C) : Crv -&gt; Cat</H5>

<H5>Type(C) : Crv -&gt; Cat</H5><P>



Returns the category of rational curves <TT>CrvRat</TT> or of conics
<TT>CrvCon</TT>; these are special subtypes of planes curves (type <TT>CrvPln</TT>),
which are themselves subtypes of general curves (type <TT>Crv</TT>).




<H5><A NAME = "16018">DefiningPolynomial(C) : Crv -&gt; RngMPolElt</A></H5>
<BLOCKQUOTE>
Returns the defining polynomial of the conic or rational curve C.
</BLOCKQUOTE>
<H5><A NAME = "16019">DefiningIdeal(C) : Crv -&gt; RngMPol</A></H5>
<BLOCKQUOTE>
Returns the defining ideal of the conic or rational curve C.
</BLOCKQUOTE>
<H4><A NAME = "16020">Rational Curve and Conic Examples</A></H4>

<P>
<P>
<P>
These examples illustrate how to obtain standard models of a curve of
genus zero, either as a conic or as a parametrisation by the projective line.


<HR>
<H3><A NAME = "16021">Example <TT>CrvCon_RationalCurveExample (H125E2)</TT></A></H3>
<P>
We begin with an example of a singular curve of geometric genus zero.
<P>
<P>
<PRE>
&gt; P2&lt;x,y,z&gt; := ProjectivePlane(FiniteField(71));
&gt; C := Curve(P2, (x^3 + y^2*z)^2 - x^5*z);
&gt; C;
Curve over GF(71) defined by
x^6 + 70*x^5*z + 2*x^3*y^2*z + y^4*z^2
&gt; ArithmeticGenus(C);
10
&gt; Genus(C);
0
&gt; #RationalPoints(C);
73
&gt; Z := SingularSubscheme(C);
&gt; Degree(Z);
18
</PRE>
We see that C is highly singular and that its desingularisation has genus
zero.
At most 18 of 73 points are singular; note that a nonsingular curve of genus
zero would have 72 points.  We now investigate the source of the extra points.
<P>
<P>
<PRE>
&gt; cmps := IrreducibleComponents(Z);
&gt; [ Degree(X) : X in cmps ];
[ 11, 7 ]
&gt; [ Degree(ReducedSubscheme(X)) : X in cmps ];
[ 1, 1 ]
&gt; [ RationalPoints(X) : X in cmps ];
[
{@ (0 : 0 : 1) @},
{@ (0 : 1 : 0) @}
]
</PRE>
Since the only singular rational points on C are (0 : 0 : 1) and
(0 : 1 : 0), the "obvious" point (1 : 0 : 1) must be nonsingular
and we can use it to obtain a rational parametrisation of the curve
as explained in Section <A  HREF = "text1421.htm#16057">Isomorphisms</A>.
<P>
<P>
<PRE>
&gt; P1&lt;u,v&gt; := ProjectiveSpace(FiniteField(71), 1);
&gt; p := C![1, 0, 1];
&gt; m := Parametrization(C, Place(p), Curve(P1));
&gt; S1 := {@ m(q) : q in RationalPoints(P1) @};
&gt; #S1;
72
&gt; [ q : q in RationalPoints(C) | q notin S1 ];
[ (0 : 1 : 0) ]
</PRE>
We conclude that the extra point comes from a singularity
whose resolution does not have any degree one places over it
(see Section <A  HREF = "text1365.htm#15151">Divisors</A> of Chapter <A  HREF = "text1356.htm#14904">ALGEBRAIC CURVES</A> for background
on places of curves).  We can verify this explicitly.
<P>
<P>
<PRE>
&gt; [ Degree(p) : p in Places(C![0, 1, 0]) ];
[ 2 ]
</PRE>
<HR>
<H3><A NAME = "16022">Example <TT>CrvCon_ConicCurve (H125E3)</TT></A></H3>
In this example we start by defining a projective curve and we check
that it is rational; that is, that it has genus zero.
<P>
<P>
<PRE>
&gt; P2&lt;x,y,z&gt; := ProjectiveSpace(Rationals(), 2);
&gt; C0 := Curve(P2, x^2 - 54321*x*y + y^2 - 97531*z^2);
&gt; IsNonsingular(C0);
true
</PRE>
The curve C<sub>0</sub> is defined as a degree 2 curve over the rationals.
By making a preliminary type change to the type of conics, <TT>CrvCon</TT>,
we can test whether there exists a rational point over Q and use
efficient algorithms of Section <A  HREF = "text1420.htm#16046">Finding Points</A>
for finding rational points on curves in conic form.
The existence of a point (defined over the base field) is equivalent
to the existence of a parametrisation (defined over the base field)
of the curve by the projective line.
<P>
<P>
<PRE>
&gt; bool, C1 := IsConic(C0);
&gt; bool;
true
&gt; C1;
Conic over Rational Field defined by
x^2 - 54321*x*y + y^2 - 97531*z^2
&gt; HasRationalPoint(C1);
true (398469/162001 : -118246/162001 : 1)
&gt; RationalPoint(C1);
(398469/162001 : -118246/162001 : 1)
</PRE>
The parametrisation intrinsic requires a one-dimensional ambient space
as one of the arguments. This space will be used as the domain of the
parametrisation map.
<P>
<P>
<PRE>
&gt; P1&lt;u,v&gt; := ProjectiveSpace(Rationals(), 1);
&gt; phi := Parametrization(C1, Curve(P1));
&gt; phi;
Mapping from: Prj: P1 to CrvCon: C1
with equations :
398469*u^2 + 944072*u*v + 559185*v^2
-118246*u^2 - 200850*u*v - 85289*v^2
162001*u^2 + 329499*u*v + 162991*v^2
and inverse
-4634102139*x + 30375658963*y + 31793350442*z
5456130497*x - 25641668406*y - 32136366969*z
and alternative inverse equations :
5456130497*x - 25641668406*y - 32136366969*z
-6424037904*x + 21645471041*y + 31600239062*z
</PRE>
The defining functions for the parametrisation may look large, but
they are defined simply by a linear change of variables from the
2-uple embedding of the projective line in the projective plane.
We now do a naive search for rational points on the curve.
<P>
<P>
<PRE>
&gt; time RationalPoints(C1 : Bound := 100000);
{@ @}
Time: 2.420
</PRE>
Although there were no points with small coefficients, the
parametrisation provides us with any number of rational points:
<P>
<P>
<PRE>
&gt; phi(P1![0, 1]);
(559185/162991 : -85289/162991 : 1)
&gt; phi(P1![1, 1]);
(1901726/654491 : -404385/654491 : 1)
&gt; phi(P1![1, 0]);
(398469/162001 : -118246/162001 : 1)
</PRE>
<HR>
<H3><A NAME = "16023">Example <TT>CrvCon_ConicAccess (H125E4)</TT></A></H3>
The first part of this example illustrates how to obtain diagonal
equations for conics.
<P>
<P>
<PRE>
&gt; P2&lt;x,y,z&gt; := ProjectiveSpace(RationalField(), 2);
&gt; f := 1134*x^2 - 28523*x*y - 541003*x*z - 953*y^2 - 3347*y*z - 245*z^2;
&gt; C := Conic(P2, f);
&gt; LegendrePolynomial(C);
1134*x^2 - 927480838158*y^2 - 186042605936505203884941*z^2
&gt; ReducedLegendrePolynomial(C);
817884337*x^2 - y^2 - 353839285266278*z^2
</PRE>
Now we demonstrate how to extend the base field of the conic; that is,
to create the conic with the same coefficients but in a larger field.
This can be done by calling <TT>BaseExtend</TT>; in this instance, we move
from the rationals to a particular number field.
<P>
(Note the assignment of names to C in order to make the printing nicer.)
<P>
<P>
<PRE>
&gt; P&lt;t&gt; := PolynomialRing(RationalField());
&gt; K := NumberField(t^2 - t + 723);
&gt; C&lt;u,v,w&gt; := BaseExtend(C, K);
&gt; C;
Conic over K defined by
1134*u^2 - 28523*u*v - 953*v^2 - 541003*u*w - 3347*v*w - 245*w^2
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1418.htm">[Next]</A><A  HREF = "text1416.htm">[Prev]</A> <A  HREF = "text1418.htm">[Right]</A> <A  HREF = "text1416.htm">[Left]</A> <A  HREF = "text1415.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>