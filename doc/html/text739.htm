<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Atlas Data for the Sporadic  Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text733.htm">[Next]</A><A  HREF = "text738.htm">[Prev]</A> <A  HREF = "text733.htm">[Right]</A> <A  HREF = "text738.htm">[Left]</A> <A  HREF = "text734.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8496">Atlas Data for the Sporadic  Groups</A></H3>

<P>
<P>
<P>
<P>
Most of the functions described here use data derived from the Web Atlas. The 
data has been prepared for inclusion in Magma by Michael Downward and 
Eamonn O'Brien. It maintains Atlas names, conventions and orderings.
<P>
All of these functions, except <TT>GoodBasePoints</TT>, accept as input matrix or 
permutation groups.  The algorithm underpinning <TT>GoodBasePoints</TT> due to 
O'Brien &amp; Wilson <A  HREF = "text733.htm#bib_obrien-wilson">[OW05]</A>.


<H5><A NAME = "8497">StandardGenerators(G, str : parameters) : Grp, MonStgElt -&gt;         BoolElt, SeqEnum, SeqEnum</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    AutomorphismGroup: BoolElt          Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Construct standard generators for small quasisimple or sporadic group G
having name <I>str</I>;
words in SLP group defined on the defining generators of G are
also obtained for the standard generators. 
<P>
If G is sporadic and <TT>AutomorphismGroup</TT> is
<TT>true</TT>, assume G is automorphism group of group having name
<I>str</I>. 
<P>
If standard generators found, return <TT>true</TT> and sequences of
generators and corresponding words, else <TT>false</TT>.
<P>
<B>Note:</B> A return value of
<TT>false</TT> only means that the algorithm's random search for standard
generators did not succeed within the number of tries allowed. If the user 
is sure the group G matches the name <I>str</I>,
then they should try the function again.
<P>
If G is absolutely irreducible matrix group
and <TT>Projective</TT> is <TT>true</TT>, then construct 
standard generators possibly modulo centre of G.
<P>
This function currently works for all sporadic simple groups and all
quasisimple groups for which the simple quotient has order at most
2 x 10<sup>8</sup>. If you call it with an invalid value of <I>str</I>, then it will
print out a list of all valid values.
</BLOCKQUOTE>
<H5><A NAME = "8498">StandardGeneratorsGroupNames() : -&gt; SetIndx</A></H5>
<BLOCKQUOTE>
A list of valid strings for the second argument of {tt StandardGenerators}.
</BLOCKQUOTE>
<H5><A NAME = "8499">StandardCopy(str) : MonStgElt -&gt; Grp, BoolElt</A></H5>
<BLOCKQUOTE>
The standard copy of the group G having the name <TT>str</TT>. If the second
return value is <TT>true</TT>, then the group H returned is a matrix group
with nontrivial scalar subgroup Z, and it is H/Z rather than H that
is isomorphic to G.
</BLOCKQUOTE>
<H5><A NAME = "8500">IsomorphismToStandardCopy(G, str : parameters) : Grp, MonStgElt -&gt;         BoolElt, Map</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    AutomorphismGroup: BoolElt          Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Use the <TT>StandardGenerators</TT> function to construct a (possibly projective)
isomorphism from G to a standard copy of G. Options as for
<TT>StandardGenerators</TT>. The first returned value indicates whether the call of
<TT>StandardGenerators</TT> was successful.
</BLOCKQUOTE>
<H5><A NAME = "8501">StandardPresentation(G, str : parameters) : Grp, MonStgElt -&gt; BoolElt, SeqEnum, SeqEnum</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    Generators: SeqEnum                 Default: []</PRE>

<PRE>    AutomorphismGroup: BoolElt          Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Return <TT>true</TT> if standard presentation is satisfied by generators of
sporadic group G having name <I>str</I>, else <TT>false</TT>. 
<P>
If <TT>AutomorphismGroup</TT> is
<TT>true</TT>, assume G is automorphism group of sporadic group having
name <I>str</I>.
<P>
Standard generators may be supplied as <TT>Generators</TT>, otherwise 
defining generators are assumed to be standard. 
<P>
If G is absolutely irreducible matrix
group and <TT>Projective</TT> is <TT>true</TT>, then 
verify presentation modulo centre of G.
</BLOCKQUOTE>
<H5><A NAME = "8502">MaximalSubgroups(G, str : parameters) : Grp, MonStgElt -&gt; BoolElt, SeqEnum, SeqEnum</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    Generators: SeqEnum                 Default: []</PRE>

<PRE>    AutomorphismGroup: BoolElt          Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Construct <B>some</B> maximal subgroups for sporadic group G having 
name <I>str</I>. If <TT>AutomorphismGroup</TT> is
<TT>true</TT>, assume G is automorphism group of sporadic group having
name <I>str</I> and construct <B>some</B> of its maximal subgroups.
<P>
If standard generators supplied as <TT>Generators</TT> or found for G then 
return <TT>true</TT> and list of subgroups, else return <TT>false</TT>. 
<P>
If G is absolutely irreducible matrix group and <TT>Projective</TT> 
is <TT>true</TT>, then construct standard generators and so 
subgroups possibly modulo centre of G.
</BLOCKQUOTE>
<H5><A NAME = "8503">Subgroups(G, str : parameters) : Grp, MonStgElt -&gt; BoolElt, SeqEnum</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    Generators: SeqEnum                 Default: []</PRE>
<BLOCKQUOTE>
Construct certain subgroups for sporadic group G having 
name <I>str</I>. If standard generators supplied as 
<TT>Generators</TT> or found for G then 
return <TT>true</TT> and list of subgroups, else return <TT>false</TT>. 
<P>
If G is absolutely irreducible matrix
group and <TT>Projective</TT> is <TT>true</TT>, then construct standard generators
possibly modulo centre of G.
</BLOCKQUOTE>
<H5><A NAME = "8504">GoodBasePoints(G, str : parameters) : Grp, MonStgElt -&gt; BoolElt, SeqEnum</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>

<PRE>    Generators: SeqEnum                 Default: []</PRE>
<BLOCKQUOTE>
If standard generators supplied as <TT>Generators</TT> 
or found for sporadic group G having
name <I>str</I>, then return <TT>true</TT> and list of 
base points for G, else return <TT>false</TT>.
<P>
If G is absolutely irreducible and <TT>Projective</TT> is <TT>true</TT>,
then standard generators are possibly modulo centre of G, and base
points are correspondingly adjusted.
</BLOCKQUOTE>
<H5><A NAME = "8505">SubgroupsData(str) : MonStgElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Display stored subgroup data for sporadic group having name <I>str</I>.
</BLOCKQUOTE>
<H5><A NAME = "8506">MaximalSubgroupsData (str : parameters) : MonStgElt -&gt; SeqEnum</A></H5>

<PRE>    AutomorphismGroup: BoolElt          Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Display stored data  for some maximal subgroups of 
sporadic group having name <I>str</I>.
If <TT>AutomorphismGroup</TT> is
<TT>true</TT>, then display stored data  for some maximal subgroups of 
automorphism group of sporadic group. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8507">Example <TT>GrpASim_SporadicJ1 (H70E22)</TT></A></H3>
<P>
The machinery is illustrated in the case of the sporadic Janko group J<sub>1</sub>.
<P>
<P>
<P>
<PRE>
&gt; G :=  
&gt; MatrixGroup&lt;7, GF(11) |
&gt; [ 9, 1, 1, 3, 1, 3, 3, 1, 1, 3, 1, 3, 3, 9, 1, 3, 1, 3, 3, 9, 1, 3, 1, 3,
&gt;  3, 9, 1, 1, 1, 3, 3, 9, 1, 1, 3, 3, 3, 9, 1, 1, 3, 1, 3, 9, 1, 1, 3, 1, 3 ],
&gt; [ 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0,
&gt; 0, 1, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 10, 10, 0, 0, 0, 0, 0,0] &gt;;
&gt; flag, S := StandardGenerators (G, "J1");
&gt; flag;
true
&gt; StandardPresentation (G, "J1": Generators := S);
true
&gt; flag, M:= MaximalSubgroups (G, "J1": Generators := S);
&gt; #M;
7
&gt; M[4];
rec&lt;recformat&lt;name: MonStgElt, parent: MonStgElt, generators: SeqEnum,  
 group: Grp, order: RngIntElt, index: RngIntElt&gt; |
     name := 19:6,
     parent := J1,
     group := MatrixGroup(7, GF(11))
     Generators:
         [ 0  1  4  3  3  4  7]
         [ 1  2  8  3  6  2  9]
         [ 4  8 10  1  6  0  9]
         [ 3  3  1  8  9  1 10]
         [ 3  6  6  9  1  3  7]
         [ 4  2  0  1  3  0  9]
         [ 7  9  9 10  7  9  0]

         [ 4  6  2  3  8  1  6]
         [ 8  1  3 10  2  7  4]
         [ 3  6  1  0  6  9  6]
         [ 2  3  6  9  0  3  7]
         [ 7  8  5  2  4  6  4]
         [10  4  5  2  8  6  8]
         [10  9  0  1  9  8  9],
     order := 114,
     index := 1540
     &gt;
</PRE>
<PRE></PRE> <A  HREF = "text733.htm">[Next]</A><A  HREF = "text738.htm">[Prev]</A> <A  HREF = "text733.htm">[Right]</A> <A  HREF = "text738.htm">[Left]</A> <A  HREF = "text734.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>