<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Set-Theoretic Operations</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text797.htm">[Next]</A><A  HREF = "text795.htm">[Prev]</A> <A  HREF = "text797.htm">[Right]</A> <A  HREF = "text795.htm">[Left]</A> <A  HREF = "text786.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9003">Set-Theoretic Operations</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text796.htm#9004">Functions Relating to Group Order</A>
<LI> <A  HREF = "text796.htm#9010">Membership and Equality</A>
<LI> <A  HREF = "text796.htm#9019">Set Operations</A>
</UL>
<H4><A NAME = "9004">Functions Relating to Group Order</A></H4>



<H5><A NAME = "9005">Order(G) : GrpAb -&gt; RngIntElt</A></H5>
<H5># G : GrpAb -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The order of the group G, returned as an ordinary integer.
If G is an infinite group, the value zero is returned. Note
that if G is a generic group then determining the order will
require the structure of G to be determined.
</BLOCKQUOTE>
<H5><A NAME = "9006">FactoredOrder(G) : GrpAb -&gt; [&lt;RngIntElt, RngIntElt&gt;]</A></H5>
<BLOCKQUOTE>
The factored order of the group G, returned as a sequence
of prime-exponent pairs. If G is an infinite group, the
empty sequence is returned. Note that if G is a generic 
group then determining the order will require the structure 
of G to be determined.
</BLOCKQUOTE>
<H5><A NAME = "9007">Exponent(G) : GrpAb -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The exponent of the group G. If the group is infinite, the 
value zero is returned.  Note that if G is a generic group 
then determining the exponent will require the structure of G 
to be determined.
</BLOCKQUOTE>
<H5><A NAME = "9008">IsFinite(G) : GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the group G is finite.
</BLOCKQUOTE>
<H5><A NAME = "9009">IsInfinite(G) : GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if G is infinite, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><A NAME = "9010">Membership and Equality</A></H4>

<P>
<P>
<P>
<P>


<H5><A NAME = "9011">g in G : GrpAbElt, GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given an element g and a group G, return <TT>true</TT> if g is an element
of G, <TT>false</TT> otherwise.
<P>
</BLOCKQUOTE>
<H5><A NAME = "9012">g notin G : GrpAbElt, GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given an element g and a group G, return <TT>true</TT> if g is not an
element of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9013">S subset G : { GrpAbElt } , GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a group G and a set S of elements belonging to a group H,
where G and H have some covering group, return <TT>true</TT> if S is
a subset of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9014">S notsubset G : { GrpAbElt } , GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a group G and a set S of elements belonging to a group H,
where G and H have some covering group, return <TT>true</TT> if S is
not a subset of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9015">H subset G : GrpAb, GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, subgroups of some common overgroup, return
<TT>true</TT> if H is a subgroup of G, and <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9016">H notsubset G : GrpAb, GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, subgroups of some common overgroup, return
<TT>true</TT> if H is not a subgroup of G, and <TT>false</TT> otherwise.
<P>
</BLOCKQUOTE>
<H5><A NAME = "9017">G eq H : GrpAb, GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, subgroups of some common overgroup, return
<TT>true</TT> if G and H are identical, and <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9018">G ne H : GrpAb, GrpAb -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, subgroups of some common overgroup, return
<TT>true</TT> if G and H are distinct groups, and <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><A NAME = "9019">Set Operations</A></H4>



<H5><A NAME = "9020">NumberingMap(G) : GrpAb -&gt; Map</A></H5>
<BLOCKQUOTE>
A bijective mapping from the finite group G onto the set of 
integers  { 1 ... |G| }. The actual mapping 
depends upon choice of standard generators for G.
</BLOCKQUOTE>
<H5><A NAME = "9021">RandomProcess(G) : GrpAb -&gt; Process</A></H5>

<PRE>    Slots: RngIntElt                    Default: 10</PRE>

<PRE>    Scramble: RngIntElt                 Default: 100</PRE>
<BLOCKQUOTE>
Create a process to generate randomly chosen elements from the finite
group G. The process is based on the product-replacement algorithm
of <A  HREF = "text785.htm#bib_randomelements">[CLGM+95]</A>, modified by the use of an accumulator.
At all times, N elements are stored where N is the maximum of
the specified value for <TT>Slots</TT>
and <TT>Ngens</TT>(G) + 1.
Initially, these are just the generators of G.
As well, one extra group element is stored, the accumulator. Initially,
this is the identity.
Random elements are now produced by successive calls to <TT>Random(P)</TT>,
where P is the process created by this function.  Each such call
chooses one of the elements in the slots and adds it into the
accumulator.
The element in that slot is replaced by the sum of it and another
randomly chosen slot. The random value returned is the new accumulator
value.
Setting <TT>Scramble := m</TT> causes m such  sum-replacement operations 
to be performed before the process is returned. Note that this algorithm
cannot produce well-distributed random elements of an infinite group.
</BLOCKQUOTE>
<H5><A NAME = "9022">Random(P) : Process -&gt; GrpAbElt</A></H5>
<BLOCKQUOTE>
Given a random element process P created 
by the function <TT>RandomProcess(G)</TT> for the finite abelian group G,
return the next random element of G  defined by the process.
</BLOCKQUOTE>
<H5><A NAME = "9023">Random(G) : GrpAb -&gt; GrpAbElt</A></H5>
<H5>Random(G, n) : GrpAb, RngIntElt -&gt; GrpAbElt</H5>
<BLOCKQUOTE>
An element chosen at random from the abelian group G. The argument n
gives the maximum exponent for infinite generators, and defaults to 10
if not supplied.
</BLOCKQUOTE>
<H5><A NAME = "9024">Rep(G) : GrpAb -&gt; GrpAbElt</A></H5>
<H5>Representative(G) : GrpAb -&gt; GrpAbElt</H5>
<BLOCKQUOTE>
A representative element of G.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text797.htm">[Next]</A><A  HREF = "text795.htm">[Prev]</A> <A  HREF = "text797.htm">[Right]</A> <A  HREF = "text795.htm">[Left]</A> <A  HREF = "text786.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>