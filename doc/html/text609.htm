<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Some Extended Examples</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text602.htm">[Next]</A><A  HREF = "text608.htm">[Prev]</A> <A  HREF = "text602.htm">[Right]</A> <A  HREF = "text608.htm">[Left]</A> <A  HREF = "text603.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "6608">Some Extended Examples</A></H3>

<P>
<P>
<P>
We include some examples to demonstrate some of the uses of this package.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text609.htm#6609">Distinguishing Groups</A>
<LI> <A  HREF = "text609.htm#6611">Simplifying Automorphism Group  Computations</A>
</UL>
<H4><A NAME = "6609">Distinguishing Groups</A></H4>



<HR>
<H3><A NAME = "6610">Example <TT>Multilinear_Payne_Grps (H61E34)</TT></A></H3>
In 2004, S. E. Payne asked if two elation groups were isomorphic but suspected they were not <A  HREF = "text602.htm#bib_Payne_elation-grps">[Pay]</A>.
<P>
The first group, G<sub>f</sub>, is the elation group of the generalized quadrangle H(3, q<sup>2</sup>), the Hermitian geometry.
This group is defined as a Heisenberg group whose bilinear map is the usual dot product.
<P>
<P>
<PRE>
&gt; p := 3;
&gt; e := 4;
&gt; q := p^e; // q = 3^e &gt;= 27
&gt; F := [KSpace(GF(q),2), KSpace(GF(q),2), KSpace(GF(q),1)];
&gt; 
&gt; DotProd := function(x)
&gt;   return KSpace(GF(q),1)!(x[1]*Matrix(2,1,x[2]));
&gt; end function;
&gt; 
&gt; DoubleForm := function(T)
&gt;   F := SystemOfForms(T)[1];
&gt;   K := BaseRing(F);
&gt;   n := Nrows(F);
&gt;   m := Ncols(F);
&gt;   MS := KMatrixSpace(K,n,m);
&gt;   Z := MS!0;
&gt;   M1 := HorizontalJoin(Z,-Transpose(F));
&gt;   M2 := HorizontalJoin(F,Z);
&gt;   D := VerticalJoin( M1, M2 );
&gt;   return Tensor( D, 2, 1 );
&gt; end function;
&gt; 
&gt; f := DoubleForm( Tensor( F, DotProd ) );
&gt; f;
Tensor of valence 2, U2 x U1 &gt;-&gt; U0
U2 : Full Vector space of degree 4 over GF(3^4)
U1 : Full Vector space of degree 4 over GF(3^4)
U0 : Full Vector space of degree 1 over GF(3^4)
&gt; 
&gt; IsAlternating(f);
true
&gt; Gf := HeisenbergGroup(f);
</PRE>
<P>
Now we define Payne's second group, G_(bar(f)), which is the elation group of the Roman quadrangle with parameters (q<sup>2</sup>, q).
In this example, bar(f) is a biadditive map, but is bilinear over the prime field F<sub>3</sub>.
Therefore, we construct a vector space isomorphism from F<sub>3</sub><sup>e</sup> to F<sub>3<sup>e</sup></sub> and the bilinear commutator map, induced by bar(f). 
Hence, G_(bar(f)) is the Heisenberg group of this bilinear commutator map.
<P>
<P>
<PRE>
&gt; n := PrimitiveElement(GF(q)); // nonsquare
&gt; MS := KMatrixSpace(GF(q),2,2);
&gt; A := MS![-1,0,0,n];
&gt; B := MS![0,1,1,0];
&gt; C := MS![0,0,0,n^-1];
&gt; F1 := Frame(f);
&gt; F2 := [KSpace(GF(p),4*e), KSpace(GF(p),4*e),
&gt;   KSpace(GF(p),e)];
&gt; 
&gt; // take 1/3^r root
&gt; Root := function(v,r) 
&gt;   k := Eltseq(v)[1];
&gt;   K := Parent(k);
&gt;   if k eq K!0 then return k; end if;
&gt;   R&lt;x&gt; := PolynomialRing(K);
&gt;   f := Factorization(x^(3^r)-k)[1][1];
&gt;   return K!(x-f);
&gt; end function;
&gt; 
&gt; // biadditive map defining elation grp
&gt; RomanGQ := function(x) 
&gt;   u := Matrix(1,2,x[1]);
&gt;   v := Matrix(2,1,x[2]);
&gt;   M := [A,B,C];
&gt;   f := &amp;+[Root(u*M[i]*v,i-1) : i in [1..3]];
&gt;   return KSpace(GF(q),1)![f];
&gt; end function;
&gt; 
&gt; // vector space isomorphisms
&gt; phi := map&lt; F2[1] -&gt; F1[1] | 
&gt;   x :-&gt; F1[1]![ GF(q)![ s : s in Eltseq(x)[i+1..e+i] ] : 
&gt;     i in [0,e,2*e,3*e] ] &gt;;
&gt; gamma := map&lt; F1[3] -&gt; F2[3] | 
&gt;   x :-&gt; F2[3]!&amp;cat[ Eltseq(s) : s in Eltseq(x) ] &gt;;
&gt; 
&gt; // bilinear commutator from RomanGQ
&gt; RomanGQComm := function(x)
&gt;   x1 := Eltseq(x[1]@phi)[1..2];
&gt;   x2 := Eltseq(x[1]@phi)[3..4];
&gt;   y1 := Eltseq(x[2]@phi)[1..2];
&gt;   y2 := Eltseq(x[2]@phi)[3..4];
&gt;   comm := RomanGQ( &lt;x2,y1&gt; ) - RomanGQ( &lt;y2,x1&gt; );
&gt;   return comm @ gamma;
&gt; end function;
&gt; 
&gt; f_bar := Tensor( F2, RomanGQComm );
&gt; f_bar;
Tensor of valence 2, U2 x U1 &gt;-&gt; U0
U2 : Full Vector space of degree 16 over GF(3)
U1 : Full Vector space of degree 16 over GF(3)
U0 : Full Vector space of degree 4 over GF(3)
&gt; 
&gt; IsAlternating(f_bar);
true
&gt; Gfb := HeisenbergGroup(f_bar);
</PRE>
<P>
The groups G<sub>f</sub> and G_(bar(f)) have order 3<sup>20</sup> and are class 2, exponent 3, and minimally generated by 16 elements.
In other words, the groups G<sub>f</sub> and G_(bar(f)) are central extensions of Z<sub>3</sub><sup>16</sup> by Z<sub>3</sub><sup>4</sup> and have exponent 3.
Using standard heuristics, these groups are indistinguishable.
However, the invariants associated to their exponent-p central tensor are vastly different, 
and thus, they determine that these groups are nonisomorphic. 
We show that the centroids of the tensors are not isomorphic.
<P>
<P>
<PRE>
&gt; Tf := pCentralTensor(Gf,1,1);
&gt; Tf;
Tensor of valence 2, U2 x U1 &gt;-&gt; U0
U2 : Full Vector space of degree 16 over GF(3)
U1 : Full Vector space of degree 16 over GF(3)
U0 : Full Vector space of degree 4 over GF(3)
&gt; 
&gt; Tfb := pCentralTensor(Gfb,1,1);
&gt; Tfb;
Tensor of valence 2, U2 x U1 &gt;-&gt; U0
U2 : Full Vector space of degree 16 over GF(3)
U1 : Full Vector space of degree 16 over GF(3)
U0 : Full Vector space of degree 4 over GF(3)
&gt; 
&gt; Cf := Centroid(Tf);
&gt; Cfb := Centroid(Tfb);
&gt; Dimension(Cf) eq Dimension(Cfb);
false
</PRE>
<HR>
<H4><A NAME = "6611">Simplifying Automorphism Group  Computations</A></H4>



<HR>
<H3><A NAME = "6612">Example <TT>Multilinear_Ext_Over_Adj (H61E35)</TT></A></H3>
We construct a class 2, exponent p, p-group G which is a quotient of a maximal unipotent subgroup of GL(3, 317<sup>4</sup>).
<P>
<P>
<PRE>
&gt; p := 317;
&gt; e := 4;
&gt; H := ClassicalSylow( GL(3,p^e), p );
&gt; U := UnipotentMatrixGroup(H);
&gt; P := PCPresentation(U);
&gt; Z := Center(P);
&gt; 
&gt; N := sub&lt; P | &gt;;
&gt; while #N lt p^2 do
&gt;   N := sub&lt; P | Random(Z), N &gt;;
&gt; end while;
&gt; 
&gt; G := P/N;
&gt; G;
GrpPC : G of order 10246902931634286779441449 = 317^10
PC-Relations:
    G.5^G.1 = G.5 * G.9^62 * G.10^133, 
    G.5^G.2 = G.5 * G.9^312 * G.10^295, 
    G.5^G.3 = G.5 * G.9^316, 
    G.5^G.4 = G.5 * G.10^316, 
    G.6^G.1 = G.6 * G.9^312 * G.10^295, 
    G.6^G.2 = G.6 * G.9^316, 
    G.6^G.3 = G.6 * G.10^316, 
    G.6^G.4 = G.6 * G.9^138 * G.10^163, 
    G.7^G.1 = G.7 * G.9^316, 
    G.7^G.2 = G.7 * G.10^316, 
    G.7^G.3 = G.7 * G.9^138 * G.10^163, 
    G.7^G.4 = G.7 * G.9^188 * G.10^50, 
    G.8^G.1 = G.8 * G.10^316, 
    G.8^G.2 = G.8 * G.9^138 * G.10^163, 
    G.8^G.3 = G.8 * G.9^188 * G.10^50, 
    G.8^G.4 = G.8 * G.9^125 * G.10^151
</PRE>
We construct the exponent-p central tensor of G and compute its adjoint *-algebra A.
<P>
<P>
<PRE>
&gt; T := pCentralTensor(G,1,1);
&gt; T;
Tensor of valence 2, U2 x U1 &gt;-&gt; U0
U2 : Full Vector space of degree 8 over GF(317)
U1 : Full Vector space of degree 8 over GF(317)
U0 : Full Vector space of degree 2 over GF(317)
&gt; 
&gt; A := AdjointAlgebra(T);
&gt; Dimension(A);
16
&gt; star := Star(A);
</PRE>
If V=G/&Phi;(G) is the Frattini quotient of G, then our goal is to get the cotensor space V^<sub>A</sub> V.
Note that dim V^ V=28, so standard methods will compute a stabilizer of GL(8, 317) inside V^ V.
We will decrease the size of the ambient space resulting in an easier stabilizer computation.
<P>
<P>
<PRE>
&gt; V := Domain(T)[1];
&gt; E := ExteriorCotensorSpace(V,2);
&gt; E;
Cotensor space of dimension 28 over GF(317) with valence 1
U2 : Full Vector space of degree 8 over GF(317)
U1 : Full Vector space of degree 8 over GF(317)
</PRE>
Now we create a sub cotensor space S generated by all (e<sub>i</sub>X)^ e<sub>j</sub> - e<sub>i</sub>^ (e<sub>j</sub>X) for X&isin;A, 
and then quotient V^ V by S. The result is a 4 dimensional space.
<P>
<P>
<PRE>
&gt; L := [];
&gt; for E_gen in Generators(E) do
&gt;   F := SystemOfForms(E_gen)[1];
&gt;   for X in Basis(A) do
&gt;     L cat:= [E!Eltseq(X*F - F*Transpose(X@star))];
&gt;   end for;
&gt; end for;
&gt; 
&gt; S := SubtensorSpace(E,L);
&gt; S;
Cotensor space of dimension 24 over GF(317) with valence 1
U2 : Full Vector space of degree 8 over GF(317)
U1 : Full Vector space of degree 8 over GF(317)
&gt; 
&gt; Q := E/S;
&gt; Q;
Cotensor space of dimension 4 over GF(317) with valence 1
U2 : Full Vector space of degree 8 over GF(317)
U1 : Full Vector space of degree 8 over GF(317)
</PRE>
<PRE></PRE> <A  HREF = "text602.htm">[Next]</A><A  HREF = "text608.htm">[Prev]</A> <A  HREF = "text602.htm">[Right]</A> <A  HREF = "text608.htm">[Left]</A> <A  HREF = "text603.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>