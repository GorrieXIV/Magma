<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Points</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1490.htm">[Next]</A><A  HREF = "text1488.htm">[Prev]</A> <A  HREF = "text1490.htm">[Right]</A> <A  HREF = "text1488.htm">[Left]</A> <A  HREF = "text1483.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "16826">Points</A></H3>

<P>
<P>
The hyperelliptic curve is embedded in a weighted projective space, 
with weights 1, g + 1, and 1, respectively on x, y and z.
Therefore point triples satisfy the equivalence relation (x : y : z) 
= (&mu; x : &mu;<sup>g + 1</sup> y : &mu; z), and the points at infinity are then 
normalized to take the form (1 : y : 0).



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1489.htm#16827">Creation of Points</A>
<LI> <A  HREF = "text1489.htm#16834">Random Points</A>
<LI> <A  HREF = "text1489.htm#16836">Predicates on Points</A>
<LI> <A  HREF = "text1489.htm#16839">Access Operations</A>
<LI> <A  HREF = "text1489.htm#16842">Arithmetic of Points</A>
<LI> <A  HREF = "text1489.htm#16844">Enumeration and Counting Points</A>
<LI> <A  HREF = "text1489.htm#16853">Frobenius</A>
</UL>
<H4><A NAME = "16827">Creation of Points</A></H4>



<H5><A NAME = "16828">C ! [x, y] : CrvHyp, [RngElt] -&gt; PtHyp</A></H5>
<H5>C ! [x, y, z] : CrvHyp, [RngElt] -&gt; PtHyp</H5>
<H5>elt&lt; PS | x, y &gt; : SetPtHyp, RngElt, RngElt, RngElt -&gt; PtHyp</H5>
<H5>elt&lt; PS | x, y, z &gt; : SetPtHyp, RngElt, RngElt, RngElt -&gt; PtHyp</H5>
<BLOCKQUOTE>
Returns the point on a hyperelliptic curve C specified by the coordinates
(x, y, z). 
The <TT>elt</TT> constructor takes the pointset of a   hyperelliptic
curve as an argument.
If z is not specified it is assumed to be 1.
</BLOCKQUOTE>
<H5><A NAME = "16829">C ! P : CrvHyp, PtHyp -&gt; PtHyp</A></H5>
<BLOCKQUOTE>
Given a point P on a hyperelliptic curve C<sub>1</sub>, such that C 
is a base extension of C<sub>1</sub>, this returns the corresponding point on 
the hyperelliptic curve C.  The curve C can be, e.g., the 
reduction of C<sub>1</sub> to finite characteristic (i.e. base extension 
to a finite field) or the tautological coercion to itself. 
</BLOCKQUOTE>
<H5><A NAME = "16830">Points(C, x) : CrvHyp, RngElt -&gt; SetIndx</A></H5>
<H5>RationalPoints(C, x) : CrvHyp, RngElt -&gt; SetIndx</H5>
<H5>Points(C, x) : CrvHyp, Infty -&gt; SetIndx</H5>
<H5>RationalPoints(C, x) : CrvHyp, Infty -&gt; SetIndx</H5>
<BLOCKQUOTE>
The indexed set of all rational points on the hyperelliptic curve C 
that have the value x as their x-coordinate.  (Rational points
are those with coordinates in the coefficient ring of C).
Note that points at infinity are considered to have &infin; 
as their x-coordinate.
</BLOCKQUOTE>
<H5><A NAME = "16831">PointsAtInfinity(C) : CrvHyp -&gt; SetIndx</A></H5>
<BLOCKQUOTE>
The points at infinity for the hyperelliptic curve C returned as
an indexed set of points.
</BLOCKQUOTE>
<H5><A NAME = "16832">IsPoint(C, S) : CrvHyp, SeqEnum -&gt; BoolElt, PtHyp</A></H5>
<BLOCKQUOTE>
The function returns <TT>true</TT> if and only if the sequence S specifies a point on the 
hyperelliptic curve C, and if so, returns this point as the 
second value.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16833">Example <TT>CrvHyp_points-at-infinity-on-hypcurves (H131E11)</TT></A></H3>
<P>
We look at the point at infinity on y<sup>2</sup>=x<sup>5</sup> + 1.
<P>
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(Rationals());
&gt; C := HyperellipticCurve(x^5+1); 
&gt; PointsAtInfinity(C);
{@ (1 : 0 : 0) @}
</PRE>
There is only one, and to see that this really is a point on C
it must be remembered that in Magma, all hyperelliptic curves
are considered to live in weighted projective spaces:
<P>
<P>
<PRE>
&gt; Ambient(C);
Projective Space of dimension 2
Variables : $.1, $.2, $.3
Gradings : 
1       3       1
</PRE>
In fact, the point is nonsingular on C, as we now check.
(It's worth remembering that all the functionality for curves, 
for instance <TT>IsNonSingular</TT>, applies to hyperelliptic curves
as a special case.)
<P>
<P>
<PRE>
&gt; pointAtInfinity := C![1,0,0];  // Entering the point by hand.
&gt; IsNonSingular(pointAtInfinity);
true
</PRE>
<HR>
<H4><A NAME = "16834">Random Points</A></H4>



<H5><A NAME = "16835">Random(C) : CrvHyp -&gt; PtHyp</A></H5>
<BLOCKQUOTE>
Given a hyperelliptic curve C defined over a finite field, this returns
a point chosen at random on the curve.  
If the set of all  points on C has already been computed, this 
gives a truly random point, otherwise the ramification points have 
a slight advantage.
</BLOCKQUOTE>
<H4><A NAME = "16836">Predicates on Points</A></H4>



<H5><A NAME = "16837">P eq Q : PtHyp, PtHyp -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the two points P and Q on the same hyperelliptic 
curve have the same coordinates.
</BLOCKQUOTE>
<H5><A NAME = "16838">P ne Q : PtHyp, PtHyp -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>false</TT> if and only if the two points P and Q on the same hyperelliptic 
curve have the same coordinates.
</BLOCKQUOTE>
<H4><A NAME = "16839">Access Operations</A></H4>



<H5><A NAME = "16840">P[i] : PtHyp, RngIntElt -&gt; RngElt</A></H5>
<BLOCKQUOTE>
The i-th coordinate of the point P, for 1&le;i&le;3.
</BLOCKQUOTE>
<H5><A NAME = "16841">Eltseq(P) : PtHyp -&gt; SeqEnum</A></H5>
<H5>ElementToSequence(P) : PtHyp -&gt; SeqEnum</H5>
<BLOCKQUOTE>
Given a point P on a hyperelliptic curve, this returns a 3-element sequence 
consisting of the coordinates of the point P.
</BLOCKQUOTE>
<H4><A NAME = "16842">Arithmetic of Points</A></H4>



<H5><A NAME = "16843">- P : PtHyp -&gt; PtHyp</A></H5>
<H5>Involution(P) : PtHyp -&gt; PtHyp</H5>
<BLOCKQUOTE>
Given a point P on a hyperelliptic curve, this returns the image of P 
under the hyperelliptic involution. 
</BLOCKQUOTE>
<H4><A NAME = "16844">Enumeration and Counting Points</A></H4>



<H5><A NAME = "16845">NumberOfPointsAtInfinity(C) : CrvHyp -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of points at infinity on the hyperelliptic curve C.
</BLOCKQUOTE>
<H5><A NAME = "16846">PointsAtInfinity(C) : CrvHyp -&gt; SetIndx</A></H5>
<BLOCKQUOTE>
The points at infinity for the hyperelliptic curve C returned as
an indexed set of points.
</BLOCKQUOTE>
<H5><A NAME = "16847"># C : CrvHyp -&gt;  RngIntElt</A></H5>
<BLOCKQUOTE>
Given a hyperelliptic curve C defined over a finite field,
this returns the number of rational points on C.
<P>
If the base field is small or there is no other good alternative,
a naive point counting technique is used. However, if they are
applicable, the faster p-adic methods described in the <TT>#J</TT>
section are employed (which actually yield the full zeta function of
C). As for <TT>#J</TT>, the verbose flag <TT>JacHypCnt</TT>
can be used to output information about the computation.
</BLOCKQUOTE>
<H5><A NAME = "16848">Points(C) : CrvHyp -&gt; SetIndx</A></H5>
<H5><A NAME = "RationalPointsCrvHyplabel">RationalPoints</A>(C) : CrvHyp -&gt; SetIndx</H5>
<H5>RationalPoints(C) : SetPtHyp -&gt; SetIndx</H5>

<PRE>    Bound: RngIntElt                    Default: </PRE>

<PRE>    NPrimes: RngIntElt                  Default: 30</PRE>

<PRE>    DenominatorBound: RngIntElt         Default: Bound</PRE>
<BLOCKQUOTE>
For a hyperelliptic curve C defined over a finite field, the function returns 
an indexed set of all rational points on C.
<P>
For a curve C over Q of the form 
y<sup>2</sup> = f(x) with integral coefficients, it returns the set of points 
such that the naive height of the x-coordinate is less than <TT>Bound</TT>.
<P>
For a curve C over a number field, it returns the set of points in
a search region which is controlled by the parameters <TT>Bound</TT>
(which must be specified) and <TT>DenominatorBound</TT>.  The algorithm
is a sieve method, described in Appendix A of <A  HREF = "text1482.htm#bib_bruin-phdthesis">[Bru02]</A>.
The parameter <TT>NPrimes</TT> controls the number of primes to be used 
for the sieve.
</BLOCKQUOTE>
<H5><A NAME = "16849">PointsKnown(C) : CrvHyp -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the points of the hyperelliptic curve
C have been computed.
This can especially be helpful when the curve is likely 
to have many points and when one does not wish to trigger 
the possibly expensive point computation.
</BLOCKQUOTE>
<H5><A NAME = "16850">ZetaFunction(C) : CrvHyp -&gt; FldFunRatUElt</A></H5>
<BLOCKQUOTE>
Given a hyperelliptic curve C defined over a finite field, this
function computes the zeta function of C. The zeta function is
returned as an element of the function field in one variable over 
the integers. 
<P>
If the base field is small or there is no other good alternative,
the method used is a naive point count on the curve over extensions
of degree 1, ..., g of the base field. However, if they are
applicable, the faster p-adic methods described in the <TT>#J</TT>
section are employed. As for <TT>#J</TT>, the verbose flag <TT>JacHypCnt</TT>
can be used to output information about the computation.
<P>
</BLOCKQUOTE>
<H5><A NAME = "16851">ZetaFunction(C, K) : CrvHyp, FldFin -&gt; FldFunRatUElt</A></H5>
<BLOCKQUOTE>
Given a hyperelliptic curve C defined over the rationals, this
function computes the zeta function of the base extension of C to 
K.  The curve C must have good reduction at the characteristic 
of K.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16852">Example <TT>CrvHyp_PointEnumeration (H131E12)</TT></A></H3>
For the following classical curve of Diophantus' <I>Arithmetica</I>, it 
is proved by Joseph Wetherell <A  HREF = "text1482.htm#bib_Weth97Th">[Wet97]</A> that Diophantus 
found all positive rational points.  The following Magma code 
enumerates the points on this curve.
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(Rationals());
&gt; C := HyperellipticCurve(x^6+x^2+1);         
&gt; Points(C : Bound := 1);
{@ (1 : -1 : 0), (1 : 1 : 0), (0 : -1 : 1), (0 : 1 : 1) @}
&gt; Points(C : Bound := 2);
{@ (1 : -1 : 0), (1 : 1 : 0), (0 : -1 : 1), (0 : 1 : 1), (-1 : -9 : 2), 
(-1 : 9 : 2), (1 : -9 : 2), (1 : 9 : 2) @}
&gt; Points(C : Bound := 4);
{@ (1 : -1 : 0), (1 : 1 : 0), (0 : -1 : 1), (0 : 1 : 1), (-1 : -9 : 2), 
(-1 : 9 : 2), (1 : -9 : 2), (1 : 9 : 2) @}
</PRE>
<HR>
<H4><A NAME = "16853">Frobenius</A></H4>



<H5><A NAME = "16854">Frobenius(P, F) : PtHyp, FldFin -&gt; PtHyp</A></H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
    Applies the Frobenius x - &gt; x<sup>(#F)</sup> to P. If 
    <TT>Check</TT> is <TT>true</TT>, it verifies that the curve of which
    P is a point is defined over the finite field F. 
</BLOCKQUOTE>
<H5><A NAME = "16855">FrobeniusMatrix(C, p) : CrvHyp, RngIntElt -&gt; Mtrx</A></H5>

<PRE>    Precision: RngIntElt                Default: 10</PRE>
<BLOCKQUOTE>
Given a hyperelliptic curve over the rationals and a good prime p,
this computes the matrix corresponding to the action of Frobenius
to the indicated precision. The basis used is x<sup>e</sup>(dx/y) for 0&le;e&lt;d - 1,
where the curve is given by y<sup>2</sup>=f(x) with f of degree d.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1490.htm">[Next]</A><A  HREF = "text1488.htm">[Prev]</A> <A  HREF = "text1490.htm">[Right]</A> <A  HREF = "text1488.htm">[Left]</A> <A  HREF = "text1483.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>