<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Ambients</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1324.htm">[Next]</A><A  HREF = "text1322.htm">[Prev]</A> <A  HREF = "text1324.htm">[Right]</A> <A  HREF = "text1322.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "14381">Ambients</A></H3>

<P>
<P>
For the purposes of this chapter, any scheme is contained in some ambient
space, either an affine space or one of a small number of standard
projective spaces: these are projective space itself, possibly weighted, and
rational scrolls.
The basic property of these spaces is that they have some kind of coordinate
ring that is a polynomial ring. It happens again and again that we lift
polynomials to these polynomial rings before working with them.
It is possible to define schemes without reference to such an ambient
space, but one will be created in the background in any case.
<P>
Listed in this section are the basic creation methods for ambient spaces.
Names for the coordinates will usually be required for creating polynomials
later on.
Names of coordinate functions may be defined using the diamond bracket
notation in the same way as for polynomial rings.
Coordinate names defined using this will be <I>globally</I> defined and
retained even outside the context in which they were set.
Alternatively, explicit naming functions may be used after creation.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1323.htm#14382">Affine and Projective Spaces</A>
<LI> <A  HREF = "text1323.htm#14391">Scrolls and Products</A>
<LI> <A  HREF = "text1323.htm#14400">Functions and Homogeneity on  Ambient Spaces</A>
<LI> <A  HREF = "text1323.htm#14409">Prelude to Points</A>
</UL>
<H4><A NAME = "14382">Affine and Projective Spaces</A></H4>

<P>
<P>
These are the basic ambient spaces. They are used in many situations
and are usually sufficient, although there are more in the next section.


<H5><A NAME = "14383">AffineSpace(k,n) : Rng,RngIntElt -&gt; Aff</A></H5>
<BLOCKQUOTE>
Create an n-dimensional affine space over the ring k.
The integer n must be positive. 
Names can be assigned using
the angle bracket notation, e.g. 
<TT>A&lt;x, y, z&gt; := AffineSpace(Rationals(), 3)</TT>, which will assign the names 
to the coordinate ring, usually a multivariate polynomial ring, in
the same way as the angle bracket notation works for the multivariate 
polynomial rings. 
<P>
<P>
</BLOCKQUOTE>
<H5><A NAME = "14384">ProjectiveSpace(k,n) : Rng,RngIntElt -&gt; Prj</A></H5>
<H5>ProjectiveSpace(k,W) : Rng,[RngIntElt] -&gt; Prj</H5>
<BLOCKQUOTE>
Create an n-dimensional projective space over the ring k.
The integer n must be positive. 
The second argument to this intrinsic can be a sequence of positive
integer weights. These weights will be
assigned to the coordinate functions of the space.
The dimension of the space is one less than the length of this sequence.
(At present there are very few functions to perform analysis on weighted
projective spaces, but maps between them are treated correctly.)
Names can be assigned using the angle bracket notation, e.g.
<TT>P&lt;x, y, z&gt; := ProjectiveSpace(Rationals(), 2)</TT>, which will assign
the names to the coordinate ring, usually a multivariate polynomial ring,
in the same way as the angle bracket notation works for multivariate
polynomial rings.
</BLOCKQUOTE>
<H5><A NAME = "14385">AffineSpace(R) : RngMPol -&gt; Aff</A></H5>
<H5>Spec(R) : RngMPol -&gt; Aff</H5>
<BLOCKQUOTE>
Create the affine space whose coordinate ring is the multivariate
polynomial ring R.
The coordinate names for the affine space will be inherited from R.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14386">ProjectiveSpace(R) : RngMPol -&gt; Prj</A></H5>
<H5>Proj(R) : RngMPol -&gt; Prj</H5>
<BLOCKQUOTE>
Create the projective plane whose homogeneous coordinate ring is the
multivariate polynomial ring R.
If R has been assigned a grading then that grading will be used otherwise it
will be considered to have the standard grading by degree.
</BLOCKQUOTE>
<H5><A NAME = "14387">AssignNames(~A,N) : Sch,[MonStgElt] -&gt;</A></H5>
<BLOCKQUOTE>
A procedure to change the print names of the coordinate
functions of the ambient space A. It leaves A unchanged except that
the visible names of the first #N coordinate functions are replaced
by the strings of N and the rest return to their default. It does 
<I>not</I> assign the coordinate functions
themselves to any identifiers. That must be done by hand, for instance
by the command <TT>x := A.1;</TT>.
Note that this will change the variable names of the coordinate (polynomial)
ring.
</BLOCKQUOTE>
<H5><A NAME = "14388">A . i : Sch,RngIntElt -&gt; RngMPolElt</A></H5>
<H5>Name(A,i) : Sch,RngIntElt -&gt; RngMPolElt</H5>
<BLOCKQUOTE>
The ith coordinate function of A as an element of the coordinate ring
of A. 
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14389">Example <TT>Scheme_affine-space-names (H118E7)</TT></A></H3>
An affine 3-space over the finite field of 11<sup>2</sup> elements is created.
Initially only the first two coordinate functions are named.
The third adopts the default name <TT>$.3</TT>.
The identifier which refers to it is <TT>A.3</TT>.
Then new names are assigned to all coordinate functions and new identifiers
set to refer to them.
(Check what happens if the identifiers are not assigned.)
Notice that the previous identifiers, x, y, are not erased, although
their print values have been updated.
<P>
<P>
<PRE>
&gt; A&lt;x,y&gt; := AffineSpace(FiniteField(11,2),3);
&gt; A;
Affine Space of dimension 3
Variables : x, y, $.3
&gt; AssignNames(~A,["u","v","w"]);
&gt; u := A.1; v := A.2; w := A.3;
&gt; A;
Affine Space of dimension 3
Variables : u, v, w
&gt; x;
u
&gt; u eq x;
true
</PRE>
Print values are global in Magma, meaning that even if they are changed
in the local environment of a function or procedure the new names
will persist.
<HR>
<H5><A NAME = "14390">A eq B : Sch,Sch -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the ambient spaces A and B are identical.
This will only be the case if both A and B refer to the same instance
of creation of the space.
</BLOCKQUOTE>
<H4><A NAME = "14391">Scrolls and Products</A></H4>

<P>
<P>
These spaces are created using multiple gradings.
They are not as fundamental as the affine and projective spaces of the
previous section and may be passed over on first reading.
<P>
As we have said, the important thing about ambient spaces in this
system is that their
coordinate rings are essentially polynomial rings. For affine spaces, this is
literally true.  For projective spaces, one talks about the <I>homogeneous</I>
coordinate ring and restricts attention to homogeneous polynomials, that is,
polynomials whose terms all have the same weight with respect to a single
grading, but nonetheless one is working inside a polynomial ring.
<P>
This trick can be pushed further by admitting more than one grading on a
polynomial ring. The standard example of this is the family of rational ruled
surfaces, or rational surface scrolls, which have a bihomogeneous coordinate
ring with four variables u, v, x, y and two gradings which are
often chosen to be
<P>
[1, 1, - n, 0]  (and)  [0, 0, 1, 1]
<P>
for some nonnegative integer n.
Now we restrict attention to polynomials of some homogeneous <I>bidegree</I>
(or more generally, <I>multidegree</I>) of the form [a, b].
As with ordinary projective space, polynomials of a given bidegree form
a vector space with a favourite basis of monomials.
For example, if n=3, then monomials of bidegree [2, 1] have as their basis
<P>
u<sup>5</sup>x, u<sup>4</sup>vx, ..., v<sup>5</sup>x, uy, vy.
<P>
As with ordinary projective space, one can ask which polynomials have
negative degree. The difference is that this time there is just a little
room for manoeuvre: with the same n the monomials of degree [ - 4, 2] are
<P>
u<sup>2</sup>x<sup>2</sup>, uvx<sup>2</sup>, v<sup>2</sup>x<sup>2</sup>.
<P>
We consider the geometric object having this coordinate ring to be a
primitive object of the system. It is called a ruled surface and
denoted F<sub>n</sub>.
This seems to be a rather implicit approach at first, but is very similar
to the way one works with projective space itself:
at first one learns about homogeneous polynomials, degree 0 rational
polynomials, affine patches and so on, but once used to that one gets on
and uses it.
<P>
There are affine patches on F<sub>n</sub> --- a standard `first' patch is the
affine plane
where v not=0 and y not=0 --- and one can study them to get an idea of what
this surface looks like. In this case it is a P<sup>1</sup> bundle over P<sup>1</sup>,
the map to P<sup>1</sup> given by the bidegree [0, 0] ratio u/v and the fibre
coordinate being the ratio x/y, not of trivial bidegree on the whole
surface, but well-defined for any fixed value of u/v.
<P>
We think of the gradings as forming a matrix and allow more general scrolls
arising from matrices which are partially row reduced to have rows of the form
[1, ...,1, *, ... ],
        [0, ...,0,1, ...,1, *, ... ], ...,
        [0, ...,0,1, ...,1 ]
where the * entries may be any integers.
To get products of projective spaces we simply set all the  * entries
to be 0. Thinking about which multihomogeneous polynomials arise in
this ring and comparing with functions on products of projective spaces
is a first exercise.
<P>
A reference for the point of view we take on these scrolls is
<A  HREF = "text1320.htm#bib_reid">[Rei97]</A> Chapter 2.


<H5><A NAME = "14392">DirectProduct(A,B) : Sch,Sch -&gt; Sch,SeqEnum</A></H5>
<BLOCKQUOTE>
The product of the ambient spaces A and B together with a sequence
containing the two projection maps.
</BLOCKQUOTE>
<H5><A NAME = "14393">RuledSurface(k,a,b) : Rng,RngIntElt,RngIntElt -&gt; PrjScrl</A></H5>
<BLOCKQUOTE>
This returns the ruled surface defined over the ring k whose negative
section has selfintersection &#8723;(a - b), where a, b are non-negative
integers.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14394">RuledSurface(k,n) : Rng,RngIntElt -&gt; PrjScrl</A></H5>
<BLOCKQUOTE>
If n is a nonnegative integer, this returns the ruled surface defined
over the ring k whose negative section has selfintersection -n.
The integer n must be non-negative.
In terms of the gradings, this means using the standard gradings as
described in the introduction with the top-right-hand entries being -n, 0.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14395">AbsoluteRationalScroll(k,N) : Rng,SeqEnum -&gt; PrjScrl</A></H5>
<BLOCKQUOTE>
If N is a sequence nonnegative integers this returns the rational scroll
with base ring k and gradings with  * entries being -N.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14396">ProductProjectiveSpace(k,N) : Rng,SeqEnum -&gt; PrjScrl</A></H5>
<BLOCKQUOTE>
If N=[n<sub>1</sub>, ..., n<sub>r</sub>] is a sequence of positive integers this
returns the product of ordinary projective spaces
<P>
    P<sup>n<sub>1</sub></sup> x ... x P<sup>n<sub>r</sub></sup>
<P>
of dimensions of N over the ring k.
This does not create independent copies of the projective factors
and in particular does not return projection maps to the factors.
</BLOCKQUOTE>
<H5><A NAME = "14397">SegreProduct(Xs) : SeqEnum[Sch] -&gt; Sch, SeqEnum</A></H5>
<BLOCKQUOTE>
Computes the product X of a finite sequence of schemes Xs lying in
ordinary projective space. The scheme X is constructed in <I>ordinary</I>
projective space. It is embedded there via an iterated Segre embedding
(see Ex. 2.14, Section 2, Chapter 1 of <A  HREF = "text1320.htm#bib_hartshorne">[Har77]</A>). This
intrinsic is provided because it is often easier to work in ordinary
projective space. However, the user should be warned that the dimension
of the ambient increases markedly with Segre embeddings. If the r schemes
Xs[i] lie in (P)<sup>n<sub>i</sub></sup>, then X will lie in (P)<sup>N</sup>
where N is (n<sub>1</sub> + 1) * (n<sub>2</sub> + 1) * ... (n<sub>r</sub> + 1) - 1.
<P>
A sequence containing the r projection maps from X to the Xs[i] is
also returned.
</BLOCKQUOTE>
<H5><A NAME = "14398">SegreEmbedding(X) : Sch -&gt; Sch, MapIsoSch</A></H5>
<BLOCKQUOTE>
The scheme X should lie in a product projective ambient (or be the ambient
itself!). Computes and returns the image Y of X in ordinary projective
space under the iterated Segre embedding (see the preceding intrinsic) along with a
scheme isomorphism from X to Y. This is a specialised intrinsic that is
generally much faster than using the general machinery to construct the Segre
map on the ambient of X and ask for the image of X.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14399">Example <TT>Scheme_sch:segre-embedding (H118E8)</TT></A></H3>
In the following example, we Segre embed the product of an elliptic curve E with
itself into ordinary projective space using the two intrinsics.
<P>
<P>
<P>
<PRE>
&gt; Q := RationalField();
&gt; P2&lt;x,y,z&gt; := ProjectiveSpace(Q,2);
&gt; E := Curve(P2,y^2*z-x^3-x^2*z-z^3);
&gt; ExE := SegreProduct([E,E]);
&gt; P8&lt;a,b,c,d,e,f,g,h,i&gt; := Ambient(ExE);
&gt; ExE;
Scheme over Rational Field defined by
-f*h + e*i,
-c*h + b*i,
-f*g + d*i,
-e*g + d*h,
-c*g + a*i,
-b*g + a*h,
-c*e + b*f,
-c*d + a*f,
-b*d + a*e,
-g^3 - g^2*i + h^2*i - i^3,
-d^3 - d^2*f + e^2*f - f^3,
-c^3 - c^2*i + f^2*i - i^3,
-b^3 - b^2*h + e^2*h - h^3,
-a^3 - a^2*g + d^2*g - g^3,
-a^3 - a^2*c + b^2*c - c^3
&gt; // or we could have started with ExE in product projective space
&gt; P22&lt;x,y,z,s,t,u&gt; := ProductProjectiveSpace(Q,[2,2]);
&gt; EE := Scheme(P22,[y^2*z-x^3-x^2*z-z^3, t^2*u-s^3-s^2*u-u^3]);
&gt; EE;
Scheme over Rational Field defined by
-x^3 - x^2*z + y^2*z - z^3,
-s^3 - s^2*u + t^2*u - u^3
&gt; ExE_1 := SegreEmbedding(EE);
&gt; // transfer ExE_1 to the Ambient of ExE to compare
&gt; ExE_1 := Scheme(P8,[Evaluate(pol,[a,b,c,d,e,f,g,h,i]) : pol in 
&gt;             DefiningPolynomials(ExE_1)]);
&gt; ExE eq ExE_1;
true
</PRE>
<HR>
<H4><A NAME = "14400">Functions and Homogeneity on  Ambient Spaces</A></H4>



<H5>HasFunctionField(A) : Sch -&gt; BoolElt</H5><P>



<H5><A NAME = "14401">CoordinateRing(A) : Sch -&gt; Rng</A></H5>
<BLOCKQUOTE>
The coordinate ring of the ambient space A.
This is some polynomial ring of appropriate rank over the base ring.
Gradings on this ring are usually independent of those of the scheme.
Note that if the coordinate ring has zero rank then it will be the base ring.
</BLOCKQUOTE>
<H5><A NAME = "14402">FunctionField(A) : Sch -&gt; FldFunFracSch</A></H5>
<BLOCKQUOTE>
The function field of the ambient space A. This is a field isomorphic
to the field of fractions of the coordinate ring of A.
</BLOCKQUOTE>
<H5><A NAME = "14403">Gradings(X) : Sch -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A sequence containing all the gradings on the projective space X.
Each such grading is a sequence of integers whose length is the same
as the number of coordinate functions of X.
The same sequence is returned when this function is applied to any
scheme contained in X.
</BLOCKQUOTE>
<H5><A NAME = "14404">NumberOfGradings(X) : Sch -&gt; RngIntElt</A></H5>
<H5>NGrad(X) : Sch -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of independent gradings on the projective space X.
The same number is returned when this function is applied to any
scheme contained in X.
</BLOCKQUOTE>
<H5><A NAME = "14405">NumberOfCoordinates(X) : Sch -&gt; RngIntElt</A></H5>
<H5>Length(X) : Sch -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of coordinate functions of the ambient space of the scheme X.
This is equal to the number of coordinates of any point of X.
</BLOCKQUOTE>
<H5><A NAME = "14406">Lengths(X) : Sch -&gt; [RngIntElt]</A></H5>
<BLOCKQUOTE>
The lengths of the groups of ones in the gradings of a scroll X.
</BLOCKQUOTE>
<H5><A NAME = "14407">IsHomogeneous(X,f) : Sch,RngMPolElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if the polynomial f is homogeneous with 
respect to all of the gradings on the scheme X.
</BLOCKQUOTE>
<H5><A NAME = "14408">Multidegree(X,f) : Sch,RngMPolElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of homogeneous degrees of the polynomial f with respect to
the gradings on the scheme X.
</BLOCKQUOTE>
<H4><A NAME = "14409">Prelude to Points</A></H4>

<P>
<P>
Points of schemes are handled in an extremely flexible way: their coordinates
need not be elements of the base ring, for instance.
We don't discuss the details here but simply show how to create points in
ambient spaces and illustrate with an example.
This is already enough for non-specialised purposes: intrinsics which
take point arguments for computing, say, the tangent space to a curve at a
point, can take the underlying point of the ambient space or the point of the
curve equally well.
Having said that, the later section on points, Section <A  HREF = "text1328.htm#14493">Rational Points and Point Sets</A>,
should be taken as the
definitive reference.


<H5><A NAME = "14410">A ! [a,b,...] : Sch,[RngElt] -&gt; Pt</A></H5>
<H5>A(L) ! [a,b,...] : SetPt,[RngElt] -&gt; Pt</H5>
<BLOCKQUOTE>
For elements a, b, ... in the base ring of the scheme
A this creates the set-theoretic
point (a, b, ... ) in the affine case, or (a:b: ... ) in the projective case.
Over a field, the projective point will be normalised so that its final
nonzero coordinate entry is 1 (and further analogous normalisations when
there are at least two gradings as in the case of surface scrolls).
The first constructor can only be used if the sequence contains elements
of the base ring of A.
The second version of the constructor is the standard one. Using it rather
than the first allows the user to specify the ring in which the coefficients
are to be considered.
See the discussion of point sets in the section below on points.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14411">Example <TT>Scheme_schemes-points-example1 (H118E9)</TT></A></H3>
We create some points with identical coordinates. They are deemed to be
unequal by the equality test, but if what you really care about is their
coordinates you can check that those are equal.
<P>
<P>
<PRE>
&gt; k&lt;w&gt; := FiniteField(3^2);
&gt; A := AffineSpace(k,2);
&gt; p := A ! [1,2];
&gt; K := ext&lt; k | 2 &gt;;
&gt; q := A(K) ! [1,2];
&gt; m := hom&lt; k -&gt; k | w^3 &gt;;  // Frobenius
&gt; r := A(m) ! [1,2];
&gt; p eq q;
true
&gt; p eq r;

&gt;&gt;   p eq r;
     ^
Runtime error in 'eq': Arguments are not compatible
Argument types given: Pt, Pt
&gt; q eq r;

&gt;&gt; q eq r;
     ^
Runtime error in 'eq': Arguments are not compatible
Argument types given: Pt, Pt
</PRE>
In the example above, the first method used for the creation of a point is
sufficient if you only want to create a point with coefficients in the
base ring.
The second and third point creations are more precise: they decree
exactly the k-algebra in which the coefficients will lie.
One should think of the expression <TT>A ! [1,2]</TT> as merely being a
convenient shorthand, analogous to defining a sequence without being
explicit about its universe.
<HR>
<H5><A NAME = "14412">Origin(A) : Aff -&gt; Pt</A></H5>
<BLOCKQUOTE>
The origin of the affine space A.
</BLOCKQUOTE>
<H5><A NAME = "14413">Simplex(A) : Prj -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of points of the ambient space A having coordinates
(1, 0, ..., 0), ... (0, ..., 0, 1)
and (1, ..., 1) whether A is affine or projective space.
</BLOCKQUOTE>
<H5><A NAME = "14414">Coordinates(p) : Pt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of ring elements corresponding to the coordinates of
the point p.
</BLOCKQUOTE>
<H5><A NAME = "14415">p[i] : Pt, RngIntElt -&gt; RngElt</A></H5>
<H5>Coordinate(p,i) : Pt,RngIntElt -&gt; SeqEnum</H5>
<BLOCKQUOTE>
The ith coordinate of the point p.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14416">p @ f : Pt, FldFunFracSchElt -&gt; RngElt</A></H5>
<H5>f(p) : Pt, FldFunFracSchElt -&gt; RngElt</H5>
<H5>Evaluate(f, p) : RngElt,Pt -&gt; RngElt</H5>
<BLOCKQUOTE>
Evaluate the function f of the function field of the scheme X or
its ambient at point p which lies on X.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14417">Example <TT>Scheme_evaluate-funfld-example (H118E10)</TT></A></H3>
Although there are many rings which may appear as function fields
in various contexts, their elements can all be evaluated at points.
(Section <A  HREF = "text1364.htm#15091">Function Fields</A>
discusses the function field of a curve which is being used here only
as an example.)
<P>
<P>
<PRE>
&gt; A&lt;x,y&gt; := AffineSpace(Rationals(),2);
&gt; FA&lt;X,Y&gt; := FunctionField(A);
&gt; C := Curve(A,x^3 - y^2 + 3*x);
&gt; FC&lt;u,v&gt; := FunctionField(C);
&gt; p := A ! [1,2];
&gt; q := C ! [1,2];
&gt; f := x/y;
&gt; g := X/Y;
&gt; h := u/v;
&gt; Evaluate(f,p), Evaluate(f,q);
1/2 1/2
&gt; Evaluate(g,p), Evaluate(g,q);
1/2 1/2
&gt; Evaluate(h,q);
1/2
&gt; Evaluate(h,p);
1/2
&gt; Evaluate(h,C!p);
1/2
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1324.htm">[Next]</A><A  HREF = "text1322.htm">[Prev]</A> <A  HREF = "text1324.htm">[Right]</A> <A  HREF = "text1322.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>