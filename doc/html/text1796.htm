<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Distances, Paths and Circuits in a Graph</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1797.htm">[Next]</A><A  HREF = "text1795.htm">[Prev]</A> <A  HREF = "text1797.htm">[Right]</A> <A  HREF = "text1795.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19908">Distances, Paths and Circuits in a Graph</A></H3>

<P>
<P>
<P>
<P>
<P>
<P>
<P>
The distance functions apply to graphs as well as to digraphs.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1796.htm#19909">Distances, Paths and Circuits in a Possibly Weighted Graph</A>
<LI> <A  HREF = "text1796.htm#19913">Distances, Paths and Circuits in a Non-Weighted Graph</A>
</UL>
<H4><A NAME = "19909">Distances, Paths and Circuits in a Possibly Weighted Graph</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
There are a few distance and path functions that take 
  into account the fact that the edges of the graph under
  consideration may be weighted.
If the graph is not weighted, then the distance between 
  two vertices is taken to be the length of the shortest 
  path between the vertices.
For more details on distance and paths functions in weighted 
  graphs, refer to 
  Section <A  HREF = "text1821.htm#20253">Distances, Shortest Paths and Minimum Weight Trees</A> in Chapter <A  HREF = "text1809.htm#20036">MULTIGRAPHS</A>.


<H5><A NAME = "19910">Reachable(u, v) : GrphVert, GrphVert -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if vertices u and v of a graph G are in
the same component of G.
</BLOCKQUOTE>
<H5><A NAME = "19911">Distance(u, v) : GrphVert, GrphVert -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given two vertices u and v belonging to a graph G, return the
  length of a shortest path from u to v.
If the graph is weighted, the function returns the total
  weight of the path from u to v.
Results in an error if there is no path in G from u to v.
</BLOCKQUOTE>
<H5><A NAME = "19912">Geodesic(u, v) : GrphVert, GrphVert -&gt; [GrphVert]</A></H5>
<BLOCKQUOTE>
Given vertices u and v belonging to the graph G, return a
sequence of vertices u = v<sub>1</sub>, v<sub>2</sub>, ..., v<sub>n</sub> = v such that
the sequence of edges v<sub>1</sub>v<sub>2</sub>, v<sub>2</sub>v<sub>3</sub>, ... v<sub>n - 1</sub>v<sub>n</sub> forms a
shortest path joining u and v. 
Results in an error if there is no path in G from u to v.
</BLOCKQUOTE>
<H4><A NAME = "19913">Distances, Paths and Circuits in a Non-Weighted Graph</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
<P>
<P>
All the distance and path functions listed below 
  do not take account of the fact that the graph edges 
  may be weighted.
<I>The distance between two vertices is understood 
  in its usual meaning of being the length of the shortest 
  path between the vertices.</I>


<H5><A NAME = "19914">Diameter(G) : Grph -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The length of the longest path in the graph G.  If G is not
connected, the value -1 is returned.
To see how the automorphism group of G is computed see 
    Subsection <A  HREF = "text1804.htm#19977">Graph Colouring and  Automorphism Group</A>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "19915">DiameterPath(G) : Grph -&gt; [GrphVert]</A></H5>
<BLOCKQUOTE>
A sequence of vertices defining a longest path if the graph G is
connected, or the empty sequence if G is not connected.
To see how the automorphism group of G is computed see 
    Subsection <A  HREF = "text1804.htm#19977">Graph Colouring and  Automorphism Group</A>.
</BLOCKQUOTE>
<H5><A NAME = "19916">Ball(u, n) : GrphVert, RngIntElt -&gt; { GrphVert }</A></H5>
<BLOCKQUOTE>
Given a vertex u belonging to a graph G, and a non-negative
integer n, return the set of vertices of G that are at distance
n or less from u.
</BLOCKQUOTE>
<H5><A NAME = "19917">Sphere(u, n) : GrphVert, RngIntElt -&gt; { GrphVert }</A></H5>
<BLOCKQUOTE>
Given a vertex u belonging to the graph G, and a non-negative
integer n, return the set of vertices of G that are at distance
n from u.
</BLOCKQUOTE>
<H5><A NAME = "19918">DistancePartition(u) : GrphVert -&gt; [ { GrphVert } ]</A></H5>
<BLOCKQUOTE>
Given a vertex u belonging to the graph G, return the partition
P<sub>0</sub> &cup;P<sub>1</sub> &cup; ... &cup;P<sub>d</sub>  of the vertex-set of G, where
P<sub>i</sub> is the set of vertices lying at distance i from vertex u.
The partition is returned as a sequence of sets. Any vertices not
connected to u are treated as being at infinite distance from u
and are returned as the last set of the partition.
</BLOCKQUOTE>
<H5><A NAME = "19919">IsEquitable(G, P) : GrphUnd, { { GrphVert } } -&gt; BoolElt</A></H5>
<H5>IsEquitable(G, P) : GrphUnd, { { RngIntElt } } -&gt; BoolElt</H5>
<BLOCKQUOTE>
Given a partition P of the vertex-set V(G) of the graph G, return
the value <TT>true</TT> if P is an equitable partition.
</BLOCKQUOTE>
<H5><A NAME = "19920">EquitablePartition(P, G) : { { GrphVert } }, GrphUnd -&gt; { { GrphVert } }</A></H5>
<H5>EquitablePartition(P, G) : { { RngIntElt } }, GrphUnd -&gt; { { GrphVert } }</H5>
<BLOCKQUOTE>
Given a partition P of the vertex-set V(G) of the graph G, return
the coarsest partition of V(G) that refines P and which is
equitable.
</BLOCKQUOTE>
<H5><A NAME = "19921">Girth(G) : GrphUnd -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The girth of graph G, i.e. the length of a shortest cycle.
To see how the automorphism group of G is computed see 
    Subsection <A  HREF = "text1804.htm#19977">Graph Colouring and  Automorphism Group</A>.
</BLOCKQUOTE>
<H5><A NAME = "19922">GirthCycle(G) : GrphUnd -&gt; [GrphVert]</A></H5>
<BLOCKQUOTE>
A cycle of shortest length in the graph G.
To see how the automorphism group of G is computed see 
    Subsection <A  HREF = "text1804.htm#19977">Graph Colouring and  Automorphism Group</A>.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1797.htm">[Next]</A><A  HREF = "text1795.htm">[Prev]</A> <A  HREF = "text1797.htm">[Right]</A> <A  HREF = "text1795.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>