<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Random Numbers</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text161.htm">[Next]</A><A  HREF = "text159.htm">[Prev]</A> <A  HREF = "text161.htm">[Right]</A> <A  HREF = "text159.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1201">Random Numbers</A></H3>

<P>
<P>
<P>
Pseudo-random integers in Magma are generated using the <I>Monster</I> 
random number generator of G. Marsaglia <A  HREF = "text154.htm#bib_Marsaglia">[Mar00]</A> (see also
<A  HREF = "text154.htm#bib_MarsagliaZaman">[MZ91]</A> and <A  HREF = "text154.htm#bib_Marsaglia92">[Mar92]</A>).  The period of the
Monster generator is 2<sup>29430</sup> - 2<sup>27382</sup> (approximately 10<sup>8859</sup>), 
and the generator passes all of the stringent tests in Marsaglia's 
<I>Diehard</I> test suite <A  HREF = "text154.htm#bib_MarsagliaDiehard">[Mar95]</A>.  Throughout the 
following text, the word `random' is used to mean `pseudo-random'.


<H5><A NAME = "1202">Random(a, b) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
A random integer lying in the interval [a, b], where a&le;b.
</BLOCKQUOTE>
<H5><A NAME = "1203">Random(b) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
A random integer lying in the interval [0, b], where b is 
a non-negative integer.  Because of the good properties of the underlying
Monster generator, calling <TT>Random(1)</TT> is a good safe way of
producing a sequence of random bits.
</BLOCKQUOTE>
<H5><A NAME = "1204">RandomBits(n) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
A random integer m such that 0 &le;m &lt; 2<sup>n</sup>, where n is a 
small non-negative integer.  Thus, m has n random bits with a
probability of 1/2 for each bit.  The function always returns 0
when n=0.
</BLOCKQUOTE>
<H5><A NAME = "1205">RandomPrime(n: parameter) : RngIntElt -&gt; RngIntElt</A></H5>

<PRE>    Proof: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
A random prime integer m such that 0 &lt; m &lt; 2<sup>n</sup>, where n is
a small non-negative integer.  The function always returns 0 for
n=0 or n=1.
A rigorous method will be used to check primality,
unless m &gt; 34 .10<sup>13</sup> and the
optional parameter <TT>Proof</TT> is set to <TT>Proof := false</TT>,
in which case the result indicates that m is a probable
prime (of order 20).
</BLOCKQUOTE>
<H5><A NAME = "1206">RandomPrime(n, a, b, x: parameter) :RngIntElt, RngIntElt, RngIntElt -&gt; BoolElt, RngIntElt</A></H5>

<PRE>    Proof: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Tries up to x iterations to find a random prime integer m
congruent to a modulo b such that 0 &lt; m &lt; 2<sup>n</sup>.
If successful, the function returns true and the integer m, 
otherwise false. The integer n must be larger than 0, 
a must lie between 0 and b - 1 and b must be larger than 0.
A rigorous method will be used to establish primality,
unless m &gt; 34 .10<sup>13</sup> and the
optional parameter <TT>Proof</TT> is set to <TT>Proof := false</TT>,
in which case the result indicates that m is a probable
prime (of order 20).
</BLOCKQUOTE>
<H5><A NAME = "1207">RandomConsecutiveBits(n, a, b) : RngIntElt, RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
A integer m such that 0 &le;m &lt; 2<sup>n</sup>, and the binary
expansion of n consists of consecutive strings of zeros or ones
each of random length in the range [a ... b].
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text161.htm">[Next]</A><A  HREF = "text159.htm">[Prev]</A> <A  HREF = "text161.htm">[Right]</A> <A  HREF = "text159.htm">[Left]</A> <A  HREF = "text155.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>