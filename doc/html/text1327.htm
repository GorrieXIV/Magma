<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Function Fields and their Elements</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1328.htm">[Next]</A><A  HREF = "text1326.htm">[Prev]</A> <A  HREF = "text1328.htm">[Right]</A> <A  HREF = "text1326.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "14477">Function Fields and their Elements</A></H3>

<P>
<P>
<P>
<P>
<P>
Since the function field of an irreducible variety is a birational invariant,
function fields in Magma are associated with the projectively closed varieties.
For an affine scheme X, the fields returned by <TT>FunctionField(X)</TT> and
<TT>FunctionField(ProjectiveClosure(X))</TT> are identical. 
Currently, only function
fields of projective spaces (and therefore of affine spaces) and 
curves are supported.
<P>
The following functions are provided for working with function fields and 
their elements. Some of these functions are concerned with converting
function field elements into elements of the field of fractions of the
coordinate ring of (an affine patch of) the scheme of the function field.
<P>
Additionally, function field elements may be used in the definition of
scheme maps (see Section <A  HREF = "text1336.htm#14599">Maps between Schemes</A>) from the projective or affine
schemes on which they are defined to other schemes and may be evaluated
at points as described earlier.
<P>
Function fields of schemes have type <A NAME = "FldFunFracSch"><TT>FldFunFracSch</TT></A>
and their elements have type <A NAME = "FldFunFracSchElt"><TT>FldFunFracSchElt</TT></A>.
These types inherit from <A NAME = "RngFunFracSch"><TT>RngFunFracSch</TT></A>, <A  HREF = "text1251.htm#RngFunFrac"> <TT>RngFunFrac</TT></A>, 
<A  HREF = "text1245.htm#RngMPolRes"> <TT>RngMPolRes</TT></A> and <A NAME = "RngFunFracSchElt"><TT>RngFunFracSchElt</TT></A>, <A  HREF = "text1251.htm#RngFunFracElt"> <TT>RngFunFracElt</TT></A>,
<A  HREF = "text1245.htm#RngMPolResElt"> <TT>RngMPolResElt</TT></A> respectively.


<H5>f * g : RngFracElt, RngFracElt -&gt; RngFracElt</H5>

<H5>f + g : RngFracElt, RngFracElt -&gt; RngFracElt</H5>

<H5>f - g : RngFracElt, RngFracElt -&gt; RngFracElt</H5>

<H5>- f : RngFracElt -&gt; RngFracElt</H5>

<H5>f / g : RngFracElt, RngFracElt -&gt; RngFracElt</H5>

<H5>f ^ n : RngFracElt, RngIntElt -&gt; RngFracElt</H5><P>

<H5>f eq g : RngFracElt, RngFracElt -&gt; BoolElt</H5>

<H5>IsZero(f) : RngFracElt -&gt; BoolElt</H5>

<H5>IsOne(f) : RngFracElt -&gt; BoolElt</H5>

<H5>IsMinusOne(f) : RngFracElt -&gt; BoolElt</H5>

<H5>IsUnit(f) : RngFracElt -&gt; BoolElt</H5><P>


<H5><A NAME = "14478">Scheme(F) : FldFunFracSch -&gt; Sch</A></H5>
<BLOCKQUOTE>
Return the (projective) scheme F is the function field of.
</BLOCKQUOTE>
<H5><A NAME = "14479">IntegerRing(F) : RngFrac -&gt; Rng</A></H5>
<H5>Integers(F) : RngFrac -&gt; Rng</H5>
<BLOCKQUOTE>
The integer ring of the function field F. This will be the coordinate ring
of one of the patches of the scheme of F.
</BLOCKQUOTE>
<H5><A NAME = "14480">AssignNames(~F, S) : RngFrac, [MonStgElt] -&gt;</A></H5>
<BLOCKQUOTE>
Assign the strings in S to be the names of the integer ring of F.
</BLOCKQUOTE>
<H5><A NAME = "14481">F ! g : FldFunFracSch, RngElt -&gt; FldFunFracSchElt</A></H5>
<BLOCKQUOTE>
Coerce the element g into the function field F of a scheme where g
is some function on the scheme of F, for example, g may be an element 
of the field of fractions of the coordinate ring of a scheme having F
as its function field.
</BLOCKQUOTE>
<H5><A NAME = "14482">F . i : FldFunFracSch, RngIntElt -&gt; FldFunFracSchElt</A></H5>
<BLOCKQUOTE>
Return the ith indeterminate of the coordinate ring of the scheme of F
as an element of the function field F.
</BLOCKQUOTE>
<H5><A NAME = "14483">ProjectiveFunction(f) : FldFunFracSchElt -&gt; FldFracElt</A></H5>
<BLOCKQUOTE>
Given an element f of a function field of a scheme, return f as an
element of the field of fractions of the coordinate ring of the scheme
f is a function on.
</BLOCKQUOTE>
<H5><A NAME = "14484">ProjectiveRationalFunction(f) : FldFunFracSchElt -&gt; FldFunRatMElt</A></H5>
<BLOCKQUOTE>
Given an element f of a function field of a (projective) scheme X, 
returns  an
element of the field of fractions of the coordinate ring of the 
ambient of X whose restriction to X as a rational function is
f.
</BLOCKQUOTE>
<H5><A NAME = "14485">RestrictionToPatch(f, Xi) : FldFunFracSchElt, Sch -&gt; FldFracElt</A></H5>
<BLOCKQUOTE>
Given an element f of a function field of a (projective) scheme X
return f as an element of the field of fractions of the coordinate ring
of the scheme Xi which must be a patch of X.
</BLOCKQUOTE>
<H5><A NAME = "14486">Numerator(f) : RngFracElt -&gt; RngElt</A></H5>
<H5>Denominator(f) : RngFracElt -&gt; RngElt</H5>
<BLOCKQUOTE>
Given an element f of a function field of a scheme, return the 
numerator or denominator of f.
</BLOCKQUOTE>
<H5><A NAME = "14487">IntegralSplit(f, X) : FldFunFracSchElt, Sch -&gt; RngMPolElt, RngMPolElt</A></H5>
<BLOCKQUOTE>
Given a function f on the (projective) scheme X return the
numerator and the denominator of g, where g is some rational
function on the ambient P of X restricting to f and considered
as an element of the field of fractions of the coordinate ring of P.
</BLOCKQUOTE>
<H5><A NAME = "14488">Numerator(f, X) : FldFunFracSchElt, Sch -&gt; MPolElt</A></H5>
<BLOCKQUOTE>
The first return value of <TT>IntegralSplit(f, X)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "14489">Denominator(f, X) : FldFunFracSchElt, Sch -&gt; MPolElt</A></H5>
<BLOCKQUOTE>
The second return value of <TT>IntegralSplit(f, X)</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14490">Example <TT>Scheme_scheme_fld_fun_elt (H118E15)</TT></A></H3>
Some conversion of function field elements are shown.
<P>
<P>
<PRE>
&gt; P2&lt;X, Y, Z&gt;:=ProjectiveSpace(Rationals(), 2);
&gt; C := Curve(P2, X^2+Y^2-Z^2);
&gt; K&lt;xK, yK&gt; := FunctionField(C);
&gt; aC1&lt;x1,y1&gt; := AffinePatch(C, 1);
&gt; aC2&lt;x2,z2&gt; := AffinePatch(C, 2);
&gt; aC3&lt;y3,z3&gt; := AffinePatch(C, 3);
&gt;
&gt; f := (xK + yK)/(yK);
&gt; K!f;
(xK + yK)/yK
&gt; ProjectiveFunction($1);
(X + Y)/Y
&gt; IntegralSplit(f, C);
X + Y
Y
&gt; RestrictionToPatch(f, aC1);
($.1 + $.2)/$.2
&gt; IntegralSplit(f, aC1);
x1 + y1
y1
&gt; IntegralSplit(f, P2);
x2 + 1
1
</PRE>
<HR>
<H5><A NAME = "14491">Restriction(f, Y) : FldFunFracSchElt, Sch -&gt; FldFunFracSchElt</A></H5>
<BLOCKQUOTE>
Given f in the function field of the scheme
X and Y a subscheme of X with a
function field, returns g in the function field of Y obtained by restricting
f to Y. If f has a pole along Y, then <TT>Infinity</TT> is
returned. An error occurs if f is not defined along Y. Presently, the
 only
nontrivial application of this routine is when Y is a curve and
X is the ambient of Y.
</BLOCKQUOTE>
<H5><A NAME = "14492">GenericPoint(X) : Sch -&gt; Pt</A></H5>
<BLOCKQUOTE>
Returns a point in the pointset <TT>X(FunctionField(X))</TT> of the scheme X, 
whose coordinates generate <TT>FunctionField(X)</TT>.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1328.htm">[Next]</A><A  HREF = "text1326.htm">[Prev]</A> <A  HREF = "text1328.htm">[Right]</A> <A  HREF = "text1326.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>