<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Iterative Statements</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text14.htm">[Next]</A><A  HREF = "text12.htm">[Prev]</A> <A  HREF = "text14.htm">[Right]</A> <A  HREF = "text12.htm">[Left]</A> <A  HREF = "text3.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "82">Iterative Statements</A></H3>

<P>
<P>
Three types of iterative statement are provided in Magma: the 
<TT>for</TT>-statement providing definite iteration and the 
<TT>while</TT>- and <TT>repeat</TT>-statements providing indefinite
iteration.
<P>
Iteration may be performed over an arithmetic progression of
integers or over any finite enumerated structure. Iterative statements 
may be nested. If nested iterations occur over the same enumerated 
structure, abbreviations such as <TT>for x, y in X do</TT> may be used; 
the leftmost identifier will correspond to the outermost loop, etc. 
(For nested iteration in sequence constructors, see Chapter <A  HREF = "text96.htm#736">SEQUENCES</A>.)
<P>
Early termination of the body of loop may be specified through use
of the `jump' commands <TT>break</TT> and <TT>continue</TT>.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text13.htm#83">Definite Iteration</A>
<LI> <A  HREF = "text13.htm#86">Indefinite Iteration</A>
<LI> <A  HREF = "text13.htm#91">Early Exit from Iterative Statements</A>
</UL>
<H4><A NAME = "83">Definite Iteration</A></H4>



<H5><A NAME = "84">for i := expr<sub>1</sub> to expr<sub>2</sub> by expr<sub>3</sub> do : -&gt;</A></H5>
<BLOCKQUOTE>
The expressions in this <TT>for</TT> loop must return integer values, say
b, e and s (for `begin', `end' and `step') respectively.
The loop is ignored if either s&gt;0 and b&gt;e, or s&lt;0 and b&lt;e.
If s=0 an error occurs. In the remaining cases, the value
b + k.s will be assigned to <TT>i</TT>, and the statements
executed, for k=0, 1, 2, ... in succession, as long as
b + k.s &le;e (for e&gt;0) or b + k.s &ge;e (for e&lt;0).
<P>
If the required step size is 1, the above may be abbreviated to:
</BLOCKQUOTE>
<H5><A NAME = "85">for i := expr<sub>1</sub> to expr<sub>2</sub> do : -&gt;</A></H5>
<H5>for x in S do : -&gt;</H5>
<BLOCKQUOTE>
Each of the elements of the finite enumerated structure S will be
assigned to x in succession, and each time the statements will be
executed.
</BLOCKQUOTE>
<H4><A NAME = "86">Indefinite Iteration</A></H4>



<H5><A NAME = "87">while boolexpr do statements end while : -&gt;</A></H5>
<BLOCKQUOTE>
Check whether or not the Boolean expression has the value <TT>true</TT>; if it has,
execute the statements. Repeat this until the expression assumes the value
<TT>false</TT>, in which case statements following the <TT>end while;</TT> will
be executed.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "88">Example <TT>State_while (H1E14)</TT></A></H3>
The following short program implements a run of the famous 3x + 1
problem on a random integer between 1 and 100.
<P>
<P>
<PRE>
&gt; x := Random(1, 100);
&gt; while x gt 1 do
&gt; x;
&gt;     if IsEven(x) then
&gt;       x div:= 2;
&gt;     else
&gt;        x := 3*x+1;
&gt;     end if;
&gt; end while;
13
40
20
10
5
16
8
4
2
</PRE>
<HR>
<H5><A NAME = "89">repeat statements until boolexpr : -&gt;</A></H5>
<BLOCKQUOTE>
Execute the statements, then check whether or not the Boolean expression
has the value <TT>true</TT>.
Repeat this until the expression assumes the value
<TT>false</TT>, in which case the loop is exited, and statements following
it will be executed.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "90">Example <TT>State_repeat (H1E15)</TT></A></H3>
This example is similar to the previous one, except that it only 
prints x and the number of steps taken before x becomes 1.
We use a <TT>repeat</TT> loop, and show that the use of a <TT>break</TT>
statement sometimes makes it unnecessary that the Boolean expression 
following the <TT>until</TT> ever evaluates to <TT>true</TT>. Similarly, a 
<TT>while true</TT> statement may be used if the user makes sure the 
loop will be exited using <TT>break</TT>.
<P>
<P>
<PRE>
&gt; x := Random(1, 1000);
&gt; x;
172
&gt; i := 0;
&gt; repeat
&gt;     while IsEven(x) do
&gt;         i +:= 1;
&gt;         x div:= 2;
&gt;     end while;
&gt;     if x eq 1 then
&gt;         break;
&gt;     end if;
&gt;     x := 3*x+1;
&gt;     i +:= 1;
&gt; until false;
&gt; i;
31
</PRE>
<HR>
<H4><A NAME = "91">Early Exit from Iterative Statements</A></H4>



<HR>
<H3><A NAME = "92">Example <TT>State_break (H1E16)</TT></A></H3>
<P>
<P>
<PRE>
&gt; p := 10037;
&gt; for x in [1 .. 100] do
&gt;    for y in [1 .. 100] do
&gt;       if x^2 + y^2 eq p then
&gt;          x, y;
&gt;          break x;
&gt;       end if;
&gt;    end for;
&gt; end for;
46 89
</PRE>
Note that <TT>break</TT> instead of <TT>break x</TT> would have broken only
out of the inner loop; the output in that case would have been:
<P>
<P>
<PRE>
46 89
89 46
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text14.htm">[Next]</A><A  HREF = "text12.htm">[Prev]</A> <A  HREF = "text14.htm">[Right]</A> <A  HREF = "text12.htm">[Left]</A> <A  HREF = "text3.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>