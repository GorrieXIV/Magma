<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Module Basics: Embedded  and Reduced Modules</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1257.htm">[Next]</A><A  HREF = "text1255.htm">[Prev]</A> <A  HREF = "text1257.htm">[Right]</A> <A  HREF = "text1255.htm">[Left]</A> <A  HREF = "text1254.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "13783">Module Basics: Embedded  and Reduced Modules</A></H3>

<P>
<P>
All of the modules considered in this chapter are ambient modules or
embedded in such a module.
We call an R-module <B>ambient</B> if it has the <B>explicit</B>
presentational form
R<sup>k</sup>/&lt; <I>relations</I> &gt;, where the relations are elements
of R<sup>k</sup> (and they may be zero or not even determined, initially).
Elements of an ambient R-module M are represented explicitly as vectors
in R<sup>k</sup>, and M is always generated by the k unit vectors.
The <B>degree</B> of M is k.
<P>
An arbitrary module S may have a representation as a submodule of
such an ambient A, which is referred to as its <B>ambient module</B>.
Hence the most general definition of a module is as a sub-quotient of a 
free module. If A has no relations then S is just a submodule of
a free module (namely, A). However, in this case, S will often also have an
<I>internal</I> representation in presentational form that is essential
for much of its fundamental functionality. In any case, the primary
representation of elements of such an embedded module S is as vectors
in the ambient.
<P>
As with vector spaces, there are two basic ways that modules can be
defined in Magma: as embedded or reduced modules.
A general subquotient as described above
is in embedded form, but ambients may also be defined of either reduced or embedded 
type. The type primarily affects the way submodules and quotient modules are 
created. Briefly, submodules and quotient modules of embedded modules stay in
embedded form (as generally proper submodules of an ambient) whereas submodules
or quotients of reduced modules are always returned in presentational form as
ambients, with connecting homomorphisms to link them explicitly to the
original module. The two types are described in a bit more detail below.
For illustration, see the examples at the end of Section <A  HREF = "text1260.htm#13862">Submodules and Quotient  Modules</A>.
<P>
<P>
<P>
<B>Embedded</B> modules are created in general via the function
<A  HREF = "text1258.htm#PMod:EModule">EModule</A>, which returns a free embedded module,
 and in principle mimic the embedded R-spaces
(as created by the function <A  HREF = "text577.htm#ModRng:RSpace">RSpace</A><TT>(R, k)</TT>
in Chapter <A  HREF = "text575.htm#6092">FREE MODULES</A>).
Such modules are always presented with
their elements and bases lying in an ambient module R<sup>k</sup>/&lt; <I>relations</I> &gt;.  The modules are basically implemented as extensions
of the multivariate polynomial ideal type (or affine algebra type if
non-zero relations are present), where columns are internally added
to monomials in a polynomial to represent a vector.  Many operations
applicable to ideals, including various Gr&ouml;bner basis operations,
naturally extend to such modules.
<P>
Starting with an ambient embedded module M=R<sup>k</sup>/&lt; <I>relations</I> &gt;, when a submodule S of M is created, the ambient
module of S is still M, so the elements of S are represented as elements
of R<sup>k</sup> (modulo the relations if present); this therefore also applies
to elements of any basis of S, including the Gr&ouml;bner basis of S.
Thus S itself may be not ambient and this is the only situation in
which non-ambients can occur.  Similarly, when a quotient module Q of M is
constructed, the elements of Q appear as elements of R<sup>k</sup>, while Q
simply gains more relations than M, but its generators are usually
not minimally reduced.
<P>
<P>
<P>
<B>Reduced</B> modules are created in general via the function
<A  HREF = "text1258.htm#PMod:RModule">RModule</A>, which returns a free reduced module,
and are more abstract and mimic the reduced modules
with action over fields and Euclidean rings (as created by the function
<A  HREF = "text577.htm#ModRng:RModule">RModule</A><TT>(R, k)</TT> in Chapter <A  HREF = "text575.htm#6092">FREE MODULES</A>).
Such modules are <B>always ambient</B>, so always have the abstract form
R<sup>n</sup>/&lt; <I>relations</I> &gt;, and the relationships between
such modules are managed by <B>morphisms</B> lying in the background.
The Gr&ouml;bner basis techniques and properties are also hidden from the
user in general.
<P>
Starting from a reduced module M=R<sup>k</sup>/&lt; <I>relations</I> &gt;,
when a submodule S (having s generators (v<sub>1</sub>, ..., v<sub>s</sub>))
of M is created, S is generally created as R<sup>s</sup>/&lt; <I>relations<sub>S</sub></I> &gt; (where the relations for S are initially unknown
and are only computed when needed) and a morphism is stored from S to
M, which maps the i-th unit vector of S to v<sub>i</sub> in M.  Similarly,
a quotient module Q of M is constructed as another ambient module,
usually with minimal generators, and a morphism from M onto Q is
stored in the background.  All morphisms between modules can be accessed
via the function <A  HREF = "text1260.htm#PMod:Morphism">Morphism</A>.
<P>
<P>
<P>
For any module M, there exists an isomorphic reduced <B>presentation
module</B> P, which is always ambient, since P is reduced.  If M is
embedded, then P is a reduced module equivalent to M (and morphisms in
the background allow automatic coercion between M and P).  Otherwise,
M is already reduced so P is simply identical to M.  Some functions
(such as <A  HREF = "text1266.htm#PMod:FreeResolution">FreeResolution</A>) always move to the presentation of M,
since it is more natural to work only with ambient modules in that
context.
<P>
Embedded modules are generally preferable when one wishes to work explicitly
with Gr&ouml;bner bases at a very low level, while reduced modules are
generally preferable for homological computations since the ambient
presentation form is more convenient (particularly for the relevant maps).
<P>
Technically, there is little difference in practice between an ambient embedded
module and a reduced module, if each module is considered in isolation.
The concepts basically refer to how submodules and quotient modules are
derived from a given module (and the fact that embedded modules allow
non-ambient submodules).
<P>
Finally, there is a subclass of reduced modules with
the special type <TT>ModMPolGrd</TT>: these are <B>graded</B>, which
means that they are always generated by homogeneous elements
(with respect to the relevant grading).
The main distinctive of this type is simply that when one creates a
submodule or quotient module of a module of type <TT>ModMPolGrd</TT>,
then the generators must be homogeneous, thus ensuring that the new
derived module is also graded so will be of type <TT>ModMPolGrd</TT> also.
In the future, more functions will be developed which will take modules
of type <TT>ModMPolGrd</TT> explicitly.
Note also that since the type <TT>ModMPolGrd</TT>
ISA <TT>ModMPol</TT> via the type `ISA' relation, any operation applicable
to a module of type <TT>ModMPol</TT> is also applicable to a module
of type <TT>ModMPolGrd</TT>.


<PRE></PRE> <A  HREF = "text1257.htm">[Next]</A><A  HREF = "text1255.htm">[Prev]</A> <A  HREF = "text1257.htm">[Right]</A> <A  HREF = "text1255.htm">[Left]</A> <A  HREF = "text1254.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>