<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Construction of Incidence  Structures and Designs</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1761.htm">[Next]</A><A  HREF = "text1759.htm">[Prev]</A> <A  HREF = "text1761.htm">[Right]</A> <A  HREF = "text1759.htm">[Left]</A> <A  HREF = "text1758.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "19489">Construction of Incidence  Structures and Designs</A></H3>



<H5><A NAME = "19490">IncidenceStructure&lt; v | X &gt; : RngIntElt, List -&gt; Inc</A></H5>
<H5>IncidenceStructure&lt; P | X &gt; : SetIndx, List -&gt; Inc</H5>
<BLOCKQUOTE>
Construct the incidence structure D having point set 
P = {@ p<sub>1</sub>, p<sub>2</sub>, ..., p<sub>v</sub> @}
(where p<sub>i</sub> = i for each i if the first form of the constructor is used),
and block set
B = { B<sub>1</sub>, B<sub>2</sub>, ..., B<sub>b</sub> } given by X. 
The value of X must be either:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A list of subsets of the set P.
<DT>(b)</DT><DD>A sequence, set or indexed set of subsets of P.
<DT>(c)</DT><DD>A list of blocks of an existing incidence structure.
<DT>(d)</DT><DD>A sequence, set or indexed set of blocks of an existing incidence structure.
<DT>(e)</DT><DD>A combination of the above.
<DT>(f)</DT><DD>A v x b (0, 1)-matrix A, where A may be defined
over any coefficient ring. The matrix A will be interpreted as the
incidence matrix for the incidence structure D.
<DT>(g)</DT><DD>A set of codewords of a linear code with length v.
The block set of D is taken to be the set of supports of the codewords.
<P>
<P>
</DL>
The incidence structure D produced by this constructor will 
have P as its point set and B as its set of blocks. The function 
returns three values:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>The incidence structure D;
<DT>(ii)</DT><DD>The point-set P for D; and
<DT>(iii)</DT><DD>The block-set B for D.</DL>
</BLOCKQUOTE>
<H5><A NAME = "19491">NearLinearSpace&lt; v | X : parameters &gt; : RngIntElt, List -&gt; IncNsp</A></H5>
<H5>NearLinearSpace&lt; P | X : parameters &gt; : SetIndx, List -&gt; IncNsp</H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Construct the near--linear space S on the set of points 
P = {@ p<sub>1</sub>, p<sub>2</sub>, ..., p<sub>v</sub> @}
(where p<sub>i</sub> = i for each i if the first form of the constructor is used),
 with lines
L = { L<sub>1</sub>, L<sub>2</sub>, ..., L<sub>b</sub> } given by X. 
The value of X must be either:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A list of subsets of the set P.
<DT>(b)</DT><DD>A sequence, set or indexed set of subsets of P.
<DT>(c)</DT><DD>A list of blocks of an existing incidence structure.
<DT>(d)</DT><DD>A sequence, set or indexed set of blocks of an existing incidence structure.
<DT>(e)</DT><DD>A combination of the above.
<DT>(f)</DT><DD>A v x b (0, 1)-matrix A, where A may be
over any coefficient ring. The matrix A will be interpreted 
as the incidence matrix for the near--linear space S.
<DT>(g)</DT><DD>A set of codewords of a linear code with length v.
The line set of S is taken to be the set of supports of the codewords.
<P>
<P>
</DL>
The set of lines L defined by X must satisfy two properties:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>Each line of L must contain at least two points;
<DT>(b)</DT><DD>Any two points of P may lie on at most one line.
<P>
<P>
</DL>
The optional boolean argument <TT>Check</TT> indicates whether or not to check
that these two properties are satisfied.
<P>
<P>
<P>
The near--linear space S produced by this constructor will have P as its 
point set and L as its set of lines. The function returns three values:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>The near--linear space S;
<DT>(ii)</DT><DD>The point-set P for S; and
<DT>(iii)</DT><DD>The line-set L for S.</DL>
</BLOCKQUOTE>
<H5><A NAME = "19492">LinearSpace&lt; v | X : parameters &gt; : RngIntElt, List -&gt; IncLsp</A></H5>
<H5>LinearSpace&lt; P | X : parameters &gt; : SetIndx, List -&gt; IncLsp</H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Construct the linear space S on the set of points 
P = {@ p<sub>1</sub>, p<sub>2</sub>, ..., p<sub>v</sub> @} 
(where p<sub>i</sub> = i for each i if the first form of the constructor is used),
with lines
L = { L<sub>1</sub>, L<sub>2</sub>, ..., L<sub>b</sub> } given by X.
The value of X must be either:
<P>
<P>
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A list of subsets of the set P.
<DT>(b)</DT><DD>A sequence, set or indexed set of subsets of P. 
<DT>(c)</DT><DD>A list of blocks of an existing incidence structure.
<DT>(d)</DT><DD>A sequence, set or indexed set of blocks of an existing incidence structure.
<DT>(e)</DT><DD>A combination of the above.
<DT>(f)</DT><DD>A v x b (0, 1)-matrix A, where A may be defined 
over any coefficient ring. The matrix A will be interpreted as the 
incidence matrix for the linear space S.
<DT>(g)</DT><DD>A set of codewords of a linear code with length v.
The line set of S is taken to be the set of supports of the codewords.
<P>
<P>
</DL>
The set of lines L defined by X must satisfy two properties:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>Each line of L must contain at least two points;
<DT>(b)</DT><DD>Any two points of P must lie on precisely one line.
<P>
<P>
</DL>
The optional boolean argument <TT>Check</TT> indicates whether or not to check
that these two properties are satisfied.
<P>
<P>
<P>
The linear space S produced by this constructor will have P as its 
point set and L as its set of lines. The function returns three values:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>The linear space S;
<DT>(ii)</DT><DD>The point-set P for S; and
<DT>(iii)</DT><DD>The line-set L for S.</DL>
</BLOCKQUOTE>
<H5><A NAME = "19493">Design&lt; t, v | X : parameters &gt; : RngIntElt, RngIntElt, List -&gt; Dsgn</A></H5>
<H5>Design&lt; t, P | X : parameters &gt; : RngIntElt, SetIndx, List -&gt; Dsgn</H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>

<PRE>    Al: MonStg                          Default: "NoOrbits"</PRE>
<BLOCKQUOTE>
Construct the t--design D on the set of points 
P = {@ p<sub>1</sub>, p<sub>2</sub>, ..., p<sub>v</sub> @} 
(where p<sub>i</sub> = i for each i if the first form of the constructor is used),
with blocks
B = { B<sub>1</sub>, B<sub>2</sub>, ..., B<sub>b</sub> } given by X. 
The value of X must be either:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A list of subsets of the set P.
<DT>(b)</DT><DD>A sequence, set or indexed set of subsets of P.
<DT>(c)</DT><DD>A list of blocks of an existing incidence structure.
<DT>(d)</DT><DD>A sequence, set or indexed set of blocks of an existing incidence structure.
<DT>(e)</DT><DD>A combination of the above.
<DT>(f)</DT><DD>A v x b (0, 1)-matrix A, where A may be
over any coefficient ring. The matrix A will be interpreted 
as the incidence matrix for the t--(v, k, &lambda;) design D.
<DT>(g)</DT><DD>A set of codewords of a linear code with length v.
The block set of D is taken to be the set of supports of the codewords.
<P>
<P>
</DL>
The set of blocks B defined by X must satisfy three properties:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>Each block must contain the same number, k say, of points.
<DT>(b)</DT><DD>Every t--subset of P must lie in the same number, &lambda;
say (where &lambda; &gt; 0), of blocks.
<DT>(c)</DT><DD>There must be no repeated blocks.
<P>
<P>
</DL>
The optional boolean argument <TT>Check</TT> indicates whether or not to check
that these three properties are satisfied.
The optional parameter <TT>Al</TT> can be used to specify the algorithm
used for balance testing, see the  
  introduction to Section <A  HREF = "text1766.htm#19570">Elementary Properties of Incidence Structures and Designs</A> for a full 
  description of its usage.
<P>
<P>
<P>
<P>
The t--(v, k, &lambda;) design D produced by this constructor will 
have P as its point set and B as its set of blocks. The function 
returns three values:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>The design D;
<DT>(ii)</DT><DD>The point-set P for D; and
<DT>(iii)</DT><DD>The block-set B for D.</DL>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19494">Example <TT>Design_Constructors (H153E1)</TT></A></H3>
The Fano plane, considered as a 2-(7, 3, 1) design, may be constructed
by the following statement:
<P>
<P>
<PRE>
&gt; F := Design&lt; 2, 7 | {1,2,3}, {1,4,5}, {1,6,7}, {2,4,7},
&gt;                                {2,5,6}, {3,5,7}, {3,4,6} &gt;;
&gt; F: Maximal;
2-(7, 3, 1) Design with 7 blocks
Points: {@ 1, 2, 3, 4, 5, 6, 7 @}
Blocks:
    {1, 2, 3},
    {1, 4, 5},
    {1, 6, 7},
    {2, 4, 7},
    {2, 5, 6},
    {3, 5, 7},
    {3, 4, 6}
</PRE>
General incidence structures are allowed repeated blocks,
as in the following:
<P>
<P>
<PRE>
&gt; S := IncidenceStructure&lt; {@ 4, 5, 7, 9 @} | [{4, 5, 7}, {7, 9},
&gt;                                              {5, 7, 9} , {7, 9}] &gt;;
&gt; S: Maximal;
Incidence Structure on 4 points with 4 blocks
Points: {@ 4, 5, 7, 9 @}
Blocks:
    {4, 5, 7},
    {7, 9},
    {5, 7, 9},
    {7, 9}
</PRE>
We now construct a linear space by giving its incidence matrix:
<P>
<P>
<PRE>
&gt; R := RMatrixSpace(Integers(), 5, 6);
&gt; I := R![ 1, 0, 1, 1, 0, 0,
&gt;          1, 0, 0, 0, 1, 1,
&gt;          1, 1, 0, 0, 0, 0,
&gt;          0, 1, 1, 0, 1, 0,
&gt;          0, 1, 0, 1, 0, 1];
&gt; L := LinearSpace&lt; 5 | I &gt;;
&gt; L: Maximal;
Linear Space on 5 points with 6 lines
Points: {@ 1, 2, 3, 4, 5 @}
Lines:
    {1, 2, 3},
    {3, 4, 5},
    {1, 4},
    {1, 5},
    {2, 4},
    {2, 5}
</PRE>
Finally, we use the minimum weight codewords of the unextended
binary Golay code to construct a 4-(23, 7, 1) design. Since we know that
this is indeed a 4-design, we set the checking parameter to <TT>false</TT>.
<P>
<P>
<PRE>
&gt; C := GolayCode(GF(2), false);
&gt; C;
[23, 12, 7] Unextended Golay Code over GF(2)
Generator matrix:
[1 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1]
[0 1 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 0 0 1 0 0 1]
[0 0 1 0 0 0 0 0 0 0 0 0 1 1 0 1 0 0 1 0 1 0 1]
[0 0 0 1 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 1]
[0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0 0]
[0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1 0]
[0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 0 0 1 1 0 1 1]
[0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0 0]
[0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1 0]
[0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 1 1 0 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1 0]
[0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 1 1 1 0 0 0 1 1]
&gt; minwt := MinimumWeight(C);
&gt; minwt;
7
&gt; wds := Words(C, minwt);
&gt; D := Design&lt; 4, Length(C) | wds : Check := false &gt;;
&gt; D;
4-(23, 7, 1) Design with 253 blocks
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1761.htm">[Next]</A><A  HREF = "text1759.htm">[Prev]</A> <A  HREF = "text1761.htm">[Right]</A> <A  HREF = "text1759.htm">[Left]</A> <A  HREF = "text1758.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>