<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Elements</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text713.htm">[Next]</A><A  HREF = "text711.htm">[Prev]</A> <A  HREF = "text713.htm">[Right]</A> <A  HREF = "text711.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8038">Elements</A></H3>

<P>
<P>
Elements of a pc-group are written in terms of the generators.  The
pc-generators of a group G can always be written as <TT>G.1</TT>, <TT>G.2</TT>, ... .
Any variables naming the generators, either assigned during the definition
of the group, or later using standard assignment statements, can also
be used to express the generators.  An arbitrary element can be written
as a word in the generators using the various element operations.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text712.htm#8039">Definition of Elements</A>
<LI> <A  HREF = "text712.htm#8044">Arithmetic Operations on Elements</A>
<LI> <A  HREF = "text712.htm#8054">Properties of Elements</A>
<LI> <A  HREF = "text712.htm#8057">Predicates for Elements</A>
<LI> <A  HREF = "text712.htm#8063">Set Operations</A>
</UL>
<H4><A NAME = "8039">Definition of Elements</A></H4>

<P>
<P>
A <I>word</I> is defined inductively as follows:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A generator is a word;
<DT>(ii)</DT><DD>The expression (u) is a word, where u
is a word;
<DT>(iii)</DT><DD>The product u * v of the words u and
v is a word;
<DT>(iv)</DT><DD>The conjugate u<sup>v</sup> of the word u by the
word v is a word (u<sup>v</sup> expands into the
word v<sup> - 1</sup> * u * v);
<DT>(v)</DT><DD>The power of a word u<sup>n</sup>, where u is a
word and n is an integer, is a word;
<DT>(vi)</DT><DD>The commutator (u, v) of the words u
and v is a word ( (u, v) expands into
the word u<sup> - 1</sup> * v<sup> - 1</sup> * u * v).
<P>
<P>
<P>
</DL>
A group element is always printed by Magma as a normal word in
the pc-generators of its parent group.
<P>
It is also possible to create an element of a group G from its
exponent vector.  That is, the sequence [e<sub>1</sub>, e<sub>2</sub>, ..., e<sub>n</sub>]
corresponds to the element 
(G.1)<sup>e<sub>1</sub></sup> * (G.2)<sup>e<sub>2</sub></sup> * ... * (G.n)<sup>e<sub>n</sub></sup>.
The coercion operator <TT>!</TT> is used to convert the sequence to the
element.


<H5><A NAME = "8040">G ! Q : GrpPC, [RngIntElt] -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Given the pc-group G and a sequence Q of length n, containing
the distinct positive integers (&alpha;<sub>i</sub>), 0&le;(&alpha;<sub>i</sub>) &lt; p<sub>i</sub>
for i = 1, ..., n, construct the element x of G given by
x = a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>,   0 &le;&alpha;<sub>i</sub> &lt; p<sub>i</sub>
for i = 1, ..., n.
</BLOCKQUOTE>
<H5><A NAME = "8041">ElementToSequence(x) : GrpPCElt -&gt; [RngIntElt]</A></H5>
<H5>Eltseq(x) : GrpPCElt -&gt; [RngIntElt]</H5>
<BLOCKQUOTE>
Given an element x belonging to the pc-group G, where
x = a<sub>1</sub><sup>&alpha;<sub>1</sub></sup> ... a<sub>n</sub><sup>&alpha;<sub>n</sub></sup>,   0 &le;&alpha;<sub>i</sub> &lt; p<sub>i</sub>
for i = 1, ..., n,
return the sequence Q of n
integers defined by Q[i] = (&alpha;<sub>i</sub>), for i = 1, ..., n.
</BLOCKQUOTE>
<H5><A NAME = "8042">Identity(G) : GrpPC -&gt; GrpPCElt</A></H5>
<H5>Id(G) : GrpPC -&gt; GrpPCElt</H5>
<H5>G ! 1 : GrpPC, RngIntElt -&gt; GrpPCElt</H5>
<BLOCKQUOTE>
Construct the identity element of the pc-group G.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8043">Example <TT>GrpPC_elt-definition (H68E8)</TT></A></H3>
Given a pc-group, we can define elements as words in
the generators or as more general expressions.
<P>
<P>
<PRE>
&gt; G := PolycyclicGroup&lt;a,b,c|a^3,b^2,c^2,b^a=c,c^a=b*c&gt;;
&gt; G;
GrpPC : G of order 12 = 2^2 * 3
PC-Relations:
    G.1^3 = Id(G),
    G.2^2 = Id(G),
    G.3^2 = Id(G),
    G.2^G.1 = G.3,
    G.3^G.1 = G.2 * G.3
&gt; x := G.1^2*G.3;
&gt; x;
G.1^2 * G.3
&gt; x^2;
G.1 * G.2 * G.3
&gt; x^3;
Id(G)
</PRE>
Magma will print the element in normal form even if
it is not entered that way.
<P>
<P>
<PRE>
&gt; G.2*G.1;
G.1 * G.3
</PRE>
When coercing a sequence into a group element, the sequence
is always interpreted as an exponent vector for a normal word.
<P>
<P>
<PRE>
&gt; y := G![0,1,1];
&gt; y;
G.2 * G.3
&gt; x*y;
G.1^2 * G.2
&gt; y*x;
G.1^2
&gt; (x,y);
G.2
</PRE>
An element can also be converted into a sequence.
<P>
<P>
<PRE>
&gt; x^y;
G.1^2 * G.2 * G.3
&gt; Eltseq(x^y);
[ 2, 1, 1 ]
</PRE>
<HR>
<H4><A NAME = "8044">Arithmetic Operations on Elements</A></H4>

<P>
<P>
New elements can be computed from existing elements using
standard operations.


<H5><A NAME = "8045">g * h : GrpPCElt, GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Product of the element g and the element h, where g and h belong
to some common subgroup G of a pc-group U. If g and h are given
as elements belonging to the same proper subgroup G of U, then the
result will be returned as an element of G; if g and h  are given as
elements belonging to distinct subgroups H and K of U, then the
product is returned as an element of G, where G is the smallest
subgroup of U known to contain both elements.
</BLOCKQUOTE>
<H5><A NAME = "8046">g *:= h : GrpPCElt, GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Replace g with the product of element g and element h.
</BLOCKQUOTE>
<H5><A NAME = "8047">g ^ n: GrpPCElt, RngIntElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
The n-th power of the element g, where n is a positive or negative integer.
</BLOCKQUOTE>
<H5><A NAME = "8048">g ^:= n: GrpPCElt, RngIntElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Replace g with the n-th power of the element g.
</BLOCKQUOTE>
<H5><A NAME = "8049">g / h : GrpPCElt, GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Quotient of the element g by the element h, i.e. the element
g * h<sup> - 1</sup>.
Here g and h must belong to some common subgroup G
of a pc-group U. The rules for determining the parent group of g/h
are the same as for g * h.
</BLOCKQUOTE>
<H5><A NAME = "8050">g /:= h : GrpPCElt, GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Replace g with the quotient of the element g by the element h.
</BLOCKQUOTE>
<H5><A NAME = "8051">g ^ h : GrpPCElt, GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Conjugate of the element g by the element h, i.e. the element
h<sup> - 1</sup> * g * h. Here g and h must belong to some common subgroup G
of a pc-group U. The rules for determining the parent group of g<sup>h</sup>
are the same as for g * h.
</BLOCKQUOTE>
<H5><A NAME = "8052">g ^:= h : GrpPCElt, GrpPCElt -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Replace g with the conjugate of the element g by the element h.
</BLOCKQUOTE>
<H5><A NAME = "8053">(g<sub>1</sub>, ..., g<sub>n</sub>) : List(GrpPCElt) -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Given the n words g<sub>1</sub>, ..., g<sub>n</sub> belonging to some common subgroup
G of a pc-group U, return the commutator. If g<sub>1</sub>, ..., g<sub>n</sub> are given as elements
belonging to the same proper subgroup G of U, then the result will be
returned as an element of G; if g<sub>1</sub>, ..., g<sub>n</sub>  are given as
elements belonging to distinct subgroups of U, then the product is
returned as an element of G, where G is the smallest subgroup of
U known to contain all elements.  Commutators are <I>left-normed</I>,
so that they are evaluated from left to right.
</BLOCKQUOTE>
<H4><A NAME = "8054">Properties of Elements</A></H4>



<H5><A NAME = "8055">Order(x) : GrpPCElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Order of the element x.
</BLOCKQUOTE>
<H5><A NAME = "8056">Parent(x) : GrpPCElt -&gt; GrpPC</A></H5>
<BLOCKQUOTE>
The parent group G of the element x.
</BLOCKQUOTE>
<H4><A NAME = "8057">Predicates for Elements</A></H4>

<P>
<P>
Elements in the same group can be compared using <TT>eq</TT> and <TT>ne</TT>.


<H5><A NAME = "8058">g eq h : GrpPCElt, GrpPCElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given elements g and h belonging to a common pc-group, return <TT>true</TT> if
g and h are the same element, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8059">g ne h : GrpPCElt, GrpPCElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given elements g and h belonging to a common pc-group, return <TT>true</TT> if
g and h are distinct elements, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8060">IsIdentity(g) : GrpPCElt -&gt; BoolElt</A></H5>
<H5>IsId(g) : GrpPCElt -&gt; BoolElt</H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if g is the identity element, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "8061">IsConjugate(G, g, h) : GrpPC, GrpPCElt, GrpPCElt -&gt; BoolElt, GrpPCElt</A></H5>
<BLOCKQUOTE>
Given a group G and elements g and h belonging to G, return the
value <TT>true</TT> if g and h are conjugate in G. The function also
returns a second value in the event that the elements are conjugate: an
element z such that g<sup>z</sup>=h.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8062">Example <TT>GrpPC_elt_predicates (H68E9)</TT></A></H3>
We check if one element commutes with another.
<P>
<P>
<PRE>
&gt; G&lt;a,b,c&gt; := PolycyclicGroup&lt;a,b,c|a^3,b^2,c^2,b^a=c,c^a=b*c&gt;;
&gt; b^a eq b;
false
</PRE>
The same information can also be obtained by checking the commutator.
<P>
<P>
<PRE>
&gt; IsIdentity((b,a));
false
</PRE>
If we assign the result of <TT>IsConjugate</TT> to a single variable, it will
store the boolean result.
<P>
<P>
<PRE>
&gt; r := IsConjugate(G, c, b);
&gt; r;
true
</PRE>
If we simply print <TT>IsConjugate</TT>, the boolean value and the 
conjugating element (if any) are displayed. On the other hand, 
using the multiple assignment, we can capture both of those values.
<P>
<P>
<PRE>
&gt; IsConjugate(G, c, b);
true a^2
&gt; r, x := IsConjugate(G, c, b);
&gt; x, r;
a^2 true
&gt; c^x;
b
</PRE>
<HR>
<H4><A NAME = "8063">Set Operations</A></H4>

<P>
<P>
These functions allow one to work with the set of elements of G, possibly
without much knowledge of the structure of G.


<H5><A NAME = "8064">NumberingMap(G) : GrpPC -&gt; Map</A></H5>
<BLOCKQUOTE>
A bijective mapping from the group G onto the set of integers {1 ... |G|}.
The actual mapping depends upon the current presentation for G.
</BLOCKQUOTE>
<H5><A NAME = "8065">Random(G) : GrpPC -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
An element, randomly chosen, from the group G.
This function uses an entirely different procedure than that used by
<TT>RandomProcess</TT> (see below).  A group element is chosen with uniform probability
by generating (pseudo-)random integers in the proper range to form a
legal exponent vector for G.  The corresponding element is returned.
This is an extremely efficient process and is the recommended method
for producing random elements of a pc-group.
</BLOCKQUOTE>
<H5><A NAME = "8066">RandomProcess(G) : GrpPC -&gt; Process</A></H5>

<PRE>    Slots: RngIntElt                    Default: 10</PRE>

<PRE>    Scramble: RngIntElt                 Default: 20</PRE>
<BLOCKQUOTE>
Create a process to generate randomly chosen elements from the
group G. The process uses an `expansion' procedure
to construct a set of elements corresponding to fairly long words in the
generators of G.  At all times, N elements are stored where N is
the maximum of the specified value for <TT>Slots</TT> and <TT>Ngens</TT>(G) + 1.
Initially, these are simply the generators of G and products of pairs
of generators of G.  Random elements are now produced by successive
calls to <TT>Random(P)</TT>, where P is the process created by this
function.  Each such call chooses an element x stored by the process 
and returns it, replacing x with the product of x and another random 
element (multiplied on the left or the right).  Setting <TT>Scramble := m</TT> 
causes m such operations to be performed initially.
</BLOCKQUOTE>
<H5><A NAME = "8067">Random(P) : Process -&gt; GrpPCElt</A></H5>
<BLOCKQUOTE>
Given a random element process P created by the function
<TT>RandomProcess(G)</TT> for the finite group G,
construct a random element of G by forming a
random product over the expanded generating set constructed when the
process was created.
</BLOCKQUOTE>
<H5><A NAME = "8068">Representative(G) : GrpPC -&gt; GrpPCElt</A></H5>
<H5>Rep(G) : GrpPC -&gt; GrpPCElt</H5>
<BLOCKQUOTE>
A representative element of G.  For a pc-group, this always
returns the identity element.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8069">Example <TT>GrpPC_set_ops (H68E10)</TT></A></H3>
The <TT>NumberingMap</TT> function assigns a number to each group
element.
<P>
<P>
<PRE>
&gt; G := DihedralGroup(GrpPC,4);
&gt; num_map := NumberingMap(G);
&gt; for x in G do
&gt;   print x,"-&gt;",num_map(x);
&gt; end for;
Id(G) -&gt; 1
G.3 -&gt; 2
G.2 -&gt; 3
G.2 * G.3 -&gt; 4
G.1 -&gt; 5
G.1 * G.3 -&gt; 6
G.1 * G.2 -&gt; 7
G.1 * G.2 * G.3 -&gt; 8
</PRE>
The inverse map can be used to obtain the group element
corresponding to a particular number.
<P>
<P>
<PRE>
&gt; 6 @@ num_map;
G.1 * G.3  
</PRE>
The <TT>Random</TT> function is sometimes useful to create
a statistical profile of a group.  To demonstrate, we
take two groups of order 3<sup>6</sup> from the <TT>SmallGroup</TT>
database.
<P>
<P>
<PRE>
&gt; G1 := SmallGroup(3^6, 60);
&gt; G2 := SmallGroup(3^6, 392);
</PRE>
We want to build a histogram of element orders for
each group.  Since these are 3-groups, each order
will be a power of 3 and we use <TT>Ilog</TT> to get the
exponent of the order.  First, we
define a short function to compute the histogram.
<P>
<P>
<PRE>
&gt; function hist(G, trials)
&gt;   // Given a 3-group G, of exponent &lt;= 3^5,
&gt;   // return a sequence whose ith term is the
&gt;   // number of elements of order p^(i-1) out
&gt;   // of trials randomly chosen elements.
&gt;   table := [0,0,0,0,0,0];
&gt;   for i := 1 to trials do
&gt;     x := Random(G);
&gt;     n := Ilog(3, Order(x));
&gt;     table[n+1] +:= 1;
&gt;   end for;
&gt;   return table;
&gt; end function;
</PRE>
Now, we use this function to compute order distributions
for 100 elements in each group.
<P>
<P>
<PRE>
&gt; t1 := hist(G1,100);
&gt; t1;
[ 0, 0, 5, 28, 67, 0 ]
&gt; t2 := hist(G2,100);
&gt; t2;
[ 0, 5, 5, 25, 65, 0 ]
</PRE>
We can even display them with simple character graphics.
<P>
<P>
<PRE>
&gt; for e in t1 do print ":","@"^e; end for;
: 
: 
: @@@@@
: @@@@@@@@@@@@@@@@@@@@@@@@@@@@
: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
: 
&gt; for e in t1 do print ":","@"^e; end for;
: 
: @@@@@
: @@@@@
: @@@@@@@@@@@@@@@@@@@@@@@@@
: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
: 
</PRE>
<HR>
<H3><A NAME = "8070">Example <TT>GrpPC_Set (H68E11)</TT></A></H3>
Given the subgroups H and K of G,
construct the set product of the groups H and K.
<P>
<P>
<PRE>
&gt; set_product := func&lt;G, H, K | { G | x * y : x in H, y in K }&gt;;
</PRE>
Given a subgroup H of the pc-group G, construct H as a set
of elements of G.
<P>
<P>
<PRE>
&gt; elements := func&lt;G, H | { G | x : x in H }&gt;;
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text713.htm">[Next]</A><A  HREF = "text711.htm">[Prev]</A> <A  HREF = "text713.htm">[Right]</A> <A  HREF = "text711.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>