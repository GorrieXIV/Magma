<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Other Properties of Linear  Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text691.htm">[Next]</A><A  HREF = "text689.htm">[Prev]</A> <A  HREF = "text691.htm">[Right]</A> <A  HREF = "text689.htm">[Left]</A> <A  HREF = "text684.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7914">Other Properties of Linear  Groups</A></H3>

<P>
<P>
In this section, K is a finite degree extension of  F(x<sub>1</sub>, ..., x<sub>m</sub>), where F is Q, a number field, or a finite 
field, and m&ge;0.


<H5><A NAME = "7915">IsCompletelyReducible(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    SolubleByFinite: BoolElt            Default: <TT>false</TT></PRE>

<PRE>    NilpotentByFinite: BoolElt          Default: <TT>false</TT></PRE>

<PRE>    AbelianByFinite: BoolElt            Default: <TT>false</TT></PRE>

<PRE>    Nilpotent: BoolElt                  Default: <TT>false</TT></PRE>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G over K, and tests whether G is completely reducible.
If so, it returns <TT>true</TT>, otherwise <TT>false</TT>.
<P>
The algorithm used is described in <A  HREF = "text683.htm#bib_Tits">[DFO11, Section 4]</A>. It 
applies only if G is soluble-by-finite, nilpotent-by-finite, or 
abelian-by-finite. Hence one (and only one) of the four optional 
arguments <TT>SolubleByFinite, NilpotentByFinite, 
AbelianByFinite, Nilpotent</TT> must be true. In particular, if <TT>Nilpotent</TT> is set to be true, then a more efficient algorithm 
(from <A  HREF = "text683.htm#bib_Draft">[DF08]</A>) is used.
<P>
In positive characteristic p, if p divides the order of the 
congruence image of G then currently the algorithm cannot decide 
complete reducibility of G.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how 
the presentation is constructed. If its value is "CT", then we 
use the presentation provided by <TT>CompositionTreeVerify</TT>. If 
its value is "PC" and the image is soluble, then we use a 
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value 
is "FP" then we use the presentation provided by <TT>FPGroup</TT> 
or <TT>FPGroupStrong</TT>. If the order of the congruence image is 
less than the value of the optional argument <TT>Small</TT>, then we 
use <TT>FPGroup</TT> to construct the presentation; if it is less 
than the value of the optional argument <TT>OrderLimit</TT>, then we 
use <TT>FPGroupStrong</TT> to construct the presentation; otherwise 
we use the presentation provided by <TT>CompositionTreeVerify</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7916">CompletelyReduciblePart (G) : GrpMat -&gt; GrpMat, GrpMatElt</A></H5>
<BLOCKQUOTE>
Let H be a matrix group in block lower triangular form, and let 
&mu; be the projection of H onto its diagonal blocks. 
If all diagonal blocks
of H are completely reducible, then ker &mu; is the unipotent 
radical of H and &mu;(H) is a `completely reducible part' of H.
<P>
G is a soluble-by-finite group defined over Q or over a number field.
The function returns a completely reducible part of G and a 
change-of-basis matrix to exhibit this. 
<P>
In positive characteristic p, if p divides the order of the 
congruence image of G then currently the algorithm cannot construct
a completely reducible part.
</BLOCKQUOTE>
<H5><A NAME = "7917">IsUnipotent(G) : GrpMat -&gt; BoolElt, GrpMatElt</A></H5>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G defined over an exact field F, and tests whether G is
unipotent, i.e., whether it is conjugate in GL(n, F) to a 
group of upper unitriangular matrices. If G is unipotent then 
the function returns <TT>true</TT> and a change-of-basis matrix
c &isin;GL(n, F) such that G<sup>c</sup> is upper unitriangular, 
otherwise <TT>false</TT>. 
See <A  HREF = "text683.htm#bib_Large">[DF06, Section 2.1]</A> for details of the algorithm.
</BLOCKQUOTE>
<H5><A NAME = "7918">IsNilpotent(G) : GrpMat -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Let G be a finitely generated subgroup of GL(n, K).  This
function returns <TT>true</TT> if G is nilpotent; otherwise it
returns <TT>false</TT>. If K is finite then the function is an
implementation of the algorithm of <A  HREF = "text683.htm#bib_Large">[DF06]</A>. If K is
infinite then the function is similar to the algorithm
in <A  HREF = "text683.htm#bib_Draft">[DF08]</A>, and is based on the construction of a homomorphic
image H of G via <TT>CongruenceImage</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7919">IsSoluble(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>

<PRE>    UseCongruence: BoolElt              Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Let G be a finitely generated subgroup of GL(n, K).  
This function returns <TT>true</TT> if G is soluble; otherwise it 
returns <TT>false</TT>.  If K is infinite and has characteristic 
p&gt;0, then the algorithm is applicable only for p &gt; n. For 
details see <A  HREF = "text683.htm#bib_Tits">[DFO11, Section 3.2]</A>.
<P>
If K is Q or a number field and 
<TT>UseCongruence</TT> is <TT>true</TT>, then use congruence
homomorphism machinery to decide; otherwise use default algorithm. 
<P>
The other optional arguments are those described above for <TT>IsSolubleByFinite</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7920">IsPolycyclic(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>
<BLOCKQUOTE>
This function takes as input a finite matrix group G over 
Z, and tests whether G is polycyclic. If so, it returns <TT>true</TT>, otherwise <TT>false</TT>.
<P>
The optional arguments are those described above 
for <TT>IsSolubleByFinite</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7921">HasFiniteOrder (g : parameters ) : GrpMatElt -&gt; BoolElt, RngIntElt</A></H5>

<PRE>    UseCongruence: BoolElt              Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Let g be an invertible matrix defined over Z, Q, a 
number field, a function field, or an algebraic function field.
<P>
If g has finite order, then return <TT>true</TT> and, if known, a 
multiplicative upper bound for the order of g; else return <TT>false</TT>.
<P>
If g is defined over Z, Q, or a number field and 
<TT>UseCongruence</TT> is <TT>true</TT>, then use congruence
homomorphism machinery to decide; otherwise use default algorithm. 
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text691.htm">[Next]</A><A  HREF = "text689.htm">[Prev]</A> <A  HREF = "text691.htm">[Right]</A> <A  HREF = "text689.htm">[Left]</A> <A  HREF = "text684.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>