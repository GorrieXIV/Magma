<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Modules over Basic Algebras</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text975.htm">[Next]</A><A  HREF = "text973.htm">[Prev]</A> <A  HREF = "text975.htm">[Right]</A> <A  HREF = "text973.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "10992">Modules over Basic Algebras</A></H3>

<P>
<P>
<P>
A module M over a basic algebra B is presented as a sequence of
matrices, one for each generator of the algebra. 



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text974.htm#10993">Indecomposable Projective Modules</A>
<LI> <A  HREF = "text974.htm#11000">Creation</A>
<LI> <A  HREF = "text974.htm#11011">Access Functions</A>
<LI> <A  HREF = "text974.htm#11021">Predicates</A>
<LI> <A  HREF = "text974.htm#11025">Elementary Operations</A>
</UL>
<H4><A NAME = "10993">Indecomposable Projective Modules</A></H4>

<P>
<P>
<P>
The indecomposable projective modules are defined from the structure
of the algebra and have associated path trees that solve the homomorphism
lifting problem.


<H5><A NAME = "10994">ProjectiveModule(B, i) : AlgBas, RngIntElt -&gt; ModRng</A></H5>
<BLOCKQUOTE>
The i<sup>th</sup> projective module of the basic algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10995">PathTree(B, i) : AlgBas, RngIntElt -&gt; ModRng</A></H5>
<BLOCKQUOTE>
The path tree of the  i<sup>th</sup> projective module of the basic algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10996">ActionGenerator(B, i) : AlgBas, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of matrices for the generators of the basic algebra B acting on
the i<sup>th</sup> projective module of B.
</BLOCKQUOTE>
<H5><A NAME = "10997">IdempotentActionGenerators(B, i) : AlgBas, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of matrices for the 
idempotent generators of the basic algebra B acting on
the i<sup>th</sup> projective module of B.
</BLOCKQUOTE>
<H5><A NAME = "10998">NonIdempotentActionGenerators(B, i) : AlgBas, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of matrices for the 
nonidempotent generators of the basic algebra B acting on
the i<sup>th</sup> projective module of B.
</BLOCKQUOTE>
<H5><A NAME = "10999">Injection(B, i, v) : AlgBas, RngIntElt, ModRngElt -&gt; AlgBasElt</A></H5>
<BLOCKQUOTE>
Given a vector v in
in the i<sup>th</sup> projective module of the basic algebra B, the function 
returns the image of inclusion of v into B.
</BLOCKQUOTE>
<H4><A NAME = "11000">Creation</A></H4>



<H5><A NAME = "11001">AModule(B, Q) : AlgBas, SeqEnum[AlgMatElt] -&gt; ModRng</A></H5>
<BLOCKQUOTE>
Given a basic algebra B and a sequence Q of elements in a matrix 
algebra the function returns the B-module M on which the generators
of B act by multiplication by the corresponding elements of Q.
</BLOCKQUOTE>
<H5><A NAME = "11002">ProjectiveModule(B, S) : AlgBas, SeqEnum[RngIntElt] -&gt; ModAlg, SeqEnum, SeqEnum</A></H5>
<BLOCKQUOTE>
Given a sequence S = [s<sub>1</sub>, s<sub>2</sub>, ... ], the function returns a projective 
module which is the direct sum of s<sub>1</sub> copies
of the first projective of the algebra B, s<sub>2</sub> copies of the second,
etc.  It also returns the sequence of inclusions and projections
from and to the indecomposable projective modules.
</BLOCKQUOTE>
<H5><A NAME = "11003">IrreducibleModule(B, i) : AlgBas, RngIntElt -&gt; ModAlg</A></H5>
<H5>SimpleModule(B, i) : AlgBas, RngIntElt -&gt; ModAlg</H5>
<BLOCKQUOTE>
The i<sup>th</sup> irreducible module of the algebra B. The module is the
quotient of the i<sup>th</sup> projective module by its radical.
</BLOCKQUOTE>
<H5><A NAME = "11004">ZeroModule(B) : AlgBas -&gt; ModAlg</A></H5>
<BLOCKQUOTE>
The zero B-module.
</BLOCKQUOTE>
<H5><A NAME = "11005">RightRegularModule(B) : AlgBas -&gt; ModAlg</A></H5>
<BLOCKQUOTE>
The algebra B as a right module over itself. 
The module is the direct sum of the projectives modules of B.
</BLOCKQUOTE>
<H5><A NAME = "11006">RegularRepresentation(v) : AlgBasElt -&gt; AlgMatElt</A></H5>
<BLOCKQUOTE>
If v is an element of a basic algebra given as a vector in the 
underlying space, then the function computes the matrix of the action 
by right multiplication of the element on the algebra.
</BLOCKQUOTE>
<H5><A NAME = "11007">Restriction(M, B, xi) : ModAlgBas, AlgBas, ModMatFldElt -&gt; ModAlgBas</A></H5>
<BLOCKQUOTE>
If B is a subalgebra of the basic algebra A, &xi; is the embedding
of B into A, and M is an A-module, then the function returns 
the restriction of M to a B-module.
</BLOCKQUOTE>
<H5><A NAME = "11008">ChangeAlgebra(M, B, xi) : ModAlgBas , AlgBas, Map -&gt; ModAlgBas</A></H5>
<H5>ChangeAlgebra(M, B, xi) : ModAlgBas , AlgBas, ModMatFldElt -&gt; ModAlgBas</H5>
<BLOCKQUOTE>
Given a module M over an algebra A and an algebra homomorphism &xi; 
from B to A, the function returns the module M as a B-module.
</BLOCKQUOTE>
<H5><A NAME = "11009">JacobsonRadical(M) : ModAlg -&gt; ModAlg</A></H5>
<BLOCKQUOTE>
The Jacobson radical of the module M.
</BLOCKQUOTE>
<H5><A NAME = "11010">Socle(M) : ModAlg -&gt; ModAlg</A></H5>
<BLOCKQUOTE>
The socle of the module M. The sum of the simple submodules of M.
</BLOCKQUOTE>
<H4><A NAME = "11011">Access Functions</A></H4>



<H5><A NAME = "11012">Algebra(M) : ModAlg -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Given a module M over a basic algebra B, the function returns B.
</BLOCKQUOTE>
<H5><A NAME = "11013">Dimension(M) : ModAlg -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The dimension of the module M over its base ring.
</BLOCKQUOTE>
<H5><A NAME = "11014">Action(M) : ModAlg -&gt; AlgMat</A></H5>
<BLOCKQUOTE>
The matrix algebra of the action of the algebra of M on M.
</BLOCKQUOTE>
<H5><A NAME = "11015">IsomorphismTypesOfRadicalLayers(M) : ModAlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a module M over a basic algebra, returns the sequence of
isomorphism types of simple composition factors in each layer
of the radical filtration of M.
</BLOCKQUOTE>
<H5><A NAME = "11016">IsomorphismTypesOfSocleLayers(M) : ModAlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a module M over a basic algebra, returns a sequence of isomorphism
types of simple composition factors in each socle layer with reversed
order, <I>i. e.</I> isomorphism types of the socle of M will appear last.
</BLOCKQUOTE>
<H5><A NAME = "11017">IsomorphismTypesOfBasicAlgebraSequence(S) : SeqEnum -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Given a sequence of irreducible modules S for a basic algebra A,
return a sequence of isomorphism types comparing with the simple
modules of A.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11018">Example <TT>AlgBas_restriction-to-center (H90E13)</TT></A></H3>
We show the restriction of a module over an algebra A to
a subalgebra of A.
<P>
<P>
<PRE>
&gt; G := SmallGroup(32,7);
&gt; A := BasicAlgebra(G);
&gt; C, mu := Center(A);
&gt; X := RightRegularModule(A);
&gt; Z := JacobsonRadical(X);
&gt; L := Restriction(Z,C,mu);
&gt; L;
AModule L of dimension 31 over GF(2)
&gt; A eq Algebra(L);
True
&gt; IndecomposableSummands(L);
[
    AModule of dimension 1 over GF(2),
    AModule of dimension 30 over GF(2)
]
&gt; Dimension(Socle(L));
16
</PRE>
Next we show how to pull back modules along a quotient map. 
We use the same algebra A.
<P>
<P>
<PRE>
&gt; U := ideal&lt;A|[A.13 +A.17]&gt;;
&gt; Q, theta := quo&lt;A|U&gt;;
&gt; X := ProjectiveModule(Q,1);
&gt; Y := ChangeAlgebras(X,A,theta);
&gt; Y;
AModule Y of dimension 16 over GF(2)
</PRE>
<HR>
<H3><A NAME = "11019">Example <TT>AlgBas_ChangeAlgebras-2 (H90E14)</TT></A></H3>
Here is another example of pulling back a module along a 
quotient map. This one involves algebras with more than one
idempotent. 
<P>
<P>
<PRE>
&gt; load m11;
Loading "/usr/local/dmagma/libs/pergps/m11"
M11 - Mathieu group on 11 letters - degree 11
Order 7 920 = 2^4 * 3^2 * 5 * 11;  Base 1,2,3,4
Group: G
&gt; A:= BasicAlgebraOfPrincipalBlock(G,GF(2));
&gt; A;
Basic algebra of dimension 22 over GF(2)
Number of projective modules: 3
Number of generators: 9
&gt; DimensionsOfProjectiveModules(A);
[ 8, 8, 6 ]
&gt; I := ideal&lt;A|[A.9]&gt;;
&gt; B, mu := quo&lt;A|I&gt;;
&gt; B;
Basic algebra of dimension 6 over GF(2)
Number of projective modules: 2
Number of generators: 5
&gt; P := ProjectiveModule(B,1);
&gt; P;
AModule P of dimension 3 over GF(2)
&gt; Q := ChangeAlgebras(P,A,mu);
&gt; Algebra(Q) eq A;
true
</PRE>
<HR>
<H3><A NAME = "11020">Example <TT>AlgBas_RadicalLayers (H90E15)</TT></A></H3>
In this example, we investigate the structure of the
projective modules of a basic algebra.
<P>
<P>
<PRE>
&gt; G := PSL(3,3);
&gt; N := Normalizer(G,Sylow(G,2));
&gt; A := BasicAlgebraOfHeckeAlgebra(G,N,GF(2));
&gt; DimensionsOfProjectiveModules(A);
[ 1, 2, 3, 9, 9, 1, 1, 1, 1 ]
&gt; IsomorphismTypesOfRadicalLayers(ProjectiveModule(A,4));
[
    [ 4 ],
    [ 2, 3, 4, 5 ],
    [ 4, 4, 5 ],
    [ 5 ]
]
&gt; IsomorphismTypesOfSocleLayers(ProjectiveModule(A,4));  
[
    [ 4 ],
    [ 3, 4, 5 ],
    [ 2, 4, 5 ],
    [ 4, 5 ]
]
</PRE>
So we see that, unlike a group algebra, a Hecke algebra can
have indecomposable projective modules whose socles are not 
simple. 
<HR>
<H4><A NAME = "11021">Predicates</A></H4>

<P>
<P>
<P>
The following functions return a boolean value.


<H5><A NAME = "11022">IsSemisimple(M) : ModAlg -&gt; BoolElt, SeqEnum</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the module M is a semisimple module and <TT>false</TT> otherwise. 
If <TT>true</TT>, then the function also returns a list of the ranks of the 
primitive idempotents of the algebra. This is also a list of the 
multiplicities of the simple modules of the algebra as composition 
factors in a composition series for the module.
</BLOCKQUOTE>
<H5><A NAME = "11023">IsProjective(M) : ModAlg -&gt; BoolElt, SeqEnum</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the module M is projective. The function
also returns a sequence of multiplicities of the standard  projective
modules as direct summands of the projective cover of M. 
</BLOCKQUOTE>
<H5><A NAME = "11024">IsInjective(M) : ModAlg -&gt; BoolElt, SeqEnum</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the module M is injective. The function
also returns a sequence of multiplicities of the standard injective
modules as direct summands of the injective hull of M. 
</BLOCKQUOTE>
<H4><A NAME = "11025">Elementary Operations</A></H4>



<H5><A NAME = "11026">m * b : ModAlgElt, AlgBasElt -&gt; ModAlgElt</A></H5>
<BLOCKQUOTE>
Given an element b in a basic algebra B and an element m in a
module M over B, m * b is the product.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11027">Example <TT>AlgBas_AModules (H90E16)</TT></A></H3>
We obtain the dimensions of the radical layers of the group algebra
of an extra special group of order 243 over a field of characteristic 3.
<P>
<P>
<PRE>
&gt; G := ExtraSpecialGroup(3,2);
&gt; G;
Permutation group G acting on a set of cardinality 243
&gt; ff := GF(3);
&gt; A := BasicAlgebra(G,ff);
&gt; A;
Basic algebra of dimension 243 over GF(3)
Number of projective modules: 1
Number of generators: 6
&gt; P := ProjectiveModule(A,1);
&gt; P;
AModule P of dimension 243 over GF(3)
&gt; R := JacobsonRadical(P);
&gt; R;
AModule R of dimension 242 over GF(3)
&gt; while Dimension(R) ne 0 do
&gt;     T := JacobsonRadical(R);
&gt;     print Dimension(R) - Dimension(T);
&gt;     R := T;
&gt; end while;
4
11
20
30
36
39
36
30
20
11
4
1
</PRE>
<HR>
<H3><A NAME = "11028">Example <TT>AlgBas_AModules-2 (H90E17)</TT></A></H3>
We consider the mod-2 group algebra of an extraspecial group of order 128,
and construct the module induced from the trivial module on the subgroups
of order 4 generated by the first generator of the group.
<P>
<P>
<PRE>
&gt; G := ExtraSpecialGroup(2,3);
&gt; G;
Permutation group G acting on a set of cardinality 128
&gt; F := GF(2);
&gt; A := BasicAlgebra(G,F);
&gt; A;
Basic algebra of dimension 128 over GF(2)
Number of projective modules: 1
Number of generators: 8
&gt; A.1;
(1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0)
</PRE>
Note that cs{A.1} is the unique idempotent (identity element) in the 
group algebra,
whereas cs{A.2} is cs{G.1-1} where cs{G.1} is the first generator of 
the group. 
<P>
<P>
<PRE>
&gt; A.2;
(0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0)
&gt; g := A.1+A.2;
</PRE>
Now we check the order of cs g.
<P>
<P>
<PRE>
&gt; g^2;
(1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0)
&gt; g^4;
(1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
    0 0 0 0 0 0 0 0 0 0 0 0)
&gt; g^4 eq A!1;
true
</PRE>
So cs{g} has order 4.
<P>
<P>
<PRE>
&gt; P := ProjectiveModule(A,1);
&gt; P;
AModule P of dimension 128 over GF(2)
</PRE>
Note that cs{P} is generated by cs{P.1} which corresponds to the identity 
element of cs{A}
if we think of cs{P} as the algebra cs{A} as a module over itself. 
Now we create the induced
module as the submodule generated by (cs(g) - 1)<sup>3</sup>, since (cs(g) - 1)<sup>4</sup> = 0.
<P>
<P>
<PRE>
&gt; U := sub&lt;P|P.1*A.6&gt;;
&gt; U;
AModule U of dimension 32 over GF(2)
</PRE>
Because the dimension is a quarter of the order of the group we can be 
sure that we have the right thing by just checking that cs{U} is generated 
by a cs{g} fixed point.
<P>
<P>
<PRE>
&gt; U.1*g eq U.1;
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text975.htm">[Next]</A><A  HREF = "text973.htm">[Prev]</A> <A  HREF = "text975.htm">[Right]</A> <A  HREF = "text973.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>