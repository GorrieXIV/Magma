<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Operations on Structures</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text488.htm">[Next]</A><A  HREF = "text486.htm">[Prev]</A> <A  HREF = "text488.htm">[Right]</A> <A  HREF = "text486.htm">[Left]</A> <A  HREF = "text481.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "5289">Operations on Structures</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text487.htm#5298">Ramification Predicates</A>
</UL>
<H5><A NAME = "5290">AssignNames(~L, S) : RngPad, SeqEnum -&gt;</A></H5>
<H5>AssignNames(~L, S) : RngPadResExt, SeqEnum -&gt;</H5>
<H5>AssignNames(~L, S) : FldPad, SeqEnum -&gt;</H5>
<BLOCKQUOTE>
Assign a name to the generator of L. The sequence must have only one element,
which must be a string.  This element is assigned to be the name of the
generator when L is considered as a linear associative algebra over its base
ring.
</BLOCKQUOTE>
<H5><A NAME = "5291">Characteristic(L) : RngPad -&gt; RngIntElt</A></H5>
<H5>Characteristic(L) : RngPadRes -&gt; RngIntElt</H5>
<H5>Characteristic(L) : RngPadResExt -&gt; RngIntElt</H5>
<H5>Characteristic(L) : FldPad -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The characteristic of the local ring or field L.
</BLOCKQUOTE>
<H5><A NAME = "5292"># L : RngPad -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of elements in the local ring or field L.  The cardinality is
finite only if L is a quotient ring or a bounded free precision ring.
<P>
Iterating over the elements of a local ring is possible if it is bounded, but
it will take time in proportion to the cardinality of L. It is recommended
only in the case of "small" local rings (i.e., rings for which the precision
is be very small).
</BLOCKQUOTE>
<H5><A NAME = "5293">Name(L, k) : RngPad, RngIntElt -&gt; RngPadElt</A></H5>
<H5>Name(L, k) : RngPadRes, RngIntElt -&gt; RngPadResElt</H5>
<H5>Name(L, k) : RngPadResExt, RngIntElt -&gt; RngPadResExtElt</H5>
<H5>Name(L, k) : FldPad, RngIntElt -&gt; FldPadElt</H5>
<BLOCKQUOTE>
Given a local ring or field L and an integer k, return the generator of L
if k is 1; otherwise, raise an error.
</BLOCKQUOTE>
<H5><A NAME = "5294">ChangePrecision(L, k) : RngPad, Any -&gt; RngPad</A></H5>
<H5>ChangePrecision(L, k) : RngPad, Infty -&gt; RngPad</H5>
<H5>ChangePrecision(~L, k) : RngPad, Infty -&gt; RngPad</H5>
<H5>ChangePrecision(L, k) : RngPad, RngIntElt -&gt; RngPad</H5>
<H5>ChangePrecision(~L, k) : RngPad, RngIntElt -&gt; RngPad</H5>
<H5>ChangePrecision(L, k) : RngPadRes, RngIntElt -&gt; RngPadRes</H5>
<H5>ChangePrecision(~L, k) : RngPadRes, RngIntElt -&gt; RngPadRes</H5>
<H5>ChangePrecision(L, k) : RngPadResExt, RngIntElt -&gt; RngPadResExt</H5>
<H5>ChangePrecision(~L, k) : RngPadResExt, RngIntElt -&gt; RngPadResExt</H5>
<H5>ChangePrecision(L, k) : FldPad, RngIntElt -&gt; FldPad</H5>
<H5>ChangePrecision(~L, k) : FldPad, RngIntElt -&gt; FldPad</H5>
<H5>ChangePrecision(L, k) : FldPad, Any -&gt; FldPad</H5>
<H5>ChangePrecision(L, k) : FldPad, Infty -&gt; FldPad</H5>
<H5>ChangePrecision(~L, k) : FldPad, Infty -&gt; FldPad</H5>
<BLOCKQUOTE>
Given a local ring or field L and a non-negative single precision integer
k, change the maximum precision with which elements can be created to be k.
Depending on how L and its subrings have been constructed, there may be an
upper bound (possibly infinite for free structures) on the precision to which L can be changed.
For instance, the precision to which a defining polynomial has been given
places a bound on the precision of the extension --- no defining polynomial can
be expanded beyond the precision with which it was originally specified.
</BLOCKQUOTE>
<H5><A NAME = "5295">L eq K : RngPad, RngPad -&gt; BoolElt</A></H5>
<H5>L eq K : RngPadRes, RngPadRes -&gt; BoolElt</H5>
<H5>L eq K : RngPadResExt, RngPadResExt -&gt; BoolElt</H5>
<H5>L eq K : FldPad, FldPad -&gt; BoolElt</H5>
<BLOCKQUOTE>
Given local rings or fields L and K, return whether or not L and K are
the same object.
</BLOCKQUOTE>
<H5><A NAME = "5296">L ne K : RngPad, RngPad -&gt; BoolElt</A></H5>
<H5>L ne K : RngPadRes, RngPadRes -&gt; BoolElt</H5>
<H5>L ne K : RngPadResExt, RngPadResExt -&gt; BoolElt</H5>
<H5>L ne K : FldPad, FldPad -&gt; BoolElt</H5>
<BLOCKQUOTE>
Given local rings or fields L and K, return whether or not L and K are
different objects.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "5297">Example <TT>RngLoc_strop (H47E7)</TT></A></H3>
<P>
<P>
<PRE>
&gt; Zp := pAdicRing(5, 20);
&gt; I&lt;a&gt; := UnramifiedExtension(Zp, 3);
&gt; R&lt;x&gt; := PolynomialRing(I);
&gt; L&lt;b&gt; := ext&lt;I | x^3 + 5*a*x^2 + 5&gt;;
&gt; ChangePrecision(Zp, Infinity());
5-adic ring
&gt; L;
Totally ramified extension defined by the polynomial x^3 + 5*a*x^2 + 5
 over Unramified extension defined by the polynomial x^3 + 3*x + 3
 over 5-adic ring mod 5^20
&gt; ChangePrecision(~L, 50);
&gt; L;
Totally ramified extension defined by the polynomial x^3 + 5*$.1*x^2 + 5
 over Unramified extension defined by the polynomial x^3 + 3*x + 3
 over 5-adic ring mod 5^17
&gt; #L;
8758115402030106693273309895561975820501\
6371367282235734816767743111942667866287\
592914886772632598876953125
&gt; AssignNames(~L, ["t"]);
&gt; L.1;
t
&gt; b;
b
&gt; L eq ChangePrecision(L, 10);
false
</PRE>
Note that b is an element of the original ring L with precision
60 which is why it retains its print name.
<HR>
<H4><A NAME = "5298">Ramification Predicates</A></H4>



<H5><A NAME = "5299">IsRamified(R) : RngPad -&gt; BoolElt</A></H5>
<H5>IsRamified(R) : FldPad -&gt; BoolElt</H5>
<H5>IsUnramified(R) : RngPad -&gt; BoolElt</H5>
<H5>IsUnramified(R) : FldPad -&gt; BoolElt</H5>
<H5>IsTotallyRamified(R) : RngPad -&gt; BoolElt</H5>
<H5>IsTotallyRamified(R) : FldPad -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return whether the local ring or field extension R is ramified, unramified or 
totally ramified.
</BLOCKQUOTE>
<H5><A NAME = "5300">IsTamelyRamified(R) : RngPad -&gt; BoolElt</A></H5>
<H5>IsTamelyRamified(R) : FldPad -&gt; BoolElt</H5>
<H5>IsWildlyRamified(R) : RngPad -&gt; BoolElt</H5>
<H5>IsWildlyRamified(R) : FldPad -&gt; BoolElt</H5>
<BLOCKQUOTE>
Return whether the local ring or field extension R is tamely ramified 
(the prime does not divide the ramification degee) or wildly ramified (the prime
does divide the ramification degree).
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text488.htm">[Next]</A><A  HREF = "text486.htm">[Prev]</A> <A  HREF = "text488.htm">[Right]</A> <A  HREF = "text486.htm">[Left]</A> <A  HREF = "text481.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>