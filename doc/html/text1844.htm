<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Best Known Linear Codes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1845.htm">[Next]</A><A  HREF = "text1843.htm">[Prev]</A> <A  HREF = "text1845.htm">[Right]</A> <A  HREF = "text1843.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20604">Best Known Linear Codes</A></H3>

<P>
<P>
<P>
An [n, k] linear code C is said to be a <I>best known linear [n, k]
code</I> (BKLC) if C has the highest minimum weight among all known
[n, k] linear codes.
<P>
An [n, k] linear code C is said to be an <I>optimal linear [n, k]
code</I> if the minimum weight of C achieves the theoretical upper bound
on the minimum weight of [n, k] linear codes.
<P>
Magma currently has databases for best known linear codes
over GF(q) for q=2, 3, 4, 5, 7, 8, 9.
There is also a database of best known quantum codes
that can be found in Chapter <A  HREF = "text1896.htm#21118">QUANTUM CODES</A>.
The database for codes over GF(2) contains constructions of best
codes of length up to n<sub>max</sub>=256.
The codes of length up to n<sub>opt</sub>=31 are optimal.
The database is complete in the sense
that it contains a construction for every set of parameters.
Thus the user has access to 33 152 best-known binary codes.
<P>
The database for codes over GF(3) contains constructions of best
codes of up to length n<sub>max</sub>=243. The codes of length up to
n<sub>opt</sub>=21 are optimal. The database is complete up to length
n<sub>complete</sub>=100. Many of the codes constructed in this
database are vast improvements on the previously known bounds for best
codes over GF(3).  The database of codes over GF(3) is a
contribution of Markus Grassl, Karlsruhe.
<P>
The database for codes over GF(4) contains constructions of best
codes of up to length n<sub>max</sub>=256. The codes of length up to
n<sub>opt</sub>=18 are optimal. The database is over 65% complete
with the first missing code coming at length 98. Many of the
codes constructed in this database are vast improvements on the
previously known bounds for best codes over GF(4).
<P>
Similar databases for other small fields have been added in
V2.14. They are contributions of Markus Grassl, Karlsruhe.  The
statistics of all databases are summarised in the following table.
<P>
<center>
<table>
<tr>
<td></td>
<td><i>F<sub>2</sub></i></td>
<td><i>F<sub>3</sub></i></td>
<td><i>F<sub>4</sub></i></td>
<td><i>F<sub>5</sub></i></td>
<td><i>F<sub>7</sub></i></td>
<td><i>F<sub>8</sub></i></td>
<td><i>F<sub>9</sub></i></td>
</tr>
<tr>
<td><i>n</i><sub>max</sub></td>
<td>256</td>
<td>243</td>
<td>256</td>
<td>130</td>
<td>100</td>
<td>130</td>
<td>130</td>
</tr>
<tr>
<td><i>n</i><sub>opt</sub></td>
<td>31</td>
<td>21</td>
<td>18</td>
<td>15</td>
<td>14</td>
<td>14</td>
<td>16</td>
</tr>
<tr>
<td><i>n</i><sub>complete</sub></td>
<td>256</td>
<td>100</td>
<td>97</td>
<td>80</td>
<td>68</td>
<td>76</td>
<td>93</td>
</tr>
<tr>
<td>total</td>
<td>33,152</td>
<td>29,889</td>
<td>33,152</td>
<td>8,645</td>
<td>5,150</td>
<td>8,645</td>
<td>8,645</td>
</tr>
<tr>
<td>missing</td>
<td>0</td>
<td>6,545</td>
<td>11,379</td>
<td>527</td>
<td>381</td>
<td>1,763</td>
<td>1,333</td>
</tr>
<tr>
<td>filled</td>
<td>100
<td>78.10
<td>65.67
<td>93.90
<td>92.60
<td>79.61
<td>84.58
</tr>
</table>
</center>
Compared to previous released versions of the Magma BKLC
database, 1308 codes over GF(2), 102 codes over GF(3) and 160
codes over GF(4) have been improved, and the maximal length for
codes over GF(3) and GF(4) has been increased to 243 and 256,
respectively.
<P>
Best known upper and lower bounds on the minimum weight for [n, k]
linear codes are also available (see section <A  HREF = "text1843.htm#20573">Best Known Bounds for Linear  Codes</A>).
<P>
The Magma BKLC database makes use of the tables of bounds
compiled by A. E. Brouwer <A  HREF = "text1830.htm#bib_Brouwer">[Bro98]</A>. The online version of these
tables <A  HREF = "text1830.htm#bib_BrouwerWeb">[Bro]</A> has been discontinued.  Similar tables are now
maintained by Markus Grassl <A  HREF = "text1830.htm#bib_GrasslWebLin">[Gra]</A>. Any improvements, errors, or
problems with the Magma BKLC database should be reported to
<TT>codes@codetables.de</TT>.
<P>
It should be noted that the Magma BKLC database is unrelated
to the similar (but rather incomplete) BKLC database forming part of
GUAVA, a share package in GAP3. A significant number of entries in the
Magma BKLC database provide better codes than the
corresponding ones listed in Brouwer's tables. 
<P>
The construction of the Magma BKLC database has been
undertaken by John Cannon (Sydney), Markus Grassl (Karlsruhe) and Greg
White (Sydney). The authors wish to express their appreciation to the
following people who generously supplied codes, constructions or other
assistance: 
Nuh Aydin, 
Anton Betten, 
Michael Braun, 
Iliya Bouyukliev,
Andries Brouwer, 
Tat Chan, 
Zhi Chen, 
Rumen Daskalov, 
Scott Duplichan,
Iwan Duursma, 
Yves Edel, 
Sebastian Egner, 
Peter Farkas, 
Damien Fisher,
Philippe Gaborit, 
Willi Geiselmann, 
Stephan Grosse, 
Aaron Gulliver,
Masaaki Harada, 
Ray Hill, 
Plamen Hristov, 
David Jaffe, 
Axel Kohnert,
San Ling, 
Simon Litsyn, 
Pawel Lizak, 
Tatsuya Maruta, 
Masami Mohri,
Masakatu Morii, 
Harald Niederreiter, 
Ayoub Otmani, 
Fernanda Pambianco,
James B. Shearer, 
Neil Sloane, 
Roberta Sabin, 
Cen Tjhai, 
Ludo Tolhuizen, 
Martin Tomlinson, 
Gerard van der Geer, 
Henk van Tilborg,
Chaoping Xing, 
Karl-Heinz Zimmermann, 
Johannes Zwanzger.
<P>
Given any two of the parameters: length, dimension, and minimum
weight, then Magma will return the code with the best
possible value of the omitted parameter. Given a specified length and
minimum weight, for example, will result in a corresponding code of
maximal possible dimension.
<P>
The user can display the method used to construct a particular BKLC
code through use of a verbose mode, triggered by the verbose flag
<TT>BestCode</TT>. When it is set to <TT>true</TT>, all of the
functions in this section will output the steps involved in each code
they construct.  While some codes are defined by stored generator
matrices, and some use constructions which are not general enough, or
safe enough, to be available to the user, most codes are constructed
using standard Magma functions. Note that having the verbose
flag <TT>Code</TT> set to <TT>true</TT> at the same time can produce mixed and
confusing output, since the database uses functions which have verbose
outputs dependent on this flag.


<H5><A NAME = "20605">BKLC(K, n, k) : FldFin, RngIntElt, RngIntElt -&gt; Code, BoolElt</A></H5>
<H5>BestKnownLinearCode(K, n, k) : FldFin, RngIntElt, RngIntElt -&gt; Code, BoolElt</H5>
<BLOCKQUOTE>
Given a finite field K, a positive integer n, and a non-negative
integer k such that k&le;n, return an [n, k] linear code over K
which has the largest minimum weight among all known [n, k] linear
codes. A second boolean return value signals whether or not the
desired code exists in the database.
<P>
The databases currently available are over GF(q) for
q=2, 3, 4, 5, 7, 8, 9 of length up to n<sub>max</sub> as given in the table above.
<P>
If the verbose flag <TT>BestCode</TT> is set to true then the method
used to construct the code will be printed.
</BLOCKQUOTE>
<H5><A NAME = "20606">BLLC(K, k, d) : FldFin, RngIntElt, RngIntElt -&gt; Code, BoolElt</A></H5>
<H5>BestLengthLinearCode(K, k, d) : FldFin, RngIntElt, RngIntElt -&gt; Code, BoolElt</H5>
<BLOCKQUOTE>
Given a finite field K, and positive integers k and d, return a
linear code over K with dimension k and minimum weight at least
d which has the shortest length among known codes. A second boolean
return value signals whether or not the desired code exists in the
database.
<P>
The databases currently available are over GF(q) for
q=2, 3, 4, 5, 7, 8, 9 of length up to n<sub>max</sub> as given in the table above.
<P>
If the verbose flag <TT>BestCode</TT> is set to true then the method
used to construct the code will be printed.
</BLOCKQUOTE>
<H5><A NAME = "20607">BDLC(K, n, d) : FldFin, RngIntElt, RngIntElt -&gt; Code, BoolElt</A></H5>
<H5>BestDimensionLinearCode(K, n, d) : FldFin, RngIntElt, RngIntElt -&gt; Code</H5>
<BLOCKQUOTE>
Given a finite field K, a positive integer n, and a positive
integer d such that d&le;n, return a linear code over K with
length n and minimum weight &ge;d which has the largest dimension among
known codes. A second boolean return value signals whether or not the
desired code exists in the database.
<P>
The databases currently available are over GF(q) for
q=2, 3, 4, 5, 7, 8, 9 of length up to n<sub>max</sub> as given in the table above.
<P>
If the verbose flag <TT>BestCode</TT> is set to true then the method
used to construct the code will be printed.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20608">Example <TT>CodeFld_BKLC-GF2 (H158E38)</TT></A></H3>
We look at some best known linear codes over GF(2). Since the
database over GF(2) is completely filled, we can ignore the second
boolean return value.
<P>
<P>
<PRE>
&gt; C := BKLC(GF(2),23,12);
&gt; C;
[23, 12, 7] Linear Code over GF(2)
Generator matrix:
[1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 0]
[0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1]
[0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1 0 0]
[0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1 0]
[0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 1 1 1 0 1 1 0 1]
[0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1 0 0]
[0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1 0]
[0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0 1 1 0 0 1 1]
[0 0 0 0 0 0 0 0 1 0 0 0 1 1 0 1 1 1 0 0 0 1 1]
[0 0 0 0 0 0 0 0 0 1 0 0 1 0 1 0 1 0 0 1 0 1 1]
[0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 1 0 0 1 1 1 1 1]
[0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 1 0 1 0 1]
&gt; WeightDistribution(C);
[ &lt;0, 1&gt;, &lt;7, 253&gt;, &lt;8, 506&gt;, &lt;11, 1288&gt;, &lt;12, 1288&gt;, &lt;15, 506&gt;,
&lt;16, 253&gt;, &lt;23, 1&gt; ]
&gt; BKLCLowerBound(GF(2),23,12), BKLCUpperBound(GF(2),23,12);
7 7
</PRE>
So we see that this code is optimal, in the sense that it meets the best
known upper bound on its minimum weight.
(All best known binary codes of length up to 31 are optimal).
<P>
However larger best known codes are not optimal, making it
theoretically possible that better codes exist.
<P>
<P>
<PRE>
&gt; C := BKLC(GF(2),145,36);
&gt; C:Minimal;
[145, 36, 42] Linear Code over GF(2)
&gt; BKLCLowerBound(GF(2),145,36), BKLCUpperBound(GF(2),145,36);
42 52
</PRE>
<HR>
<H3><A NAME = "20609">Example <TT>CodeFld_BKLC-GF4 (H158E39)</TT></A></H3>
We look at some best known codes over GF(4). Since this database is
only approximately 66% complete, it is necessary to check the second
boolean return value to know if the database contained the desired
code.
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := GF(4);
&gt; C, has_code := BKLC(F, 14, 9);
&gt; has_code;
true
&gt; C;
[14, 9, 4] Linear Code over GF(2^2)
Generator matrix:
[  1   0   0   0   0   0   0   0   0   0   0 w^2   w   1]
[  0   1   0   0   0   0   0   0   0   0   1   1   1 w^2]
[  0   0   1   0   0   0   0   0   0   0 w^2   w   0   w]
[  0   0   0   1   0   0   0   0   0   0   w   1   1   w]
[  0   0   0   0   1   0   0   0   0   0   w   0   w w^2]
[  0   0   0   0   0   1   0   0   0   0 w^2   1   1   1]
[  0   0   0   0   0   0   1   0   0   0   1   w w^2   0]
[  0   0   0   0   0   0   0   1   0   0   0   1   w w^2]
[  0   0   0   0   0   0   0   0   1   0 w^2 w^2   0   1]
&gt; BKLCLowerBound(F, 14, 9), BKLCUpperBound(F, 14, 9);
4 4
</PRE>
Since the database over GF(4) is completely filled up to length 97
the boolean value was in fact unnecessary in this case. We see that
the minimum weight of this code reaches the theoretical upper bound,
as do all best known codes over GF(4) up to length 18.  
<P>
For longer lengths we have the possibility that the database may not
contain the desired code.
<P>
<P>
<PRE>
&gt; C, has_code := BKLC(F, 98, 57);
&gt; has_code;
false
&gt; C;
[98, 0, 98] Cyclic Linear Code over GF(2^2)
&gt;
&gt; C, has_code := BKLC(F, 98, 58);
&gt; has_code;
true
&gt; C:Minimal;
[98, 58, 16] Linear Code over GF(2^2)
</PRE>
<HR>
<H3><A NAME = "20610">Example <TT>CodeFld_BestLength-GF2 (H158E40)</TT></A></H3>
We search for best known codes using dimension and minimum weight,
looking at codes over GF(2) of dimension 85. Even though the
database over GF(2) is 100% filled up to length 256, the code
required may be longer than that so we have to check the second
boolean return value.
<P>
<P>
<PRE>
&gt; C, has_code := BestLengthLinearCode(GF(2),85,23);
&gt; has_code;
true
&gt; C:Minimal;
[166, 85, 23] Linear Code over GF(2)
&gt;
&gt; C, has_code := BestLengthLinearCode(GF(2),85,45);
&gt; has_code;
true
&gt; C:Minimal;
[233, 85, 45] Linear Code over GF(2)
&gt;
&gt; C, has_code := BestLengthLinearCode(GF(2),85,58);
&gt; has_code;
false
</PRE>
<HR>
<H3><A NAME = "20611">Example <TT>CodeFld_BDLC-GF4 (H158E41)</TT></A></H3>
For a given minimum weight, we find the maximal known possible
dimensions for a variety of code lengths over GF(4).
<P>
For lengths &lt;98 we know the database is filled so we do not need to
check the second boolean return value.
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := GF(4);
&gt; C := BDLC(F, 12, 8);
&gt; C;
[12, 3, 8] Linear Code over GF(2^2)
Generator matrix:
[  1   0   0   w w^2   w w^2   w   w   1   w   w]
[  0   1   0   w w^2   1   0 w^2   w   0 w^2 w^2]
[  0   0   1   0   1 w^2 w^2 w^2   0 w^2   w   w]
&gt;
&gt; C := BDLC(F, 27, 8);
&gt; C:Minimal;
[27, 15, 9] Linear Code over GF(2^2)
&gt; C := BDLC(F, 67, 8);
&gt; C:Minimal;
[67, 52, 8] Linear Code over GF(2^2)
</PRE>
But for lengths &ge;98 there may be gaps in the database so to be
safe we check the second value.
<P>
<P>
<PRE>
&gt; C, has_code := BDLC(F, 99, 8);
&gt; has_code;
true
&gt; C:Minimal;
[99, 81, 8] Linear Code over GF(2^2)
&gt; C, has_code := BDLC(F, 195, 8);
&gt; has_code;
true
&gt; C:Minimal;
[195, 174, 8] Linear Code over GF(2^2)
</PRE>
<HR>
<H3><A NAME = "20612">Example <TT>CodeFld_VerboseBestCode (H158E42)</TT></A></H3>
We find the best known code of length 54 and dimension 36, then using
the output of the verbose mode we re-create this code manually.
<P>
<P>
<P>
<PRE>
&gt; SetPrintLevel("Minimal");
&gt; SetVerbose("BestCode",true);
&gt; a := BKLC(GF(2), 54, 36);
Construction of a [ 54 , 36 , 8 ] Code:
[1]:  [63, 46, 7] Cyclic Code over GF(2)
       CyclicCode of length 63 with generating polynomial x^17 +
       x^16 + x^15 + x^13 + x^12 + x^8 + x^6 + x^4 + x^3 + x^2 +
       1
[2]:  [64, 46, 8] Linear Code over GF(2)
       ExtendCode [1] by 1
[3]:  [54, 36, 8] Linear Code over GF(2)
       Shortening of [2] at { 55 .. 64 }
&gt; a;
[54, 36, 8] Linear Code over GF(2)
&gt;
&gt; P&lt;x&gt; := PolynomialRing(GF(2));
&gt; p := x^17 + x^16 + x^15 + x^13 + x^12 + x^8 + x^6 + x^4 +
&gt;                                               x^3 + x^2 + 1;
&gt; C1 := CyclicCode(63, p);
&gt; C1;
[63, 46] Cyclic Code over GF(2)
&gt; C2 := ExtendCode(C1);
&gt; C2;
[64, 46] Linear Code over GF(2)
&gt; C3 := ShortenCode(C2, {55 .. 64});
&gt; C3;
[54, 36, 8] Linear Code over GF(2)
&gt;
&gt; C3 eq a;
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1845.htm">[Next]</A><A  HREF = "text1843.htm">[Prev]</A> <A  HREF = "text1845.htm">[Right]</A> <A  HREF = "text1843.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>