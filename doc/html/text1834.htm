<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Invariants of a Code</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1835.htm">[Next]</A><A  HREF = "text1833.htm">[Prev]</A> <A  HREF = "text1835.htm">[Right]</A> <A  HREF = "text1833.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20330">Invariants of a Code</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1834.htm#20331">Basic Numerical Invariants</A>
<LI> <A  HREF = "text1834.htm#20336">The Ambient Space and Alphabet</A>
<LI> <A  HREF = "text1834.htm#20341">The Code Space</A>
<LI> <A  HREF = "text1834.htm#20346">The Dual Space</A>
<LI> <A  HREF = "text1834.htm#20351">The Information Space and Information Sets</A>
<LI> <A  HREF = "text1834.htm#20357">The Syndrome Space</A>
<LI> <A  HREF = "text1834.htm#20359">The Generator Polynomial</A>
</UL>
<H4><A NAME = "20331">Basic Numerical Invariants</A></H4>



<H5><A NAME = "20332">Length(C) : Code -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given an [n, k] code C, return the block length n of C.
</BLOCKQUOTE>
<H5><A NAME = "20333">Dimension(C) : Code -&gt; RngIntElt</A></H5>
<H5>NumberOfGenerators(C) : Code -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The dimension k of the [n, k] linear code C.
</BLOCKQUOTE>
<H5><A NAME = "20334"># C : Code -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a code C, return the number of codewords belonging to C.
</BLOCKQUOTE>
<H5><A NAME = "20335">InformationRate(C) : Code -&gt; FldPrElt</A></H5>
<BLOCKQUOTE>
The information rate of the [n, k] code C. This is the ratio k/n.
</BLOCKQUOTE>
<H4><A NAME = "20336">The Ambient Space and Alphabet</A></H4>

<P>
<P>
<P>


<H5><A NAME = "20337">AmbientSpace(C) : Code -&gt; ModTupRng</A></H5>
<BLOCKQUOTE>
The ambient space of the code C, i.e. the generic R-space V in which
C is contained.
</BLOCKQUOTE>
<H5><A NAME = "20338">RSpace(C) : Code -&gt; ModTupRng</A></H5>
<H5>VectorSpace(C) : Code -&gt; ModTupFld</H5>
<BLOCKQUOTE>
Given an [n, k] linear code C, defined as a subspace
U of the n-dimensional space V, return U as a subspace
of V with basis corresponding to the rows of the 
generator matrix for C.
</BLOCKQUOTE>
<H5><A NAME = "20339">Generic(C) : Code -&gt; Code</A></H5>
<BLOCKQUOTE>
Given an [n, k] code C, return the generic [n, n, 1] code in which 
C is contained.
</BLOCKQUOTE>
<H5><A NAME = "20340">Alphabet(C) : Code -&gt; Rng</A></H5>
<H5>Field(C) : Code -&gt; Rng</H5>
<BLOCKQUOTE>
The underlying ring (or alphabet) R of the code C.
</BLOCKQUOTE>
<H4><A NAME = "20341">The Code Space</A></H4>



<H5><A NAME = "20342">GeneratorMatrix(C) : Code -&gt; ModMatFldElt</A></H5>
<H5>BasisMatrix(C) : Code -&gt; ModMatRngElt</H5>
<BLOCKQUOTE>
The generator matrix for the linear code C, returned as an element of 
Hom(U, V) where U is the information space of C and V is the 
ambient space of C.
</BLOCKQUOTE>
<H5><A NAME = "20343">Basis(C) : Code -&gt; [ ModTupRngElt ]</A></H5>
<BLOCKQUOTE>
The current vector space basis for the linear code C, returned as a 
sequence of elements of C.
</BLOCKQUOTE>
<H5><A NAME = "20344">Generators(C) : Code -&gt;  { ModTupFldElt }</A></H5>
<BLOCKQUOTE>
The current vector space basis for the linear code C, returned as a 
set of elements of C.
</BLOCKQUOTE>
<H5><A NAME = "20345">C . i : Code, RngIntElt -&gt; ModTupFldElt</A></H5>
<BLOCKQUOTE>
Given an [n, k] code C and a positive integer i, 1 &le;i &le;k,
return the i-th element of the current basis of C.
</BLOCKQUOTE>
<H4><A NAME = "20346">The Dual Space</A></H4>



<H5><A NAME = "20347">Dual(C) : Code -&gt; Code</A></H5>
<BLOCKQUOTE>
The code that is dual to the code C.
</BLOCKQUOTE>
<H5><A NAME = "20348">ParityCheckMatrix(C) : Code -&gt; ModMatFldElt</A></H5>
<BLOCKQUOTE>
The parity check matrix for the code C, returned as
an element of Hom(V, U).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20349">Example <TT>CodeFld_GeneratorMatrix (H158E8)</TT></A></H3>
We create a Reed--Muller code and demonstrate some simple relations.
<P>
<P>
<PRE>
&gt; R := ReedMullerCode(1, 3);
&gt; R;
[8, 4, 4] Reed-Muller Code (r = 1, m = 3) over GF(2)
Generator matrix:
[1 0 0 1 0 1 1 0]
[0 1 0 1 0 1 0 1]
[0 0 1 1 0 0 1 1]
[0 0 0 0 1 1 1 1]
&gt; G := GeneratorMatrix(R);
&gt; P := ParityCheckMatrix(R);
&gt; P;                                                                           
[1 0 0 1 0 1 1 0]
[0 1 0 1 0 1 0 1]
[0 0 1 1 0 0 1 1]
[0 0 0 0 1 1 1 1]
&gt; G * Transpose(P);
[0 0 0 0]
[0 0 0 0]
[0 0 0 0]
[0 0 0 0]
&gt; D := LinearCode(P);
&gt; Dual(R) eq D;
true
</PRE>
<HR>
<H5><A NAME = "20350">Hull(C) : Code -&gt; Code</A></H5>
<BLOCKQUOTE>
The Hull of a code is the intersection between itself and its dual.
</BLOCKQUOTE>
<H4><A NAME = "20351">The Information Space and Information Sets</A></H4>



<H5><A NAME = "20352">InformationSpace(C) : Code -&gt;  ModTupFld</A></H5>
<BLOCKQUOTE>
Given an [n, k] linear code C, return the 
k-dimensional R-space U which is the space of
information vectors for the code C.
</BLOCKQUOTE>
<H5><A NAME = "20353">InformationSet(C) : Code -&gt; [ RngIntElt ]</A></H5>
<BLOCKQUOTE>
Given an [n, k] linear code C over a finite field, return the current
information set for C. The information set for C is
an ordered set of k linearly independent columns of the
generator matrix, such that the generator matrix is the
identity matrix when restricted to these columns. The
information set is returned as a sequence of k integers, 
giving the numbers of the columns that correspond to the 
information set. 
</BLOCKQUOTE>
<H5><A NAME = "20354">AllInformationSets(C) : Code -&gt; [ [ RngIntElt ] ]</A></H5>
<BLOCKQUOTE>
Given an [n, k] linear code C over a finite field,
return all the possible information
sets of C as a (sorted) sequence of sequences of column indices.
Each inner sequence contains a maximal set of indices of linearly
independent columns in the generator matrix of C.
</BLOCKQUOTE>
<H5><A NAME = "20355">StandardForm(C) : Code -&gt; Code, Map</A></H5>
<BLOCKQUOTE>
Given an [n, k] linear code C over a finite field, return the
standard form D of C. A code is in <I>standard form</I> if the
first k components of the code words correspond to the
information set. Magma returns one of the many codes in standard
form which is isomorphic to C. (The same code is returned each
time.) Thus, the effect of this function is to return a code D
whose generators come from the generator matrix of C with its
columns permuted, so that the submatrix consisting of the first k
columns of the generator matrix for D is the identity matrix.
Two values are returned: 
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The standard form code D;
<DT>(b)</DT><DD>An isomorphism from C to D.</DL>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20356">Example <TT>CodeFld_StandardForm (H158E9)</TT></A></H3>
We construct a Reed--Muller code C and its standard form S and then
map a codeword of C into S.
<P>
<P>
<PRE>
&gt; C := ReedMullerCode(1, 4);         
&gt; C;
[16, 5, 8] Reed-Muller Code (r = 1, m = 4) over GF(2)
Generator matrix:
[1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1]
[0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1]
[0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1]
[0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1]
[0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1]
&gt; InformationSet(C);
[ 1, 2, 3, 5, 9 ]
&gt; #AllInformationSets(C);
2688
&gt; S, f := StandardForm(C);
&gt; S;
[16, 5, 8] Linear Code over GF(2)
Generator matrix:
[1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1]
[0 1 0 0 0 1 1 0 1 1 0 1 0 1 0 1]
[0 0 1 0 0 1 0 1 1 0 1 1 0 0 1 1]
[0 0 0 1 0 0 1 1 1 0 0 0 1 1 1 1]
[0 0 0 0 1 0 0 0 0 1 1 1 1 1 1 1]
&gt; u := C.1;
&gt; u;
(1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1)
&gt; f(u);
(1 0 0 0 0 1 1 1 0 1 1 0 1 0 0 1)
</PRE>
<HR>
<H4><A NAME = "20357">The Syndrome Space</A></H4>



<H5><A NAME = "20358">SyndromeSpace(C) : Code -&gt; ModTupFld</A></H5>
<BLOCKQUOTE>
Given an [n, k] linear code C, return the 
(n - k)-dimensional vector space W, which is the space of
syndrome vectors for the code C.
</BLOCKQUOTE>
<H4><A NAME = "20359">The Generator Polynomial</A></H4>

<P>
<P>
The operations in this section are restricted to cyclic codes.


<H5><A NAME = "20360">GeneratorPolynomial(C) : Code -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a cyclic code C over a finite field,
return the generator polynomial of C.  The
generator polynomial of C is a divisor of x<sup>n</sup> - 1, where n is the
length of C.
</BLOCKQUOTE>
<H5><A NAME = "20361">CheckPolynomial(C) : Code -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a cyclic code C over a finite field, return the check polynomial 
of C as an element of K[x].  If g(x) is the generator polynomial 
of C and h(x) is the check polynomial of C, then 
g(x)h(x) = 0 (mod x<sup>n</sup> - 1), where n is the length of C.
</BLOCKQUOTE>
<H5><A NAME = "20362">Idempotent(C) : Code -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a cyclic code C, return the (polynomial) idempotent of C.
If c(x) is the idempotent of C,
then c(x)<sup>2</sup> = 0 (mod x<sup>n</sup> - 1), where n is the length of C.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20363">Example <TT>CodeFld_GeneratorPolynomial (H158E10)</TT></A></H3>
We find the generator and check polynomials for the third order
Hamming code over GF(2).
<P>
<P>
<PRE>
&gt; K&lt;w&gt; := GF(2);
&gt; P&lt;x&gt; := PolynomialRing(K);
&gt; H := HammingCode(K, 3);
&gt; g := GeneratorPolynomial(H);
&gt; g;
x^3 + x + 1
&gt; h := CheckPolynomial(H);
&gt; h;
x^4 + x^2 + x + 1
&gt; g*h mod (x^7 - 1);
0
&gt; forall{ c : c in H | h * P!Eltseq(c) mod (x^7-1) eq 0 };
true
&gt; e := Idempotent(H);
&gt; e;
x^4 + x^2 + x
&gt; e^2;
x^8 + x^4 + x^2
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1835.htm">[Next]</A><A  HREF = "text1833.htm">[Prev]</A> <A  HREF = "text1835.htm">[Right]</A> <A  HREF = "text1833.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>