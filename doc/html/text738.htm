<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Properties of Finite Groups Of Lie Type</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text739.htm">[Next]</A><A  HREF = "text737.htm">[Prev]</A> <A  HREF = "text739.htm">[Right]</A> <A  HREF = "text737.htm">[Left]</A> <A  HREF = "text734.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8462">Properties of Finite Groups Of Lie Type</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text738.htm#8463">Maximal Subgroups of the Classical  Groups</A>
<LI> <A  HREF = "text738.htm#8465">Maximal Subgroups of the Exceptional Groups</A>
<LI> <A  HREF = "text738.htm#8470">Sylow Subgroups of the Classical  Groups</A>
<LI> <A  HREF = "text738.htm#8476">Sylow Subgroups of Exceptional  Groups</A>
<LI> <A  HREF = "text738.htm#8484">Conjugacy of Subgroups of the  Classical Groups</A>
<LI> <A  HREF = "text738.htm#8486">Conjugacy of Elements of the  Exceptional Groups</A>
<LI> <A  HREF = "text738.htm#8492">Irreducible Subgroups of the  General Linear Group</A>
</UL>
<H4><A NAME = "8463">Maximal Subgroups of the Classical  Groups</A></H4>

<P>
<P>
<P>
The <TT>ClassicalMaximals</TT> function, written by Derek Holt and Colva
Roney-Dougal, returns a list of the maximal subgroups of the classical
quasisimple groups in their natural representations, as returned by the
Magma functions <TT>SL, Sp, SU, Omega, OmegaPlus, OmegaMinus</TT>.
The list should be complete for dimensions up to 12 apart from a few
omissions in &Omega;^ + (8, q) which will be rectified in the near future.
<P>
There are also options to return the normalisers of these subgroups in
various groups, such as (GL)(n, q), (GU)(n, q), that
lie between the quasisimple group and its normaliser in the general linear
group. These should be sufficient to enable the skilled user to determine
the maximal subgroups of any group lying between the quasisimple groups and
its normaliser.
<P>
According to the theorem of Aschbacher <A  HREF = "text733.htm#bib_asch-maximal-subgps">[Asc84]</A>
discussed earlier in this chapter, the maximal subgroups of a
quasisimple classical group over a finite field lie in (at least) one
of nine categories, which were listed in the Aschbacher Reduction section.
<P>
The subgroups in the first eight of these categories are said to be of
<I>geometric type</I> and can be described in a uniform fashion.
This description is the topic of the book <A  HREF = "text733.htm#bib_KL90">[KL90]</A>. They are returned
in all dimensions by <TT>ClassicalMaximals</TT>. There is no such uniform
description
of the subgroups in the ninth class, which have to be classified separately
in each dimension. The lists in the papers <A  HREF = "text733.htm#bib_hiss-malle">[HM01]</A>,
<A  HREF = "text733.htm#bib_hiss-malle-c">[HM02]</A>
and <A  HREF = "text733.htm#bib_luebeck">[L"01]</A> contain sufficient information in theory to compute these
subgroups up to dimension 250, but currently this has been carried out only
up to dimension 12.


<H5><A NAME = "8464">ClassicalMaximals(type, d, q : parameters) : MonStgElt, RngIntElt, RngIntElt -&gt; SeqEnum</A></H5>

<PRE>    classes: SetEnum                    Default: {1 ... 9}</PRE>

<PRE>    all: BoolElt                        Default: <TT>true</TT></PRE>

<PRE>    special: BoolElt                    Default: <TT>true</TT></PRE>

<PRE>    general: BoolElt                    Default: <TT>true</TT></PRE>

<PRE>    normaliser: BoolElt                 Default: <TT>true</TT></PRE>

<PRE>    novelties: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Return a list of representatives of the conjugacy classes of maximal
subgroups of the quasisimple group of the specified type in dimension
d over the field of order q. The string <I>type</I> must be one of
<TT>L, S, U, O, O+, O-</TT>.
<P>
<P>
If the optional parameter <TT>classes</TT> is set to a proper subset of
{1 ... 9}, then only the subgroups lying in the corresponding Aschbacher
categories will be returned.
<P>
 If the option <TT>all</TT> is set <TT>false</TT>, then representatives
of the conjugacy classes under the action of the full automorphism group
of the simple classical group will be returned: so this option will
usually result in fewer subgroups in the returned list!
<P>
<P>
The option <TT>special</TT> only has effect for types
<TT>O, O+, O-</TT>. When this is set to <TT>true</TT>, the normalisers of
the subgroups in the appropriate group (SO)(d, q), (SO)^ + (d, q) or
(SO)^ - (d, q) will be returned.
<P>
<P>
If the option <TT>general</TT> is set to <TT>true</TT>, then the normalisers of
the subgroups in the appropriate group
(GL)(d, q), (GU)(d, q), (GO)(d, q), (GO)^ + (d, q)
or (GO)^ - (d, q) will be returned. (This option has not effect
for type <TT>S</TT>.)
<P>
<P>
If the option <TT>normaliser</TT> is set to <TT>true</TT>, then the normalisers
of the subgroups in the full normaliser of the quasisimple group in the
general linear group (i.e. the group preserving the relevant form modulo
scalars) will be returned. (For type <TT>L</TT> this has the same effect as
setting <I>general</I> to <TT>true</TT>.)
<P>
<P>
If the option <TT>novelties</TT> is set <TT>true</TT>, then the intersections
with the quasisimple group of any novelty maximal subgroups of any
groups lying between the simple group and its full automorphism group
will be returned. Use this option with caution, because the results
are not guaranteed to be reliable!
</BLOCKQUOTE>
<H4><A NAME = "8465">Maximal Subgroups of the Exceptional Groups</A></H4>

<P>
<P>
<P>
<P>
Here follows some intrinsics for creating and conjugating
maximal subgroups of Suzuki and Ree groups. The flags <TT>SuzukiMaximals</TT> and <TT>ReeMaximals</TT> may be used to produce verbose output.


<H5><A NAME = "8466">SuzukiMaximalSubgroups(G) : GrpMat -&gt; SeqEnum, SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, return a
sequence of representatives of the maximal subgroups of G. Also returns
sequences of <TT>GrpSLPElt</TT> of the generators of the subgroups, from
the word group of G.
</BLOCKQUOTE>
<H5><A NAME = "8467">SuzukiMaximalSubgroupsConjugacy(G, R, S) : GrpMat, GrpMat, GrpMat -&gt; GrpMatElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group and if R
and S are conjugate maximal subgroups of G, then return an element
g of G that conjugates R to S. A <TT>GrpSLPElt</TT> from the
word group of G, that evaluates to g, is also returned.
</BLOCKQUOTE>
<H5><A NAME = "8468">ReeMaximalSubgroups(G) : GrpMat -&gt; SeqEnum, SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Ree group, return a
sequence of representatives of the maximal subgroups of G. Also returns
sequences of <TT>GrpSLPElt</TT> of the generators of the subgroups, from
the word group of G.
</BLOCKQUOTE>
<H5><A NAME = "8469">ReeMaximalSubgroupsConjugacy(G, R, S) : GrpMat, GrpMat, GrpMat -&gt; GrpMatElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Ree group and if R
and S are conjugate maximal subgroups of G, then return an element
g of G that conjugates R to S. A <TT>GrpSLPElt</TT> from the word
group of G, that evaluates to g, is also returned. This is not
implemented if R, S are Frobenius groups.
</BLOCKQUOTE>
<H4><A NAME = "8470">Sylow Subgroups of the Classical  Groups</A></H4>

<P>
<P>
<P>
The Magma ClassicalSylow package written by Mark Stather provides 
functionality for constructing and conjugating the Sylow p-subgroups 
of the classical groups over finite fields in their natural representation,
for any prime p. The classical groups may be created in Magma using 
the <TT>GL, SL, Sp, GO, GOPlus, GOMinus, SO, SOPlus, SOMinus, Omega, 
OmegaPlus, OmegaMinus, GU, SU</TT> intrinsics.
<P>
<P>
This package makes use of code to compute the classical form fixed by a
group written by Derek Holt, and code to conjugate classical forms
written by Colva Roney-Dougal.
<P>
<P>
The algorithms in this package are described in <A  HREF = "text733.htm#bib_Stather">[Sta]</A>, which
in turn makes use of the descriptions of the Sylow subgroups of the
classical groups given in <A  HREF = "text733.htm#bib_We55">[Wei55]</A>, <A  HREF = "text733.htm#bib_CaF64">[CF64]</A>, <A  HREF = "text733.htm#bib_Ree57">[R.R57]</A> and
<A  HREF = "text733.htm#bib_Car72">[Car72]</A>. The conjugation algorithms make use of only the Meataxe,
Smash, basic linear algebra and the solution of norm equations over
finite fields.


<H5><A NAME = "8471">ClassicalSylow(G,p) : GrpMat, RngIntElt -&gt; GrpMat</A></H5>
<BLOCKQUOTE>
The argument G must be a classical group in its natural representation, 
up to conjugation, with the exception of GO(2m + 1, 2<sup>e</sup>). More precisely,
it must be a conjugate of a group returned by one of the intrinsics
<TT>GL, SL, Sp, GO, GOPlus, GOMinus, SO, SOPlus, SOMinus, Omega,
OmegaPlus, OmegaMinus, GU, SU</TT>. p must be a prime number.
The intrinsic returns a Sylow p-subgroup of G as a matrix group.
</BLOCKQUOTE>
<H5><A NAME = "8472">ClassicalSylowConjugation(G,P,S) : GrpMat, GrpMat, GrpMat -&gt; GrpMatElt</A></H5>
<BLOCKQUOTE>
The argument G must be a classical group in its natural representation, 
up to conjugation, with the exception of GO(2m + 1, 2<sup>e</sup>).  More precisely,
it must be a conjugate of a group returned by one of the intrinsics
<TT>GL, SL, Sp, GO, GOPlus, GOMinus, SO, SOPlus, SOMinus, Omega,
OmegaPlus, OmegaMinus, GU, SU</TT>.  The groups P 
and S must be Sylow p-subgroups of G.
The intrinsic returns an element g &isin;G with P<sup>g</sup> = S.
</BLOCKQUOTE>
<H5><A NAME = "8473">ClassicalSylowNormaliser(G,P) : GrpMat, GrpMat -&gt; GrpMatElt</A></H5>
<BLOCKQUOTE>
In this case G must the full classical group in its natural
representation, up to conjugation, with the exception of GO(2m + 1, 2<sup>e</sup>).
More precisely, it must be a conjugate of a group returned by one of the
intrinsics <TT>GL, Sp, GO, GOPlus, GOMinus, GU</TT>.
The subgroup P must be a Sylow p-subgroup of G.
The intrinsic returns the normaliser of P in G.
</BLOCKQUOTE>
<H5><A NAME = "8474">ClassicalSylowToPC(G,P) : GrpMat, GrpMat -&gt; GrpPC, UserProgram, Map</A></H5>
<BLOCKQUOTE>
The argument G must be a classical group in its natural representation, 
up to conjugation, with the exception of GO(2m + 1, 2<sup>e</sup>). More precisely,
it must be a conjugate of a group returned by one of the intrinsics
<TT>GL, SL, Sp, GO, GOPlus, GOMinus, SO, SOPlus, SOMinus, Omega,
OmegaPlus, OmegaMinus, GU, SU</TT>.
The group P must be a Sylow p-subgroup of G.
The intrinsic returns a PC group Q isomorphic to P, and also an
isomorphism from P to Q and an isomorphism from Q to P.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8475">Example <TT>GrpASim_sylow_ex (H70E18)</TT></A></H3>
We construct a Sylow 7-subgroup P of G = Sp(28, 17<sup>2</sup>), take a random 
conjugate S of P and then find a conjugating element g that takes 
P to S.
<P>
<P>
<P>
<PRE>
&gt; SetSeed(1);
&gt; G := Sp(28,17^2); 
&gt; time P := ClassicalSylow(G,7); 
Time: 0.080 
&gt; S := P^Random(G); 
&gt; time g := ClassicalSylowConjugation(G,P,S); 
Time: 0.400
</PRE>
<P>
We next compute the normaliser of P in G.
<P>
<P>
<P>
<PRE>
&gt; time N := ClassicalSylowNormaliser(G,P); 
Time: 0.310
&gt; // and a PC presentation of P 
&gt; time Pc, PtoPc, PctoP := ClassicalSylowToPC(G,P);
Time: 0.200 
&gt; Pc; 
GrpPC : Pc of order 2401 = 7^4 
PC-Relations: 
    Pc.1^7 = Id(Pc), 
    Pc.2^7 = Id(Pc), 
    Pc.3^7 = Id(Pc), 
    Pc.4^7 = Id(Pc) 
&gt; // We get inverse isomorphisms PtoPc and PctoP 
&gt; g := Random(P); 
&gt; PctoP(PtoPc(g)) eq g; 
true
&gt; x := Random(Pc); 
&gt; PtoPc(PctoP(x)) eq x; 
true
</PRE>
<HR>
<H4><A NAME = "8476">Sylow Subgroups of Exceptional  Groups</A></H4>

<P>
<P>
The flags <TT>SuzukiSylow</TT> and <TT>ReeSylow</TT> may be used to produce
verbose output.


<H5><A NAME = "8477">SuzukiSylow(G, p) : GrpMat, RngIntElt -&gt; GrpMat, SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, and if
p is a prime number, return a random Sylow p-subgroup S of G.
<P>
Also returns a list of <TT>GrpSLPElt</TT> from the word group of G,
of the generators of S. If p does not divide
| G |, then the trivial subgroup is returned.
</BLOCKQUOTE>
<H5><A NAME = "8478">SuzukiSylowConjugacy(G, R, S, p) : GrpMat, GrpMat, GrpMat, RngIntElt -&gt; GrpMatElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, if p is
a prime number and if R and S are Sylow p-subgroups of G, then
return an element g of G that conjugates R to S. 
A <TT>GrpSLPElt</TT> from the word group of
G, that evaluates to g, is also returned.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8479">Example <TT>GrpASim_sz-sylow (H70E19)</TT></A></H3>
<P>
We demonstrate finding a conjugating element for Sylow subgroup
in an example over a large field.
<P>
<P>
<P>
<PRE>
&gt; q := 2^121;
&gt; G := Sz(q);
&gt; G ^:= Random(Generic(G));
&gt; G := DerivedGroupMonteCarlo(G);
&gt; NumberOfGenerators(G);
19
</PRE>
<P>
Non-constructive recognition is now a bit harder.
<P>
<P>
<P>
<PRE>
&gt; time SuzukiRecognition(G);
true 2658455991569831745807614120560689152
Time: 0.190
&gt; time flag, iso, inv, g2slp, slp2g := RecogniseSz(G);
Time: 22.810
</PRE>
<P>
However, after this, each call to constructive membership testing
is then easy.
<P>
<P>
<P>
<PRE>
&gt; R := RandomProcess(G);
&gt; g := Random(R);
&gt; time w := Function(g2slp)(g);
Time: 0.060
&gt; // evaluating SLPs always takes some time
&gt; time slp2g(w) eq g;
true
Time: 1.250
</PRE>
<P>
We now create some Sylow subgroups and find conjugating elements.
<P>
<P>
<P>
<PRE>
&gt; p := Random([x[1] : x in Factorization(q - 1)]);
&gt; time R := SuzukiSylow(G, p);
Time: 1.370
&gt; time S := SuzukiSylow(G, p);
Time: 1.310
&gt; // that was easy, as is conjugating them
&gt; time g, slp := SuzukiSylowConjugacy(G, R, S, p);
Time: 1.340
&gt; slp2g(slp) eq g;
true
&gt; #R, NumberOfGenerators(R);
23 1
&gt; time R := SuzukiSylow(G, 2);
Time: 164.020
&gt; time S := SuzukiSylow(G, 2);
Time: 171.740
&gt; NumberOfGenerators(R), #R;
121 7067388259113537318333190002971674063309935587502475832486424805170479104
&gt; time g, slp := SuzukiSylowConjugacy(G, R, S, 2);
Time: 1.650
</PRE>
<P>
Creating the Sylow 2-subgroup is hard since they have so many generators.
One the other hand, finding a conjugating element is relatively easy.
<HR>
<H5><A NAME = "8480">ReeSylow(G, p) : GrpMat, RngIntElt -&gt; GrpMat, SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Ree group, and if
p is a prime number, return a random Sylow p-subgroup S of G.
<P>
Also returns a list of <TT>GrpSLPElt</TT> from the word group of G,
of the generators of S. If p does not divide | G
|, then the trivial subgroup is returned.
</BLOCKQUOTE>
<H5><A NAME = "8481">ReeSylowConjugacy(G, R, S, p) : GrpMat, GrpMat, GrpMat, RngIntElt -&gt; GrpMatElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as (Ree)(q), if p is
a prime number and if R and S are Sylow p-subgroups of G, then
return an element g of G that conjugates R to S, and a <TT>GrpSLPElt</TT> 
from the word group of G, that evaluates to g, is also returned.
<P>
Currently, this is not implemented for odd p that divide q<sup>3</sup> + 1.
</BLOCKQUOTE>
<H5><A NAME = "8482">LargeReeSylow(G, p) : GrpMat, RngIntElt -&gt; GrpMat, SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Large Ree group, and if
p is a prime number, return a random Sylow p-subgroup S of G.
<P>
Also returns a list of <TT>GrpSLPElt</TT> from the word group of G,
of the generators of S. If p does not divide | G
|, then the trivial subgroup is returned.
<P>
Currently, this is not implemented for p that divide q + 1.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8483">Example <TT>GrpASim_ree-sylow (H70E20)</TT></A></H3>
<P>
Starting with the Ree group over the field GF(3<sup>3</sup>1), we construct Sylow
p-subgroups for different primes p.
<P>
<P>
<P>
<PRE>
&gt; m := 7;
&gt; F := GF(3, 2 * m + 1);
&gt; q := #F;
&gt; q;
14348907
&gt; G := ReeGroup(F);
&gt; G ^:= Random(Generic(G));
&gt; G := DerivedGroupMonteCarlo(G);
&gt; NumberOfGenerators(G);
19
&gt; ReeRecognition(G);
true 14348907
&gt; flag, iso, inv, g2slp, slp2g := RecogniseRee(G);
&gt; R := RandomProcess(G);
&gt; g := Random(R);
&gt; w := Function(g2slp)(g);
&gt; slp2g(w) eq g;
true
</PRE>
<P>
We first create two Sylow p-subgroups of prime order and find 
a conjugating element. Note that 4561 divides the order of G 
exactly once and also divides q - 1.
<P>
<P>
<P>
<PRE>
&gt; p := 4561;
&gt; R := ReeSylow(G, p);
&gt; S := ReeSylow(G, p);
&gt; g, slp := ReeSylowConjugacy(G, R, S, p);
</PRE>
<P>
Thus R<sup>g</sup> = S.  In this case we also automatically get an SLP for 
the conjugating element.
<P>
<P>
<P>
<PRE>
&gt; slp2g(slp) eq g;
true
&gt; #R, NumberOfGenerators(R);
4561 1
</PRE>
<P>
Sylow 3-subgroups are harder: they have order 3<sup>45</sup> and hence 
a considerable number of generators.
<P>
<P>
<P>
<PRE>
&gt; time R := ReeSylow(G, 3);
Time: 3.730
&gt; S := ReeSylow(G, 3);
&gt; NumberOfGenerators(R), #R;
15 2954312706550833698643
&gt; time g, slp := ReeSylowConjugacy(G, R, S, 3);
Time: 0.300
</PRE>
<HR>
<H4><A NAME = "8484">Conjugacy of Subgroups of the  Classical Groups</A></H4>



<H5><A NAME = "8485">IsGLConjugate(H, K) : GrpMat, GrpMat -&gt; BoolElt, GrpMatElt | Unass</A></H5>
<BLOCKQUOTE>
Given H and K, both subgroups of the same general linear group
G = GL(n, q), return the value <TT>true</TT> if H and K are conjugate
in G.
The function returns a second value in the event that the subgroups
are conjugate: an element z which conjugates H into K.
The algorithm is described in Roney-Dougal <A  HREF = "text733.htm#bib_IsGLConjugate">[RD04]</A>.
</BLOCKQUOTE>
<H4><A NAME = "8486">Conjugacy of Elements of the  Exceptional Groups</A></H4>

<P>
<P>
The flags <TT>SuzukiElements</TT> and <TT>ReeElements</TT> may be used to produce
verbose output.


<H5><A NAME = "8487">SzConjugacyClasses(G) : GrpMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, return a
list of conjugacy classes, using the same format as the
<TT>ConjugacyClasses</TT> intrinsic.
</BLOCKQUOTE>
<H5><A NAME = "8488">SzClassRepresentative(G, g) : GrpMat, GrpMatElt -&gt; GrpMatElt, GrpMatElt</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, and g is an element of G, return the conjugacy class representative h of g, such
that h is in the list returned by <TT>SzConjugacyClasses</TT>. Also
returns c in G such that g<sup>c</sup> = h.
</BLOCKQUOTE>
<H5><A NAME = "8489">SzIsConjugate(G, g, h) : GrpMat, GrpMatElt, GrpMatElt -&gt; BoolElt, GrpMatElt</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, and g
and h are elements of G, determine if g is conjugate to h. If
so, return <TT>true</TT> and an element c such that g<sup>c</sup> = h,
otherwise return <TT>false</TT>.
</BLOCKQUOTE>
<H5><A NAME = "8490">SzClassMap(G) : GrpMat -&gt; Map</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Suzuki group, return
its class map, as in the <TT>ClassMap</TT> intrinsic.
</BLOCKQUOTE>
<H5><A NAME = "8491">ReeConjugacyClasses(G) : GrpMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
If G has been constructively recognised as a Ree group, return a
list of conjugacy classes, using the same format as the
<TT>ConjugacyClasses</TT> intrinsic.
</BLOCKQUOTE>
<H4><A NAME = "8492">Irreducible Subgroups of the  General Linear Group</A></H4>



<H5><A NAME = "8493">IrreducibleSubgroups(n, q) : RngIntElt, RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Return the list of conjugacy classes of irreducible subgroups of 
GL(n, q) where q is a prime power. At present, the dimension
n is restricted to 2.  The list is complete for characteristic 
at least 5. The algorithm is based on the classification of Flannery 
and O'Brien <A  HREF = "text733.htm#bib_flannery-obrien">[FO05]</A>.
</BLOCKQUOTE>
<H5><A NAME = "8494">IrreducibleSolubleSubgroups(n, q) : RngIntElt,  RngIntElt -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Return the list of conjugacy classes of soluble irreducible subgroups of 
GL(n, q) where q is a prime power. At present, the dimension n is 
restricted to 2 or 3.  The list is complete for characteristic at 
least 5.  The algorithm is based on the classification of Flannery and 
O'Brien <A  HREF = "text733.htm#bib_flannery-obrien">[FO05]</A>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8495">Example <TT>GrpASim_WriteOverSmallerField (H70E21)</TT></A></H3>
<P>
<P>
<PRE>
&gt; L := IrreducibleSubgroups(2, 19^5);
&gt; #[x : x in L | IsAbelian (x)];
552
&gt; L := IrreducibleSolubleSubgroups(3, 97^2);
&gt; #L;
10617
&gt; L[7];
MatrixGroup(3, GF(97^2))
Generators:
    [$.1^8775 $.1^2037 $.1^6016]
    [$.1^6017 $.1^6705 $.1^7812]
    [$.1^7813 $.1^2817   $.1^33]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text739.htm">[Next]</A><A  HREF = "text737.htm">[Prev]</A> <A  HREF = "text739.htm">[Right]</A> <A  HREF = "text737.htm">[Left]</A> <A  HREF = "text734.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>