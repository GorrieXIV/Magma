<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Subgroups, Quotient Groups,  Homomorphisms and Extensions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text835.htm">[Next]</A><A  HREF = "text833.htm">[Prev]</A> <A  HREF = "text835.htm">[Right]</A> <A  HREF = "text833.htm">[Left]</A> <A  HREF = "text831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9607">Subgroups, Quotient Groups,  Homomorphisms and Extensions</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text834.htm#9608">Construction of Subgroups</A>
<LI> <A  HREF = "text834.htm#9611">Coercions Between Groups and Subgroups</A>
<LI> <A  HREF = "text834.htm#9617">Construction of Quotient Groups</A>
<LI> <A  HREF = "text834.htm#9620">Homomorphisms</A>
<LI> <A  HREF = "text834.htm#9624">Construction of Extensions</A>
<LI> <A  HREF = "text834.htm#9626">Construction of Standard Groups</A>
</UL>
<H4><A NAME = "9608">Construction of Subgroups</A></H4>



<H5><A NAME = "9609"></A><A NAME = "GrpGPC:sub">sub</A>&lt;G | L&gt; : GrpGPC, List -&gt; GrpGPC, Map</H5>
<BLOCKQUOTE>
Construct the subgroup H of the polycyclic group G generated by the elements
specified by the terms of the <I>generator list</I> L.
<P>
<P>
A term L[i] of the generator list may consist of any of the following objects:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>An element liftable to G;
<DT>(b)</DT><DD>A sequence of integers representing an element of G;
<DT>(c)</DT><DD>A subgroup of G;
<DT>(d)</DT><DD>A set or sequence of (a), (b), or (c).
<P>
</DL>
The collection of words and groups specified by the list must all belong to the
group G and H will be constructed as a subgroup of G.
<P>
The generators of H consist of the words specified directly by terms of L[i]
together with the stored generating words for any groups specified by terms
of L[i]. Repetitions of an element and occurrences of the identity element
are removed.
<P>
The inclusion map from H to G is returned as a second value.
</BLOCKQUOTE>
<H5><A NAME = "9610">ncl&lt;G | L&gt; : GrpGPC, List -&gt; GrpGPC, Map</A></H5>
<BLOCKQUOTE>
Construct the subgroup N of the polycyclic group G as the normal closure
of the subgroup generated by the elements specified by the terms of the
<I>generator list</I> L.
<P>
The possible forms of a term L[i] of the generator list are the
same as for the <A  HREF = "text834.htm#GrpGPC:sub">sub</A>-constructor.
<P>
The inclusion map from N to G is returned as a second value.
</BLOCKQUOTE>
<H4><A NAME = "9611">Coercions Between Groups and Subgroups</A></H4>



<H5><A NAME = "9612">G ! g : GrpGPC, GrpGPCElt -&gt; GrpGPCElt</A></H5>
<BLOCKQUOTE>
Given an element g belonging to the subgroup H of the group G,
rewrite g as an element of G.
</BLOCKQUOTE>
<H5><A NAME = "9613">H ! g : GrpGPC, GrpGPCElt -&gt; GrpGPCElt</A></H5>
<BLOCKQUOTE>
Given an element g belonging to the group G, and given a subgroup
H of G containing g, rewrite g as an element of H.
</BLOCKQUOTE>
<H5><A NAME = "9614">K ! g : GrpGPC, GrpGPCElt -&gt; GrpGPCElt</A></H5>
<BLOCKQUOTE>
Given an element g belonging to the group H, and a group K, such that
H and K are subgroups of G, and both H and K contain g,
rewrite g as an element of K.
</BLOCKQUOTE>
<H5><A NAME = "9615">InclusionMap(G, H) : GrpGPC, GrpGPC -&gt; Map</A></H5>
<BLOCKQUOTE>
The map from the subgroup H of G to G.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9616">Example <TT>GrpGPC_Subgroup (H77E3)</TT></A></H3>
Consider again the infinite polycyclic group G defined by the polycyclic presentation
&lt; a, b, c  | b<sup>a</sup> = b * c, (a, c), (b, c) &gt;.
<P>
<P>
<PRE>
&gt; F&lt;a,b,c&gt; := FreeGroup(3);
&gt; rels := [ b^a = b*c, b^(a^-1) = b*c^-1 ];
&gt; G&lt;a,b,c&gt; := quo&lt; GrpGPC : F | rels &gt;;
&gt; G;
GrpGPC : G of infinite order on 3 PC-generators
PC-Relations:
    b^a = b * c, 
    b^(a^-1) = b * c^-1
</PRE>
<P>
Using the function <A  HREF = "text836.htm#GrpGPC:PCGenerators">PCGenerators</A> which is described later, the
groups G<sub>1</sub>, ..., G<sub>4</sub> and the corresponding inclusion maps can be defined
as follows:
<P>
<P>
<PRE>
&gt; G_ := []; incl_ := [ PowerStructure(Map) | ];
&gt; for i := 1 to #PCGenerators(G)+1 do
&gt;   G_[i], incl_[i] := sub&lt; G | [ g : g in PCGenerators(G) |
&gt;                                        Depth(g) ge i ] &gt;;
&gt; end for;
&gt; for i := 1 to #G_ do
&gt;   printf "G_%o = &lt;%o&gt;", i, {@ G!x : x in
&gt;                   PCGenerators(G_[i]) @}; print "";
&gt; end for;
G_1 = &lt;{@ a, b, c @}&gt;
G_2 = &lt;{@ b, c @}&gt;
G_3 = &lt;{@ c @}&gt;
G_4 = &lt;{@ @}&gt;
</PRE>
Note that we must set the universe of the sequence <TT>incl_</TT> to
<TT>PowerStructure(Map)</TT> manually, since we want to store maps which do not
have a common domain.  If we failed to do this, the universe would be chosen
automatically to be the set of all maps from G<sub>1</sub> to G when the first map
is inserted into the sequence. Inserting the second map, which does not have
the domain G<sub>1</sub>, would then cause a runtime error.
<HR>
<H4><A NAME = "9617">Construction of Quotient Groups</A></H4>



<H5><A NAME = "9618">quo&lt;G | L&gt; : GrpGPC, List -&gt; GrpGPC, Map</A></H5>
<BLOCKQUOTE>
Construct the quotient Q of the polycyclic group G by the normal subgroup N,
where N is the smallest normal subgroup of G containing the elements
specified by the terms of the <I>generator list</I> L.
<P>
The possible forms of a term L[i] of the generator list are the
same as for the <A  HREF = "text834.htm#GrpGPC:sub">sub</A>-constructor.
<P>
The quotient group Q and the corresponding natural homomorphism
f : G -&gt; Q are returned.
</BLOCKQUOTE>
<H5><A NAME = "9619">G / N : GrpGPC, GrpGPC -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
Given a normal subgroup N of the polycyclic group G, construct the quotient
of G by N.
</BLOCKQUOTE>
<H4><A NAME = "9620">Homomorphisms</A></H4>

<P>
<P>
For a general description of homomorphisms, we refer to Chapter <A  HREF = "text138.htm#949">MAPPINGS</A>.
This section describes some special aspects of homomorphisms the
domain of which is a polycyclic group.


<H5><A NAME = "9621">General remarks</A></H5>

<P>
<P>
The kernel of a homomorphism with a domain of type <TT>GrpGPC</TT> can be
computed using the function <A  HREF = "text141.htm#Map:Kernel">Kernel</A>,
if the codomain is of one of the types <TT>GrpGPC</TT>, <TT>GrpPC</TT>
(cf. Chapter <A  HREF = "text706.htm#7978">FINITE SOLUBLE GROUPS</A>), <TT>GrpAb</TT> (cf. Chapter <A  HREF = "text786.htm#8898">ABELIAN GROUPS</A>),
<TT>GrpPerm</TT> (cf. Chapter <A  HREF = "text629.htm#6871">PERMUTATION GROUPS</A>), <TT>ModAlg</TT> or <TT>ModGrp</TT>
(cf. Chapter <A  HREF = "text1023.htm#11419">MODULES OVER AN ALGEBRA</A>) or if the codomain is of
the type <TT>GrpMat</TT> (cf. Chapter <A  HREF = "text653.htm#7392">MATRIX GROUPS OVER GENERAL RINGS</A>) and the image is finite.
<P>
In particular, preimages of substructures can be computed in these situations.
The kernel of a map will be computed automatically, if the preimage of a
substructure of the codomain is to be computed.
<P>
The kernel (and hence preimages of substructures) may also be computable, if
the codomain is of the type <TT>GrpFP</TT> (cf. Chapter <A  HREF = "text808.htm#9089">FINITELY PRESENTED GROUPS</A>) and
the domain is nilpotent.


<H5><A NAME = "9622">Construction of Homomorphisms</A></H5>



<H5><A NAME = "9623">hom&lt; P -&gt; G | S : parameters&gt; : Struct , Struct -&gt; Map</A></H5>
<BLOCKQUOTE>
Returns the homomorphism from the polycyclic group P to the group G defined by the assignment S. S can be the one of the following:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A list, sequence or indexed set containing the images of the n polycyclic generators P.1, ..., P.n of P. Here, the i-th element of S is interpreted as the image of P.i, i.e. the order of the elements in S is important.
<DT>(ii)</DT><DD>A list, sequence, enumerated set or indexed set, containing r tuples &lt;x<sub>i</sub>, y<sub>i</sub>&gt; or arrow pairs x<sub>i</sub>  - &gt; y<sub>i</sub>, where x<sub>i</sub>&isin;P, y<sub>i</sub>&isin;G (i=1, ..., r) and the set {x<sub>1</sub>, ..., x<sub>r</sub>} is a generating set for P. In this case, y<sub>i</sub> is assigned as the image of x<sub>i</sub>, hence the order of the elements in S is not important. Note that the preimages x<sub>i</sub> need not be the polycyclic generators of P.
<P>
<P>
</DL>
If the data type of the codomain supports element arithmetic and element 
comparison, by default the constructed homomorphism is checked by verifying
that the 
would-be images of the polycyclic generators satisfy the defining relations of 
P and that this assignment is consistent with the assignments made by the 
user. In this case, it is assured that the returned map is a well-defined 
homomorphism with the desired images.  The most important situation in which
it is not possible to perform checking is the case in which the domain is a 
finitely presented group (<TT>FPGroup</TT>; cf. Chapter <A  HREF = "text808.htm#9089">FINITELY PRESENTED GROUPS</A>) 
which is not free. Checking may be disabled using the parameter <TT>Check</TT>.
<P>
<P>
<PRE>
     Check: BoolElt                      Default: <TT>true</TT>
</PRE>
If <TT>Check</TT> is set to <TT>false</TT>, checking of the homomorphism is disabled.
</BLOCKQUOTE>
<H4><A NAME = "9624">Construction of Extensions</A></H4>



<H5><A NAME = "9625"></A><A NAME = "GrpGPC:DirectProduct">DirectProduct</A>(G, H) : GrpGPC, GrpGPC -&gt; GrpGPC, [Map], [Map]</H5>
<BLOCKQUOTE>
The direct product K of the polycyclic groups G and H.
The second value returned is a sequence containing the inclusion maps
I<sub>G</sub>: G -&gt; K and I<sub>H</sub>: H -&gt; K.  The third
value returned is a sequence containing the projection maps
P<sub>G</sub>: K -&gt; G and P<sub>H</sub>: K -&gt; H.
</BLOCKQUOTE>
<H4><A NAME = "9626">Construction of Standard Groups</A></H4>

<P>
<P>
A number of functions are provided which construct polycyclic presentations
for various standard groups.


<H5><A NAME = "9627">AbelianGroup(GrpGPC, Q) : Cat, [RngIntElt] -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
Construct the abelian group defined by the sequence
Q = [n<sub>1</sub>, ..., n<sub>r</sub>] as a polycyclic group. The entries 
n<sub>i</sub> may be either zero, indicating an infinite cyclic factor, 
or integers greater than 1. The function returns the polycyclic 
group which is the direct product of the cyclic groups 
Z<sub>1</sub> x ... x Z<sub>r</sub>, where Z<sub>i</sub> is a cyclic 
group of infinite order if n<sub>i</sub> = 0, or a cyclic group of 
order n<sub>i</sub> if n<sub>i</sub> &gt; 1.
</BLOCKQUOTE>
<H5><A NAME = "9628">CyclicGroup(GrpGPC, n) : Cat, RngIntElt -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
For n&gt;0, the cyclic group of order n is returned, while for n=0, 
the infinite cyclic group is returned as a polycyclic group.
</BLOCKQUOTE>
<H5><A NAME = "9629">DihedralGroup(GrpGPC, n) : Cat, RngIntElt -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
For n&ge;3, the dihedral group of order 2n is returned, while for n=0, 
the infinite dihedral group is returned as a polycyclic group.
</BLOCKQUOTE>
<H5><A NAME = "9630">ElementaryAbelianGroup(GrpGPC, p, n) : Cat, RngIntElt, RngIntElt -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
Given a prime p and a positive integer n, construct the elementary abelian
group of order p<sup>n</sup> as a polycyclic group.
</BLOCKQUOTE>
<H5><A NAME = "9631">ExtraSpecialGroup(GrpGPC, p, n : parameters) : Cat, RngIntElt, RngIntElt -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
Given a prime p and a small positive integer n, construct an
extra-special group G of order p<sup>2n + 1</sup> as a polycyclic group.
The isomorphism type of G can be selected using the parameter <TT>Type</TT>.
<P>
<P>
<PRE>
     Type: MonStgElt                     Default: "+"
</PRE>
Possible values for this parameter are "+" (default) and "-".
<P>
<P>
If <TT>Type</TT> is set to "+", the function returns for p = 2 the central
product of n copies of the dihedral group of order 8, and for p &gt; 2
it returns the unique extra-special group of order p<sup>2n + 1</sup> and exponent p.
<P>
<P>
If <TT>Type</TT> is set to "-", the function returns for p = 2 the central
product of a quaternion group of order 8 and n - 1 copies of the dihedral
group of order 8, and for p &gt; 2 it returns the unique extra-special group
of order p<sup>2n + 1</sup> and exponent p<sup>2</sup>. 
</BLOCKQUOTE>
<H5><A NAME = "9632">FreeAbelianGroup(GrpGPC, n) : Cat, RngIntElt -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
Given a positive integer n, construct the free abelian group of rank n
as a polycyclic group.
</BLOCKQUOTE>
<H5><A NAME = "9633">FreeNilpotentGroup(r, e) : RngIntElt, RngIntElt -&gt; GrpGPC</A></H5>
<BLOCKQUOTE>
The free nilpotent group of rank r and class e is returned as a polycyclic
 group.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9634">Example <TT>GrpGPC_Homomorphism (H77E4)</TT></A></H3>
Consider the dihedral group D<sub>4</sub>.
<P>
<P>
<PRE>
&gt; G&lt;a,b&gt; := DihedralGroup(GrpGPC, 4);
</PRE>
We obtain a well-defined homomorphism f of G onto a group
A = (Z)<sub>2</sub> x (Z)<sub>2</sub>, by assigning two generators of A
as the images of a and ab, respectively. Note that in the definition 
of f we can use the generating set {a, ab} of G, instead of 
the defining polycyclic generating sequence of G.
<P>
<P>
<PRE>
&gt; A&lt;u,v&gt; := AbelianGroup([2,2]);
&gt; f := hom&lt; G-&gt;A | a-&gt;u, a*b-&gt;v &gt;;
</PRE>
We compute the kernel K of f and express the generators of K as elements
of G, using the function <A  HREF = "text836.htm#GrpGPC:PCGenerators_2">PCGenerators</A> described later.
<P>
<P>
<PRE>
&gt; K := Kernel(f);
&gt; PCGenerators(K, G);
{@ b^2 @}
</PRE>
<HR>
<H3><A NAME = "9635">Example <TT>GrpGPC_Symmetric2 (H77E5)</TT></A></H3>
A polycyclic representation for the group D<sub>3</sub> x D_&infin; may be obtained 
as follows:
<P>
<P>
<PRE>
&gt; G1&lt;a,b&gt; := DihedralGroup(GrpGPC, 3);
&gt; G2&lt;u,v&gt; := DihedralGroup(GrpGPC, 0);
&gt; D, incl, proj := DirectProduct(G1, G2);
&gt; D;
GrpGPC : D of infinite order on 4 PC-generators
PC-Relations:
    D.1^2 = Id(D), 
    D.2^3 = Id(D), 
    D.3^2 = Id(D), 
    D.2^D.1 = D.2^2, 
    D.4^D.3 = D.-4
</PRE>
Using the inclusion maps returned by <A  HREF = "text834.htm#GrpGPC:DirectProduct">DirectProduct</A>, we
 define a subgroup and compute the quotient by its normal closure:
<P>
<P>
<PRE>
&gt; S := sub&lt;D| incl[1](a)*incl[2](u), incl[1](b)*incl[2](v)&gt;;
&gt; S;
GrpGPC : S of infinite order on 3 PC-generators
PC-Relations:
    S.1^2 = Id(S), 
    S.2^3 = S.3, 
    S.2^S.1 = S.2^2 * S.-3, 
    S.3^S.1 = S.-3
&gt; Q, pi := quo&lt;D|S&gt;;
&gt; Q;
GrpGPC : Q of order 2 on 1 PC-generators
PC-Relations:
    Q.1^2 = Id(Q)
&gt; Q.1 @@ pi;
D.3
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text835.htm">[Next]</A><A  HREF = "text833.htm">[Prev]</A> <A  HREF = "text835.htm">[Right]</A> <A  HREF = "text833.htm">[Left]</A> <A  HREF = "text831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>