<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Base Change for Schemes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1334.htm">[Next]</A><A  HREF = "text1332.htm">[Prev]</A> <A  HREF = "text1334.htm">[Right]</A> <A  HREF = "text1332.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "14557">Base Change for Schemes</A></H3>

<P>
<P>
Let A be some ambient space in Magma. For example, think of A as
being the affine plane. Let k be its base ring and R<sub>A</sub> its coordinate ring.
If m: k -&gt; L is a map of rings (a coercion map, for instance) 
then there is a new ambient space denoted A<sub>L</sub> and called the
<I>base change of A to L</I> which has coordinate ring
R<sub>A<sub>L</sub></sub> with coefficient ring L instead of k.
(Mathematically, one simply tensors R<sub>A</sub> with L over k.
In Magma the equivalent function at the level of polynomial
rings is <TT>ChangeRing</TT>.)
There is a base change function described below which takes A and L
(or the map k -&gt; L) as arguments and creates this new space A<sub>L</sub>.
Note that there is a map from the coordinate ring of A to that of
A<sub>L</sub> determined by the map m.
<P>
This operation is called <I>base extension</I> since one often thinks
of the map m as being an extension of fields.
Of course, the map m could be many other things. One key example where
the name <I>extension</I> is a little unusual would be when m is
the map from the integers to some finite field.
<P>
Now let X be a scheme in Magma. Thus X is defined by some polynomials
f<sub>1</sub>, ..., f<sub>r</sub> on some ambient space A.
Given a ring map k -&gt; L there is a
base change operation for X which returns the <I>base change of X to L</I>,
denoted X<sub>L</sub>. This is done by first making the base change of A to L
and then using the map from the coordinate ring of A to that of A<sub>L</sub>
to translate the polynomials f<sub>i</sub> into polynomials defined on A<sub>L</sub>.
These polynomials can then be used to define a scheme in A<sub>L</sub>.
It is this resulting scheme which is the base change of X to L.
<P>
If one has a number of schemes
in the same ambient space and wants to base change them all at the same
time, a little care is required. The function which takes a scheme and a
map of rings as argument will create a new ambient space each time so is
unsuitable. Better would be to base change the ambient space and then
use the base change function which takes the scheme and the desired new
ambient space as argument.
(This latter base change function appears to be different from the other ones.
In fact it is not. We described base change above as a function
of maps of rings. Of course, there is a natural extension to maps of schemes.
With that extension, this final base change intrinsic really is base change
with respect to map of ambient spaces.)


<H5><A NAME = "14558">BaseChange(A,K) : Sch,Rng -&gt; Sch</A></H5>
<H5>BaseExtend(A,K) : Sch, Rng -&gt; Sch</H5>
<BLOCKQUOTE>
If A is a scheme defined over a field k and K is an
extension into which elements of k can be automatically coerced then
this returns a new scheme A<sub>K</sub> defined over K.
No cached data about A will be transferred to A<sub>K</sub>
and coordinate names will have to be defined again on A<sub>K</sub> if needed.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14559">BaseChange(A,m) : Sch, Map -&gt; Sch</A></H5>
<H5>BaseExtend(A,m) : Sch, Map -&gt; Sch</H5>
<BLOCKQUOTE>
If m is a map of rings whose domain is the base ring of the scheme A,
this returns the base change of A to the codomain of m.
The equations of A, if any, are mapped to the new ambient coordinate
ring using m.
</BLOCKQUOTE>
<H5><A NAME = "14560">BaseChange(F,K) : SeqEnum,Rng -&gt; SeqEnum</A></H5>
<H5>BaseExtend(F,K) : SeqEnum,Rng -&gt; SeqEnum</H5>
<H5>BaseChange(F,m) : SeqEnum,Rng -&gt; SeqEnum</H5>
<H5>BaseExtend(F,m) : SeqEnum,Rng -&gt; SeqEnum</H5>
<BLOCKQUOTE>
If F is a sequence of schemes lying in a common ambient space whose
base ring admits automatic coercion to K or is the domain of a ring map m
then this returns the base change of the elements of F as a new sequence.
<P>
</BLOCKQUOTE>
<H5><A NAME = "14561">BaseChange(X,A) : Sch,Sch -&gt; Sch</A></H5>
<H5>BaseExtend(X,A) : Sch,Sch -&gt; Sch</H5>
<H5>BaseChange(X,A,m) : Sch,Sch,Map -&gt; Sch</H5>
<H5>BaseExtend(X,A,m) : Sch,Sch,Map -&gt; Sch</H5>
<BLOCKQUOTE>
If X is any scheme whose ambient space B is of the same type (affine or
projective) and dimension
as the ambient space 
A but either has a base ring which admits coercion to that of A or
the map m is a ring map from the base ring of B to that of A then
this returns a scheme with the equations of X as a subscheme of A.
The equations are transferred to A using coercion or the map m.
</BLOCKQUOTE>
<H5><A NAME = "14562">BaseChange(X, n) : Sch, RngIntElt -&gt; Sch</A></H5>
<H5>BaseExtend(X, n) : Sch, RngIntElt -&gt; Sch</H5>
<BLOCKQUOTE>
The base change of the scheme X, where the base ring of X is a finite field to
the finite field which is a degree n extension of the base field of X.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "14563">Example <TT>Scheme_base-change-schemes (H118E22)</TT></A></H3>
Here are two curves whose intersection points are not defined over
the rationals and one of which only splits after a field extension.
The basic function to calculate intersection points only searches for them
over the current field of definition so misses them at first.
But with an extra argument it is able to search over an extension of the
base without actually changing base of the schemes.
This contrasts with finding higher dimensional components of schemes which
always requires the base change.
<P>
<P>
<PRE>
&gt; A&lt;x,y&gt; := AffineSpace(Rationals(),2);
&gt; C := Curve(A,x^2 + y^2);
&gt; IsIrreducible(C);
true
&gt; D := Curve(A,x - 1);
&gt; IntersectionPoints(C,D);

&gt; Qi&lt;i&gt; := QuadraticField(-1);
&gt; IntersectionPoints(C,D,Qi);
{ (0, i), (0, -i) }
</PRE>
So we have found the intersection points (although we haven't explained
how we chose the right field extension).
Now we do the same calculation again but by making the base change of
all schemes to the field Qi. Over this field the intersection points
are immediately visible, but also the curve C splits into two
components.
<P>
<P>
<PRE>
&gt; B&lt;u,v&gt; := BaseChange(A,Qi);
&gt; C1 := BaseChange(C,B);
&gt; D1 := BaseChange(D,B);
&gt; IsIrreducible(C1);
false
&gt; IntersectionPoints(C1,D1);
{ (0, i), (0, -i) }
&gt; PrimeComponents(C1);
[
    Scheme over Qi defined by u + i*v,
    Scheme over Qi defined by u - i*v
]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text1334.htm">[Next]</A><A  HREF = "text1332.htm">[Prev]</A> <A  HREF = "text1334.htm">[Right]</A> <A  HREF = "text1332.htm">[Left]</A> <A  HREF = "text1321.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>