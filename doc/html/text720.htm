<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Representation Theory</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text721.htm">[Next]</A><A  HREF = "text719.htm">[Prev]</A> <A  HREF = "text721.htm">[Right]</A> <A  HREF = "text719.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8233">Representation Theory</A></H3>

<P>
<P>
Chapter <A  HREF = "text1039.htm#11721">CHARACTERS OF FINITE GROUPS</A> on characters describes many functions for computing
with partial character tables or individual characters. 


<H5><A NAME = "8234">CharacterDegrees(G) : GrpPC -&gt; [ Tup ]</A></H5>
<H5>CharacterDegrees(G, z, p) : GrpPC, GrpPCElt, RngIntElt -&gt; [ Tup ]</H5>
<BLOCKQUOTE>
Given a finite pc-group G, return the sequence
[&lt; d<sub>1</sub>, c<sub>1</sub> &gt;, &lt; d<sub>2</sub>, c<sub>2</sub> &gt;, ... ],
where c<sub>i</sub> is the number of irreducible characters of G having degree
d<sub>i</sub>.  For details of the algorithm see Conlon <A  HREF = "text705.htm#bib_conlon-degrees">[Con90b]</A>.
<P>
The second form requires z to be a central element of G and p to be a
prime or zero. The sequence returned enumerates the number of absolutely
irreducible characters of G in characteristic p, lying over some faithful
linear character of &lt; z &gt;.
</BLOCKQUOTE>
<H5><A NAME = "8235">CharacterDegrees(G) : GrpFin -&gt; [ Tup ]</A></H5>
<BLOCKQUOTE>
Given a finite p-group G, return the sequence
[&lt; d<sub>1</sub>, c<sub>1</sub> &gt;, &lt; d<sub>2</sub>, c<sub>2</sub> &gt;, ... ],
where c<sub>i</sub> is the number of irreducible characters of G having degree
d<sub>i</sub>.  For details of the algorithm see <A  HREF = "text705.htm#bib_slat_degs">[Sla86]</A>.
</BLOCKQUOTE>
<H5><A NAME = "8236">CharacterDegreesPGroup(G) : GrpFin -&gt; [ RngIntElt ]</A></H5>
<BLOCKQUOTE>
Given a finite p-group G, return the sequence [C<sub>0</sub>, C<sub>1</sub>, ... ],
where C<sub>i</sub> is the number of irreducible characters of G having degree
p<sup>i</sup>.  For details of the algorithm see <A  HREF = "text705.htm#bib_slat_degs">[Sla86]</A>.
</BLOCKQUOTE>
<H5><A NAME = "8237">CharacterTable(G: parameters) : GrpPC -&gt; TabChtr</A></H5>
<BLOCKQUOTE>
Construct the table of ordinary irreducible characters for the group G.
<P>
<P>
<PRE>
     Al: MonStgElt                       Default: em "Default"
</PRE>
This parameter controls the algorithm used. The string <TT>"DS"</TT>
forces use of the
Dixon-Schneider algorithm. The string <TT>"IR"</TT> forces the use of Unger's
induction/reduction algorithm <A  HREF = "text705.htm#bib_chtr-table-unger">[Ung06]</A>.
The <TT>"Default"</TT> algorithm is to use Dixon-Schneider for groups of order
&le;5000 and Unger's algorithm for larger groups. This may change in
future.
<P>
<P>
<PRE>
     DSSizeLimit: RngIntElt              Default: 10^4
</PRE>
When the default algorithm is selected, a positive value n for
<TT>DSSizeLimit</TT>
means that before using Unger's algorithm, the full character space is split
by some passes of Dixon-Schneider, restricted to using class matrices
corresponding to conjugacy classes with size at most n.
</BLOCKQUOTE>
<H5><A NAME = "8238">CharacterTableConlon(G) : GrpPC -&gt; [ AlgChtrElt ]</A></H5>
<BLOCKQUOTE>
Given a finite p-group G, return the character table of G.
The algorithm is due to Conlon, as described in <A  HREF = "text705.htm#bib_conlon_chtrs">[Con90a]</A>.
</BLOCKQUOTE>
<H5><A NAME = "8239">GModule(G, M) : GrpPC, AlgMat -&gt; ModAlg</A></H5>
<BLOCKQUOTE>
The G-module for the action of G on the vector space
defined by the matrix ring M.
</BLOCKQUOTE>
<H5><A NAME = "8240">GModule(G, A) : GrpPC, GrpPC -&gt; ModAlg, Map</A></H5>
<BLOCKQUOTE>
A KG-module M corresponding to the action of the group G on the
elementary abelian subgroup A of G is constructed.  The map from 
A to the vector space underlying M is also returned.
</BLOCKQUOTE>
<H5><A NAME = "8241">GModule(G, A, B) : GrpPC, GrpPC, GrpPC -&gt; ModAlg, Map</A></H5>
<BLOCKQUOTE>
A KG-module M corresponding to the action of the group G on the 
elementary abelian section A/B of G is constructed.  The map from 
A to the vector space underlying M is also returned.
</BLOCKQUOTE>
<H5><A NAME = "8242">AbsolutelyIrreducibleRepresentationsSchur(G, k: parameters) : GrpPC, Rng -&gt;     List[Map]</A></H5>
<H5>AbsolutelyIrreducibleModulesSchur(G, k: parameters) : GrpPC, Rng -&gt; List[GModule]</H5>
<H5>AbsolutelyIrreducibleRepresentationsSchur(G, k, i: parameters) : GrpPC, Rng, RngIntElt -&gt; List[Map]</H5>
<H5>AbsolutelyIrreducibleModulesSchur(G, k, i: parameters) : GrpPC, Rng, RngIntElt -&gt; List[GModule]</H5>
<H5>AbsolutelyIrreducibleRepresentationsSchur(G, k, L: parameters) : GrpPC, Rng, List[Map] -&gt; List[Map]</H5>
<H5>AbsolutelyIrreducibleModulesSchur(G, k, L: parameters) : GrpPC, Rng, List[GModule] -&gt; List[GModule]</H5>
<H5>AbsolutelyIrreducibleRepresentationsSchur(G, k, L, i: parameters) : GrpPC, Rng, List[Map], RngIntElt -&gt; List[Map]</H5>
<H5>AbsolutelyIrreducibleModulesSchur(G, k, L, i: parameters) : GrpPC, Rng, RngIntElt -&gt; List[GModule]</H5>
<BLOCKQUOTE>
Compute the absolutely irreducible representations of the group G 
over appropriate extensions or sub-fields of the given field k. The 
representations returned are inequivalent and consist of all distinct 
representations, subject to the conditions imposed. The field k may 
be a finite field, the rationals or a cyclotomic field. In the case
when k is a finite field, the Glasby-Howlett algorithm is used to 
determine the minimal field over which a representation may be realised. 
If k has characteristic 0, the field over which a representation
is realised may not be minimal.
<P>
The representations are found using Schur's method of climbing the 
composition series for G defined by the pc-presentation. If the 
argument i is given then the algorithm will calculate only
representations of the ith subgroup of the composition series.
<P>
The "Representations" function returns a list of homomorphisms
&rho; : G to GL(n, K), where K is a field compatible with k. The
"Modules" version returns an equivalent list of G-modules.
<P>
<P>
<PRE>
     Process: BoolElt                    Default: <TT>true</TT>
</PRE>
If the parameter <TT>Process</TT> is set true then the list is a list of 
pairs comprising an integer and a representation.  This list or any sublist 
of it is a suitable value for the argument L in the last versions of the 
function, and in this case only the representations in L will be extended 
up the series. This allows the user to inspect the representations produced 
along the way and cull any that are uninteresting.
<P>
<P>
<P>
<PRE>
     GaloisAction: MonStgElt             Default: em "Yes"
</PRE>
Possible values are <TT>"Yes"</TT>, <TT>"No"</TT> and <TT>"Relative"</TT>.
The default is <TT>"Yes"</TT> for intermediate levels and <TT>"No"</TT> for the whole group.
The value <TT>"Yes"</TT> means that it only lists one representation from each
orbit of the 
action of the absolute Galois group Gal(K/hbox(primefield(K))). 
Setting this parameter
to <TT>"No"</TT> turns this reduction off (thus listing all inequivalent 
representations), while setting it to <TT>"Relative"</TT> uses the
group Gal(K/k).
<P>
<P>
<PRE>
     MaxDimension: RngIntElt             Default: 
</PRE>
Restrict the representations to those of dimension &le; <TT>MaxDimension</TT>.
The default is no restriction.
<P>
<P>
<PRE>
     ExactDimension: SetEnum             Default: 
</PRE>
If <TT>ExactDimension</TT> is assigned a set S of positive integers,
attention is restricted to representations having dimensions lying in the set
S. The default is equivalent to taking the set of all positive integers.
<P>
If both <TT>MaxDimension</TT> and <TT>ExactDimension</TT> are assigned values,
then representations having dimensions that are either bounded by 
<TT>MaxDimension</TT> or contained in <TT>ExactDimension</TT> are produced.
</BLOCKQUOTE>
<H5><A NAME = "8243">IrreducibleRepresentationsSchur(G, k: parameters) : GrpPC, Rng -&gt;     List[Map]</A></H5>
<H5>IrreducibleModulesSchur(G, k: parameters) : GrpPC, Rng -&gt;     List[GModule]</H5>
<H5>IrreducibleRepresentationsSchur(G, k, i: parameters) : GrpPC, Rng, RngIntElt -&gt; List[Map]</H5>
<H5>IrreducibleModulesSchur(G, k, i: parameters) : GrpPC, Rng, RngIntElt -&gt; List[GModule]</H5>
<H5>IrreducibleRepresentationsSchur(G, k, L: parameters) : GrpPC, Rng, List[Map] -&gt; List[Map]</H5>
<H5>IrreducibleModulesSchur(G, k, L: parameters) : GrpPC, Rng, List[GModule] -&gt; List[GModule]</H5>
<H5>IrreducibleRepresentationsSchur(G, k, L, i: parameters) : GrpPC, Rng, List[Map], RngIntElt -&gt; List[Map]</H5>
<H5>IrreducibleModulesSchur(G, k, L, i: parameters) : GrpPC, Rng, List[GModule], RngIntElt -&gt; List[GModule]</H5>
<BLOCKQUOTE>
Compute irreducible representations of G over the given field k.
All arguments and parameters are as for the absolutely irreducible case.
<P>
The computation proceeds by first computing the absolutely irreducible
representations subject to the given parameters, then rewriting over the
field k, with a consequent change of dimension of the representation.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8244">Example <TT>GrpPC_Reps (H68E31)</TT></A></H3>
We compute representations of the dihedral group of order 20.
<P>
<P>
<PRE>
&gt; G := DihedralGroup(GrpPC, 10);
&gt; FactoredOrder(G);
[ &lt;2, 2&gt;, &lt;5, 1&gt; ]
</PRE>
<P>
First some modular representations with characteristic 2.
<P>
<P>
<PRE>
&gt; r := IrreducibleModulesSchur(G, GF(2));
&gt; r;
[*
    GModule of dimension 1 over GF(2),
    GModule of dimension 4 over GF(2)
*]
&gt; r := AbsolutelyIrreducibleModulesSchur(G, GF(2));     
&gt; r;
[*
    GModule of dimension 1 over GF(2),
    GModule of dimension 2 over GF(2^2),
    GModule of dimension 2 over GF(2^2)
*]
&gt; r := AbsolutelyIrreducibleModulesSchur(G, GF(2) : GaloisAction:="Yes");     
&gt; r;
[*
    GModule of dimension 1 over GF(2),
    GModule of dimension 2 over GF(2^2)
*]
</PRE>
The irreducible representation of dimension 4 is not absolutely irreducible,
as over GF(4) it splits into two Galois-equivalent representations.
<P>
Getting irreducible representations over the complex field presents
no problem, despite not being able to use the complex field as an argument to
the function call. We could specify the field to be the cyclotomic
field with degree equal to Exponent(G), but it is preferable to ask
for absolutely irreducible representations over the rationals.
<P>
<P>
<PRE>
&gt; r := AbsolutelyIrreducibleRepresentationsSchur(G, Rationals());
&gt; r;
[*
    Mapping from: GrpPC: G to GL(1, RationalField()),
    Mapping from: GrpPC: G to GL(1, RationalField()),
    Mapping from: GrpPC: G to GL(1, RationalField()),
    Mapping from: GrpPC: G to GL(1, RationalField()),
    Mapping from: GrpPC: G to GL(2, CyclotomicField(5)),
    Mapping from: GrpPC: G to GL(2, CyclotomicField(5)),
    Mapping from: GrpPC: G to GL(2, CyclotomicField(5)),
    Mapping from: GrpPC: G to GL(2, CyclotomicField(5))
*]
&gt; r[6](G.2);
[zeta_5^3        0]
[       0 zeta_5^2]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text721.htm">[Next]</A><A  HREF = "text719.htm">[Prev]</A> <A  HREF = "text721.htm">[Right]</A> <A  HREF = "text719.htm">[Left]</A> <A  HREF = "text706.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>