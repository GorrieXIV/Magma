<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Database of Transitive Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text750.htm">[Next]</A><A  HREF = "text748.htm">[Prev]</A> <A  HREF = "text750.htm">[Right]</A> <A  HREF = "text748.htm">[Left]</A> <A  HREF = "text742.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "8591">Database of Transitive Groups</A></H3>

<P>
<P>
<P>
Magma has a database containing all transitive permutation groups having 
degree up to 32, and one containing all
primitive permutation groups with degree less than 4096.
<P>
The transitive groups up to degree 15 were determined by Greg Butler and
John McKay, the groups having degree in the range 16 to 30 were 
determined by Alexander Hulpke <A  HREF = "text741.htm#bib_hulpketrans">[Hul05]</A>. John Cannon and Derek Holt
<A  HREF = "text741.htm#bib_trans32">[CH08]</A> have determined the transitive groups of degree 32.
<P>
<P>



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text749.htm#8592">Accessing the Databases</A>
<LI> <A  HREF = "text749.htm#8606">Processes</A>
<LI> <A  HREF = "text749.htm#8616">Transitive Group Identification</A>
</UL>
<H4><A NAME = "8592">Accessing the Databases</A></H4>

<P>
<P>


<P>
<H5><A NAME = "8593">TransitiveGroupDatabaseLimit() : -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The limiting degree of the database of transitive groups.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8594">NumberOfTransitiveGroups(d) : RngIntElt -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range, return the number of
transitive  groups of degree d.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8595">TransitiveGroup(d, n) : RngIntElt, RngIntElt -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range and a positive integer n,
return the n-th transitive  group of degree d.
Also returns a string giving a description of the group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8596">TransitiveGroupDescription(d, n) : RngIntElt, RngIntElt -&gt; MonStgElt</A></H5>
<BLOCKQUOTE>
A string giving a description of the n-th transitive 
group of degree d.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8597">TransitiveGroupDescription(G) : GrpPerm -&gt; MonStgElt</A></H5>
<BLOCKQUOTE>
A string giving a description of the transitive group G.
</BLOCKQUOTE>
<H5><A NAME = "8598">TransitiveGroup(d) : RngIntElt -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range,
return the first transitive  group of degree d.
Also returns a string giving a description of the group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8599">TransitiveGroup(d, f) : RngIntElt, Program -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a degree d in the required range and a predicate f
(as a function or intrinsic), return the first transitive 
group of degree d which satisfies f.
Also returns a string giving a description of the group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8600">TransitiveGroup(S, f) : [RngIntElt], Program -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Given a sequence S of degrees and a predicate f
(as a function or intrinsic), return the first transitive 
group with degree in S which satisfies f.
Also returns a string giving a description of the group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8601">TransitiveGroups(d: parameters) : RngIntElt -&gt; [GrpPerm]</A></H5>

<PRE>    Warning: BoolElt                    Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Return a sequence of all transitive  groups of degree d.
Some degrees
will produce a very large sequence of groups -- in such cases a warning
will be printed unless the user specifies <TT>Warning := false</TT>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8602">TransitiveGroups(S: parameters) : [RngIntElt] -&gt; [GrpPerm]</A></H5>

<PRE>    Warning: BoolElt                    Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Given a sequence S of degrees, return a sequence of all
transitive  groups
with degree in S. The resulting sequence may be very long -- in such cases
a warning will be printed unless the user specifies <TT>Warning := false</TT>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8603">TransitiveGroups(d, f) : RngIntElt, Program -&gt; [GrpPerm]</A></H5>
<BLOCKQUOTE>
Given an integer d and a predicate (function or intrinsic) f, return a
sequence containing all transitive  groups G of degree d
satisfying <TT>f(G) eq true</TT>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8604">TransitiveGroups(S, f) : [RngIntElt], Program -&gt; [GrpPerm]</A></H5>
<BLOCKQUOTE>
Given a sequence S of degrees and a predicate (function or intrinsic) f,
return a sequence containing all transitive  groups G with degree
in S satisfying <TT>f(G) eq true</TT>.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8605">Example <TT>GrpData_Transitive (H71E9)</TT></A></H3>
We apply some of these functions to the degree 8 case.
<P>
<P>
<PRE>
&gt; NumberOfTransitiveGroups(8);
50
&gt; TransitiveGroup(8, 3);
Permutation group acting on a set of cardinality 8
    (1, 2)(3, 4)(5, 6)(7, 8)
    (1, 4)(2, 3)(5, 8)(6, 7)
    (1, 8)(2, 7)(3, 6)(4, 5)
E(8) = 2[x]2[x]2
&gt; S := TransitiveGroups(8, IsPrimitive);
&gt; #S;
7
&gt; S;
[
    Permutation group acting on a set of cardinality 8
        (1, 8)(2, 3)(4, 5)(6, 7)
        (1, 3)(2, 8)(4, 6)(5, 7)
        (1, 5)(2, 6)(3, 7)(4, 8)
        (1, 2, 6, 3, 4, 5, 7),
    Permutation group acting on a set of cardinality 8
        (1, 8)(2, 3)(4, 5)(6, 7)
        (1, 3)(2, 8)(4, 6)(5, 7)
        (1, 5)(2, 6)(3, 7)(4, 8)
        (1, 2, 6, 3, 4, 5, 7)
        (1, 2, 3)(4, 6, 5),
    Permutation group acting on a set of cardinality 8
        (1, 2, 3, 4, 5, 6, 8)
        (1, 2, 4)(3, 6, 5)
        (1, 6)(2, 3)(4, 5)(7, 8),
    Permutation group acting on a set of cardinality 8
        (1, 2, 3, 4, 5, 6, 8)
        (1, 3, 2, 6, 4, 5)
        (1, 6)(2, 3)(4, 5)(7, 8),
    Permutation group acting on a set of cardinality 8
        (1, 8)(2, 3)(4, 5)(6, 7)
        (1, 3)(2, 8)(4, 6)(5, 7)
        (1, 5)(2, 6)(3, 7)(4, 8)
        (1, 2, 6, 3, 4, 5, 7)
        (1, 2, 3)(4, 6, 5)
        (1, 2)(5, 6),
    Permutation group acting on a set of cardinality 8
        (1, 2)(3, 4, 5, 6, 7, 8)
        (1, 2, 3),
    Permutation group acting on a set of cardinality 8
        (1, 2, 3, 4, 5, 6, 7, 8)
        (1, 2)
]
</PRE>
<HR>
<H4><A NAME = "8606">Processes</A></H4>

<P>
<P>
<P>
A transitive group process enables iteration over all transitive 
groups of specified degrees satisfying a given predicate, without
having to create and store all such groups together.
<P>
The intrinsic function <TT>TransitiveGroupProcess</TT> may be used to 
create a transitive group process in Magma.
The standard process functions <TT>IsEmpty</TT>, <TT>Current</TT>,
<TT>CurrentLabel</TT> and <TT>Advance</TT> can then be applied to the process.
<P>
<P>


<P>
<H5><A NAME = "8607">TransitiveGroupProcess(d) : RngIntElt -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a group process which will iterate though all transitive 
groups of degree d.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8608">TransitiveGroupProcess(S) : [RngIntElt] -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process which will iterate though all transitive 
groups with degree in the sequence S.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8609">TransitiveGroupProcess(d, f) : RngIntElt, Program -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process which will iterate though all transitive 
groups with degree d which satisfy the predicate f.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8610">TransitiveGroupProcess(S, f) : [RngIntElt], Program -&gt; Process</A></H5>
<BLOCKQUOTE>
Return a process which will iterate though all transitive 
groups with degree in the sequence S which satisfy the predicate f.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8611">IsEmpty(p) : Process -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the process p has passed its last group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8612">Current(p) : Process -&gt; GrpPerm, MonStgElt</A></H5>
<BLOCKQUOTE>
Return the current group of the process p, as well as a description
of the group.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8613">CurrentLabel(p) : Process -&gt; RngIntElt, RngIntElt</A></H5>
<BLOCKQUOTE>
Return the label of the current group of the process p.
That is, return d and  n such that the current group is
<TT>TransitiveGroup(d, n)</TT>.
<P>
</BLOCKQUOTE>
<H5><A NAME = "8614">Advance(~p) : Process -&gt;</A></H5>
<BLOCKQUOTE>
Move the process p to its next group.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8615">Example <TT>GrpData_TransitiveProcess (H71E10)</TT></A></H3>
The use of processes is illustrated by the following code, in which the
orders of all transitive groups of degree 5 are listed.
<P>
<P>
<PRE>
&gt; p := TransitiveGroupProcess(5);            
&gt; while not IsEmpty(p) do
&gt;     CurrentLabel(p), #Current(p);
&gt;     Advance(~p);
&gt; end while;
5 1 5
5 2 10
5 3 20
5 4 60
5 5 120
</PRE>
<HR>
<H4><A NAME = "8616">Transitive Group Identification</A></H4>

<P>
<P>
<P>
Given a transitive group G whose degree is at most 30,
it is possible to obtain the number of the group in the transitive groups
database which is isomorphic to G.
<P>
<P>


<H5><A NAME = "8617">TransitiveGroupIdentification(G) : GrpPerm -&gt; RngIntElt, RngIntElt</A></H5>

<PRE>    Raw: BoolElt                        Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
The number (and degree) of the group in the transitive groups
database which is isomorphic to the transitive group G.
<P>
If the optional parameter <TT>Raw</TT> is set to <TT>false</TT>, a third value is
returned. In this case, the third value is a permutation conjugating the 
given group to the copy in the library.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "8618">Example <TT>GrpData_TransitiveId (H71E11)</TT></A></H3>
We get a transitive permutation group from the small groups 
database  and identify it as a transitive group.
<P>
<P>
<PRE>
&gt; G := SmallGroup(336, IsTransitive: Search:="Insoluble");
&gt; G;
Permutation group G acting on a set of cardinality 16
  (1, 14, 6, 2, 12, 8, 13, 7)(3, 15, 10, 5, 16, 9, 4, 11)
  (2, 5, 6)(3, 10, 9)(4, 15, 16)(7, 11, 13)
&gt; TransitiveGroupIdentification(G : Raw := false);
715 16 (1, 16, 3, 4, 2, 11, 5, 6, 9, 8, 13, 10)(7, 12, 15)
&gt; n, d, p := $1;
&gt; G^p eq TransitiveGroup(d, n);
true
</PRE>
We found it to be group 715 of degree 16.
<HR>
<PRE></PRE> <A  HREF = "text750.htm">[Next]</A><A  HREF = "text748.htm">[Prev]</A> <A  HREF = "text750.htm">[Right]</A> <A  HREF = "text748.htm">[Left]</A> <A  HREF = "text742.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>