<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Graph Databases and Graph  Generation</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1781.htm">[Next]</A><A  HREF = "text1805.htm">[Prev]</A> <A  HREF = "text1781.htm">[Right]</A> <A  HREF = "text1805.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20003">Graph Databases and Graph  Generation</A></H3>

<P>
<P>
<P>
Magma provides interfaces to some databases of certain graphs of interest.
These databases are not provided by default with Magma, but may be
downloaded from the optional databases section of the Magma website.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1806.htm#20004">Strongly Regular Graphs</A>
<LI> <A  HREF = "text1806.htm#20016">Small Graphs</A>
<LI> <A  HREF = "text1806.htm#20027">Generating Graphs</A>
<LI> <A  HREF = "text1806.htm#20031">A General Facility</A>
</UL>
<H4><A NAME = "20004">Strongly Regular Graphs</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
A catalogue of strongly regular graphs 
  is available.
This catalogue has been put together from various 
  sources by B. McKay  and can be found
  <a  href="http://cs.anu.edu.au/~bdm/data/">here.</a>
Graphs in the database are indexed by a sequence of four parameters.
They are, in order: the order of the graph,
its degree, the number of common neighbours to each pair
of adjacent vertices, and the number of common neighbours to each
pair of non-adjacent vertices.


<H5><A NAME = "20005">StronglyRegularGraphsDatabase() : -&gt; DB</A></H5>
<BLOCKQUOTE>
Opens the database of strongly regular graphs.
</BLOCKQUOTE>
<H5><A NAME = "20006">Classes(D) : DB -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns all the parameter sequences used to index the graphs 
  in the database D.
</BLOCKQUOTE>
<H5><A NAME = "20007">NumberOfClasses(D) : DB -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the number of "classes" of graphs in the database D.
</BLOCKQUOTE>
<H5><A NAME = "20008">NumberOfGraphs(D) : DB -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the number of graphs in the database D.
</BLOCKQUOTE>
<H5><A NAME = "20009">NumberOfGraphs(D, S) : DB, SeqEnum -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the number of graphs in the database D with parameter sequence S.
</BLOCKQUOTE>
<H5><A NAME = "20010">Graphs(D, S) : DB, SeqEnum -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns (in a sequence) all the graphs in the database D with parameter
sequence  S.
</BLOCKQUOTE>
<H5><A NAME = "20011">Graph(D, S, i) : DB, SeqEnum, RngIntElt  -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Returns the ith graph in the database D with parameter sequence S.
</BLOCKQUOTE>
<H5><A NAME = "20012">RandomGraph(D) : DB -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Returns a random graph in the database D.
</BLOCKQUOTE>
<H5><A NAME = "20013">RandomGraph(D, S) : DB, SeqEnum -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Returns a random graph in the database D with parameter sequence S.
</BLOCKQUOTE>
<H5><A NAME = "20014">for G in D do ... end for;</A></H5>
<BLOCKQUOTE>
The database of strongly regular graphs may appear 
   as the range in the <TT>for</TT>-statement.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20015">Example <TT>Graph_StronglyRegularGraphs (H155E22)</TT></A></H3>
The following few statements illustrate the basic access
functions to the database of strongly regular graphs.
<P>
<P>
<PRE>
&gt; D :=  StronglyRegularGraphsDatabase();
&gt; Cs := Classes(D);
&gt; Cs;
[
  [ 25, 8, 3, 2 ],
  [ 25, 12, 5, 6 ],
  [ 26, 10, 3, 4 ],
  [ 27, 10, 1, 5 ],
  [ 28, 12, 6, 4 ],
  [ 29, 14, 6, 7 ],
  [ 35, 16, 6, 8 ],
  [ 35, 14, 4, 6 ],
  [ 36, 15, 6, 6 ],
  [ 37, 18, 8, 9 ],
  [ 40, 12, 2, 4 ]
]
&gt; assert NumberOfClasses(D) eq #Cs;
&gt; 
&gt; NumberOfGraphs(D);
43442
&gt; 
&gt; for i in [1..#Cs] do
&gt; NumberOfGraphs(D, Cs[i]);
&gt; end for;
1
15
10
1
4
41
3854
180
32548
6760
28
&gt; 
&gt; gs := Graphs(D, Cs[2]);
&gt; 
&gt; g :=  Graph(D, Cs[2], Random(1, NumberOfGraphs(D, Cs[2])));
</PRE>
<HR>
<H4><A NAME = "20016">Small Graphs</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
An enumeration of small graphs with various properties has been created
by B. McKay and may be found
  <a  href="http://cs.anu.edu.au/~bdm/data/graphs.html">here.</a>Certain of these databases are available from within Magma:
Simple graphs, Eulerian graphs, planar connected graphs, and
self-complementary graphs.


<H5><A NAME = "20017">Creation of Small Graph Databases</A></H5>



<H5><A NAME = "20018">SmallGraphDatabase(n : parameters) : RngIntElt -&gt; DB</A></H5>

<PRE>    IncludeDisconnected: Bool           Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Opens the database of simple graphs with n vertices, 2 &le;n &le;10.
If the optional parameter <TT>IncludeDisconnected</TT> is set to true
then the database will also include non-connected graphs.
</BLOCKQUOTE>
<H5><A NAME = "20019">EulerianGraphDatabase(n : parameters) : RngIntElt -&gt; DB</A></H5>

<PRE>    IncludeDisconnected: Bool           Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Opens the database of Eulerian graphs with n vertices, 3 &le;n &le;11.
If the optional parameter <TT>IncludeDisconnected</TT> is set to true
then the database will also include non-connected graphs.
The allowed range of n for non-connected graphs is 2 &le;n &le;12.
</BLOCKQUOTE>
<H5><A NAME = "20020">PlanarGraphDatabase(n) : RngIntElt -&gt; DB</A></H5>
<BLOCKQUOTE>
Opens the database of planar connected graphs with n vertices,
2 &le;n &le;11.
</BLOCKQUOTE>
<H5><A NAME = "20021">SelfComplementaryGraphDatabase(n) : RngIntElt -&gt; DB</A></H5>
<BLOCKQUOTE>
Opens the database of self-complementary graphs with n vertices,
n &isin;{4, 5, 8, 9, 12, 13, 16, 17, 20}.
For n = 20 this is not a complete enumeration.
</BLOCKQUOTE>
<H5><A NAME = "20022">Access functions</A></H5>



<H5><A NAME = "20023"># D : DB -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Returns the number of graphs in the database D.
</BLOCKQUOTE>
<H5><A NAME = "20024">Graph(D, i) : DB, RngIntElt -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Returns the ith graph in the database D.
</BLOCKQUOTE>
<H5><A NAME = "20025">Random(D) : DB -&gt; GrphUnd</A></H5>
<BLOCKQUOTE>
Returns a random graph from the database D.
</BLOCKQUOTE>
<H5><A NAME = "20026">for G in D do ... end for;</A></H5>
<BLOCKQUOTE>
A database of small graphs may appear as the range in the <TT>for</TT>-statement.
</BLOCKQUOTE>
<H4><A NAME = "20027">Generating Graphs</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
We provide an interface to a graph generation programme, also due to 
B. McKay (see <A  HREF = "text1781.htm#bib_bdm_graph_gen">[McK98]</A>).
For the time being, users wanting to benefit from this facility
  must download the generation programme themselves directly from 
  <a  href="http://cs.anu.edu.au/~bdm/nauty/">http://cs.anu.edu.au/~bdm/nauty/</a>
<P>
<B>Important restriction:</B>
Since this program runs within a Unix pipe it is only
available to users running Magma on a Unix platform.
<P>
<P>
<P>
<B>And a note of caution:</B>
When the graph generation programme is used to generate
  reasonably large graphs (n &gt; 17) it can be observed 
  that the procedure of closing down the pipe (ie. closing
  the stream) may take some time.
This will happen when the closing down attempt is made before 
  the programme has completed the generation of all the graphs.


<H5><A NAME = "20028">GenerateGraphs(n : parameters) : RngIntElt -&gt; File</A></H5>
<BLOCKQUOTE>
Opens a pipe to the graph generation programme to generate
all graphs of order n.
Only available on Unix platforms.
<P>
The <TT>GenerateGraphs</TT> function allows the user to drive 
the generation programme via a set of parameters.
These parameters are described below.
<P>
Once the generation programme has been downloaded 
  from
<a  href="http://cs.anu.edu.au/~bdm/nauty/">http://cs.anu.edu.au/~bdm/nauty/</a>
  and compiled (using <TT>make geng</TT>), the resulting 
  executable (named <TT>geng</TT> -- 
  it is <I>compulsory</I> that the resulting executable's name be <TT>geng</TT>) 
  can be placed   anywhere in the user's directory tree.
The  environment variable <TT>MAGMA_NAUTY</TT> <I>must</I> then be set to
  the path where the executable/command <TT>geng</TT> is to be found.
<P>
<P>
<P>
<PRE>
     FirstGraph: RngIntElt               Default: 1
</PRE>
Reading of the generated graphs starts at the <TT>FirstGraph</TT>-th
  graph.
<P>
<P>
<PRE>
     MinEdges: RngIntElt                 Default: 
</PRE>
Generate graphs with minimum number of edges <TT>MinEdges</TT>.
<P>
<P>
<PRE>
     MaxEdges: RngIntElt                 Default: 
</PRE>
Generate graphs with maximum number of edges <TT>MaxEdges</TT>.
<P>
<P>
<PRE>
     Classes: RngIntElt                  Default: 1
</PRE>
Divide the generated graphs into disjoint <TT>Classes</TT> classes 
  of very approximately equal size.
<P>
<P>
<P>
<PRE>
     Class: RngIntElt                    Default: 1
</PRE>
When generated graphs are divided into disjoint <TT>Classes</TT> classes,
  write only the <TT>Class</TT>th class.
<P>
<P>
<PRE>
     Connected: BoolElt                  Default: <TT>false</TT>
</PRE>
Only generate connected graphs.
<P>
<P>
<PRE>
     Biconnected: BoolElt                Default: <TT>false</TT>
</PRE>
Only generate biconnected graphs.
<P>
<P>
<PRE>
     TriangleFree: BoolElt               Default: <TT>false</TT>
</PRE>
Only generate triangle--free graphs.
<P>
<P>
<PRE>
     FourCycleFree: BoolElt              Default: <TT>false</TT>
</PRE>
Only generate 4--cycle--free graphs.
<P>
<P>
<PRE>
     Bipartite: BoolElt                  Default: <TT>false</TT>
</PRE>
Only generate bipartite graphs.
<P>
<P>
<PRE>
     MinDeg: RngIntElt                   Default: 
</PRE>
Specify a lower bound for the minimum degree.
<P>
<P>
<PRE>
     MaxDeg: RngIntElt                   Default: 
</PRE>
Specify an upper bound for the maximum degree.
<P>
<P>
<PRE>
     Canonical: BoolElt                  Default: <TT>false</TT>
</PRE>
Canonically label output graphs.
<P>
<P>
<PRE>
     SparseRep: BoolElt                  Default: <TT>false</TT>
</PRE>
If <TT>true</TT>, generate the graphs in Sparse6 format (see below).
</BLOCKQUOTE>
<H5><A NAME = "20029"></A><A NAME = "Graph:NextGraph">NextGraph</A>(F: parameters) : File -&gt; BoolElt, GrphUnd</H5>

<PRE>    SparseRep: Bool                     Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Returns <TT>true</TT> if and only if file F is not at the end.
In this case the next graph is returned as well.
<P>
Since <TT>NextGraph</TT> can in principle take as an argument
  any Magma  object of type <TT>File</TT>, the following
  restriction applies to the <TT>File</TT> F:
The graphs in F <I>must</I> be in either 
  of the output formats Graph6 or Sparse6.
Details on the Graph6 and Sparse6 format can be found
  <a  href="http://cs.anu.edu.au/~bdm/data/formats.html">here.</a> 
If SparseRep is <TT>true</TT> then the resulting graph will have a sparse 
  representation.
This of course is of special interest if the graphs read from 
  F are also in Sparse6 format.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20030">Example <TT>Graph_GraphGeneration (H155E23)</TT></A></H3>
The following statements should help clarify the usage of the 
graph generation programme.
<P>
<P>
<PRE>
&gt; F := GenerateGraphs (12:
&gt;     FirstGraph:= 10,
&gt;     Connected:= true,
&gt;     Biconnected:= true,
&gt;     TriangleFree:= true,
&gt;     FourCycleFree:= true,
&gt;     Bipartite:= true,
&gt;     MinDeg:= 1,
&gt;     MaxDeg:= 9
&gt; );
</PRE>
We'll read all the graphs from the 10th graph onwards
(one can check that 28 graphs have been generated):
<P>
<P>
<PRE>
&gt; count := 0;
&gt; while true do
&gt;     more := NextGraph(F);
&gt;     if more then
&gt;       count +:= 1;
&gt;     else
&gt;       break;
&gt;     end if;
&gt; end while;
&gt; count;
19
</PRE>
If one wants to work with sparse graphs,  it is 
  recommended to proceed as follows:
<P>
<P>
<PRE>
&gt; F := GenerateGraphs (6: SparseRep := true);
&gt; count := 0;
&gt; while true do
&gt;     more := NextGraph(F: SparseRep := true);
&gt;     if more then
&gt;       count +:= 1;
&gt;     else
&gt;       break;
&gt;     end if;
&gt; end while;
&gt; count;
156
</PRE>
<HR>
<H4><A NAME = "20031">A General Facility</A></H4>

<P>
<P>
<P>
<P>
<P>
<P>
In order to give users more flexibility in dealing 
  with certain graph files the Magma  function 
  <TT>OpenGraphFile</TT> is provided.
It allows one to open either a graph file or a pipe 
  to a graph generation programme.
Since in both cases (file or Unix pipe) the outcome
  is the access to a stream of graphs, we henceforth 
  refer to the graphs to be read as a <I>graph stream</I>.
<P>
<P>
<P>
<B>The usual restriction:</B>
The <TT>OpenGraphFile</TT> which opens  a pipe 
  is only available to users running Magma on a Unix platform.
<P>
<P>
<P>
<B>Accessing and reading the graph stream:</B>
Reading the graph stream is achieved by the above described 
  access function <A  HREF = "text1806.htm#Graph:NextGraph">NextGraph</A>.
As mentioned there, the graphs in the graph stream <I>must</I> be 
  in either of the output formats Graph6 or Sparse6.
This is why <TT>OpenGraphFile</TT> is restricted to streams 
  of graphs in format Graph6 or Sparse6.
<P>
Details on the Graph6 and Sparse6 format can be found 
  <a  href="http://cs.anu.edu.au/~bdm/data/formats.html.">here.</a>


<H5><A NAME = "20032">OpenGraphFile(s, f, p):  MonStgElt, RngIntElt, RngIntElt -&gt; File</A></H5>
<BLOCKQUOTE>
Opens a graph file/pipe at position p.
If the stream to be opened is a Unix pipe then the string s <I>must</I>
  have the format "cmd command" where command stands for the command
  to run including necessary parameters.
If the stream to be opened is a file the string s has format
  "filename".
<P>
The integer f indicates that the record length is fixed, which
   is true for streams in Graph6 format with every graph having the
   same order.  
This permits rapid positioning to position p in 
   that case.  If in doubt, use f = 0.
Also, positioning to 0 or positioning to 1 has the same effect
   of positioning to the start of the stream.
<P>
Opening a pipe is only available on Unix platforms.
The file/pipe F <I>must</I> contain graphs in Graph6 and Sparse6
  format.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "20033">Example <TT>Graph_GraphGeneralAccess (H155E24)</TT></A></H3>
As an example one could download one of the files found 
  <a  href="http://cs.anu.edu.au/~bdm/data/">here.</a>Assuming this has been done, one can then proceed to read
  the graphs in the file:
<P>
<P>
<PRE>
&gt; F := OpenGraphFile("/home/paule/graph/bdm_data/sr251256.g6", 0, 0);
&gt; 
&gt; count := 0;
&gt; more, g := NextGraph(F);
&gt; while more do
&gt; count +:= 1;
&gt; more, g := NextGraph(F);
&gt; end while;
&gt; count;
15
</PRE>
Alternatively one could also drive the graph generation programme
  (or any other suitable programme for that matter)
  described in <A  HREF = "text1806.htm#20027">Generating Graphs</A> using the <TT>OpenGraphFile</TT> access function.
<P>
The graph generation programme's name is <TT>geng</TT> (which can be 
  found 
  <a  href="http://cs.anu.edu.au/~bdm/nauty/">here</a>)
  and has a help facility:
<P>
<P>
<PRE>
&gt; F := OpenGraphFile("cmd /home/paule/graph/bdm_pgr/nauty/geng -help", 0, 0); 

Usage: geng [-cCmtfbd#D#] [-uygsnh] [-lvq] [-x#X#] n [mine[:maxe]] [res/mod] 
[file]

 Generate all graphs of a specified class.

      n : the number of vertices (1..32)
 mine:maxe : a range for the number of edges
              #:0 means '# or more' except in the case 0:0
   res/mod : only generate subset res out of subsets 0..mod-1

     -c : only write connected graphs
     -C : only write biconnected graphs
     -t : only generate triangle-free graphs
     -f : only generate 4-cycle-free graphs
     -b : only generate bipartite graphs
                (-t, -f and -b can be used in any combination)
     -m : save memory at the expense of time (only makes a
                difference in the absence of -b, -t, -f and n &lt;= 30).
     -d# : a lower bound for the minimum degree
     -D# : a upper bound for the maximum degree
     -v : display counts by number of edges
     -l : canonically label output graphs

     -u : do not output any graphs, just generate and count them
     -g : use graph6 output (default)
     -s : use sparse6 output
     -y : use the obsolete y-format instead of graph6 format
     -h : for graph6 or sparse6 format, write a header too

     -q : suppress auxiliary output (except from -v)

  See program text for much more information.
</PRE>
Finally, here is a typical run of this graph generation programme:
<P>
<P>
<PRE>
&gt; F := OpenGraphFile(
&gt; "cmd /home/paule/graph/bdm_pgr/nauty/geng 15 -cCtfb -v", 0, 0);
&gt;A geng -Ctfbd2D14 n=15 e=15-22
&gt;C 4 graphs with 16 edges
&gt;C 45 graphs with 17 edges
&gt;C 235 graphs with 18 edges
&gt;C 294 graphs with 19 edges
&gt;C 120 graphs with 20 edges
&gt;C 13 graphs with 21 edges
&gt;C 1 graphs with 22 edges
&gt;Z 712 graphs generated in 1.38 sec
</PRE>
<PRE></PRE> <A  HREF = "text1781.htm">[Next]</A><A  HREF = "text1805.htm">[Prev]</A> <A  HREF = "text1781.htm">[Right]</A> <A  HREF = "text1805.htm">[Left]</A> <A  HREF = "text1782.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>