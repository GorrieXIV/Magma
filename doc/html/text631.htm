<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creation of a Permutation Group</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text632.htm">[Next]</A><A  HREF = "text630.htm">[Prev]</A> <A  HREF = "text632.htm">[Right]</A> <A  HREF = "text630.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "6876">Creation of a Permutation Group</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text631.htm#6877">Construction of the Symmetric  Group</A>
<LI> <A  HREF = "text631.htm#6882">Construction of a Permutation</A>
<LI> <A  HREF = "text631.htm#6891">Construction of a General Permutation Group</A>
</UL>
<H4><A NAME = "6877">Construction of the Symmetric  Group</A></H4>



<H5><A NAME = "6878">Sym(n) : RngIntElt -&gt; GrpPerm</A></H5>
<H5>SymmetricGroup(n) : RngIntElt -&gt; GrpPerm</H5>
<BLOCKQUOTE>
Given an integer n &ge;1, create the generic permutation group acting on
the natural G-set &Omega; = { 1, 2, ..., n }, i.e. the symmetric
group Sym(&Omega;). Initially, only a structure table is created for Sym(n),
so that, in particular, generators are not defined. This function is normally
used to provide a context for the creation of elements and subgroups of
Sym(n). If structural computation is attempted with the group created
by <TT>Sym(n)</TT>, then generators will be created dynamically. 
</BLOCKQUOTE>
<H5><A NAME = "6879">Sym(X) : Set -&gt; GrpPerm</A></H5>
<H5>SymmetricGroup(X) : Set -&gt; GrpPerm</H5>
<BLOCKQUOTE>
Given a finite set X of cardinality n &ge;1, create the generic group
G of permutations of X -- the symmetric group Sym(X). Initially, only
a structure table is created for Sym(X), so that, in particular, generators
are not defined. This function is normally used to provide a context for the
creation of elements and subgroups of Sym(X). If structural computation
is attempted with the group created by <TT>Sym(X)</TT>, then generators
will be created dynamically. 
Although the group G is defined on the set X, G is
represented internally as a group of permutations of the set 
&Omega; = { 1, 2, ..., n }. Translation between X and &Omega;
is done at input/output time. The precise representation can be found by
using the <TT>Labelling</TT> function. If X is an indexed set then the
indexing of elements of X determines the correspondence.
</BLOCKQUOTE>
<H5><A NAME = "6880">StandardGroup(G) : GrpPerm -&gt; GrpPerm, Map</A></H5>
<BLOCKQUOTE>
Return a group H isomorphic to G, but acting on the standard 
set { 1, ..., n }. This function is useful when 
the natural G-set for G is not the standard set. If the natural
G-set for G is the standard set, G is returned. 
The isomorphism from G to H is also returned.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "6881">Example <TT>GrpPerm_Sym (H63E1)</TT></A></H3>
We define the symmetric group on the set of strings
{ "a" "b" "c" "d" }:
<P>
<P>
<PRE>
&gt; S4 := Sym({ "a", "b", "c", "d" });
&gt; S4;
Symmetric group S4 acting on a set of cardinality 4
Order = 24 = 2^3 * 3
&gt; GSet(S4);
GSet{ at c, b, a, d atbrace
</PRE>
We define the symmetric group of degree 10 acting on the
set { 0, 1, ..., 9}.
<P>
<P>
<PRE>
&gt; G := Sym({ 0..9 });
&gt; G;
Symmetric group G acting on a set of cardinality 10
Order = 3628800 = 2^8 * 3^4 * 5^2 * 7
&gt; GSet(G);
GSet{ at 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 atbrace
</PRE>
<HR>
<H4><A NAME = "6882">Construction of a Permutation</A></H4>

<P>
<P>
Throughout this subsection we shall assume that the permutation group G
has natural G-set X.


<H5><A NAME = "6883">elt&lt; G | L &gt; : GrpPerm, List(Elt) -&gt; GrpPermElt</A></H5>
<BLOCKQUOTE>
Given a permutation group G defined as acting on the set X =
{ x<sub>1</sub>, ..., x<sub>n</sub>} of cardinality n &ge;1, and a
list L of distinct elements a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub> of X,
construct the element g of G defined by x<sub>i</sub> -&gt; a<sub>i</sub>, for i = 1, ..., n. Unless G is known to be the
generic permutation group of degree n, the permutation will
be tested for membership of G, and if g is not an element
of G, the function will fail. If g does lie in G, g
will have G as its parent. Since the membership test may
involve constructing a base and strong generating set for G,
this constructor may occasionally be very costly. Hence, a
permutation g should be defined as an element of a subgroup
of the generic group only when membership of G is required by
subsequent operations involving g.
</BLOCKQUOTE>
<H5><A NAME = "6884">G ! Q : GrpPerm, [ Elt ] -&gt; GrpPermElt</A></H5>
<BLOCKQUOTE>
Given a permutation group G defined as acting on the set
X = { x<sub>1</sub>, ..., x<sub>n</sub>} of cardinality n &ge;1, and a
sequence Q = [a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>n</sub>] of distinct elements of X,
construct the permutation g of X defined by x<sub>i</sub> -&gt; a<sub>i</sub>,
for i = 1, ..., n. This permutation will have G as its parent
structure. As in the case of the <TT>elt</TT>-constructor, the operation
will fail if g is not an element of G and the same observations
concerning the cost of membership testing apply.
</BLOCKQUOTE>
<H5><A NAME = "6885">G ! (...)(...)...(...) : GrpPerm, Cycles -&gt; GrpPermElt</A></H5>
<BLOCKQUOTE>
Given a permutation group G defined as acting on the set 
X={x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub>}, construct the
permutation g corresponding to the given product of cycles.
Adjacent letters must be separated by commas. Further,
<I>cycles of length one must be omitted</I>. The coercion
operator ! may be omitted only within the context of the
standard constructors <TT>sub&lt;&gt;</TT>, <TT>ncl&lt;&gt;</TT> and <TT>quo&lt;&gt;</TT>.
Once the permutation g has been constructed, it will be tested 
for membership in G. If it is not a member, the construction fails.
</BLOCKQUOTE>
<H5><A NAME = "6886">G ! \(...)(...)...(...) : GrpPerm, LiteralCycles -&gt; GrpPermElt</A></H5>
<BLOCKQUOTE>
Given a permutation group G defined as acting on the set 
X={1 .. n}, construct the
permutation g corresponding to the given product of literal cycles
of integers.  Adjacent integers must be separated by commas.
Once the permutation g has been constructed, it will be tested 
for membership in G. If it is not a member, the construction fails.
This construction is strongly recommended when creating large permutations
to avoid overhead in constructing unnecessarily large parse trees by
Magma.
</BLOCKQUOTE>
<H5><A NAME = "6887">G ! Q : GrpPerm, SeqEnum[SetIndx] -&gt; GrpPermElt</A></H5>
<BLOCKQUOTE>
Given a permutation group G defined as acting on the set 
X={1 .. n}, construct the
permutation g corresponding to the given product of cycles.  
The indexed sets in Q must be disjoint subsets of X, which are
interpreted as the disjoint cycles of the permutation being constructed.
Cycles of length 1 may be omitted, but do not have to be omitted.
Once the permutation g has been constructed, it will be tested 
for membership in G. If it is not a member, the construction fails.
Note that the <TT>Cycle</TT> function produces results suitable for
use as members of Q.
</BLOCKQUOTE>
<H5><A NAME = "6888">ElementToSequence(g) : GrpPermElt -&gt; [ Elt ]</A></H5>
<H5>Eltseq(g) : GrpPermElt -&gt; [ Elt ]</H5>
<BLOCKQUOTE>
The sequence Q of images of the G-set of g.  In particular, it
has the property that <TT>Parent(g)!Eltseq(g) eq g</TT>.
</BLOCKQUOTE>
<H5><A NAME = "6889">Identity(G) : Grp -&gt; GrpPermElt</A></H5>
<H5>Id(G) : Grp -&gt; GrpPermElt</H5>
<H5>G ! 1 : Grp, RngIntElt -&gt; GrpPermElt</H5>
<BLOCKQUOTE>
Construct the identity permutation in the permutation group G.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "6890">Example <TT>GrpPerm_Permutations (H63E2)</TT></A></H3>
The three different constructions are illustrated by the following
code, which assigns to each of the variables x, y and z the permutation
(1)(2,3)(4,5,6).
<P>
<P>
<PRE>
&gt; S6 := Sym(6);
&gt; x := elt&lt;S6 | 1,3,2,5,6,4&gt;;
&gt; x;
(2, 3)(4, 5, 6)
&gt; y := S6![1,3,2,5,6,4];
&gt; y;
(2, 3)(4, 5, 6)
&gt; z := S6!(2,3)(4,5,6);
&gt; z;
(2, 3)(4, 5, 6)
&gt; S6!1;
Id(S6)
</PRE>
<HR>
<H4><A NAME = "6891">Construction of a General Permutation Group</A></H4>



<H5><A NAME = "6892">PermutationGroup&lt; X | L &gt; : Set, List -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
Suppose that the cardinality of the set X is n.  Construct the permutation
group G acting on the set X generated by the permutations defined by the
list L. A term of the list L must be an object of one of the following
types:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A sequence of n elements of X defining a permutation of X
(note that this is only well-defined when X is an indexed set);
<DT>(b)</DT><DD>A set or sequence of sequences of type (a);
<DT>(c)</DT><DD>An element of Sym(X);
<DT>(d)</DT><DD>A set or sequence of elements of Sym(X);
<DT>(e)</DT><DD>A subgroup of Sym(X);
<DT>(f)</DT><DD>A set or sequence of subgroups of Sym(X).
<P>
<P>
</DL>
Each element or group specified by the list must belong to the
<I>same</I> generic permutation group. The group G will
be constructed as a subgroup of some group which contains each
of the elements and groups specified in the list.
<P>
The generators of G consist of the elements specified by the
terms of the list L together with the stored generators for
groups specified by terms of the list.  
<P>
The <TT>PermutationGroup</TT> constructor is shorthand for the two statements:
<P>
<TT>SX := Sym(X);
G := sub&lt; SX | L &gt;;
<P>
</TT>
<P>
where <TT>sub&lt; ... &gt;</TT> is the subgroup constructor described in
the next subsection.
</BLOCKQUOTE>
<H5><A NAME = "6893">PermutationGroup&lt; n | L &gt; : RngIntElt, List -&gt; GrpPerm</A></H5>
<BLOCKQUOTE>
 Construct the permutation group G acting on the set X = { 1, 2, ..., n } generated by the permutations defined by the
list L. The possibilities for the terms of the list L are the same as
for the constructor <TT>PermutationGroup&lt; X | L &gt;</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "6894">Example <TT>GrpPerm_Hessian (H63E3)</TT></A></H3>
The Hessian group generated by the permutations
(1, 2, 4)(5, 6, 8)(3, 9, 7) and (4, 5, 6)(7, 9, 8) may be created by the
statement:
<P>
<P>
<PRE>
&gt; H := PermutationGroup&lt; 9 | (1,2,4)(5,6,8)(3,9,7), (4,5,6)(7,9,8) &gt;;
&gt; H;
Permutation group H acting on a set of cardinality 9
       (1, 2, 4)(3, 9, 7)(5, 6, 8)
       (4, 5, 6)(7, 9, 8)
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text632.htm">[Next]</A><A  HREF = "text630.htm">[Prev]</A> <A  HREF = "text632.htm">[Right]</A> <A  HREF = "text630.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>