<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Introduction</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text140.htm">[Next]</A><A  HREF = "text138.htm">[Prev]</A> <A  HREF = "text140.htm">[Right]</A> [____] <A  HREF = "text138.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "950">Introduction</A></H3>

<P>
<P>
Mappings play a fundamental role in algebra and, indeed,
throughout mathematics. Reflecting this importance,
mappings are one of the fundamental datatypes in our 
language. The most general way to define a mapping f: A -&gt; B
in a programming language is to write a <I>function</I>
which, given any element of 
A, will return its image under f in B.
While this approach to the 
definition of mappings is completely general, it is desirable to have
mappings as an independent datatype. It is then possible to
provide a very compact notation for specifying important
classes of mappings such as homomorphisms.
Further, a range of operations
peculiar to the mapping type can 
be provided.
<P>
Mappings are created either through use of <I>mapping constructors</I>
as described in this Chapter,
or through use of certain standard functions that return mappings as either
primary or secondary values.
<P>
All mappings are objects in the Magma category <TT>Map</TT>.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text139.htm#951">The Map Constructors</A>
<LI> <A  HREF = "text139.htm#952">The Graph of a Map</A>
<LI> <A  HREF = "text139.htm#953">Rules for Maps</A>
<LI> <A  HREF = "text139.htm#954">Homomorphisms</A>
<LI> <A  HREF = "text139.htm#955">Checking of Maps</A>
</UL>
<H4><A NAME = "951">The Map Constructors</A></H4>

<P>
<P>
There are three main mapping constructors: the general map
constructor <TT>map&lt; &gt;</TT>, the homomorphism 
constructor <TT>hom&lt; &gt;</TT>, and the partial map
constructor <TT>pmap&lt; &gt;</TT>.
The general form of all constructors is the same: inside the angle
brackets there are two components separated by a pipe <TT>|</TT>.
To the left the user specifies a <I>domain</I> A and a <I>codomain</I>
B, separated by <TT>-&gt;</TT>;
to the right of the pipe the user specifies how images are obtained
for elements of the domain. The latter can be done in one of several ways:
one specifies either the <I>graph</I> of the map, or a <I>rule</I>
describing how images are to be formed, or for homomorphisms, one
specifies generator images. We will describe each
in the next subsections. The result is something like <TT>map&lt; A -&gt; B | expr &gt;</TT>.
<P>
The domain and codomain of the map can be arbitrary magmas. When a full
map (as opposed to a partial map) is constructed 
by use of a graph, the domain is necessarily finite.
<P>
The main difference between maps and partial maps is that a partial
map need not be defined for every element of the domain. The main
difference between these two types of map and homomorphisms is that
the latter are supposed to provide <I>structure-preserving</I> maps
between algebraic structures. On the one hand this makes it possible
to allow the specification of images for homomorphisms in a different
fashion: homomorphism can be given via
<I>images</I> for <I>generators</I> of the domain. On the other
hand homomorphisms are restricted to cases where domain and
(image in the) codomain have a similar structure.
The generator image form only makes sense
for domains that are <I>finitely presented</I>.
Homomorphisms are described in more detail below.


<H4><A NAME = "952">The Graph of a Map</A></H4>

<P>
<P>
Let A and B be structures. A <I>subgraph</I> of the cartesian product 
C = A x B is a subset G of C such that each element of A 
appears at most once among the first components of the pairs
&lt;a, b&gt; of G. A subgraph having the additional property that every 
element of A appears as the first component of some pair &lt;a, b&gt; of G 
is called a <I>graph</I> of A x B.
<P>
A mapping between A and B can be identified with a graph
G of A x B, a partial map can be identified with a subgraph.
We now describe how a graph may be represented in the context of the map
constructor. An element of the graph of A x B can be
given either as a <I>tuple</I> <TT>&lt;a, b&gt;</TT>, or as an <I>arrow pair</I>
<TT>a -&gt; b</TT>. The specification of a (sub)graph in a map constructor should then
consist of either a (comma separated) list, a sequence, or a set
of such tuples or arrow pairs (a mixture is permitted).


<H4><A NAME = "953">Rules for Maps</A></H4>

<P>
<P>
The specification of a rule in the map constructor involves a free variable
and an expression, usually involving the free variable, separated by
<TT>:-&gt;</TT>, for example <TT>x :-&gt; 3*x - 1</TT>. The scope of the free variable
is restricted to the map constructor (so the use of x does not interfere
with values of x outside the constructor).
A general expression is allowed in the rule, which may involve
intrinsic or user functions, and even in-line definitions of such functions.


<H4><A NAME = "954">Homomorphisms</A></H4>

<P>
<P>
Probably the most useful form of the map-constructor is the version for
homomorphisms. Most interesting mappings in algebra are homomorphisms, and
if an algebraic structure A belongs to a family of algebraic structures 
which form a variety we have the fundamental result that a homomorphism 
is uniquely determined by the images of any generating set. This provides 
us with a particularly compact way of defining and representing homomorphisms. 
While the syntax of the homomorphism constructor is similar to that 
of the general mapping constructor, the semantics are sometimes different.
<P>
The kind of homomorphism built by the hom-constructor is determined
entirely by the domain: thus, a <I>group</I> homomorphism results
from applying <TT>hom</TT> to a domain A that is one of the types
of group in Magma, a <I>ring</I> homomorphism results when A is a ring,
etc. As a consequence, the requirements on the specification
of homomorphisms are dependent on the category to which A belongs.
Often, the codomain of a homomorphism is required to belong to
the same variety. But even within a category the specification
may depend on the type of structure; for details we refer the reader
to the specific chapters.
<P>
A homomorphism can be specified using either a rule map 
or by generator images.
In the latter case the processor will
seek to express an element as a word  in the generators
of A when asked to compute its image. Thus A needs to be finitely presented.


<H4><A NAME = "955">Checking of Maps</A></H4>

<P>
<P>
It should be pointed out that checking the `correctness' of mappings
can be done to a limited extent only.
If the mapping is given by means of a graph, Magma will check that no
multiple
images are specified, and that an image is given for every element of
the domain (unless a partial map is defined). If a rule is given, it
cannot be checked that it is defined on all of the domain. Also,
it is in general the responsibility of the user to ensure that the images
provided for a <TT>hom</TT> constructor do indeed define a
homomorphism.


<PRE></PRE> <A  HREF = "text140.htm">[Next]</A><A  HREF = "text138.htm">[Prev]</A> <A  HREF = "text140.htm">[Right]</A> [____] <A  HREF = "text138.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>