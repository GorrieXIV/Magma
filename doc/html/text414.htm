<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Group Theoretic Functions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text404.htm">[Next]</A><A  HREF = "text413.htm">[Prev]</A> <A  HREF = "text404.htm">[Right]</A> <A  HREF = "text413.htm">[Left]</A> <A  HREF = "text405.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "4299">Group Theoretic Functions</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text414.htm#4300">Generic Groups</A>
</UL>
<H4><A NAME = "4300">Generic Groups</A></H4>

<P>
<P>
<P>
Quite frequently in computational algebra one constructs a set of 
objects that generate a group under some operation. Generic groups 
are finite groups that are defined by generators that have implicit 
relations.  In order to use them, one has to provide
a function for the multiplication of two elements and one to check
equality. If known, the identity object can also be passed in.
<P>
Generic groups are used in the class field package for the automorphism groups.
A frequent situation is that one knows certain automorphisms (as maps) and
would like to get the group generated by them. If the group is reasonably 
small, this can be done using the functions in this section.
<P>
All functions here rely on the group being small enough to allow complete
enumeration of all elements.
<P>
The main application are situations where multiplication of the actual 
objects is time consuming so one would like to transfer as much as possible
to some abstract finite group. 


<H5><A NAME = "4301">GenericGroup(X) : [] -&gt; GrpFp, Map</A></H5>

<PRE>    Mult: Intrinsic                     Default: '*'</PRE>

<PRE>    Eq: Intrinsic                       Default: 'eq'</PRE>

<PRE>    Id: Any                             Default: </PRE>

<PRE>    SetVerbose("GrpGen", n):            Maximum: 3</PRE>
<BLOCKQUOTE>
Creates the group G generated by the elements of <TT>X</TT>. 
The function assumes
that the group is finite. The second return value is a map from
G onto a list of elements of G which are of the same type as
the elements of <TT>X</TT>.
<P>
Since this function will enumerate all group elements, the group
cannot be too large.
</BLOCKQUOTE>
<H5><A NAME = "4302">AddGenerator(G, x) : GrpFP, . -&gt; BoolElt, GrpFP, Map</A></H5>

<PRE>    SetVerbose("GrpGen", n):            Maximum: 3</PRE>
<BLOCKQUOTE>
Adds a new generator <TT>x</TT> to G. If <TT>x</TT> was already in G,
the value <TT>false</TT> is returned and the other return values are unassigned.
Otherwise, the new group and the corresponding map is returned.
<P>
G has to be a generic group as returned by <TT>GenericGroup</TT>.
<P>
The function applies a version of Dimino's algorithm <A  HREF = "text404.htm#bib_Dimino">[But91a]</A> to find all
elements of G with as few operations as possible.
</BLOCKQUOTE>
<H5><A NAME = "4303">FindGenerators(G) : GrpFP -&gt; []</A></H5>
<BLOCKQUOTE>
Given a generic group G as returned by <TT>GenericGroup</TT>, find a
small set of generators.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text404.htm">[Next]</A><A  HREF = "text413.htm">[Prev]</A> <A  HREF = "text404.htm">[Right]</A> <A  HREF = "text413.htm">[Left]</A> <A  HREF = "text405.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>