<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Subcodes</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1889.htm">[Next]</A><A  HREF = "text1887.htm">[Prev]</A> <A  HREF = "text1889.htm">[Right]</A> <A  HREF = "text1887.htm">[Left]</A> <A  HREF = "text1883.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "21040">Subcodes</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1888.htm#21041">The Subcode Constructor</A>
<LI> <A  HREF = "text1888.htm#21049">Sum, Intersection and Dual</A>
<LI> <A  HREF = "text1888.htm#21053">Membership and Equality</A>
</UL>
<H4><A NAME = "21041">The Subcode Constructor</A></H4>



<H5><A NAME = "21042">sub&lt;C | L&gt; : CodeAdd, List -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given a K-additive linear code C over F, construct the subcode of C, 
generated (over K) by the elements specified by the list L, where L is a 
list of one or more items of the following types:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>An element of C;
<DT>(b)</DT><DD>A set or sequence of elements of C;
<DT>(c)</DT><DD>A sequence of n elements of F, defining an element of C;
<DT>(d)</DT><DD>A set or sequence of sequences of type (c);
<DT>(e)</DT><DD>A subcode of C;</DL>
</BLOCKQUOTE>
<H5><A NAME = "21043">Subcode(C, k) : CodeAdd, RngIntElt -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given an additive code C and an integer k, where k is less than the 
number of generators of C, then return a subcode of C with
k generators.
</BLOCKQUOTE>
<H5><A NAME = "21044">Subcode(C, S) : CodeAdd, { RngIntElt } -&gt; Code</A></H5>
<BLOCKQUOTE>
Suppose C is an additive code and S is a set of positive integers, each 
of which is less than the number of generators of C. The function returns 
the subcode of C generated by the generators of C indexed by S.
</BLOCKQUOTE>
<H5><A NAME = "21045">SubcodeBetweenCode(C1, C2, k) : CodeAdd, CodeAdd, RngIntElt -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given an additive code C<sub>1</sub> and a subcode C<sub>2</sub> of C<sub>1</sub>, return a subcode
of C<sub>1</sub> with k generators containing C<sub>2</sub>.
</BLOCKQUOTE>
<H5><A NAME = "21046">SubcodeWordsOfWeight(C, w) : CodeAdd, RngIntElt -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given a length n additive code C and an integer
which lies in the range [1, n], return the subcode of C generated
by those words of C of weight w.
</BLOCKQUOTE>
<H5><A NAME = "21047">SubcodeWordsOfWeight(C, S) : CodeAdd, { RngIntElt } -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given a length n additive code C and a set S of integers, each of 
which lies in the range [1, n], return the subcode of C generated 
by those words of C whose weights lie in S.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21048">Example <TT>CodeAdd_SubcodeBetweenCode (H163E7)</TT></A></H3>
We give an example of how <TT>SubcodeBetweenCode</TT> may be used to create
a code nested in between a subcode pair.
<P>
<P>
<PRE>
&gt; F&lt;w&gt; := GF(8);
&gt; C1 := AdditiveRepetitionCode(F, GF(2), 6);    
&gt; C1;
[6, 1 : 3, 6] GF(2)-Additive Code over GF(2^3)
Generator matrix:
[  1   1   1   1   1   1]
[  w   w   w   w   w   w]
[w^2 w^2 w^2 w^2 w^2 w^2]
&gt; C3 := AdditiveZeroSumCode(F, GF(2), 6);    
&gt; C3;
[6, 5 : 15, 2] GF(2)-Additive Code over GF(2^3)
Generator matrix:
[  1   0   0   0   0   1]
[  w   0   0   0   0   w]
[w^2   0   0   0   0 w^2]
[  0   1   0   0   0   1]
[  0   w   0   0   0   w]
[  0 w^2   0   0   0 w^2]
[  0   0   1   0   0   1]
[  0   0   w   0   0   w]
[  0   0 w^2   0   0 w^2]
[  0   0   0   1   0   1]
[  0   0   0   w   0   w]
[  0   0   0 w^2   0 w^2]
[  0   0   0   0   1   1]
[  0   0   0   0   w   w]
[  0   0   0   0 w^2 w^2]
&gt; C1 subset C3;
true
&gt; C2 := SubcodeBetweenCode(C3, C1, 11);
&gt; C2;
[6, 3 2/3 : 11] GF(2)-Additive Code over GF(2^3)
Generator matrix:
[  1   0   0   0   1   0]
[  w   0   0   0   w   0]
[w^2   0   0 w^2 w^2 w^2]
[  0   1   0   0   0   1]
[  0   w   0   0   0   w]
[  0 w^2   0   0   0 w^2]
[  0   0   1   0   0   1]
[  0   0   w   0   0   w]
[  0   0 w^2   0   0 w^2]
[  0   0   0   1   0   1]
[  0   0   0   w   0   w]
&gt; (C1 subset C2) and (C2 subset C3);
true
</PRE>
<HR>
<H4><A NAME = "21049">Sum, Intersection and Dual</A></H4>

<P>
<P>
For the following operators, C and D are additive codes defined as subsets 
(or subspaces) of the same R-space F<sup>n</sup>.


<H5><A NAME = "21050">C + D : CodeAdd, CodeAdd -&gt; CodeAdd</A></H5>
<BLOCKQUOTE>
Given two additive codes which have the same length, which are defined over the 
same alphabet, and which have the same coefficient ring F, return the sum of 
these two codes with respect to F.
</BLOCKQUOTE>
<H5><A NAME = "21051">C meet D : Code, Code -&gt; Code</A></H5>
<BLOCKQUOTE>
The intersection of the additive codes C and D.
</BLOCKQUOTE>
<H5><A NAME = "21052">Dual(C) : Code -&gt; Code</A></H5>
<BLOCKQUOTE>
The code that is dual to the code C. For an additive code C, this
is the code generated by the nullspace of C, 
relative to the trace inner product.
</BLOCKQUOTE>
<H4><A NAME = "21053">Membership and Equality</A></H4>



<H5><A NAME = "21054">u in C : ModTupRngElt, CodeAdd -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the vector u of V belongs to the 
additive code C, where V is the generic vector space containing C.
</BLOCKQUOTE>
<H5><A NAME = "21055">u notin C : ModTupRngElt, CodeAdd -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the vector u does not belong to the 
additive code C, where V is the generic vector space containing C.
</BLOCKQUOTE>
<H5><A NAME = "21056">C subset D : Code, Code -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the wordset of the code C is a subset 
of the wordset of the code D. (Either code may possibly be additive).
</BLOCKQUOTE>
<H5><A NAME = "21057">C notsubset D : Code, Code -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the wordset of the code C is not a subset 
of the wordset of the code D. (Either code may possibly be additive).
</BLOCKQUOTE>
<H5><A NAME = "21058">C eq D : Code, Code -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the codes C and D have the same wordsets.
(Either code may possibly be additive). 
</BLOCKQUOTE>
<H5><A NAME = "21059">C ne D : Code, Code -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the codes C and D have different wordsets.
(Either code may possibly be additive). 
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1889.htm">[Next]</A><A  HREF = "text1887.htm">[Prev]</A> <A  HREF = "text1889.htm">[Right]</A> <A  HREF = "text1887.htm">[Left]</A> <A  HREF = "text1883.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>