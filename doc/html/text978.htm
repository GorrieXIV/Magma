<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Group Algebras of p-groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text979.htm">[Next]</A><A  HREF = "text977.htm">[Prev]</A> <A  HREF = "text979.htm">[Right]</A> <A  HREF = "text977.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "11079">Group Algebras of p-groups</A></H3>

<P>
<P>
<P>
There is a special type for the basic algebras which are the 
modular group algebras of p-groups for p a prime. If G 
is a finite p and k is a field of characteristic p, then
the commands <TT>BasicAlgebra(G, k)</TT> and <TT>BasicAlgebra(G)</TT> automatically create a basic algebra of 
type <TT>AlgBasGrpP</TT>. The type is optimized for the 
computation of cohomology rings. Included for this type are 
restriction and inflation maps. Most of the functions for modules
and complexes are the same as for general basic algebras. 



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text978.htm#11080">Access Functions</A>
<LI> <A  HREF = "text978.htm#11087">Projective Resolutions</A>
<LI> <A  HREF = "text978.htm#11093">Cohomology Generators</A>
<LI> <A  HREF = "text978.htm#11097">Cohomology Rings</A>
<LI> <A  HREF = "text978.htm#11100">Restrictions and Inflations</A>
</UL>
<H4><A NAME = "11080">Access Functions</A></H4>



<H5><A NAME = "11081">Group(A) : AlgBasGrpP -&gt; Grp</A></H5>
<BLOCKQUOTE>
The group which defines the algebra A.
</BLOCKQUOTE>
<H5><A NAME = "11082">PCGroup(A) : AlgBasGrpP -&gt; Grp</A></H5>
<BLOCKQUOTE>
The internal PC group of the algebra A.
</BLOCKQUOTE>
<H5><A NAME = "11083">PCMap(A) : AlgBasGrpP -&gt; Map</A></H5>
<BLOCKQUOTE>
The map from <TT>Group(A)</TT> to <TT>PCGroup(A)</TT> for an algebra A.
</BLOCKQUOTE>
<H5><A NAME = "11084">AModule(M) : ModGrp -&gt; ModAlg</A></H5>
<BLOCKQUOTE>
Converts a <TT>GModule</TT> M over a p-group to a module over the basic algebra of 
that group.
</BLOCKQUOTE>
<H5><A NAME = "11085">GModule(M) : AlgBasGrpP -&gt; ModGrp, ModGrp</A></H5>
<BLOCKQUOTE>
Returns the standard module of the algebra A as a module over <TT>Group(A)</TT> 
and as a module over <TT>PCGroup(A)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "11086">GModule(M) : ModAlgBas -&gt; ModGrp</A></H5>
<BLOCKQUOTE>
Converts a module M for the basic algebra of a p-group into a module over 
the p-group.
</BLOCKQUOTE>
<H4><A NAME = "11087">Projective Resolutions</A></H4>



<H5><A NAME = "11088">ResolutionData(A) : AlgBasGrpP -&gt; Rec</A></H5>
<BLOCKQUOTE>
Returns the data needed to compute the projective resolution of an A-module
for an algebra A.
The data is given as a record with the fields:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The matrices of the <TT>PCGenerators</TT> of the p-group on the standard
indecomposable projective module for the algebra (field name 
<TT>PCgenMats</TT>).
<DT>(b)</DT><DD>The matrices of the minimal generators of the p-group on the 
standard indecomposable projective module for the algebra (field name 
<TT>MingenMats</TT>).
<DT>(c)</DT><DD>The algebra A (field name <TT>Algebra</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "11089">CompactProjectiveResolutionPGroup(M, n) : ModAlgBas, RngIntElt -&gt; Rec</A></H5>
<H5>CompactProjectiveResolution(M, n) : ModAlgBas, RngIntElt -&gt; Rec</H5>
<BLOCKQUOTE>
Computes the projective resolution of the module M out to n steps.
The function returns a record with the fields:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The list of the ranks of the projective modules in
the resolution (field name <TT>BettiNumbers</TT>).
<DT>(b)</DT><DD>The record of the boundary maps (field name <TT>ResolutionRecord</TT>).
<DT>(c)</DT><DD>The module M (field name <TT>Module</TT>).
<DT>(d)</DT><DD>The augmentation map (field name <TT>AugmentationMap</TT>).
<DT>(e)</DT><DD>The type of the resolution, whether projective or injective
(field name <TT>Typ</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "11090">ProjectiveResolutionPGroup(PR) : Rec -&gt; ModCpx</A></H5>
<BLOCKQUOTE>
The projective resolution as a complex of modules over the basic algebra
of the group algebra, computed from the compact projective resolution PR.
</BLOCKQUOTE>
<H5><A NAME = "11091">ProjectiveResolution(M, n) : ModAlgBas, RngIntElt -&gt; ModCpx, ModMatFldElt</A></H5>
<BLOCKQUOTE>
The projective resolution of the module M computed as a complex out to 
n steps. The function also returns the augmentation map. 
</BLOCKQUOTE>
<H5><A NAME = "11092">ProjectiveResolution(PR) : Rec -&gt; ModCpx, ModMatFldElt</A></H5>
<BLOCKQUOTE>
The projective resolution computed from a compact projective resolution PR 
as a complex. The function also returns the augmentation map. 
</BLOCKQUOTE>
<H4><A NAME = "11093">Cohomology Generators</A></H4>



<H5><A NAME = "11094">AllCompactChainMaps(PR) : Rec -&gt; Rec</A></H5>
<BLOCKQUOTE>
Creates the data on the chain maps for all generators of the cohomology
of the simple module k in degrees within the limits of the compact 
projective resolution PR of the simple module. The function returns 
a record having the following information.
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The record of the chain maps of the generators of cohomology
(field name <TT>ChainMapRecord</TT>).
<DT>(b)</DT><DD>The sequence of sizes of the chain map record
(field name <TT>ChainSizes</TT>).
<DT>(c)</DT><DD>The degrees of the chain maps (field name 
<TT>ChainDegrees</TT>).
<DT>(d)</DT><DD>The list of cocycles representing the generators  
(field name <TT>Cocycles</TT>).
<DT>(e)</DT><DD>The record of the products of the generators (field name 
<TT>ProductRecord</TT>).
<DT>(f)</DT><DD>The locations of the products of the generators (field name 
<TT>ProductLocations</TT>).
 Much of the information is for use in the computation 
of the cohomology ring. </DL>
</BLOCKQUOTE>
<H5><A NAME = "11095">CohomologyElementToChainMap(P, d, n) : ModCpx ,RngIntElt, RngIntElt -&gt; MapChn</A></H5>
<BLOCKQUOTE>
Creates a chain map from the projective resolution P to 
itself for the element number n in degree d of cohomology. 
</BLOCKQUOTE>
<H5><A NAME = "11096">CohomologyElementToCompactChainMap(PR, d, n): Rec, RngIntElt, RngIntElt -&gt; ModMatFldElt</A></H5>
<BLOCKQUOTE>
Creates a chain map in compact form from the compact projective resolution 
PR to itself for the element number n in degree d of cohomology.
</BLOCKQUOTE>
<H4><A NAME = "11097">Cohomology Rings</A></H4>



<H5><A NAME = "11098">CohomologyRing(k, n) : ModAlgBas, RngIntElt -&gt; Rec</A></H5>
<H5>CohomologyRing(PR, AC) : Rec, Rec -&gt; Rec</H5>
<BLOCKQUOTE>
The cohomology ring of the unique simple module k for the basic algebra
of the group algebra of a p-group. The input can be given either as the
module k and the number of steps n or as the compact projective 
resolution PR of k together with AC, the calculation of the chain 
map generators of the cohomology. In the former case the 
compact resolution and 
the chain map of the generators are computed in the process. The ring
is returned as a record having the following fields: 
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The polynomial ring or free graded-commutative k-algebra R
generated by the cohomology generators (field name <TT>PolRing</TT>).
<DT>(b)</DT><DD>The ideal of relations in R satisfied by the cohomology
generators (field name <TT>RelationsIdeal</TT>).
<DT>(c)</DT><DD>The list of relations that have been computed (field name 
<TT>ComputedRelations</TT>).
<DT>(d)</DT><DD>The chain maps giving the tops of the monomial in the 
cohomology generators (field name <TT>MonomialData</TT>).
<DT>(e)</DT><DD>The number of computed steps in the resolution  
(field name <TT>NumberOfSteps</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "11099">MinimalRelations(R) : Rec -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A minimal set of relations generating the relations ideal of a cohomology
ring R.
</BLOCKQUOTE>
<H4><A NAME = "11100">Restrictions and Inflations</A></H4>



<H5><A NAME = "11101">RestrictionData(A,B) : AlgBasGrpP, AlgBasGrpP -&gt; ModMatFldElt, ModMatFldElt, SeqEnum</A></H5>
<BLOCKQUOTE>
Assuming that A is the basic algebra of a p-group G and that B is 
the basic algebra of a subgroup of G, the function
returns the change of basis matrix that make the standard free module 
for A into a direct sum of standard free modules for B. It also returns 
the inverse of the matrix and a set of coset representatives of the 
<TT>PCGroup(B)</TT> in <TT>PCGroup(A)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "11102">RestrictResolution(PR, RD) : Rec, Rec -&gt; ModCpx</A></H5>
<BLOCKQUOTE>
Takes the compact projective resolution PR for the trivial module 
of G and the resolution data RD for
the basic algebra of a subgroup H and returns the restriction of the 
resolution to a complex of modules over the basic algebra for H.
</BLOCKQUOTE>
<H5><A NAME = "11103">RestrictionChainMap(P1,P2) : Rec, Rec -&gt; MapChn</A></H5>
<BLOCKQUOTE>
Computes the chain map from the resolution P2 of the simple module for the 
basic algebra of a subgroup H of a group G to the restriction to 
H of the resolution P1 of the simple module for the basic algebra of G.
The inputs P1 and P2 must be in compact form. 
</BLOCKQUOTE>
<H5><A NAME = "11104">RestrictionOfGenerators(PR1, PR2, AC1, AC2, REL2) : Rec, Rec, Rec, Rec, Rec -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Computes the sequence of images of the generators of the cohomology ring 
of G restricted to a subgroup H. The input is the projective resolutions 
and cohomology generators for the basic algebra of G (PR1 and AC1) 
and for the basic algebra of the subgroup (PR2 and AC2), as well as 
the cohomology relations for the subgroup,  REL2.
</BLOCKQUOTE>
<H5><A NAME = "11105">InflationMap(PR2, PR1, AC2, AC1, REL1, theta) : Rec, Rec, Rec, Rec, Rec -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
Returns the images of the generators of the cohomology ring of a 
quotient group Q in the cohomology ring of a group G. The input 
&theta; is the quotient map G -&gt; Q. Other input is the 
projective resolutions and cohomology generators for the basic 
algebra of G (PR1 and AC1) and for the quotient group Q
(PR2 and AC2) as well as the cohomology relations for G, REL1.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "11106">Example <TT>AlgBas_CohomologyRing (H90E23)</TT></A></H3>
We create the cohomology ring of a group G of order 64 and find a 
cyclic subgroup Z of the center of G. We compute the restriction
of the cohomology of G to the cohomology of Z and also the inflation
of the cohomology of G/Z to the cohomology ring of G. 
<P>
<P>
<PRE>
&gt; SetSeed(1);
&gt; G := SmallGroup(64,7);
&gt; Z := sub&lt;G| Random(Center(G))&gt;;
&gt; G;
GrpPC : G of order 64 = 2^6
PC-Relations:
    G.1^2 = G.4, 
    G.2^2 = G.5, 
    G.3^2 = G.5, 
    G.4^2 = G.6, 
    G.2^G.1 = G.2 * G.3, 
    G.3^G.1 = G.3 * G.5, 
    G.3^G.2 = G.3 * G.5
&gt; #Z, [G!Z.i: i in [1 .. Ngens(Z)]];
4 [ G.4 ]
</PRE>
So we see that Z has order 4 and is generated by the element G.4.
Now construct the quotient and the basic Algebras.
<P>
<P>
<PRE>
&gt; Q, mu := quo&lt;G|Z&gt;;
&gt; A := BasicAlgebra(G);
&gt; B := BasicAlgebra(Q);
&gt; C := BasicAlgebra(Z);
</PRE>
Next we want the simple modules and the cohomology rings. We compute
the cohomology out to 17 steps which should be more than enough to 
get the generators and relations. 
<P>
<P>
<PRE>
&gt; k := SimpleModule(A,1);
&gt; kk := SimpleModule(B,1);
&gt; kkk := SimpleModule(C,1);
&gt; time R := CohomologyRing(k,17);
Time: 2.060
&gt; time S := CohomologyRing(kk,17);
Time: 0.140
&gt; time T := CohomologyRing(kkk,17);
Time: 0.060
</PRE>
The structure of the cohomology rings can be read from the following outputs.
<P>
<P>
<PRE>
&gt; R`RelationsIdeal,S`RelationsIdeal,T`RelationsIdeal;

First the cohomology ring for $G$.

Ideal of Graded Polynomial ring of rank 6 over GF(2)
Lexicographical Order
Variables: $.1, $.2, $.3, $.4, $.5, $.6
Variable weights: 1 1 2 2 3 4
Basis:
[
    $.1^2,
    $.1*$.2,
    $.2^3,
    $.1*$.3,
    $.2*$.5,
    $.3^2,
    $.1*$.5 + $.2^2*$.3,
    $.3*$.5,
    $.5^2
]
</PRE>
<P>
Now the cohomology ring for Q.
<P>
<P>
<P>
<PRE>
Ideal of Graded Polynomial ring of rank 4 over GF(2)
Lexicographical Order
Variables: $.1, $.2, $.3, $.4
Variable weights: 1 1 3 4
Basis:
[
    $.1*$.2,
    $.1^3,
    $.1*$.3,
    $.2^2*$.4 + $.3^2
]
</PRE>
<P>
And finally the cohomology ring for Z.
<P>
<P>
<P>
<PRE>
Ideal of Graded Polynomial ring of rank 2 over GF(2)
Lexicographical Order
Variables: $.1, $.2
Variable weights: 1 2
Basis:
[
    $.1^2
]
</PRE>
<P>
Next we require the inputs for the restriction and inflation maps.
<P>
<P>
<P>
<PRE>
&gt; Pr1 := k`CompactProjectiveResolution;
&gt; Pr2 := kk`CompactProjectiveResolution;
&gt; Pr3 := kkk`CompactProjectiveResolution;
&gt; Ac1 := k`AllCompactChainMaps;
&gt; Ac2 := kk`AllCompactChainMaps;
&gt; Ac3 := kkk`AllCompactChainMaps;
</PRE>
<P>
Now the inflation map from Q to G sends the generators of the 
cohomology of Q to the given list of elements in the cohomology
ring of G.
<P>
<P>
<P>
<PRE>
&gt; inf := InflationMap(Pr2,Pr1,Ac2,Ac1,R,mu);
&gt; inf;
[
    $.2,
    $.1,
    $.5,
    $.6
]
</PRE>
<P>
The restriction map from the cohomology ring of G to the cohomology
ring of Z sends the generators of R to the corresponding elements
in the computed sequence.
<P>
<P>
<P>
<PRE>
&gt; res := RestrictionOfGenerators(Pr1,Pr3,Ac1,Ac3,T);
&gt; res;
[
    0,
    0,
    0,
    $.2,
    0,
    0
]
</PRE>
<P>
Finally, a set of minimal relations is determined for the cohomology ring R.
<P>
<P>
<P>
<PRE>
&gt; MinimalRelations(R);
[
    $.1^2,
    $.1*$.2,
    $.2^3,
    $.1*$.3,
    $.2*$.5,
    $.3^2,
    $.1*$.5 + $.2^2*$.3,
    $.3*$.5,
    $.5^2
]
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text979.htm">[Next]</A><A  HREF = "text977.htm">[Prev]</A> <A  HREF = "text979.htm">[Right]</A> <A  HREF = "text977.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>