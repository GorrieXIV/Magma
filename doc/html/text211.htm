<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creation Functions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text212.htm">[Next]</A><A  HREF = "text210.htm">[Prev]</A> <A  HREF = "text212.htm">[Right]</A> <A  HREF = "text210.htm">[Left]</A> <A  HREF = "text209.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "1753">Creation Functions</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text211.htm#1754">Creation of Structures</A>
<LI> <A  HREF = "text211.htm#1757">Print Options</A>
<LI> <A  HREF = "text211.htm#1760">Creation of Elements</A>
</UL>
<H4><A NAME = "1754">Creation of Structures</A></H4>

<P>
<P>
There are two different ways to create polynomial rings, corresponding
to the different internal representations (vector versus distributive
--- see the introductory section): <TT>PolynomialRing(R)</TT> and <TT>PolynomialRing(R, n)</TT>. The latter should be used to create multivariate
polynomials; the former should be used for univariate polynomials.


<H5><A NAME = "1755">PolynomialAlgebra(R) : Rng -&gt; RngUPol</A></H5>
<H5>PolynomialRing(R) : Rng -&gt; RngUPol</H5>

<PRE>    Global: BoolElt                     Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Create a univariate polynomial ring over the ring R. The ring is
regarded as an R-algebra via the usual identification of elements of
R and the constant polynomials. The polynomials are stored in vector
form, which allows fast arithmetic. It is not recommended to use this
function recursively to build multivariate polynomial rings.
The angle bracket notation can be used to assign names to the indeterminate,
e.g.: <TT>P&lt;x&gt; := PolynomialRing(R)</TT>.
<P>
By default, the unique <I>global</I> univariate polynomial ring over R
will be returned;
if the parameter <TT>Global</TT> is set to <TT>false</TT>, then a non-global univariate
polynomial ring over R will be returned (to which a separate
name for the indeterminate can be assigned).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1756">Example <TT>RngPol_Creation (H23E1)</TT></A></H3>
We demonstrate the difference between global and non-global rings.
We first create the global univariate polynomial ring over {Q} twice.
<P>
<P>
<PRE>
&gt; Q := RationalField();
&gt; P&lt;x&gt; := PolynomialRing(Q);
&gt; PP := PolynomialRing(Q);    
&gt; P;
Univariate Polynomial Ring in x over Rational Field
&gt; PP;
Univariate Polynomial Ring in x over Rational Field
&gt; PP.1;
x
</PRE>
PP is identical to P.  We now create non-global univariate
polynomial rings (which are also different to the global polynomial ring
P).  Note that elements of all the rings are mathematically equal
by automatic coercion.
<P>
<P>
<PRE>
&gt; Pa&lt;a&gt; := PolynomialRing(Q: Global := false);
&gt; Pb&lt;b&gt; := PolynomialRing(Q: Global := false); 
&gt; Pa;
Univariate Polynomial Ring in a over Rational Field
&gt; Pb;
Univariate Polynomial Ring in b over Rational Field
&gt; a;
a
&gt; b;
b
&gt; P;
Univariate Polynomial Ring in x over Rational Field
&gt; x;
x
&gt; x eq a; // Automatic coercion
true
&gt; x + a;
2*x
</PRE>
<HR>
<H4><A NAME = "1757">Print Options</A></H4>

<P>
<P>
The <TT>AssignNames</TT> and <TT>Name</TT> functions can be used to associate
a name with the indeterminate of a polynomial ring after creation.


<H5><A NAME = "1758">AssignNames(~P, s) : RngUPol, [ MonStgElt ]) -&gt;</A></H5>
<BLOCKQUOTE>
Procedure to change the name of the indeterminate of a polynomial ring P.
The indeterminate will be given the name of the
string in the sequence s.
<P>
This procedure only changes the name used in printing the elements of P.
It does <I>not</I> assign to identifiers corresponding to the strings
the indeterminates in P; to do this, use an assignment statement,
or use angle brackets when creating the field.
<P>
Note that since this is a procedure that modifies P,
it is necessary to have a reference <TT>~P</TT> to P
in the call to this function.
</BLOCKQUOTE>
<H5><A NAME = "1759">Name(P, i) : RngUPol, RngIntElt -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a polynomial ring P, return the i-th indeterminate
of P (as an element of P).
</BLOCKQUOTE>
<H4><A NAME = "1760">Creation of Elements</A></H4>

<P>
<P>
The easiest way to create polynomials in a given ring is to use
the angle bracket construction to attach names to the indeterminates,
and to use these names to express polynomials (see the examples).
Below we list other options.


<H5>One(P) : RngUPol -&gt; RngUPolElt</H5>

<H5>Identity(P) : RngUPol -&gt; RngUPolElt</H5>


<H5>Zero(P) : RngUPol -&gt; RngUPolElt</H5>

<H5>Representative(P) : RngUPol -&gt; RngUPolElt</H5><P>


<H5><A NAME = "1761">P . 1 : RngUPol, RngInt -&gt; RngPolElt</A></H5>
<BLOCKQUOTE>
Return the indeterminate for the polynomial ring P, as an element
of P. 
</BLOCKQUOTE>
<H5><A NAME = "1762">elt&lt; P | a<sub>0</sub>, ..., a<sub>d</sub>  &gt; : RngUPol, RngElt, ..., RngElt -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a polynomial ring P=R[x]
and elements a<sub>0</sub>, ..., a<sub>d</sub> coercible into the coefficient ring R,
return the polynomial a<sub>0</sub> + a<sub>1</sub>x<sub>n</sub> + ... + a<sub>d</sub>x<sub>n</sub><sup>d</sup> as an element of P.
</BLOCKQUOTE>
<H5><A NAME = "1763">P ! s : RngUPol, RngElt -&gt; RngPolElt</A></H5>
<H5>P ! s : RngUPol, [ RngElt ] -&gt; RngPolElt</H5>
<H5>elt&lt; P | s &gt; : RngUPol, [ RngElt ] -&gt; RngUPolElt</H5>
<BLOCKQUOTE>
Coerce the element s into the polynomial ring P = R[x].
The following possibilities for s exist.
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>s is an element of P: it is returned unchanged;
<DT>(b)</DT><DD>s is an element of a ring that
can be coerced into the coefficient ring R of P:
the constant polynomial s is returned;
<DT>(c)</DT><DD>s=&sum;<sub>j</sub> s<sub>j</sub>y<sup>j</sup> is an element of a univariate
polynomial ring whose coefficient ring
elements s<sub>j</sub> can be coerced into R: the polynomial &sum;<sub>j</sub> r<sub>j</sub>x<sup>j</sup>
is returned, where r<sub>j</sub> is the result of coercing s<sub>j</sub> into R;
<DT>(c)</DT><DD>s is a sequence: if s is empty then the zero element of P is returned, and if it is non-empty but the elements of the sequence
can be coerced into R then the polynomial &sum;<sub>j</sub> s[j]x<sub>n</sub><sup>j - 1</sup> 
is returned.
<P>
<P>
</DL>
Note that constant polynomials may be coerced into their coefficient rings.
</BLOCKQUOTE>
<H5><A NAME = "1764">Polynomial(Q) : [ RngElt ] -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a sequence Q of elements from a ring R, create
the polynomial over R whose coefficients are given by Q.
This is equivalent to <TT>PolynomialRing(Universe(Q))!Q</TT>.
</BLOCKQUOTE>
<H5><A NAME = "1765">Polynomial(R, Q) : Rng, [ RngElt] -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a ring R and sequence Q of elements from a ring S, create
the polynomial over R whose coefficients are given by the elements
of Q, coerced into S.
This is equivalent to <TT>PolynomialRing(R)!ChangeUniverse(Q, R)</TT>.
</BLOCKQUOTE>
<H5><A NAME = "1766">Polynomial(R, f) : Rng, RngUPolElt -&gt; RngUPolElt</A></H5>
<BLOCKQUOTE>
Given a ring R and a polynomial f over a ring S,
create the polynomial over R obtained from f by coercing its
coefficients into S.
This is equivalent to <TT>PolynomialRing(R)!f</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "1767">Example <TT>RngPol_Polynomials (H23E2)</TT></A></H3>
The easiest way to create the polynomial x<sup>3</sup> + 3x + 1 (over the integers) is
as follows.
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialRing(Integers());
&gt; f := x^3+3*x+1;
&gt; f;
x^3 + 3*x + 1
</PRE>
Alternative ways to create polynomials are given by the element
constructor (rarely used) and the <TT>!</TT> operator:
<P>
<P>
<PRE>
&gt; P&lt;x&gt; := PolynomialAlgebra(Integers());
&gt; f := elt&lt; P | 2, 3, 0, 1 &gt;;
&gt; f;
x^3 + 3*x + 2
&gt; P ! [ 2, 3, 0, 1 ];
x^3 + 3*x + 2
</PRE>
Note that it is important to realize that a sequence is coerced into
a polynomial ring by coercing its entries into the coefficient ring,
and it is not attempted first to coerce the sequence as a whole into the
coefficient ring:
<P>
<P>
<PRE>
&gt; Q := RationalField();
&gt; Q ! [1, 2];
1/2
&gt; P&lt;x&gt; := PolynomialRing(Q);
&gt; P ! [1,2];
2*x + 1
&gt; P ! Q ! [1,2];
1/2
&gt; P ! [ [1,2], [2,3] ];
2/3*x + 1/2
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text212.htm">[Next]</A><A  HREF = "text210.htm">[Prev]</A> <A  HREF = "text212.htm">[Right]</A> <A  HREF = "text210.htm">[Left]</A> <A  HREF = "text209.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>