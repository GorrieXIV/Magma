<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Basic Algebras</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text969.htm">[Next]</A><A  HREF = "text967.htm">[Prev]</A> <A  HREF = "text969.htm">[Right]</A> <A  HREF = "text967.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "10879">Basic Algebras</A></H3>

<P>
<P>
<P>
In the Magma implementation the algebra is given as the sequence of
projective modules P<sub>1</sub>, ..., P<sub>s</sub> together with a path
tree for each projective module. A projective module consists of a
matrix for each generator a<sub>1</sub>, a<sub>2</sub>, ...,  a<sub>t</sub>
giving the action of the generator on the vector space of
the module. The basis b<sub>1</sub>, b<sub>2</sub>, ..., b<sub>n</sub>
for the vector space of P<sub>i</sub> is chosen so that
each basis element is the image of a basis element of lower
index under multiplication by a nonidempotent generator of A.
The structure of the basis is recorded in the path tree
which is a sequence [&lt;1, i&gt;, &lt;j, k&gt;, ... ] of 2-tuples of
length n = Dimension(P<sub>i</sub>). The first entry &lt;1, i&gt; indicates
that b<sub>1</sub> = b<sub>1</sub> * a<sub>i</sub> where a<sub>i</sub> is the primitive idempotent
in the algebra A such that P<sub>i</sub> = A.a<sub>i</sub>. Similarly,
if entry number k in the path tree is &lt; u, v &gt; then
b<sub>k</sub> = b<sub>u</sub> * a<sub>v</sub> where v &gt; s if k &gt; 1.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text968.htm#10880">Creation</A>
<LI> <A  HREF = "text968.htm#10886">Special Basic Algebras</A>
<LI> <A  HREF = "text968.htm#10901">A Database of Basic Algebras</A>
<LI> <A  HREF = "text968.htm#10906">Access Functions</A>
<LI> <A  HREF = "text968.htm#10921">Elementary Operations</A>
<LI> <A  HREF = "text968.htm#10928">Boolean Functions</A>
</UL>
<H4><A NAME = "10880">Creation</A></H4>

<P>
<P>
<P>
The first function for creating a basic algebra is the most 
basic, in which the user supplies the projective modules and the
path trees directly. 


<H5><A NAME = "10881">BasicAlgebra(Q) : SeqEnum[Tup] -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Given a sequence [Q<sub>i</sub>, ..., Q<sub>s</sub>] of 2-tuples such that each 
Q<sub>i</sub> = &lt;M<sub>i</sub>, T<sub>i</sub>&gt; consisting of a  module for a matrix algebra
M<sub>i</sub> and a path tree T<sub>i</sub> for M<sub>i</sub>, the function creates the 
basic algebra whose projective modules are the first entries
M<sub>1</sub>, ..., M<sub>s</sub> and the path trees are the corresponding 
second entries. 
<P>
<P>
<P>
The next two functions create a basic algebra from generators
and relations. The user must, additionally, specify the quiver
with relations, giving the number of idempotents and the beginning
and end points of the arrows in the quiver. 
</BLOCKQUOTE>
<H5><A NAME = "10882">BasicAlgebra(F,R,s,P): AlgFr, SeqEnum, RngIntElt, SeqEnum -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Creates the basic algebra given by the presentation. Here F is a free algebra
and R is the sequence of relation for the nonidempotent generators of
the algebra. If the free algebra F is generated by 
elements a<sub>1</sub>, ..., a<sub>t</sub>, the function assumes that a<sub>1</sub>, ...,
a<sub>s</sub> are the mutually orthogonal primitive idempotents and it creates all
of the appropriate relations including a<sub>1</sub> + ... + a<sub>s</sub> = 1. 
The nonidempotent generators are then a<sub>s + 1</sub>, ..., a<sub>t</sub>. So ell<sub>k</sub> 
= &lt; i, j &gt; for i, j &le;s 
means that a<sub>s + k</sub> = a<sub>i</sub> * a<sub>s + k</sub> * a<sub>j</sub>. Each of
the relations in R is given as a linear combination of words in the 
nonidempotent generators a<sub>s + 1</sub>, ..., a<sub>t</sub> &isin;F. The sequence P
is a sequence of 2-tuples, one for each nonidempotent generator, 
giving the beginning and ending nodes of the generator. That is, each 
tuple is the pair of indices of the idempotents which multiply as the 
identity on the nonidempotent generator on the left and on the right.
</BLOCKQUOTE>
<H5><A NAME = "10883">BasicAlgebra(F,R) : AlgFr, SeqEnum -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Creates the basic algebra of a local algebra from the presentation of 
the algebra. Here F is a free algebra whose variable represent the nonidempotent
generators and R is the sequence of relations among those variables. 
</BLOCKQUOTE>
<H5><A NAME = "10884">TensorProduct(A, B) : AlgBas, AlgBas-&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The tensor product of the basic algebras A and B.
<P>
<P>
<P>
The modular group algebra of a p-group is naturally a basic algebra. The 
next function create the basic algebra from the group information.
</BLOCKQUOTE>
<H5><A NAME = "10885">BasicAlgebra(G, k) : GrpPerm, FldFin -&gt; AlgBas</A></H5>
<H5>BasicAlgebra(G, k) : GrpPC, FldFin -&gt; AlgBas</H5>
<H5>BasicAlgebra(G) : GrpPerm -&gt; AlgBass</H5>
<BLOCKQUOTE>
Given a finite p-group G and a finite field k of characteristic p, 
returns the group algebra kG in the form of a basic algebra.
If no field k is supplied then the prime field of characteristic p
is assumed to be the field of coefficients. 
</BLOCKQUOTE>
<H4><A NAME = "10886">Special Basic Algebras</A></H4>

<P>
<P>
<P>
There are several functions that create basic algebras of special
interest. The most basic of these creates the basic algebra 
that is Morita equivalent to a matrix algebra defined over a finite
field by first condensing
the algebra and then splitting the irreducible modules as needed. 
<P>
Included among these constructions 
are the basic algebras of Schur algebras
and Hecke algebras over finite fields. The Schur algebras arise in
the representation theory of symmetric groups. The Schur algebras
have finite global dimension and hence their ext-algebras have finite
dimension. By a Hecke algebra, we mean the algebra of endomorphisms
of a permutation module of a finite group.


<H5><A NAME = "10887">BasicAlgebra(A): AlgMat -&gt; AlgBas</A></H5>
<H5>BasicAlgebraOfMatrixAlgebra(A): AlgMat -&gt; AlgBas</H5>
<BLOCKQUOTE>
This function creates the split basic algebra of the matrix algebra A.
The function first produces a presentation and condensed algebra
for A. In the event that the field of coefficients k of A is not a
splitting field, then the returned basic algebra is defined over the
minimal extension of k that is a splitting field for A.
</BLOCKQUOTE>
<H5><A NAME = "10888">BasicAlgebraOfEndomorphismAlgebra(M):  ModRng -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Returns the split basic algebra of the endomorphism ring of the module M. In
the event that the field of coefficients of M is not a splitting field
for M, then the field is extended and the basic algebra is defined
over the minimal extension needed to split M.
</BLOCKQUOTE>
<H5><A NAME = "10889">BasicAlgebraOfHeckeAlgebra(G, H, F): GrpPerm, GrpPerm, FldFin) -&gt; AlgBas</A></H5>
<H5>BasicAlgebraOfHeckeAlgebra(G, H, F):  GrpPC, GrpPC, FldFin -&gt; AlgBas</H5>
<H5>BasicAlgebraOfHeckeAlgebra(G, H, F):  GrpAb, GrpAb, FldFin -&gt; AlgBas</H5>
<BLOCKQUOTE>
Returns the basic algebra of the Hecke algebra which is the algebra of
endomorphisms of the permutation module over G with point stabilizer H
and field of coefficients F. In the event that F is not a splitting field
then the field F is extended to a splitting field which is the field
of coefficients of the returned basic algebra.
</BLOCKQUOTE>
<H5><A NAME = "10890">BasicAlgebraOfSchurAlgebra(n, r, F):  RngIntElt, RngIntElt, FldFin -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Creates the basic algebra of the Schur algebra S(n, r) over the field F.
The Schur algebra is the algebra of endomorphisms of the module over the
symmetric group Sym(r) that is the tensor product of r copies of a
vector space V over F of dimension n, the group Sym(r) acting by
permuting the r copies.
</BLOCKQUOTE>
<H5><A NAME = "10891">BasicAlgebraOfGroupAlgebra(G,F): GrpPerm, FldFin -&gt; AlgBas</A></H5>
<H5>BasicAlgebraOfGroupAlgebra(G,F): GrpPC, FldFin -&gt; AlgBas</H5>
<H5>BasicAlgebraOfGroupAlgebra(G,F): GrpAb, FldFin -&gt; AlgBas</H5>
<BLOCKQUOTE>
The function returns the basic algebra of the group algebra of G
with coefficients in the field F. The function requires the creation
of the projective indecomposable FG-modules. In the event that the 
field F is not a splitting field for the irreducible FG-modules
then the base ring of the returned algebra is the minimal extension
of F that is necessary to get a splitting field. 
</BLOCKQUOTE>
<H5><A NAME = "10892">BasicAlgebra(S) : SeqEnum -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Returns the basic algebra of the action algebra on the module which is
the direct sum of the modules in the sequence S. In the event that the
irreducible composition factors of the modules in S are not absolutely
irreducible, then the returned basic algebra is defined over the splitting
field for the irreducible modules.
</BLOCKQUOTE>
<H5><A NAME = "10893">BasicAlgebraOfBlockAlgebra(S) : SeqEnum  -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Returns the basic algebra of the block algebra, the projective modules
of which are given in the sequence S. In the event that the irreducible
composition factors of the modules in S are not absolutely irreducible,
then the returned basic algebra is defined over the splitting field for
the irreducible modules.
</BLOCKQUOTE>
<H5><A NAME = "10894">BasicAlgebraOfPrincipalBlock(G,k) : GrpPerm, FldFin -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Returns the basic algebra of the principal block of the group algebra of
G. If the simple modules in the principal kG block are all absolutely 
simple, then the ordering of the projective modules for the returned 
basic algebra is exactly the same as the ordering of the projectives
modules in the principal block returned by the function 
<TT>IndecomposableProjectives</TT>. 
Otherwise, the base ring of the returned basic algebra is the least 
extension of k necessary to split the simple modules in the principal 
block and the simple modules of the returned algebra are ordered by 
increasing dimension of the corresponding simple modules of kG.
</BLOCKQUOTE>
<H5><A NAME = "10895">BasicAlgebraOfExtAlgebra(A) : AlgBas -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The function returns the basic algebra from a computed ext-algebra 
which is Ext<sub>A</sub><sup> * </sup>(S, S), where S is the direct sum of the 
irreducible A-modules, of the 
basic algebra A. If no ext-algebra for A has been computed or if the 
exalgebra is not verified to be finite dimensional then an error is 
returned.
</BLOCKQUOTE>
<H5><A NAME = "10896">BasicAlgebraOfExtAlgebra(A, n) : AlgBas, RngIntElt -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The function returns the basic algebra for the ext-algebra,
which is Ext<sub>A</sub><sup> * </sup>(S, S), where S is the direct sum of the 
irreducible A-modules, of A computed to
n steps. If no ext-algebra for A to n steps has been computed then it 
will be computed. If the ext-algebra is not verified to be finite 
dimensional by the computation, then an error is returned.
</BLOCKQUOTE>
<H5><A NAME = "10897">BasicAlgebraOfExtAlgebra(A) : Rec -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The function creates the basic algebra from a computed ext-algebra. The 
input ext is the output of the <TT>ExtAlgebra</TT> function. If the ext-algebra is 
not verified to be finite dimensional by the computation, then an error 
is returned.
</BLOCKQUOTE>
<H5><A NAME = "10898">OppositeAlgebra(B) : AlgBas -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
The opposite algebra of the basic algebra B.
The opposite algebra of B is the algebra with the 
same set of elements and the same addition but with multiplication
* given by a * b = ba for a and b in A.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10899">Example <TT>AlgBas_GroupAlgebra (H90E1)</TT></A></H3>
We form the basic algebra of the group algebra of the alternating group
on 6 letters in characteristic 2.
<P>
<P>
<PRE>
&gt; G := AlternatingGroup(6);
&gt; A := BasicAlgebraOfGroupAlgebra(G, GF(2));
&gt; A;
Basic algebra of dimension 36 over GF(2^2)
Number of projective modules: 5
Number of generators: 9
</PRE>
Note that the field of coefficients has been extended in order 
to split the irreducible G-modules. 
A great deal of information on the nature of the group algebra and its
basic algebra can be obtained from analysis such as the following.
<P>
<P>
<PRE>
&gt; [Dimension(ProjectiveModule(A,i)): i in [1 .. 5]];
[ 9, 9, 16, 1, 1 ]
&gt; prj := CompactProjectiveResolutionsOfAllSimpleModules(A,8);
&gt; [x`BettiNumbers:x in prj];
[
    [
        [ 1, 0, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 1, 0, 0, 0, 0 ],
        [ 1, 0, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 1, 0, 0, 0, 0 ],
        [ 1, 0, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 1, 0, 0, 0, 0 ]
    ],
    [
        [ 0, 1, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 0, 1, 0, 0, 0 ],
        [ 0, 1, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 0, 1, 0, 0, 0 ],
        [ 0, 1, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 0, 1, 0, 0, 0 ]
    ],
    [
        [ 0, 0, 3, 0, 0 ],
        [ 1, 1, 2, 0, 0 ],
        [ 0, 0, 3, 0, 0 ],
        [ 0, 0, 2, 0, 0 ],
        [ 1, 1, 1, 0, 0 ],
        [ 0, 0, 2, 0, 0 ],
        [ 0, 0, 1, 0, 0 ],
        [ 1, 1, 0, 0, 0 ],
        [ 0, 0, 1, 0, 0 ]
    ],
    [
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 1, 0 ]
    ],
    [
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 0 ],
        [ 0, 0, 0, 0, 1 ]
    ]
]
</PRE>
So we see that the last two simple modules are projective and hence in the
group algebra FG, they represent blocks of defect 0. From the information on
the Betti numbers we observe that the first two simple modules have periodic
projective resolutions. Thus the third simple module for the basic algebra
corresponds to the trivial FG-module, which we know is neither projective
nor periodic.
<HR>
<H3><A NAME = "10900">Example <TT>AlgBas_SchurAlgebra (H90E2)</TT></A></H3>
We construct the Schur algebra S(3, 7) with coefficients in a field of
characteristic 2.
<P>
<P>
<PRE>
&gt; A := BasicAlgebraOfSchurAlgebra(3,6,GF(2));
&gt; A;
Basic algebra of dimension 58 over GF(2)
Number of projective modules: 7
Number of generators: 21
</PRE>
It is known that A has finite global dimension, hence its ext-algebra
has finite dimension.
<P>
<P>
<PRE>
&gt; B := BasicAlgebraOfExtAlgebra(A,10);
&gt; B;
Basic algebra of dimension 56 over GF(2)
Number of projective modules: 7
Number of generators: 25
</PRE>
We check to see if the ext-algebra of B might have finite dimension.
<P>
<P>
<PRE>
&gt; SumOfBettiNumbersOfSimpleModules(B,5);
600
&gt; SumOfBettiNumbersOfSimpleModules(B,6);
1334
&gt; SumOfBettiNumbersOfSimpleModules(B,7);
3008
</PRE>
The sum of the Betti number would be the dimension of the ext-algebra
computed to the indicated degree. It would appear that the ext-algebra
is infinite dimensional. Just to check, we look at a particular simple
module, chosen randomly.
<P>
<P>
<PRE>
&gt; CompactProjectiveResolution(SimpleModule(B,4),10)`BettiNumbers;
[
    [ 8, 0, 81, 3, 61, 69, 55 ],
    [ 3, 0, 36, 1, 26, 30, 24 ],
    [ 1, 0, 16, 1, 11, 13, 10 ],
    [ 1, 0, 7, 1, 5, 5, 4 ],
    [ 1, 0, 3, 1, 2, 2, 1 ],
    [ 1, 0, 1, 0, 1, 1, 0 ],
    [ 0, 0, 0, 0, 1, 1, 0 ],
    [ 0, 0, 0, 0, 1, 0, 1 ],
    [ 0, 0, 0, 1, 0, 1, 0 ],
    [ 1, 0, 0, 0, 0, 0, 1 ],
    [ 0, 0, 0, 1, 0, 0, 0 ]
]
</PRE>
Thus we have strong evidence that the fourth simple module has infinite
projective dimension. In that case, the ext-algebra of B is not finite
dimensional.
<P>
Now we consider the same example except in characteristic 3.
<P>
<P>
<PRE>
&gt; A := BasicAlgebraOfSchurAlgebra(3,6,GF(3));
&gt; A;
Basic algebra of dimension 48 over GF(3)
Number of projective modules: 7
Number of generators: 21
&gt; B := BasicAlgebraOfExtAlgebra(A,10);
&gt; B;
Basic algebra of dimension 98 over GF(3)
Number of projective modules: 7
Number of generators: 21
&gt; SumOfBettiNumbersOfSimpleModules(B,5);
48
&gt; SumOfBettiNumbersOfSimpleModules(B,6);
48
</PRE>
So we see that the algebra B has global dimension at most 5. We can
compute its ext-algebra.
<P>
<P>
<PRE>
&gt; C := BasicAlgebraOfExtAlgebra(B,10);
&gt; C;
Basic algebra of dimension 48 over GF(3)
Number of projective modules: 7
Number of generators: 21
&gt; D := BasicAlgebraOfExtAlgebra(C,10);
&gt; D;
Basic algebra of dimension 98 over GF(3)
Number of projective modules: 7
Number of generators: 21
</PRE>
This provides evidence that A is isomorphic to its double ext-algebra.
This would suggest that A might be a Koszul algebra.
<HR>
<H4><A NAME = "10901">A Database of Basic Algebras</A></H4>

<P>
<P>
<P>
A small library of basic algebras for the p-modular group algebras 
of some of the smaller groups that are catalogued in Atlas is provided. 
This library will be referred to as the <I>Basic Algebras for Atlas 
Groups</I> database.
For each group G included in the library and each prime p dividing 
the order of G, the basic algebra for each p-block of the group 
algebra K[G] is stored. A second library contains the basic algebras
of a small collection of Schur algebras S(n, r) and will be referred
to as the <I>Basic Algebras for Schur Algebras</I> database.


<H5><A NAME = "10902">BasicAlgebraFromGroup(A, p, b) : MonStgElt, RngIntElt, RngIntElt -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
This function reconstructs from a library the basic algebra of the 
block number b of the group algebra K[G] where K is a field of 
characteristic p and G is the finite group with Atlas name A. 
Block number 1 is always the principal block.
</BLOCKQUOTE>
<H5><A NAME = "10903">BasicAlgebraGroupNames() : -&gt; SetIndx</A></H5>
<BLOCKQUOTE>
This intrinsic returns the names of the basic algebras that are
stored in the <I>Basic Algebras for Atlas Groups</I> database.
</BLOCKQUOTE>
<H5><A NAME = "10904">BasicAlgebraFromSchur(n, r, p) : RngIntElt, RngIntElt, RngIntElt -&gt; AlgBas</A></H5>
<BLOCKQUOTE>
Let n and r be positive integers and p a prime such that the triple
is the name of a basic algebra in the <I>Basic Algebras for Schur Algebras</I> 
database. This intrinsic retrieves a basic algebra for the Schur algebra 
S(n, r) from the database.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10905">Example <TT>AlgBas_BasicDatabase (H90E3)</TT></A></H3>
<P>
We retrieve the basic algebra for the principal 5-block of Atlas 
Group 2A8 from the <I>Basic Algebras for Atlas Groups</I> database.
<P>
<P>
<P>
<PRE>
&gt; A := BasicAlgebraFromGroup("2A8", 5, 1);
&gt; A;
Basic algebra of dimension 14 over GF(5)
Number of projective modules: 4
Number of generators: 10
&gt;
&gt; [ Dimension(ProjectiveModule(A, i)) : i in [1..4] ];
[ 3, 4, 3, 4 ]
</PRE>
<P>
For some groups not all basic algebras are stored. Thus for the
sporadic group McL only the algebras for the principal blocks 
for p = 2, 3, 5 are currently in the database.
<P>
<P>
<P>
<PRE>
&gt; A := BasicAlgebraFromGroup("McL", 2, 1);
&gt; A;
Basic algebra of dimension 1004 over GF(2)
Number of projective modules: 8
Number of generators: 28
&gt;
&gt;  [ Dimension(ProjectiveModule(A, i)) : i in [1..8] ];
[ 152, 280, 100, 128, 128, 64, 64, 88 ]
&gt;
&gt; A := BasicAlgebraFromGroup("McL", 3, 1);
&gt; A;
Basic algebra of dimension 6284 over GF(3^2)
Number of projective modules: 10
Number of generators: 42
&gt;
&gt; [ Dimension(ProjectiveModule(A, i)) : i in [1..10] ];
[ 1274, 857, 657, 657, 876, 1127, 194, 194, 252, 196 ]
&gt;
&gt; A := BasicAlgebraFromGroup("McL", 5, 1);
&gt; A;
Basic algebra of dimension 788 over GF(5^2)
Number of projective modules: 12
Number of generators: 42
&gt;
&gt;  [ Dimension(ProjectiveModule(A, i)) : i in [1..12] ];
[ 64, 122, 46, 15, 117, 104, 104, 67, 67, 52, 15, 15 ]

</PRE>
<HR>
<H4><A NAME = "10906">Access Functions</A></H4>

<P>
<P>
<P>
These functions return basic information, underlying structures
and elements of the given basic algebras. 


<H5><A NAME = "10907">B . i : AlgBas, RngIntElt -&gt; AlgBasElt</A></H5>
<BLOCKQUOTE>
The i<sup>th</sup> element in the standard basis for the underlying vector
space of the algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10908">BaseRing(B) : AlgBas -&gt; Rng</A></H5>
<H5>CoefficientRing(B) : AlgBas -&gt; Rng</H5>
<BLOCKQUOTE>
Given an algebra B over a field k the function returns k.
</BLOCKQUOTE>
<H5><A NAME = "10909">VectorSpace(B) : AlgBas -&gt; ModTupFld</A></H5>
<H5>KSpace(B) : AlgBas -&gt; ModTupFld</H5>
<BLOCKQUOTE>
The underlying k-vector space of the algebra B. The space is the
direct sum of the underlying vector space of the indecomposable 
projective modules.
</BLOCKQUOTE>
<H5><A NAME = "10910">Dimension(B) : AlgBas -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The dimension of the underlying vector space of the algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10911">Basis(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A basis of the underlying vector space of the algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10912">Generators(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The generators of the algebra B as a
sequence of elements in the underlying vector space of the algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10913">IdempotentGenerators(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of mutually orthogonal idempotent 
generators of the basic algebra B as 
elements in the underlying vector space of B.
</BLOCKQUOTE>
<H5><A NAME = "10914">IdempotentPositions(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence N = [n<sub>1</sub>, ..., n<sub>s</sub>] such that 
B.n<sub>1</sub>, ...,  B.n<sub>s</sub> are the mutually orthogonal idempotent 
generators of the algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10915">NonIdempotentGenerators(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of  nonidempotent 
generators of the basic algebra B as 
elements in the underlying vector space of the algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10916">Random(B) : AlgBas -&gt; AlgBasElt</A></H5>
<BLOCKQUOTE>
A random element of the algebra B as an element of the underlying vector 
space of B.
</BLOCKQUOTE>
<H5><A NAME = "10917">NumberOfProjectives(B) : AlgBas -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The number of nonisomorphic indecomposable projective modules in 
the basic algebra B. 
</BLOCKQUOTE>
<H5><A NAME = "10918">NumberOfGenerators(B) : AlgBas -&gt; RngIntElt</A></H5>
<H5>Ngens(B) : AlgBas -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The number of generators (idempotent and nonidempotent) 
of the basic algebra B. 
</BLOCKQUOTE>
<H5><A NAME = "10919">DimensionsOfProjectiveModules(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of the dimensions of the projective modules 
of the basic algebra B.
</BLOCKQUOTE>
<H5><A NAME = "10920">DimensionsOfInjectiveModules(B) : AlgBas -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of the dimensions of the injective modules 
of the basic algebra B.
</BLOCKQUOTE>
<H4><A NAME = "10921">Elementary Operations</A></H4>



<H5><A NAME = "10922">a + b : AlgBasElt, AlgBasElt -&gt; AlgBasElt</A></H5>
<BLOCKQUOTE>
The sum of the two elements a and b. 
</BLOCKQUOTE>
<H5><A NAME = "10923">a * b : AlgBasElt, AlgBasElt -&gt; AlgBasElt</A></H5>
<BLOCKQUOTE>
The product of the two elements a and b. 
</BLOCKQUOTE>
<H5><A NAME = "10924">a ^ n : AlgBasElt, RngIntElt -&gt; AlgBasElt</A></H5>
<BLOCKQUOTE>
The n<sup>th</sup> power of the element a.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10925">Example <TT>AlgBas_BasicAlgebras (H90E4)</TT></A></H3>
We create the basic algebra of the quiver with three nodes and three
arrows over the field with 7 elements. The first arrow (cs a) goes from 
node 1 to node 2, the second (cs b) from node 2 to node 1, and (cs c) 
from node 
2 to node 3. The arrows satisfy the relation that (cs a * cs b)<sup>3</sup> = 0.
<P>
<P>
<PRE>
&gt; ff := GF(7);
&gt; FA&lt;e1,e2,e3,a,b,c&gt; := FreeAlgebra(ff,6);
&gt; rrr := [a*b*a*b*a*b];
&gt; D := BasicAlgebra(FA,rrr,3,[&lt;1,2&gt;,&lt;2,1&gt;,&lt;2,3&gt;]);
&gt; D;
Basic algebra of dimension 21 over GF(7)
Number of projective modules: 3
Number of generators: 6

&gt; DimensionsOfProjectiveModules(D);
[ 9, 11, 1 ]
&gt; DimensionsOfInjectiveModules(D);
[ 6, 7, 8 ]
</PRE>
<P>
So we can see that the algebra is not self-injective.
<P>
Now we can check the nilpotence degree of the radical of cs D. The radical
of cs{D} is generated by the nonidempotent generators. 
<P>
<P>
<P>
<PRE>
&gt; S := NonIdempotentGenerators(D);
&gt; S;
[ (0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0), (0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 
0 0 0 0 0), (0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0) ]
&gt; S2 := [x*y:x in S, y in S|x*y ne 0];
&gt; #S2;
3
&gt; S3 := [x*y:x in S2, y in S|x*y ne 0];
&gt; #S3;
3
&gt; S4 := [x*y:x in S3, y in S|x*y ne 0];
&gt; #S4;
3
&gt; S5 := [x*y:x in S4, y in S|x*y ne 0];
&gt; #S5;
3
&gt; S6 := [x*y:x in S5, y in S|x*y ne 0];
&gt; #S6;
2
&gt; S7 := [x*y:x in S6, y in S|x*y ne 0];
&gt; #S7;
1
&gt; S8 := [x*y:x in S7, y in S|x*y ne 0];
&gt; #S8;
0
</PRE>
<HR>
<H3><A NAME = "10926">Example <TT>AlgBas_BasicAlgebras-2 (H90E5)</TT></A></H3>
First we create the basic algebra for the symmetric group S<sub>3</sub> 
over the field GF(3)
<P>
<P>
<PRE>
&gt; FA&lt;e1,e2,a,b&gt; := FreeAlgebra(GF(3),4);
&gt; MM:= [a*b*a, b*a*b];
&gt; BS3 := BasicAlgebra(FA, MM, 2, [&lt;1,2&gt;,&lt;2,1&gt;]);
&gt; BS3;
Basic algebra of dimension 6 over GF(3)
Number of projective modules: 2
Number of generators: 4
&gt; DimensionsOfProjectiveModules(BS3);
[ 3, 3 ]
</PRE>
Next we create the basic algebra for the cyclic group of order 3.
<P>
<P>
<PRE>
&gt; gg := CyclicGroup(3);
&gt; BC3 := BasicAlgebra(gg,GF(3));
&gt; BC3;
Basic algebra of dimension 3 over GF(3)
Number of projective modules: 1
Number of generators: 2
</PRE>
<P>
We create the basic algebra for the direct product C<sub>3</sub> x S<sub>3</sub>.
<P>
<P>
<PRE>
&gt; A := TensorProduct(BS3,BC3);
&gt; A;
Basic algebra of dimension 18 over GF(3)
Number of projective modules: 2
Number of generators: 6
&gt; DimensionsOfProjectiveModules(A);
[ 9, 9 ]
</PRE>
<HR>
<H3><A NAME = "10927">Example <TT>AlgBas_BasicAlgebras-3 (H90E6)</TT></A></H3>
We create the basic algebra for A<sub>4</sub> over a field with 2 elements. 
The group
algebra has two nonisomorphic projective modules. We define the basic algebra
by constructing the matrix algebra for the projective modules and the path
trees and entering this data into the <TT>BasicAlgebra</TT> function.
<P>
Note that the matrices are sparse so we will define them by specifying
the nonzero rows. 
<P>
<P>
<P>
<PRE>
&gt; ff := GF(2);
&gt; MM6 := MatrixAlgebra(ff,6);
&gt; e11 := MM6!0;
&gt; e12 := MM6!0;
&gt; VV6 := VectorSpace(GF(2),6);
&gt; BB6 := Basis(VV6);
&gt; e11[1]  := BB6[1];
&gt; e11[3]  := BB6[3];
&gt; e11[4]  := BB6[4];
&gt; e11[6]  := BB6[6];
&gt; e12[2]  := BB6[2];
&gt; e12[5]  := BB6[5];
&gt; a1 := MM6!0;
&gt; b1 := MM6!0;
&gt; c1 := MM6!0;
&gt; d1 := MM6!0;
&gt; a1[1] := BB6[2];
&gt; b1[1] := BB6[3];
&gt; c1[2] := BB6[4];
&gt; a1[3] := BB6[5];
&gt; b1[4] := BB6[6];
&gt; c1[5] := BB6[6];
&gt; A1 := sub&lt; MM6 | [e11, e12, a1, b1, c1, d1] &gt;;
&gt; T1 := [ &lt;1,1&gt;, &lt;1,3&gt;, &lt;1,4&gt;, &lt;2,5&gt;, &lt;3,3&gt;, &lt;4,4&gt;];
&gt; 
&gt; VV5 := VectorSpace(ff,5);
&gt; BB5 := Basis(VV5);
&gt; MM5 := MatrixAlgebra(ff,5);
&gt; e21 := MM5!0;
&gt; e22 := MM5!0;
&gt; e22[1]  := BB5[1];
&gt; e22[3]  := BB5[3];
&gt; e22[5]  := BB5[5];
&gt; e21[2]  := BB5[2];
&gt; e21[4]  := BB5[4];
&gt; a2 := MM5!0;
&gt; b2 := MM5!0;
&gt; c2 := MM5!0;
&gt; d2 := MM5!0;
&gt; f2 := MM5!0;
&gt; g2 := MM5!0;
&gt; c2[1] := BB5[2];
&gt; d2[1] := BB5[3];
&gt; b2[2] := BB5[4];
&gt; d2[3] := BB5[5];
&gt; a2[4] := BB5[5];
&gt; A2 := sub&lt; MM5 | [e21, e22, a2, b2, c2, d2] &gt;;
&gt; T2 := [&lt;1,2&gt;, &lt;1,5&gt;, &lt;1,6&gt;, &lt;2,4&gt;, &lt;3,6&gt;];
&gt; 
&gt; C := BasicAlgebra( [&lt;A1, T1&gt;, &lt;A2, T2&gt;] );
&gt; C;
Basic algebra of dimension 11 over GF(2)
Number of projective modules: 2
Number of generators: 6
&gt; DimensionsOfProjectiveModules(C);
[ 6, 5 ]
&gt; DimensionsOfInjectiveModules(C);
[ 6, 5 ]
</PRE>
<HR>
<H4><A NAME = "10928">Boolean Functions</A></H4>

<P>
<P>
<P>
A basic algebra in Magma is a sequence of matrix algebras, each with 
a path tree. When a basic algebra is created by entering such a 
sequence, Magma does not check to see if all of the properties of 
a basic algebra are satisfied, as this is an expensive operation. 
The following two function check to see if the properties of a basic
algebra are satisfied. 


<H5><A NAME = "10929">IsDimensionCompatible(B) : AlgBas -&gt; Bool</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the dimension of a basic algebra is the same as the
dimension of the matrix algebra of its action on itself. If
false then the algebra is not a basic algebra.
</BLOCKQUOTE>
<H5><A NAME = "10930">IsPathTree(B) : AlgBas -&gt; Bool</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the basis elements of the projective modules in the basic
algebra are determined by the path tree.  If false, then the algebra
is  not a true basic algebra.
<P>
<P>
<P>
Two other functions check commutativity. 
</BLOCKQUOTE>
<H5><A NAME = "10931">IsCommutative(A) : AlgBas -&gt; Bool</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the basic algebra A is commutative. 
</BLOCKQUOTE>
<H5><A NAME = "10932">IsCentral(A,x) : AlgBas, AlgBasElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the element x is in the center of the basic algebra  A.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text969.htm">[Next]</A><A  HREF = "text967.htm">[Prev]</A> <A  HREF = "text969.htm">[Right]</A> <A  HREF = "text967.htm">[Left]</A> <A  HREF = "text966.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>