<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Deciding Virtual Properties of Linear Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text689.htm">[Next]</A><A  HREF = "text687.htm">[Prev]</A> <A  HREF = "text689.htm">[Right]</A> <A  HREF = "text687.htm">[Left]</A> <A  HREF = "text684.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7903">Deciding Virtual Properties of Linear Groups</A></H3>

<P>
<P>
<P>
In this section, K is a finite degree extension of F(x<sub>1</sub>, ..., x<sub>m</sub>), where F is Q, a number field, or a finite 
field. Also m &ge;0 if char F = 0, and m &gt; 0 otherwise.
<P>
We describe algorithms to decide various "virtual" properties of
a finitely generated linear group over an infinite field.
Details of the algorithms can be found in <A  HREF = "text683.htm#bib_Tits">[DFO11]</A>.


<H5><A NAME = "7904">IsSolubleByFinite(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>

<PRE>    NeedChangeOfBasis: BoolElt          Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G over K, and tests whether G is soluble-by-finite. If
so, it returns <TT>true</TT>, otherwise <TT>false</TT>. Note that
currently the function is valid only for p&gt;n if K has
characteristic p&gt;0.
<P>
The algorithm first constructs a congruence homomorphism, then a
presentation for the congruence image, and finally evaluates its
relations to obtain normal generators for the congruence kernel.
For further details, see <A  HREF = "text683.htm#bib_Tits">[DFO11, Section 3.2]</A>.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how
the presentation is constructed. If its value is "CT", then we
use the presentation provided by <TT>CompositionTreeVerify</TT>. If
its value is "PC" and the image is soluble, then we use a
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or
<TT>FPGroupStrong</TT>. If the order of the congruence image is less
than the value of the optional argument <TT>Small</TT>, then we use
<TT>FPGroup</TT> to construct the presentation; if it is less than
the value of the optional argument <TT>OrderLimit</TT>, then we use
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we
use the presentation provided by <TT>CompositionTreeVerify</TT>.
If <TT>NeedChangeOfBasis</TT> is <TT>true</TT>, then a change-of-basis 
matrix is computed and recorded which explictly exhibits G as a group of 
block lower-triangular matrices.  
</BLOCKQUOTE>
<H5><A NAME = "7905">IsPolycyclicByFinite(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G over Z, and tests whether G is polycyclic-by-finite.
If so, it returns <TT>true</TT>, otherwise <TT>false</TT>. See 
<A  HREF = "text683.htm#bib_Tits">[DFO11, Section 3.2]</A> for details.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how 
the presentation is constructed. If its value is "CT", then we 
use the presentation provided by <TT>CompositionTreeVerify</TT>. If 
its value is "PC" and the image is soluble, then we use a 
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value 
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or 
<TT>FPGroupStrong</TT>. If the order of the congruence image is less 
than the value of the optional argument <TT>Small</TT>, then we use 
<TT>FPGroup</TT> to construct the presentation; if it is less than 
the value of the optional argument <TT>OrderLimit</TT>, then we use 
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we 
use the presentation provided by <TT>CompositionTreeVerify</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7906">IsNilpotentByFinite(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G over K, and tests whether G is nilpotent-by-finite.
If so, it returns <TT>true</TT>, otherwise <TT>false</TT>. Here K must
currently be Q, a number field, or an (algebraic) function field
with a single indeterminate.
<P>
The algorithm first constructs a congruence homomorphism, then a
presentation for the congruence image, and finally evaluates its
relations to obtain normal generators for the congruence kernel. 
Further details of the algorithm can be found in <A  HREF = "text683.htm#bib_Tits">[DFO11, Section 
5.2]</A>.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how
the presentation is constructed. If its value is  "CT", then we
use the presentation provided by <TT>CompositionTreeVerify</TT>. If
its value is  "PC" and the image is soluble, then we use a
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or
<TT>FPGroupStrong</TT>. If the order of the congruence image is less
than the value of the optional argument <TT>Small</TT>, then we use
<TT>FPGroup</TT> to construct the presentation; if it is less than
the value of the optional argument <TT>OrderLimit</TT>, then we use
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we
use the presentation provided by <TT>CompositionTreeVerify</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7907">IsAbelianByFinite(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G over K, and tests whether G is abelian-by-finite. If
so, it returns <TT>true</TT>, otherwise <TT>false</TT>. As before, K
must currently be Q, a number field, or an (algebraic) function
field with a single indeterminate.
<P>
The algorithm first constructs a congruence homomorphism, then a 
presentation for the congruence image, and finally evaluates its 
relations to obtain normal generators for the congruence kernel. 
Further details of the algorithm can be found in <A  HREF = "text683.htm#bib_Tits">[DFO11, Section 
5.2]</A>.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how
the presentation is constructed. If its value is "CT", then we
use the presentation provided by <TT>CompositionTreeVerify</TT>. If
its value is "PC" and the image is soluble, then we use a
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or
<TT>FPGroupStrong</TT>. If the order of the congruence image is less
than the value of the optional argument <TT>Small</TT>, then we use
<TT>FPGroup</TT> to construct the presentation; if it is less than
the value of the optional argument <TT>OrderLimit</TT>, then we use
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we
use the presentation provided by <TT>CompositionTreeVerify</TT>.
</BLOCKQUOTE>
<H5><A NAME = "7908">IsCentralByFinite(G : parameters) : GrpMat -&gt; BoolElt</A></H5>

<PRE>    Presentation: MonStgElt             Default: "CT"</PRE>

<PRE>    OrderLimit: RngIntElt               Default: 10^{15}</PRE>

<PRE>    Small: RngIntElt                    Default: 10^6</PRE>

<PRE>    CompletelyReducible: BoolElt        Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
This function takes as input a finitely generated matrix
group G over a field K, and tests
whether G is central-by-finite. If so, it returns <TT>true</TT>,
otherwise <TT>false</TT>. Here K is (a finite degree extension of) 
F(x<sub>1</sub>, ..., x<sub>m</sub>), where F is Q or a number field.
<P>
The algorithm first constructs a congruence homomorphism, then a 
presentation for the congruence image, and finally evaluates its 
relations to obtain normal generators for the congruence kernel. 
Further details of the algorithm can be found in <A  HREF = "text683.htm#bib_Tits">[DFO11, Section 
5.3]</A>.
<P>
The optional parameter <TT>Presentation</TT> is used to dictate how
the presentation is constructed. If its value is "CT", then we
use the presentation provided by <TT>CompositionTreeVerify</TT>. If
its value is "PC" and the image is soluble, then we use a
PC-presentation provided by <TT>LMGSolubleRadical</TT>. If its value
is "FP" then we use the presentation provided by <TT>FPGroup</TT> or
<TT>FPGroupStrong</TT>. If the order of the congruence image is less
than the value of the optional argument <TT>Small</TT>, then we use
<TT>FPGroup</TT> to construct the presentation; if it is less than
the value of the optional argument <TT>OrderLimit</TT>, then we use
<TT>FPGroupStrong</TT> to construct the presentation; otherwise we
use the presentation provided by <TT>CompositionTreeVerify</TT>.
<P>
If the optional parameter <TT>CompletelyReducible</TT> is set to <TT>true</TT> then we use a more efficient algorithm to test whether G 
is central-by-finite. 
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text689.htm">[Next]</A><A  HREF = "text687.htm">[Prev]</A> <A  HREF = "text689.htm">[Right]</A> <A  HREF = "text687.htm">[Left]</A> <A  HREF = "text684.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>