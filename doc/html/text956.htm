<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Presentations for Matrix Algebras</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text941.htm">[Next]</A><A  HREF = "text955.htm">[Prev]</A> <A  HREF = "text941.htm">[Right]</A> <A  HREF = "text955.htm">[Left]</A> <A  HREF = "text942.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "10784">Presentations for Matrix Algebras</A></H3>

<P>
<P>
<P>
Magma has the capability of constructing a presentation for
an algebra A generated by a collection (&alpha;<sub>1</sub>, ..., &alpha;<sub>t</sub>)
of n x n matrices over a finite field k. The presentation
has the form 
<P>
A isomorphic to P/ I
<P>
where P is a free algebra in noncommuting variable and I
is a two-sided ideal in P. The presentation is obtained by 
computing a set of primitive idempotents for the algebra and 
extracting generators for the radical of the algebra. For such
an algebra there is a sequence 
<P>
0 -&gt; (Rad)(A) -&gt; A -&gt; A/(Rad)(A) -&gt; 0
<P>
which is split in the sense that A/(Rad)(A) is a subalgebra
A. Moreover, A/(Rad)(A) is a direct sum of complete matrix 
algebras A<sub>i</sub> over extensions K<sub>i</sub>
of the field k. Each complete matrix algebra A<sub>i</sub> is generated 
by two elements b<sub>i</sub> and t<sub>i</sub>. The element b<sub>i</sub> has  minimal
rank and  b<sub>i</sub><sup>n<sub>i</sub> - 1</sup> = e<sub>i</sub> is a primitive idempotent where
n<sub>i</sub> is the number of elements in the field K<sub>i</sub>.  That is, b<sub>i</sub> 
is a generator for the multiplicative group of nonzero elements of 
e<sub>i</sub>A<sub>i</sub>e<sub>i</sub> isomorphic to K<sub>i</sub>. The element t<sub>i</sub> is conjugate to a permutation
matrix of degree n<sub>i</sub> in A<sub>i</sub>. The elements z<sub>1</sub>, ..., z<sub>s</sub>
are generators of the radical of A. These elements are computed
so as to lie in the condensed algebra eAe where e = &sum;e<sub>i</sub>.
<P>
The calculation produces also a set of generators and relations
for the condensed algebra eAe. This algebra is Morita equivalent
to A, and hence shares many of the same homological properties of
the algebra A.
<P>
In the course of obtaining the presentation, several aspects of 
the algebra are computed. 



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text956.htm#10785">Quotients and Idempotents</A>
<LI> <A  HREF = "text956.htm#10794">Generators and Presentations</A>
<LI> <A  HREF = "text956.htm#10804">Solving the Word Problem</A>
</UL>
<H4><A NAME = "10785">Quotients and Idempotents</A></H4>



<H5><A NAME = "10786">NaturalFreeAlgebraCover(A) : AlgMat -&gt; Map</A></H5>
<BLOCKQUOTE>
Returns the map of a free algebra onto the matrix algebra A, such 
that the variables of the free algebra go to the generators of A.
</BLOCKQUOTE>
<H5><A NAME = "10787">SimpleQuotientAlgebras(A) : AlgMat  -&gt; Rec</A></H5>
<BLOCKQUOTE>
<P>
The simple quotient algebras of the matrix algebra A.
The output is a record having the following fields:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>The actual simple algebras that are the quotients of 
the algebra A. The function returns the sequence of mappings from 
the natural free-algebra cover of A to the quotients. The variable 
corresponding to a generator of A is mapped to the corresponding 
generator of the quotient. (field name <TT>SimpleQuotients</TT>)
<DT>(b)</DT><DD>The degrees of the quotients as matrix algebras over
their centers (field name <TT>DegreesOverCenters</TT>). 
<DT>(c)</DT><DD>The degrees of the extension of center of the quotient
algebra over the base field of A (field name <TT>DegreesOfCenters</TT>).
<DT>(d)</DT><DD>The number of elements in the center of the quotient
algebra (field name <TT>OrdersOfCenters</TT>).</DL>
</BLOCKQUOTE>
<H5><A NAME = "10788">PrimitiveIdempotentData(A) : AlgMat  -&gt; SeqEnum, Map, SeqEnum</A></H5>
<BLOCKQUOTE>
The initial data for a decomposition of the matrix 
algebra A. The output is a sequence of records, one for 
each simple quotient algebra of A, each consisting of the 
following fields.
<DL COMPACT class='compact'>
<DT>(a)</DT><DD><TT>AlgebraIdempotent</TT> : An idempotent whose image in the 
simple quotient is the identity matrix.
<DT>(b)</DT><DD><TT>PrimitiveIdempotent</TT> : A primitive idempotents whose image 
in the quotient is primitive.
<DT>(c)</DT><DD><TT>PrimitiveIdempotentOnQuotient</TT> : The image of the primitive 
idempotent in the quotient algebra.
<DT>(d)</DT><DD><TT>FieldGenerator</TT> : A multiple of the primitive idempotent which 
is a field generator for the center of the algebra.
<DT>(e)</DT><DD><TT>FieldGeneratorOnQuotient</TT> : The image of the field generator 
in the quotient algebra.
<DT>(f)</DT><DD><TT>GeneratingPolForCenter</TT> : The minimal polynomial for the matrix 
of the field generator.</DL>
</BLOCKQUOTE>
<H5><A NAME = "10789">PrimitiveIdempotents(A) : AlgMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
A list of primitive idempotent for the matrix algebra A, one idempotent 
for each irreducible module.
</BLOCKQUOTE>
<H5><A NAME = "10790">RanksOfPrimitiveIdempotents(A) : AlgMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of ranks of the primitive idempotents for the matrix 
algebra A.
</BLOCKQUOTE>
<H5><A NAME = "10791">NaturalFreeAlgebraCover(A) : AlgMat -&gt; Map</A></H5>
<BLOCKQUOTE>
Returns the map of a free algebra onto the matrix algebra A, such that 
the variables of the free algebra go the generators of the algebra.
</BLOCKQUOTE>
<H5><A NAME = "10792">CondensedAlgebra(A) : AlgMat -&gt; AlgMat</A></H5>
<BLOCKQUOTE>
Returns the algebra eAe where e is a sum of primitive idempotents, one 
for each simple A-module.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10793">Example <TT>AlgMat_PrimitiveIdempotents (H88E10)</TT></A></H3>
<P>
We form a matrix algebra over the field with three elements generated by
two elements. The algebra is block upper triangular, where the upper left
block is a field extension of degree three and the lower block is a filed
extension of degree 2. 
<P>
<P>
<P>
<P>
<P>
<PRE>
&gt; a1 := KMatrixSpace(GF(3),3,3)![0,1,0,0,0,1,-1,0,1];
&gt; a2 := KMatrixSpace(GF(3),2,2)![0,1,-1,0];
&gt; z1 := KMatrixSpace(GF(3),5,5)!0;
&gt; z2 := InsertBlock(z1,a1,1,1);
&gt; z2;
[0 1 0 0 0]
[0 0 1 0 0]
[2 0 1 0 0]
[0 0 0 0 0]
[0 0 0 0 0]
&gt; z3 := InsertBlock(z1,a2,4,4);
</PRE>
<P>
z2 and z3 are the matrices of the field extensions. Next, add an
entry to z3 that is an extension class between the two algebras.  
<P>
<P>
<P>
<P>
<PRE>
&gt; z3[1][4] := 1;
&gt; z3;
[0 0 0 1 0]
[0 0 0 0 0]
[0 0 0 0 0]
[0 0 0 0 1]
[0 0 0 2 0]
&gt; A := MatrixAlgebra&lt;GF(3),5|z2,z3&gt;;
</PRE>
<P>
We can check to see if the quotients came out as expected. 
<P>
<P>
<P>
<PRE>
&gt; SimpleQuotientAlgebras(A);
rec&lt;recformat&lt;SimpleQuotients: SeqEnum, DegreesOverCenters: 
SeqEnum, DegreesOfCenters: SeqEnum, OrdersOfCenters: SeqEnum&gt; | 
    SimpleQuotients := [
        Mapping from: Free associative algebra of rank 2 over 
                GF(3) to Matrix Algebra of degree 3 with 2 
            generators over GF(3),
        Mapping from: Free associative algebra of rank 2 over 
                GF(3) to Matrix Algebra of degree 2 with 2 
            generators over GF(3)
    ],
    DegreesOverCenters := [ 1, 1 ],
    DegreesOfCenters := [ 3, 2 ],
    OrdersOfCenters := [ 27, 9 ]
</PRE>
<P>
Here are the idempotents. 
<P>
<P>
<P>
<PRE>
&gt; PrimitiveIdempotents(A);
[
    [1 0 0 0 0]
    [0 1 0 0 0]
    [0 0 1 0 2]
    [0 0 0 0 0]
    [0 0 0 0 0],

    [0 0 0 0 0]
    [0 0 0 0 0]
    [0 0 0 0 1]
    [0 0 0 1 0]
    [0 0 0 0 1]
]
</PRE>
<P>
Finally we have the Cartan matrix. 
<P>
<P>
<P>
<PRE>
&gt; CartanMatrix(A);
[1 3]
[0 1]
</PRE>
<HR>
<H4><A NAME = "10794">Generators and Presentations</A></H4>

<P>
<P>
We use the idempotents as the first step in the presentation process.
The generators of the algebra consist of the field generators, each of 
which is a generator of the center of a simple quotient algebra multiplied
by a corresponding primitive idempotent, permutation matrices, one for 
each simple quotient algebra and generators for the radical, all of which
can be taken to be in the subalgebra eAe where e is the sum of one
primitive idempotent for each simple quotient algebra. 
<P>
For display purposes the variables for the free algebra of the presentations
are given names. The variables b.i represent field generators, while
the t.i's are permutation matrices and the z.i's are the generators
of the radical. The reader should be warned that these names are not 
suitable for input into other function. 


<H5><A NAME = "10795">SemisimpleGeneratorData(A) : AlgMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The data on the semisimple generators of the algebra A, that is the 
generators in A of A/Rad(A). Some of the output is intended for use 
in other functions. The return is a sequence of records, one for each 
simple quotient algebra. Each record consists of the following fields.
<DL COMPACT class='compact'>
<DT>(a)</DT><DD><TT>PowersOfFieldGenerators</TT> : A record consisting of look-up 
tables for the powers of the field generators as elements both of the 
algebra A and the simple quotient algebra.
<DT>(b)</DT><DD><TT>Permutation</TT> : The permutation matrix of the quotient algebra 
as an element of A.
<DT>(c)</DT><DD><TT>PermutationOnQuotient</TT> : The permutation matrix on the 
quotient.
<DT>(d)</DT><DD><TT>FieldGenerator</TT> : The matrix of the field generator as an 
element of A.
<DT>(e)</DT><DD><TT>FieldGeneratorOnQuotient</TT> : The matrix of the field generator 
as an element of the quotient algebra.
<DT>(f)</DT><DD><TT>PrimitiveIdempotent</TT> : The matrix of the primitive idempotent 
on A.
<DT>(g)</DT><DD><TT>PrimitiveIdempotentOnQuotient</TT> : The matrix of the primitive 
idempotent on the quotient algebra.
<DT>(h)</DT><DD><TT>GeneratingPolForCenter</TT> : The Galois polynomial for the 
extension of the center of the quotient algebra over the base ring.</DL>
</BLOCKQUOTE>
<H5><A NAME = "10796">AlgebraGenerators(A) : AlgMat -&gt; Rec</A></H5>
<BLOCKQUOTE>
The standard generators of the matrix algebra A. The output is a record
consisting of the following fields.
<DL COMPACT class='compact'>
<DT>(a)</DT><DD><TT>FieldGenerators</TT> : The sequence of matrices of the field 
generators, one for each simple quotient algebra.
<DT>(b)</DT><DD><TT>PermutationMatrices</TT> : The sequence of permutation matrices 
for the quotient algebras as elements of A, one for each quotient algebra.
<DT>(c)</DT><DD><TT>PrimitiveIdempotents</TT> : The sequence of primitive idempotents 
for A, one for each quotient algebra.
<DT>(d)</DT><DD><TT>RadicalGenerators</TT> : A set of generators for the radical of 
A arranged as a list of lists of generators of the radical of e<sub>i</sub>Ae<sub>j</sub> for 
e<sub>i</sub> and e<sub>j</sub> primitive idempotents. 
<DT>(e)</DT><DD><TT>SequenceRadicalGenerators</TT> : A sequence of minimal generators 
of radical of A.
<DT>(f)</DT><DD><TT>GeneratingPolynomialsForCenters</TT> : The galois polynomials of 
the centers over the base field.
<DT>(g)</DT><DD><TT>StandardFormConjugationMatrices</TT> : The matrices which conjugate
the element of A into the standard form relative to the computed primitive 
idempotents for A.</DL>
</BLOCKQUOTE>
<H5><A NAME = "10797">AlgebraStructure(A) : AlgMat -&gt; Rec</A></H5>
<BLOCKQUOTE>
The accumulated structure of the matrix algebra A. The return is a record
with the following fields.  Some of this information is saved to be used
in other calculations. 
<DL COMPACT class='compact'>
<DT>(a)</DT><DD><TT>FreeAlgebra</TT> : The free algebra in the newly computed variables for the algebra.
<DT>(b)</DT><DD><TT>RelationsIdeal</TT> : The ideal of relations among the new computed generators.
<DT>(c)</DT><DD><TT>StandardFreeAlgebraCover</TT> : The map from the free algebra to A.
<DT>(d)</DT><DD><TT>FieldGenerators</TT> : The matrices in A of the generators of the centers of the 
simple quotient algebras of A.
<DT>(e)</DT><DD><TT>PermutationMatrices</TT> : The permutation matrices each of which together with the 
corresponding field generator, generates a simple quotient algebra as 
a subalgebra of A.
<DT>(f)</DT><DD><TT>PrimitiveIdempotents</TT> : The primitive idempotents, each of which is a power of the 
corresponding field generator. 
<DT>(g)</DT><DD><TT>RadicalGenerators</TT> : A list of lists giving the generators of the radical of A 
which are in e<sub>i</sub>Ae<sub>j</sub> where { e<sub>i</sub>} are the primitive idempotents.
<DT>(h)</DT><DD><TT>CondensedRadicalBasis</TT> : The condensed matrices in eAe of a basis for the radical 
of the algebra. The output is a list of lists giving the basis for 
e<sub>i</sub>Ae<sub>j</sub>. Each entry in the list of lists is a tuple consisting of a 
matrix in the condensed algebra and the monomial which expresses this 
matrix as a product of the generators.
<DT>(i)</DT><DD><TT>CondensedFieldGenerators</TT> : The condensed matrices in eAe of the field generators.
<DT>(j)</DT><DD><TT>FieldPolynomials</TT> : The sequence of minimal polynomials of the field generators.
<DT>(k)</DT><DD><TT>DegreesOfSimpleModules</TT> : The dimensions of the Simple modules of A.
<DT>(l)</DT><DD><TT>DegreeOfFieldExtensions</TT> : The degrees of the centers of simple quotient algebras of A
over the base field of A.
<DT>(m)</DT><DD><TT>SimpleQuotientAlgebras</TT> : The simple quotient algebras of A.
<DT>(n)</DT><DD><TT>StandardFormConjugationMatrices</TT> : The matrices which conjugate the algebra A into standard form
with respect to the computed system of primitive idempotents.</DL>
</BLOCKQUOTE>
<H5><A NAME = "10798">Presentation(A) : AlgMat -&gt; AlgFr, AlgFr, Map</A></H5>
<BLOCKQUOTE>
The presentation in generators and relations of the matrix algebra A. The 
function returns the free algebra and the relations ideal calculated in 
the algebra structure program, as well as the map from the free algebra
to A.
</BLOCKQUOTE>
<H5><A NAME = "10799">StandardFormConjugationMatrices(A) : AlgMat -&gt; Tup</A></H5>
<BLOCKQUOTE>
Returns the pair (M and M<sup> - 1</sup>) of matrices that conjugate the 
matrix algebra A into standard form with respect to a chosen set of 
primitive idempotents.
</BLOCKQUOTE>
<H5><A NAME = "10800">CondensationMatrices(A) : AlgMat -&gt; Tup</A></H5>
<BLOCKQUOTE>
The matrices, conjugating by which, gives the condensation of A.
</BLOCKQUOTE>
<H5><A NAME = "10801">SequenceOfRadicalGenerators(A) : AlgMat -&gt; SeqEnum</A></H5>
<BLOCKQUOTE>
The sequence of matrices of elements that generate the radical of A.
</BLOCKQUOTE>
<H5><A NAME = "10802">CartanMatrix(A) : AlgMat -&gt; ModMatRngElt</A></H5>
<BLOCKQUOTE>
The Cartan Matrix of the algebra A.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10803">Example <TT>AlgMat_CondensedAlgebra (H88E11)</TT></A></H3>
<P>
In this example we form the permutation module M of the symmetric group G 
on seven letters by the Young subgroup that is the direct product H of 
two copies of the symmetric group on three letters. The algebra A is the 
image of the group algebra in the ring of endomorphisms of M. 
<P>
<P>
<P>
<PRE>
&gt; G := Sym(7);
&gt; H := sub&lt;G| G!(1,2,3),G!(1,2),G!(4,5,6), G!(4,5)&gt;;
&gt; M := PermutationModule(G, H, GF(5));
&gt; M;
GModule M of dimension 140 over GF(5)
&gt; A := Action(M);
</PRE>
<P>
We see that A has seven simple quotients. 
<P>
<P>
<P>
<PRE>
&gt; SimpleQuotientAlgebras(A);
rec&lt;recformat&lt;SimpleQuotients: SeqEnum, DegreesOverCenters: 
SeqEnum, DegreesOfCenters: SeqEnum, OrdersOfCenters: SeqEnum&gt; | 
    SimpleQuotients := [
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 35 with 2 
            generators over GF(5),
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 15 with 2 
            generators over GF(5),
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 13 with 2 
            generators over GF(5),
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 8 with 2 
            generators over GF(5),
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 8 with 2 
            generators over GF(5),
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 6 with 2 
            generators over GF(5),
        Mapping from: Free associative algebra of rank 2 over 
                GF(5) to Matrix Algebra of degree 1 with 2 
            generators over GF(5)
    ],
    DegreesOverCenters := [ 35, 15, 13, 8, 8, 6, 1 ],
    DegreesOfCenters := [ 1, 1, 1, 1, 1, 1, 1 ],
    OrdersOfCenters := [ 5, 5, 5, 5, 5, 5, 5 ]
    &gt;
&gt; RanksOfPrimitiveIdempotents(A);
[ 1, 1, 3, 2, 1, 4, 3 ]
</PRE>
<P>
The condensed algbra of A is a much smaller object. 
<P>
<P>
<P>
<PRE>
&gt; B := CondensedAlgebra(A);
&gt; B;
Matrix Algebra of degree 15 with 13 generators over GF(5)
&gt; CartanMatrix(A);
[1 0 0 0 0 0 0]
[0 1 0 0 0 0 0]
[0 0 2 0 1 0 1]
[0 0 0 1 0 1 0]
[0 0 1 0 1 0 0]
[0 0 0 1 0 2 0]
[0 0 1 0 0 0 2]
</PRE>
<P>
From the Cartan Matrix we can see that A has four blocks. The first
and second simple subalgebras are in blocks by themselves. The subalgebras
numbers 3, 5, and 7 form another block as do the subalgebras 4 and 6. Note
that B, being Morita equivalent to A, has the same Cartan Matrix and
the same block structure.  
<HR>
<H4><A NAME = "10804">Solving the Word Problem</A></H4>

<P>
<P>
The presentation machinery also gives a test for membership in a matrix
algebra. If A is a subalgebra of the n x n matrices generated
by some collection of matrices, Magma can tell if any n x n 
matrix is an element of A. If the element is in A then Magma can 
write the element as a polynomial in the polynomial ring of the presentation.


<H5><A NAME = "10805">WordProblemData(A) : AlgMat -&gt; List</A></H5>
<BLOCKQUOTE>
The data needed for the solution to the word problem. The output is a 
list of lists of basis elements for the radical together with the
corresponding monomials in the generators of the free algebra.
</BLOCKQUOTE>
<H5><A NAME = "10806">WordProblem(A, x) : AlgMat, AlgMatElt -&gt; BoolElt, AlgFrElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the matrix x is in the subalgebra A, and if true returns 
also an expression of the element x as a polynomial in the presentation of A.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "10807">Example <TT>AlgMat_Presentation (H88E12)</TT></A></H3>
<P>
In this example we form the permutation module for the symmetric group G
acting on the coset space of the normalizer H of Sylow 3-subgroup of G.
The coefficients are in the field with two elements. The algebra A is the 
image of the group algebra in the endomorphism ring of the permutation 
module. 
<P>
<P>
<P>
<PRE>
&gt; G := Sym(5);
&gt; H := Normalizer(G,Sylow(G,3));
&gt; M := PermutationModule(G,H, GF(2));
&gt; M;
GModule M of dimension 10 over GF(2)
&gt; A := Action(M);
</PRE>
<P>
Here we get the presentation of A.
<P>
<P>
<P>
<PRE>
&gt; P, I, mu  := Presentation(A);
&gt; Dimension(P/I);
42
</PRE>
<P>
Thus the dimension of A is 42. 
<P>
<P>
<P>
<PRE>
&gt; CartanMatrix(A);
[1 0 1]
[0 1 0]
[1 0 2]
&gt; B := CondensedAlgebra(A);
&gt; Q, J, theta := Presentation(B);
</PRE>
<P>
The presentation of B has the form:
<P>
<P>
<P>
<PRE>
&gt; J;
Two-sided ideal of Free associative algebra of rank 5 over GF(2)
Non-commutative Graded Lexicographical Order
Variables: b_1, b_2, b_3, z_1, z_2
Groebner basis:
[
    b_2^2 + b_2,
    b_2*b_3,
    b_2*z_1,
    b_2*z_2,
    b_3*b_2,
    b_3^2 + b_3,
    b_3*z_1,
    b_3*z_2 + z_2,
    z_1*b_2,
    z_1*b_3 + z_1,
    z_1^2,
    z_1*z_2,
    z_2*b_2,
    z_2*b_3,
    z_2^2,
    b_1 + b_2 + b_3 + 1
]
</PRE>
<P>
The matrix A.1 is the first of the original generators for A. We
can check that A.1 is an element of the algebra generated by the 
computed generators of A. 
<P>
<P>
<P>
<PRE>
&gt; boo, y := WordProblem(A,A.1);
&gt; boo;
true
</PRE>
<P>
The element y is the expression of A.1 as a polynomial in the free
algebra P in the new computed generators for A.
<P>
<P>
<P>
<PRE>
&gt; y;
t_1^4*b_1*t_1^3 + t_2^4*b_2*t_2^3 + t_1^4*b_1*t_1^2 + 
    t_2^3*b_2*t_2^3 + t_1^2*b_1*t_1^3 + t_1^4*b_1*t_1 + 
    t_2^2*b_2*t_2^3 + t_2^3*b_2*t_2^2 + t_2^4*b_2*t_2 + 
    t_1^2*b_1*t_1^2 + t_1^3*b_1*t_1 + t_1^4*b_1 + t_1^4*z_1 + 
    t_2*b_2*t_2^3 + t_2^2*b_2*t_2^2 + t_2^3*b_2*t_2 + 
    t_1*b_1*t_1^2 + t_1^3*b_1 + t_3*z_2*t_1^2 + t_1^2*b_1 + 
    t_2*b_2*t_2 + t_2^2*b_2 + t_1*b_1 + t_2*b_2 + t_3*b_3 + 
    t_3*z_2
</PRE>
<P>
The mapping mu is the function from the free algebra P into A.
<P>
<P>
<P>
<PRE>
&gt; mu(y); 
[0 1 0 0 0 0 0 0 0 0]
[0 0 0 1 0 0 0 0 0 0]
[0 0 0 0 1 0 0 0 0 0]
[0 0 0 0 0 1 0 0 0 0]
[0 0 0 0 0 0 1 0 0 0]
[0 0 0 0 0 0 0 0 1 0]
[0 0 0 0 0 0 0 1 0 0]
[0 0 0 0 0 0 0 0 0 1]
[1 0 0 0 0 0 0 0 0 0]
[0 0 1 0 0 0 0 0 0 0]
</PRE>
<P>
The ultimate check of the accuracy of the computation is that the 
polynomial expressions give back the original generators. 
<P>
<P>
<P>
<PRE>
&gt; mu(y) eq A.1;
true
</PRE>
<P>
Finally we can check whether a random 10 x 10 matrix is an
element of A. 
<P>
<P>
<P>
<PRE>
&gt; b := Random(Generic(A));
&gt; WordProblem(A,b);
false
</PRE>
<PRE></PRE> <A  HREF = "text941.htm">[Next]</A><A  HREF = "text955.htm">[Prev]</A> <A  HREF = "text941.htm">[Right]</A> <A  HREF = "text955.htm">[Left]</A> <A  HREF = "text942.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>