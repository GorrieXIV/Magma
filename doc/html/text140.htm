<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Creation Functions</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text141.htm">[Next]</A><A  HREF = "text139.htm">[Prev]</A> <A  HREF = "text141.htm">[Right]</A> <A  HREF = "text139.htm">[Left]</A> <A  HREF = "text138.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "956">Creation Functions</A></H3>

<P>
<P>
In this section we describe the creation of maps, partial maps, and
homomorphisms via the various forms of the constructors, as well as
maps that define coercions between algebraic structures.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text140.htm#957">Creation of Maps</A>
<LI> <A  HREF = "text140.htm#961">Creation of Partial Maps</A>
<LI> <A  HREF = "text140.htm#965">Creation of Homomorphisms</A>
<LI> <A  HREF = "text140.htm#970">Coercion Maps</A>
</UL>
<H4><A NAME = "957">Creation of Maps</A></H4>

<P>
<P>
Maps between structures A and B may be specified either by providing
the full graph (as defined in the previous section) or by supplying 
an expression rule for finding images.


<H5><A NAME = "958">map&lt; A -&gt; B | G &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a finite structure A, a structure
B and a graph G of A x B, construct the mapping
f : A -&gt; B, as defined by G. The graph G may be given
by either a set, sequence, or list of tuples or arrow-pairs .
Note that G must be a full graph, i.e., every element of A must
occur exactly once as a first component.
</BLOCKQUOTE>
<H5><A NAME = "959">map&lt; A -&gt; B | x : -&gt; e(x) &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a set or structure A, a set or structure B, a variable x
and an expression e(x), usually involving x,
construct the mapping f : A -&gt; B, as defined by e(x).
It is the user's responsibility to ensure that a value is defined for
every x&isin;A.  The scope of the variable x is restricted to
the map-constructor.
</BLOCKQUOTE>
<H5><A NAME = "960">map&lt; A -&gt; B | x : -&gt; e(x), y : -&gt; i(y) &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a set or structure A, a set or structure B,
a variable x, an expression e(x), usually involving x,
a variable y, and an expression i(y), usually involving y,
construct the mapping f : A -&gt; B, as defined by x |-&gt; e(x),
with corresponding inverse f<sup> - 1</sup>: B -&gt; A, as defined
by y |-&gt; i(y).
It is the user's responsibility to ensure that a value e(x) is
defined for every x&isin;A, a value i(y) is defined for
every y&isin;B, and that i(y) is the true inverse of e(x).
The scope of the variables x and y is restricted to the map-constructor.
</BLOCKQUOTE>
<H4><A NAME = "961">Creation of Partial Maps</A></H4>

<P>
<P>
Partial mappings are quite different to both general mappings and 
homomorphisms, in that images need not be defined for every element
of the domain.


<H5><A NAME = "962">pmap&lt; A -&gt; B | G &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a finite structure A of cardinality n, a structure B and a subgraph
G of A x B, construct the partial map f : A -&gt; B, 
as defined by G.
The subgraph G may be given
by either a set, sequence, or list of tuples or arrow-pairs .
</BLOCKQUOTE>
<H5><A NAME = "963">pmap&lt; A -&gt; B | x : -&gt; e(x) &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a set A, a set B, a variable x and an expression e(x),
construct the partial map f : A -&gt; B, as defined by e(x).
This form of the map constructor is a special case of the previous one
whereby the image of x can be defined using a single expression.
Again the scope of x is restricted to the map-constructor.
</BLOCKQUOTE>
<H5><A NAME = "964">pmap&lt; A -&gt; B | x : -&gt; e(x), y : -&gt; i(y) &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
This constructor is the same as the map constructor above which allows
the inverse map i(y) to be specified, except that the result is marked to
be a partial map.
</BLOCKQUOTE>
<H4><A NAME = "965">Creation of Homomorphisms</A></H4>

<P>
<P>
The principal construction for homomorphisms consists of the
generator image form, where the images of the generators of the domain are
listed. Note that the kind of homomorphism and the kind and number of
generators for which images are expected, depend entirely on the
type of the domain. Moreover, some features of the created homomorphism,
e.g. whether checking of the homomorphism is done during creation or whether
computing preimages is possible, depend on the types of the domain and the
codomain. We refer to the appropriate handbook chapters for further
information.


<H5><A NAME = "966">hom&lt; A -&gt; B | G &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a finitely generated algebraic structure A and
a structure B, as well as a graph G of 
A x B, construct the homomorphism 
f : A -&gt; B defined by extending the map of the generators 
of A to all of A.
The graph G may be given
by either a set, sequence, or list of tuples or arrow-pairs .
<P>
The detailed requirements on the specification are module-dependent,
and can be found in the chapter describing the domain A.
</BLOCKQUOTE>
<H5><A NAME = "967">hom&lt; A -&gt; B | y<sub>1</sub>, ..., y<sub>n</sub> &gt; : Str, Str -&gt; Map</A></H5>
<H5>hom&lt; A -&gt; B | x<sub>1</sub> -&gt; y<sub>1</sub>, ..., x<sub>n</sub> -&gt; y<sub>n</sub> &gt; : Str, Str -&gt; Map</H5>
<BLOCKQUOTE>
This is a module-dependent constructor for homomorphisms between
structures A and B; see the chapter
describing the functions for A.
In general after the bar the images for all generators of
the structure A must be specified.
</BLOCKQUOTE>
<H5><A NAME = "968">hom&lt; A -&gt; B | x : -&gt; e(x) &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a structure A, a structure B, a variable x and an expression e(x),
construct the homomorphism f : A -&gt; B, as defined by e(x).
This form of the map constructor is a special case of the previous one
whereby the image of x can be defined using a single expression.
Again the scope of x is restricted to the map-constructor.
</BLOCKQUOTE>
<H5><A NAME = "969">hom&lt; A -&gt; B | x : -&gt; e(x), y : -&gt; i(y) &gt; : Str, Str -&gt; Map</A></H5>
<BLOCKQUOTE>
This constructor is the same as the map constructor above which allows
the inverse map i(y) to be specified, except that the result is marked to
be a homomorphism.
</BLOCKQUOTE>
<H4><A NAME = "970">Coercion Maps</A></H4>

<P>
<P>
Magma has a sophisticated machinery for coercion of elements
into structures other than the parent. Non-automatic coercion
is usually performed via the <TT>!</TT> operator. To obtain the
coercion map corresponding to <TT>!</TT> in a particular instance
the <TT>Coercion</TT> function can be used.


<H5><A NAME = "971">Coercion(D, C) : Str, Str -&gt; Map</A></H5>
<H5>Bang(D, C) : Str, Str -&gt; Map</H5>
<BLOCKQUOTE>
Given structures D and C such that elements from D can be
coerced into C, return the map m that performs this coercion.
Thus the domain of m will be D and the codomain will be C.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text141.htm">[Next]</A><A  HREF = "text139.htm">[Prev]</A> <A  HREF = "text141.htm">[Right]</A> <A  HREF = "text139.htm">[Left]</A> <A  HREF = "text138.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>