<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>User-defined Verbose Flags</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text27.htm">[Next]</A><A  HREF = "text25.htm">[Prev]</A> <A  HREF = "text27.htm">[Right]</A> <A  HREF = "text25.htm">[Left]</A> <A  HREF = "text21.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "191">User-defined Verbose Flags</A></H3>

<P>
<P>
Verbose flags may be defined by users within packages.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text26.htm#193">Examples</A>
</UL>
<H5><A NAME = "192">declare verbose F, m;</A></H5>
<BLOCKQUOTE>
Given a verbose flag name F (without quotes), and a literal integer
m, create the verbose flag F, with the maximal allowable level for
the flag set to m.  This directive may only be used within package
files.
</BLOCKQUOTE>
<H4><A NAME = "193">Examples</A></H4>

<P>
<P>
In this subsection we give examples which illustrate all of the above
features.


<HR>
<H3><A NAME = "194">Example <TT>Func_SystemAttributes (H2E13)</TT></A></H3>
We illustrate how the predefined system attributes may be used.
Note that the valid arguments for <TT>AssertAttribute</TT> and
<TT>HasAttribute</TT> documented elsewhere now also work as system
attributes so see the documentation for these functions for details
as to the valid system attribute field names.
<P>
<P>
<PRE>
&gt; // Create group G.
&gt; G := PSL(3, 2);
&gt; // Check whether order known.
&gt; assigned G`Order;
false
&gt; // Attempt to access order -- error since not assigned.
&gt; G`Order;

&gt;&gt; G`Order;
    ^
Runtime error in `: Attribute 'Order' for this structure
is valid but not assigned
&gt; // Force computation of order by intrinsic Order.
&gt; Order(G);
168
&gt; // Check Order field again.
&gt; assigned G`Order; 
true
&gt; G`Order;
168
&gt; G""Order"; // String form for field
168
&gt; o := "Order";
&gt; G"o;
168
&gt; // Create code C and set its minimum weight.
&gt; C := QRCode(GF(2), 31);
&gt; C`MinimumWeight := 7;                                                        
&gt; C;
[31, 16, 7] Quadratic Residue code over GF(2)
...
</PRE>
<HR>
<H3><A NAME = "195">Example <TT>Func_InteractiveUserAttributes (H2E14)</TT></A></H3>
We illustrate how user attributes may be defined and used in an interactive
session.  This situation would arise rarely -- more commonly, attributes
would be used within packages.
<P>
<P>
<PRE>
&gt; // Add attribute field MyStuff for matrix groups.
&gt; AddAttribute(GrpMat, "MyStuff");
&gt; // Create group G.
&gt; G := GL(2, 3);
&gt; // Try illegal field.
&gt; G`silly;

&gt;&gt; G`silly;
    ^
Runtime error in `: Invalid attribute 'silly' for this structure
&gt; // Try legal but unassigned field.
&gt; G`MyStuff;

&gt;&gt; G`MyStuff;
    ^
Runtime error in `: Attribute 'MyStuff' for this structure is valid but not 
assigned
&gt; // Assign field and notice value.
&gt; G`MyStuff := [1, 2];
&gt; G`MyStuff;
[ 1, 2 ]
</PRE>
<HR>
<H3><A NAME = "196">Example <TT>Func_PackageUserAttributes (H2E15)</TT></A></H3>
We illustrate how user attributes may be used in packages.
This is the most common usage of such attributes.  We first
give some (rather naive) Magma code to compute and store
a permutation representation of a matrix group.  Suppose
the following code is stored in the file <TT>permrep.m</TT>.
<P>
<P>
<PRE>
declare attributes GrpMat: PermRep, PermRepMap;

intrinsic PermutationRepresentation(G::GrpMat) -&gt; GrpPerm
{A permutation group representation P of G, with homomorphism f: G -&gt; P};
    // Only compute rep if not already stored.
    if not assigned G`PermRep then
        G`PermRepMap, G`PermRep := CosetAction(G, sub&lt;G|&gt;);
    end if;
    return G`PermRep, G`PermRepMap;
end intrinsic;
</PRE>
Note that the information stored will be reused in subsequent calls of
the intrinsic.
Then the package can be attached within a Magma session and the
intrinsic <TT>PermutationRepresentation</TT> called like in the
following code (assumed to be run in the same directory).
<P>
<P>
<PRE>
&gt; Attach("permrep.m");
&gt; G := GL(2, 2);
&gt; P, f := PermutationRepresentation(G);
&gt; P;
Permutation group P acting on a set of cardinality 6
    (1, 2)(3, 5)(4, 6)
    (1, 3)(2, 4)(5, 6)
&gt; f;
Mapping from: GrpMat: G to GrpPerm: P
</PRE>
Suppose the following line were also in the package file:
<P>
<P>
<PRE>
declare verbose MyAlgorithm, 3;
</PRE>
Then there would be a new verbose flag <TT>MyAlgorithm</TT> for
use anywhere within Magma, with the maximum 3 for the level.
<HR>
<PRE></PRE> <A  HREF = "text27.htm">[Next]</A><A  HREF = "text25.htm">[Prev]</A> <A  HREF = "text27.htm">[Right]</A> <A  HREF = "text25.htm">[Left]</A> <A  HREF = "text21.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>