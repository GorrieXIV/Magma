<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Coding Theory and Cryptography</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1843.htm">[Next]</A><A  HREF = "text1841.htm">[Prev]</A> <A  HREF = "text1843.htm">[Right]</A> <A  HREF = "text1841.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "20563">Coding Theory and Cryptography</A></H3>

<P>
<P>
<P>
One of the few public-key cryptosystems which does not rely on 
number theory is the McEliece cryptosystem, whose security
depends on coding theory.
An attack on the McEliece cryptosystem must determine the coset leader
(of known weight) from a user defined error coset.
In general it is assumed that the code in question has no known structure,
and it treated as a random code.
<P>
The best known attacks on the McEliece cryptosystem are a series of 
probabilistic enumeration-based algorithms.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1842.htm#20564">Standard Attacks</A>
<LI> <A  HREF = "text1842.htm#20570">Generalized Attacks</A>
</UL>
<H4><A NAME = "20564">Standard Attacks</A></H4>



<H5><A NAME = "20565">McEliecesAttack(C, v, e) : Code, ModTupFldElt, RngIntElt -&gt; ModTupFldElt</A></H5>

<PRE>    MaxTime: FldReElt                   Default: &infin;</PRE>

<PRE>    DirectEnumeration: BoolElt          Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Perform the original decoding attack described by McEliece when he 
defined his cryptosystem.
Random information sets are tested for being disjoint for the support
of the desired error vector.
This intrinsic attempts to enumerate a vector of weight e from the error
coset v + C for the given vector v.
<P>
If set to a non-zero positive value,
the variable argument <TT>MaxTime</TT> aborts the computation if it goes to long.
The argument <TT>DirectEnumeration</TT> controls whether or not
the coset is enumerated directly, or whether the 
larger code generated by &lt; C, v &gt; is enumerated.
</BLOCKQUOTE>
<H5><A NAME = "20566">LeeBrickellsAttack(C, v, e, p) : Code, ModTupFldElt, RngIntElt, RngIntElt -&gt; ModTupFldElt</A></H5>

<PRE>    MaxTime: FldReElt                   Default: &infin;</PRE>

<PRE>    DirectEnumeration: BoolElt          Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Perform the decoding attack described by Lee and Brickell.
Random information sets are tested for having weight less than
or equal to p.
For most sized codes, the optimal input parameter for this attack
is p=2.
This intrinsic attempts to enumerate a vector of weight e from the error
coset v + C for the given vector v.
<P>
If set to a non-zero positive value,
the variable argument <TT>MaxTime</TT> aborts the computation if it goes to long.
The argument <TT>DirectEnumeration</TT> controls whether or not
the coset is enumerated directly, or whether the 
larger code generated by &lt; C, v &gt; is enumerated.
</BLOCKQUOTE>
<H5><A NAME = "20567">LeonsAttack(C, v, e, p, l) : Code, ModTupFldElt, RngIntElt, RngIntElt,RngIntElt -&gt; ModTupFldElt</A></H5>

<PRE>    MaxTime: FldReElt                   Default: &infin;</PRE>

<PRE>    DirectEnumeration: BoolElt          Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Perform the decoding attack described by Leon.
For random information sets of size k, a punctured
code of length k + l is investigated for codewords of 
weight less than or equal to p.
For small codes (up to length around 200), 
the optimal input parameter for this attack
is p=2 with l somewhere in the range 3 - 6.
For larger code p=3 can sometimes be faster, with values of l
in the range 7 - 10.
This intrinsic attempts to enumerate a vector of weight e from the error
coset v + C for the given vector v.
<P>
If set to a non-zero positive value,
the variable argument <TT>MaxTime</TT> aborts the computation if it goes to long.
The argument <TT>DirectEnumeration</TT> controls whether or not
the coset is enumerated directly, or whether the 
larger code generated by &lt; C, v &gt; is enumerated.
</BLOCKQUOTE>
<H5><A NAME = "20568">SternsAttack(C, v, e, p, l) : Code, ModTupFldElt, RngIntElt, RngIntElt,RngIntElt -&gt; ModTupFldElt</A></H5>

<PRE>    MaxTime: FldReElt                   Default: &infin;</PRE>

<PRE>    DirectEnumeration: BoolElt          Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Perform the decoding attack described by Stern.
For random information sets of size k, a punctured
code of length k + l is split into two subspaces. 
Each subspace is enumerated up to information weight p
and collisions found with zero non-information weight.
For small to mid-range  codes (up to length around 500), 
the optimal input parameter for this attack
is p=2 with l somewhere in the range 9 - 13.
For larger code p=3 can sometimes be faster, with values of l
from 20 to much higher.
This intrinsic attempts to enumerate a vector of weight e from the error
coset v + C for the given vector v.
<P>
If set to a non-zero positive value,
the variable argument <TT>MaxTime</TT> aborts the computation if it goes to long.
The argument <TT>DirectEnumeration</TT> controls whether or not
the coset is enumerated directly, or whether the 
larger code generated by &lt; C, v &gt; is enumerated.
</BLOCKQUOTE>
<H5><A NAME = "20569">CanteautChabaudsAttack(C, v, e, p, l) : Code, ModTupFldElt, RngIntElt, RngIntElt,RngIntElt -&gt; ModTupFldElt</A></H5>

<PRE>    MaxTime: FldReElt                   Default: &infin;</PRE>

<PRE>    DirectEnumeration: BoolElt          Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Perform the decoding attack described by Canteaut and Chabaud.
For random information sets of size k, a punctured
code of length k + l is split into two subspaces. 
Using the enumeration technique identical to that of Stern's 
attack, a different linear algebra process steps through
information sets more quickly. The price for this
is less independent information sets.
This intrinsic attempts to enumerate a vector of weight e from the error
coset v + C for the given vector v.
<P>
For most codes (up to length around 1000), 
the optimal input parameter for this attack
is p=1 with l somewhere in the range 6 - 9.
For very large codes p=2 can sometimes be faster, with values of l
from 20 to much higher.
<P>
If set to a non-zero positive value,
the variable argument <TT>MaxTime</TT> aborts the computation if it goes to long.
The argument <TT>DirectEnumeration</TT> controls whether or not
the coset is enumerated directly, or whether the 
larger code generated by &lt; C, v &gt; is enumerated.
</BLOCKQUOTE>
<H4><A NAME = "20570">Generalized Attacks</A></H4>

<P>
<P>
<P>
All of the decoding attacks on the McEliece cryptosystem can be put 
into a uniform framework, consisting of repeated operation of a 
two stage procedure.
Magma allows the user to choose any combination of the
implemented methods, which include improvements on the
standard attacks.


<H5><A NAME = "20571">DecodingAttack(C, v, e) : Code, ModTupFldElt, RngIntElt, RngIntElt,RngIntElt -&gt; ModTupFldElt</A></H5>

<PRE>    Enumeration: MonStgElt              Default: "Standard"</PRE>

<PRE>    MatrixSequence: MonStgElt           Default: "Random"</PRE>

<PRE>    NumSteps: RngIntElt                 Default: 1</PRE>

<PRE>    p: RngIntElt                        Default: 2</PRE>

<PRE>    l: RngIntElt                        Default: </PRE>

<PRE>    MaxTime: FldReElt                   Default: &infin;</PRE>

<PRE>    DirectEnumeration: BoolElt          Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Perform a generalized decoding attack by specifying the 
enumeration and matrix sequence procedures to be used.
This intrinsic attempts to enumerate a vector of weight e from the error
coset v + C for the given vector v.
<P>
The parameter <TT>Enumeration</TT> can take the values
<TT>"Standard"</TT>, <TT>"Leon"</TT> or <TT>"HashTable"</TT>, and correspond
to the methods used in Lee and Brickells, Leons and Sterns
attacks respectively.
<P>
The parameter <TT>MatrixSequence</TT> can take on the values
<TT>"Random"</TT> or <TT>"Stepped"</TT>, corresponding to either 
a completely random sequence of information sets or
a sequence of sets differing in one place. 
<P>
The integer valued <TT>NumSteps</TT> offers a generalization of
the stepped matrix process, taking a sequence of
sets which differ at the specified
number of places.
<P>
The parameter <TT>p</TT> and <TT>l</TT> describe the enumeration
process, and their exact meaning depends on the enumeration
process in question. See the earlier descriptions of the standard
attacks for a full description of their meanings.
<P>
For codes of lengths anywhere between 500 - 1000, the
best performance can be obtained using a multiply
stepped matrix sequence, using around 10 steps at a time.
This is in conjunction with the hashtable enumeration technique
using p=2 and l in the range 15 - 20.
<P>
If set to a non-zero positive value,
the variable parameter <TT>MaxTime</TT> aborts the computation if it goes to long.
The parameter <TT>DirectEnumeration</TT> controls whether or not
the coset is enumerated directly, or whether the 
larger code generated by &lt; C, v &gt; is enumerated.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text1843.htm">[Next]</A><A  HREF = "text1841.htm">[Prev]</A> <A  HREF = "text1843.htm">[Right]</A> <A  HREF = "text1841.htm">[Left]</A> <A  HREF = "text1831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>