<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Dynamic Typing</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text66.htm">[Next]</A><A  HREF = "text64.htm">[Prev]</A> <A  HREF = "text66.htm">[Right]</A> <A  HREF = "text64.htm">[Left]</A> <A  HREF = "text56.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "556">Dynamic Typing</A></H3>

<P>
<P>
Magma  is a dynamically typed language. In practice this means that:
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>there is no need to declare the type of identifiers (this
is especially important for identifiers assigned function values!).
<DT>(b)</DT><DD>type violations are only checked for when the code containing the type
violation is actually executed.
<P>
<P>
</DL>
To make these ideas clearer consider the following two functions,
<P>
<P>
<PRE>
&gt; f := func&lt; a, b | a+b &gt;;
&gt; g := func&lt; a, b | a+true &gt;;
</PRE>
First note that there are no declarations of the types of any of the
identifiers.
<P>
Second consider the use of <TT>+</TT> in the definition of function f. Which 
addition function is meant by the <TT>+</TT> in <TT>a+b</TT>?
Integer addition? Matrix 
addition? Group addition? ... Or in other words what is the type of the
identifier <TT>+</TT> in function f? Is it integer addition, matrix addition, etc.?
The answer to this question is that <TT>+</TT> here denotes all possible 
addition function values (<TT>+</TT> is said to denote a <I>family</I> of function values),
and Magma  will automatically chose the appropriate function value to apply when
it knows the type of a and b. 
<P>
Say we now type,
<P>
<P>
<PRE>
&gt; f(1,2);
</PRE>
Magma  now knows that a and b in f are both integers and thus <TT>+</TT>
in f should be taken to mean the integer addition function. Hence it will
produce the desired answer of 3.
<P>
Finally consider the definition of the function g. It is clear X+true for
all X is a type error, so it might be expected that Magma  would raise an 
error as soon as the definition of g is typed in. Magma  does not however raise
an error at this point. Rather it is only when g is applied and the line 
<TT>return a + true</TT> is actually executed that an error is raised. 
<P>
In general the exact point at which type checking is done is not important. 
Sometimes however it is. Say we had typed the following definition for g,
<P>
<P>
<PRE>
&gt; g := function(a,b) 
&gt; if false then
&gt; return a+true; 
&gt; else
&gt; return a+b;
&gt; end if;
&gt; end function;
</PRE>
Now because the <TT>if false</TT> condition will never be true, the line 
<TT>return a+true</TT> will <I>never</I> be executed, and hence the type violation
of adding a to true will <I>never</I> be raised!
<P>
One closing point: it should be clear now that where it was previously stated 
that the initial context "contains assignments of all the built-in Magma  
function values to the appropriate identifiers", in fact the initial context 
contains assignments of all the built-in Magma  function <I>families</I> to the 
appropriate identifiers.


<PRE></PRE> <A  HREF = "text66.htm">[Next]</A><A  HREF = "text64.htm">[Prev]</A> <A  HREF = "text66.htm">[Right]</A> <A  HREF = "text64.htm">[Left]</A> <A  HREF = "text56.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>