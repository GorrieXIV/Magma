<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Assignment</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text8.htm">[Next]</A><A  HREF = "text6.htm">[Prev]</A> <A  HREF = "text8.htm">[Right]</A> <A  HREF = "text6.htm">[Left]</A> <A  HREF = "text3.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9">Assignment</A></H3>

<P>
<P>
In this section the basic forms of assignment of values to identifiers are
described.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text7.htm#10">Simple Assignment</A>
<LI> <A  HREF = "text7.htm#17">Indexed Assignment</A>
<LI> <A  HREF = "text7.htm#20">Generator Assignment</A>
<LI> <A  HREF = "text7.htm#26">Mutation Assignment</A>
<LI> <A  HREF = "text7.htm#29">Deletion of Values</A>
</UL>
<H4><A NAME = "10">Simple Assignment</A></H4>



<H5><A NAME = "11">x := expression;</A></H5>
<BLOCKQUOTE>
Given an identifier <TT>x</TT> and an expression <I>expression</I>, assign
the value of <I>expression</I> to <TT>x</TT>.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "12">Example <TT>State_Identifiers (H1E1)</TT></A></H3>
<P>
<P>
<PRE>
&gt; x := 13;
&gt; y := x^2-2;
&gt; x, y;
13 167
</PRE>
Intrinsic function names are identifiers just like the x and y above.
Therefore it is possible to reassign them to your own variable.
<P>
<P>
<PRE>
&gt; f := PreviousPrime;
&gt; f(y);
163
</PRE>
In fact, the same can also be done with the infix operators, except that
it is necessary to enclose their names in quotes. Thus it is possible
to define your own function <TT>Plus</TT> to be the function taking the
arguments of the intrinsic <TT>+</TT> operator.
<P>
<P>
<PRE>
&gt; Plus := '+';
&gt; Plus(1/2, 2);
5/2
</PRE>
Note that redefining the infix operator will <I>not</I> change the
corresponding mutation assignment operator (in this case <TT>+:=</TT>).
<HR>
<H5><A NAME = "13">x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub> := expression;</A></H5>
<BLOCKQUOTE>
Assignment of n&ge;1 values, returned by the expression on the right
hand side. Here the <TT>x<sub>i</sub></TT> are identifiers, and the right hand side
expression must return m&ge;n values; the first n of these will be
assigned to <TT>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub></TT> respectively.
</BLOCKQUOTE>
<H5><A NAME = "14">_ := expression;</A></H5>
<BLOCKQUOTE>
Ignore the value(s) returned by the expression on the right hand side.
</BLOCKQUOTE>
<H5><A NAME = "15">assigned  x : Var -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
An expression which yields the value <TT>true</TT> if the `local' identifier
x has a value currently assigned to it and <TT>false</TT> otherwise. 
Note that the <TT>assigned</TT>-expression will return <TT>false</TT> for intrinsic 
function names, since they are not `local' variables (the identifiers can be
assigned to something else, hiding the intrinsic function).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "16">Example <TT>State_MultipleReturns (H1E2)</TT></A></H3>
The extended greatest common divisor function <TT>Xgcd</TT> returns 3 values:
the gcd d of the arguments m and n, as well as multipliers x and y
such that d=xm + yn. If one is only interested in the gcd of the integers
m=12 and n=15, say, one could use:
<P>
<P>
<PRE>
&gt; d := Xgcd(12, 15);
</PRE>
To obtain the multipliers as well, type
<P>
<P>
<PRE>
&gt; d, x, y := Xgcd(12, 15);
</PRE>
while the following offers ways to retrieve two of the three return
values.
<P>
<P>
<PRE>
&gt; d, x := Xgcd(12, 15);
&gt; d, _, y := Xgcd(12, 15);
&gt; _, x, y := Xgcd(12, 15);
</PRE>
<HR>
<H4><A NAME = "17">Indexed Assignment</A></H4>



<H5><A NAME = "18">x[expr<sub>1</sub>][expr<sub>2</sub>]...[expr<sub>n</sub>] := expression;</A></H5>
<H5>x[expr<sub>1</sub>,expr<sub>2</sub>,...,expr<sub>n</sub>] := expression;</H5>
<BLOCKQUOTE>
If the argument on the left hand side allows <I>indexing</I>
at least n levels deep, and if this indexing can be used to modify
the argument, this offers two equivalent ways of accessing and
modifying the entry indicated by the expressions <TT>expr<sub>i</sub></TT>.
The most important case is that of (nested) sequences.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "19">Example <TT>State_Indexing (H1E3)</TT></A></H3>
Left hand side indexing can be used (as is explained in more detail
in the chapter on sequences) to modify existing entries.
<P>
<P>
<PRE>
&gt; s := [ [1], [1, 2], [1, 2, 3] ];
&gt; s;
[
       [ 1 ],
       [ 1, 2 ],
       [ 1, 2, 3 ]
]
&gt; s[2, 2] := -1;
&gt; s;
[
       [ 1 ],
       [ 1, -1 ],
       [ 1, 2, 3 ]
]
</PRE>
<HR>
<H4><A NAME = "20">Generator Assignment</A></H4>

<P>
<P>
<P>
Because of the importance of naming the generators in the case of
finitely presented magmas, special forms of assignment allow names
to be assigned at the time the magma itself is assigned.


<H5><A NAME = "21">E&lt;x<sub>1</sub>, x<sub>2</sub>, ...x<sub>n</sub>&gt; := expression;</A></H5>
<BLOCKQUOTE>
If the right hand side expression returns a structure that allows
<I>naming</I> of `generators', such as finitely generated groups
or algebras, polynomial rings, this assigns the first n names
to the variables <TT>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub>n</sub></TT>. Naming of generators
usually has two aspects; firstly, the <I>strings</I>
<TT>x<sub>1</sub>, x<sub>2</sub>, ...x<sub>n</sub></TT> are used for printing of the generators,
and secondly, to the <I>identifiers</I>
<TT>x<sub>1</sub>, x<sub>2</sub>, ...x<sub>n</sub></TT> are assigned the values of the generators.
Thus, except for this side effect regarding printing, the above assignment is
equivalent to the n + 1 assignments:
<P>
<TT>E := expression;</TT>
<P>
<TT>x<sub>1</sub> := E.1; x<sub>2</sub> := E.2; ... x<sub>n</sub> := E.n;</TT>
</BLOCKQUOTE>
<H5><A NAME = "22">E&lt;[x]&gt; := expression;</A></H5>
<BLOCKQUOTE>
If the right hand side expression returns a structure S that allows
<I>naming</I> of `generators', this assigns the names of S to be
those formed by appending the numbers 1, 2, etc. in order enclosed
in square brackets to x
(considered as a string) and assigns x to the sequence of the names of
S.
<P>
</BLOCKQUOTE>
<HR>
<H3><A NAME = "23">Example <TT>State_GeneratorNamingSequence (H1E4)</TT></A></H3>
We demonstrate the sequence method of generator naming.
<P>
<P>
<PRE>
&gt; P&lt;[X]&gt; := PolynomialRing(RationalField(), 5);
&gt; P;
Polynomial ring of rank 5 over Rational Field
Lexicographical Order
Variables: X[1], X[2], X[3], X[4], X[5]
&gt; X;
[
    X[1],
    X[2],
    X[3],
    X[4],
    X[5]
]
&gt; &amp;+X;  
X[1] + X[2] + X[3] + X[4] + X[5]
&gt; (&amp;+X)^2;
X[1]^2 + 2*X[1]*X[2] + 2*X[1]*X[3] + 2*X[1]*X[4] + 
    2*X[1]*X[5] + X[2]^2 + 2*X[2]*X[3] + 2*X[2]*X[4] + 
    2*X[2]*X[5] + X[3]^2 + 2*X[3]*X[4] + 2*X[3]*X[5] + 
    X[4]^2 + 2*X[4]*X[5] + X[5]^2
</PRE>
<HR>
<H5><A NAME = "24">AssignNames(~S, [s<sub>1</sub>, ... s<sub>n</sub>] ) : Str, [ MonStgElt ] -&gt;</A></H5>
<BLOCKQUOTE>
If S is a structure that allows <I>naming</I> of `generators'
(see the Index for a complete list), this procedure assigns the 
names specified by the strings to these generators. The number of
generators has to match the length of the sequence.  This will 
result in the creation of a new structure.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "25">Example <TT>State_GeneratorNaming (H1E5)</TT></A></H3>
<P>
<P>
<PRE>
&gt; G&lt;a, b&gt; := Group&lt;a, b | a^2 = b^3 = a^b*b^2&gt;;
&gt; w := a * b;
&gt; w;
a * b
&gt; AssignNames(~G, ["c", "d"]);
&gt; G;
Finitely presented group G on 2 generators
Relations
    c^2 = d^-1 * c * d^3
    d^3 = d^-1 * c * d^3
&gt; w;
a * b
&gt; Parent(w);
Finitely presented group on 2 generators
Relations
    a^2 = b^-1 * a * b^3
    b^3 = b^-1 * a * b^3
&gt; G eq Parent(w);
true
</PRE>
<HR>
<H4><A NAME = "26">Mutation Assignment</A></H4>



<H5><A NAME = "27">x o:= expression;</A></H5>
<BLOCKQUOTE>
This is the <I>mutation assignment</I>: the expression is evaluated
and the operator <TT>o</TT> is applied on the result and
the current value of x, and assigned to x again. Thus the result
is equivalent to (but an optimized version of):
<TT>x := x o expression;</TT>. The operator
may be any of the operations <TT>join</TT>, <TT>meet</TT>, <TT>diff</TT>,
<TT>sdiff</TT>, <TT>cat</TT>,
<TT>*</TT>, <TT>+</TT>, <TT>-</TT>, <TT>/</TT>, <TT>^</TT>, <TT>div</TT>, <TT>mod</TT>,
<TT>and</TT>, <TT>or</TT>, <TT>xor</TT> provided that the operation
is legal on its arguments of course.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "28">Example <TT>State_MutationAssignment (H1E6)</TT></A></H3>
The following  simple program to produce a set consisting of the first 
10 powers of 2 involves the use of two different mutation assignments.
<P>
<P>
<PRE>
&gt; x := 1;
&gt; S := { };
&gt; for i := 1 to 10 do
&gt;    S join:= { x };
&gt;    x *:= 2;
&gt; end for;
&gt; S;
{ 1, 2, 4, 8, 16, 32, 64, 128, 256, 512 }
</PRE>
<HR>
<H4><A NAME = "29">Deletion of Values</A></H4>



<H5><A NAME = "30">delete  x : Var -&gt;</A></H5>
<BLOCKQUOTE>
(Statement.)
Delete the current value of the identifier x. The memory occupied is freed,
unless other variables still refer to it.
If x is the name of an intrinsic Magma function that has been
reassigned to, the identifier will after deletion
again refer to that intrinsic function.
Intrinsic functions cannot be deleted.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text8.htm">[Next]</A><A  HREF = "text6.htm">[Prev]</A> <A  HREF = "text8.htm">[Right]</A> <A  HREF = "text6.htm">[Left]</A> <A  HREF = "text3.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>