<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Constructive Recognition for  Simple Groups</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text679.htm">[Next]</A><A  HREF = "text677.htm">[Prev]</A> <A  HREF = "text679.htm">[Right]</A> <A  HREF = "text677.htm">[Left]</A> <A  HREF = "text673.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7806">Constructive Recognition for  Simple Groups</A></H3>

<P>
<P>
<P>
For each finite non-abelian simple group S, we designate a specific
<I>standard copy</I> of S.  The standard copy has a designated set
of <I>standard generators</I>. 
For example, the standard copy of Alt(n) is
on n points; its standard generators are (1, 2, 3) and either of
(3, ..., n) or (1, 2)(3, ..., n) according to the parity of n.
For a projective
representation, the standard copy is the quotient of a matrix group by
its scalar subgroup.
For example, the standard copy of PSL(n, q) is the quotient
of SL(n, q) by its scalar subgroup.
<P>
<P>
<P>
To compute in a copy G of S, we first
construct effective isomorphisms between G and its
standard copy.  We do this by finding generators in G 
that correspond to the standard generators of S under
an isomorphism.
More formally, a <I>constructive recognition algorithm</I> for a 
non-abelian simple group G (possibly with decorations)
solves the following problem: 
construct an isomorphism &phi; from G to a
standard copy S of G, 
such that &phi;(g) can be computed efficiently for every g &isin;G.
This is done by constructing standard generators
in both G and its standard copy S.
<P>
<P>
<P>
A <I>rewriting algorithm</I> for G solves the
<I>constructive membership problem</I>:
given g &isin;U &ge;G = &lt; X &gt;, decide whether or not
g &isin;G, and if so express g as an SLP in X.
(Here U is the generic overgroup of G,
such as GL(d, q) or Sym(n).)
The rewriting algorithm is used to make the isomorphism
between S and G effective. To compute the image of 
an arbitrary element s of S in G, we 
first write s as an SLP in the standard
generators of S and then evaluate the SLP
in the copy of the standard generators in G.
<P>
<P>
<P>
To verify that the homomorphism from S 
to G is an isomorphism, we can evaluate 
in G a <I>standard presentation</I>
for S on its standard generators.
If the copy of the standard generators
in G satisfy the presentation, then
we have proved that we have an isomorphism.
<P>
<P>
<P>
For a detailed discussion of these topics, see
<A  HREF = "text672.htm#bib_OBrien10">[O'B11]</A>, <A  HREF = "text672.htm#bib_lgo-odd">[LGO09]</A>. 


<H5><A NAME = "7807">ClassicalStandardGenerators(type, d, q) : MonStgElt, RngIntElt, RngIntElt -&gt; []</A></H5>
<BLOCKQUOTE>
This intrinsic produces the standard generators of Leedham-Green and O'Brien 
for the quasisimple classical group of specified type in dimension d over 
field of size q. The type is designated by the argument "type" which must
be one of the strings "SL", "Sp", "SU", "Omega", "Omega-", or "Omega+".
The standard generators define a specific copy of a classical group and are 
defined in <A  HREF = "text672.htm#bib_lgo-odd">[LGO09]</A> and <A  HREF = "text672.htm#bib_dlgo-even">[DLLGO13]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7808">ClassicalConstructiveRecognition(G, type, d, q) : GrpMat[FldFin], MonStgElt, RngIntElt, RngIntElt -&gt;BoolElt, Map, Map, Map, Map, SeqEnum, SeqEnum</A></H5>
<H5>ClassicalConstructiveRecognition(G) : GrpMat[FldFin] -&gt;BoolElt, SeqEnum, SeqEnum</H5>
<BLOCKQUOTE>
The input group G = &lt; X &gt; is a permutation group, 
or a matrix group defined over a finite field. It must be isomorphic to a
central quotient of a classical group of 
specified type in dimension d over the field of size q. The type is 
designated by one of the strings "SL", "Sp", "SU", "Omega", "Omega-", 
or "Omega+". The function constructs standard generators for G. If it
is successful, then return {<TT>true</TT>}; four maps m1, m2, m3, m4; 
standard generators (S) 
for G; and their SLPs in X;
otherwise return {<TT>false</TT>}. 
The map m1 is from G to the standard copy S of G; 
the map m2 is from S to G; the map m3 is from G to 
<TT>WordGroup(G)</TT>; the map m4 is from <TT>WordGroup(G)</TT> to G. 
Since, in general, G is isomorphic to a central quotient of S, the 
maps m1 and m2 are homomorphisms modulo scalars.
<P>
In the second signature, G must be a matrix group defined over a 
finite field such
that G = &lt; X &gt; is conjugate to a quasisimple classical group
in its natural representation in dimension at least 2. The intrinsic
constructs a copy (S) in G of the generators defined by
<TT>StandardGenerators</TT>.  If G is quasisimple and classical, then
the function returns {<TT>true</TT>}, the standard generators (S), and
SLPs for these in X; otherwise it returns {<TT>false</TT>}.
<P>
The algorithms used are described
in <A  HREF = "text672.htm#bib_lgo-odd">[LGO09]</A>, <A  HREF = "text672.htm#bib_dlgo-even">[DLLGO13]</A>, and <A  HREF = "text672.htm#bib_dlgo-black">[DLGO15]</A>.
The implementations for even and odd characteristic were developed by 
Heiko Dietrich and Eamonn O'Brien respectively. Some base case functions 
were implemented by Kenneth Clarkson.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7809">Example <TT>GrpMatFF_ClassicalConstructiveRecognition (H65E10)</TT></A></H3>
We illustrate these functions with two examples.
<P>
<P>
<P>
<PRE>
&gt; G := Sp (6, 5^3);
&gt; G := ExteriorSquare (G);
&gt; f, m1, m2, m3, m4, E, W := ClassicalConstructiveRecognition( G, "Sp", 6, 5^3 );

&gt; Q, R := ClassicalStandardPresentation ("Sp", 6, 5^3);
&gt; #{Evaluate( r, E ) : r in R} eq 1;
true
&gt; x := Random (G);
&gt; y := m1 (x);
&gt; y;
&gt; w := m3 (x);
&gt; "Length of SLP is ", #w;
&gt; Evaluate (w, [G.i: i in [1..Ngens (G)]]) eq x;
true
&gt; E eq Evaluate( W, [G.i : i in [ 1 .. Ngens( G )]]);                   

&gt; G := PSL( 6, 4 );
&gt; f, m1, m2, m3, m4, E, W := ClassicalConstructiveRecognition( G, "SL", 6, 4 );
&gt; E eq Evaluate( W, [G.i : i in [ 1 .. Ngens( G )]]);                   
true
&gt;
&gt; Q, rels := ClassicalStandardPresentation( "SL" , 6, 4);
&gt; #{Evaluate( r, E ) : r in rels} eq 1;
true
&gt;
&gt; g := Random( G );
&gt; s := m1( g );
&gt; s in SL(6,4);
true
&gt; m2( s ) eq g;
true
&gt;
&gt; h := Random( SL( 6, 4 ) ); 
&gt; g := m2( h );
&gt; g in G;
true
&gt; m1( g ) eq h;
false
&gt; IsScalar( m1( g ) * h^-1 );
true
&gt;
&gt; w := m3( g );
&gt; w in WordGroup( G );
true
&gt; m4( w ) eq g;
true
&gt; g eq Evaluate( w, [G.i : i in [ 1 .. Ngens( G )]]);
true
</PRE>
<HR>
<H5><A NAME = "7810">ClassicalChangeOfBasis(G): GrpMat[FldFin] -&gt; GrpMatElt[FldFin]</A></H5>
<BLOCKQUOTE>
Let G be a classical group in its natural representation; return 
a change-of-basis matrix to conjugate the generators
returned by <TT>ClassicalStandardGenerators</TT>
to those returned by <TT>ClassicalConstructiveRecognition</TT> (G).
The latter intrinsic must have been applied to G.  
</BLOCKQUOTE>
<H5><A NAME = "7811">ClassicalRewrite(G, gens, type, dim, q, g : parameters): Grp, SeqEnum, MonStgElt, RngIntElt, RngIntElt, GrpElt -&gt; BoolElt, GrpElt</A></H5>

<PRE>    Method: MonStgElt                   Default: "choose"</PRE>
<BLOCKQUOTE>
Let G be a classical group of type <TT>type</TT>, which is one of the strings
"SL", "Sp", "SU", "Omega", "Omega-", or "Omega+", with dimension 
<TT>dim</TT> over the field GF(q) generated by <TT>gens</TT> 
which satisfy <TT>ClassicalStandardPresentation (type, dim, q)</TT>. 
Further, let g be an element of <TT>Generic</TT>(G). 
<P>
If g &isin;G, then the function 
returns <TT>true</TT> and an SLP for g in <TT>gens</TT>;
if g not&isin;G then the function searches 
for an SLP w such that g .<TT>Evaluate</TT>(w, gens)<sup> - 1</sup> 
centralizes G; if it is successful, it returns <TT>false</TT> and w. 
Otherwise the function returns <TT>false, false</TT>.
<P>
The function chooses one of the following methods: 
<P>
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>If G is in its natural representation and <TT>gens</TT>
is <TT>ClassicalStandardGenerators (type, dim, q)</TT> then an
algorithm of Costi <A  HREF = "text672.htm#bib_costi-phd">[Cos09]</A> is used. 
<DT>(ii)</DT><DD>If (i) is not valid, but G is an absolutely 
irreducible representation in the defining characteristic, then
an algorithm of Costi <A  HREF = "text672.htm#bib_costi-phd">[Cos09]</A> is used. 
<DT>(iii)</DT><DD>If neither of (i) and (ii) is valid, then a "black-box"
method, independent of the representation of G, developed by 
Csaba Schneider is used.  
<P>
</DL>
The optional parameter <TT>Method</TT> can be used to override the
default choice of method. The possible values of <TT>Method</TT> are 
<TT>CharP</TT> and <TT>BB</TT>.
<P>
A description of the algorithm used in the defining characteristic case 
appears in <A  HREF = "text672.htm#bib_costi-phd">[Cos09]</A>; a short description of the black-box algorithm
appears in <A  HREF = "text672.htm#bib_Ambroseetal">[AMPS10]</A>.
<P>
The code was developed and written by Csaba Schneider.
</BLOCKQUOTE>
<H5><A NAME = "7812">ClassicalRewriteNatural(type, CB, g): MonStgElt, GrpMatElt, GrpMatElt-&gt; BoolElt, GrpElt</A></H5>
<H5>ClassicalRewriteNatural(G, type, CB, g): MonStgElt, GrpMatElt, GrpMatElt-&gt; BoolElt, GrpElt</H5>
<BLOCKQUOTE>
This is a faster specialized version of the intrinsic 
<TT>ClassicalRewrite</TT> discussed above; it is 
designed for classical groups in their <B>natural representation</B>.
<P>
The argument <TT>type</TT> must be one of the strings 
"SL", "Sp", "SU", "Omega", "Omega-", or "Omega+".
Both <TT>CB</TT> and  g are elements of some GL (d, q).
<P>
If g is a member of the group generated by 
<TT>ClassicalStandardGenerators (type, d, q)</TT>^((CB))
then the function returns <TT>true</TT> and an SLP w such that 
<TT>Evaluate (w, ClassicalStandardGenerators (type, d, q)</TT>^((CB))) = g. 
Otherwise the function returns <TT>false, false</TT>. 
<P>
If many elements of the same group G are rewritten in terms
of standard generators, then the second signature with 
G as an argument is recommended on efficiency grounds
since the results of some necessary precomputations are stored in G. 
<P>
This algorithm,  based on that developed by Elliot Costi <A  HREF = "text672.htm#bib_costi-phd">[Cos09]</A>, 
was implemented by Csaba Schneider.
</BLOCKQUOTE>
<H5><A NAME = "7813">ClassicalStandardPresentation (type, d, q : parameters) : MonStgElt, RngIntElt, RngIntElt -&gt; SLPGroup, []</A></H5>

<PRE>    Projective: BoolElt                 Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
Given the specification <TT>type, d, q</TT> of a quasisimple group G, 
this intrinsic constructs a presentation on the standard generators 
for G. The string <TT>type</TT> must be one of "SL", "Sp", "SU", 
"Omega", "Omega-", or "Omega+", while d is the dimension and q
is the cardinality of the finite field.  The presentations are 
described in <A  HREF = "text672.htm#bib_lgo-pres">[LGO]</A>.  The relations are returned as SLPs 
together with the parent SLPGroup.
<P>
If the parameter <TT>Projective</TT> is set to true, the intrinsic 
constructs a presentation for the corresponding projective group.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7814">Example <TT>GrpMatFF_ClassicalConstructiveRecognition (H65E11)</TT></A></H3>
<P>
As our first illustration, we produce standard generators for SL(6, 5<sup>3</sup>):
<P>
<P>
<P>
<PRE>
&gt; E := ClassicalStandardGenerators ("SL", 6, 5^3);
&gt; E;
[
    [      0       1       0       0       0       0]
    [      4       0       0       0       0       0]
    [      0       0       1       0       0       0]
    [      0       0       0       1       0       0]
    [      0       0       0       0       1       0]
    [      0       0       0       0       0       1],


    [      0       0       0       0       0       1]
    [      4       0       0       0       0       0]
    [      0       4       0       0       0       0]
    [      0       0       4       0       0       0]
    [      0       0       0       4       0       0]
    [      0       0       0       0       4       0],


    [      1       1       0       0       0       0]
    [      0       1       0       0       0       0]
    [      0       0       1       0       0       0]
    [      0       0       0       1       0       0]
    [      0       0       0       0       1       0]
    [      0       0       0       0       0       1],


    [    $.1       0       0       0       0       0]
    [      0 $.1^123       0       0       0       0]
    [      0       0       1       0       0       0]
    [      0       0       0       1       0       0]
    [      0       0       0       0       1       0]
    [      0       0       0       0       0       1]
]
</PRE>
<P>
We now perform constructive recognition on SL(6, 5<sup>3</sup>),
and so obtain S, conjugate to E in GL(6, 5<sup>3</sup>). 
Observe that the change-of-basis matrix returned
by <TT>ClassicalChangeOfBasis</TT> performs this conjugation.
<P>
<P>
<P>
<PRE>
&gt; G := SL (6, 5^3);
&gt; f, S, W := ClassicalConstructiveRecognition (G);
&gt; f;
true
&gt; CB := ClassicalChangeOfBasis (G);
&gt; E^CB eq S;
true

</PRE>
<P>
Note that W is list of SLPs expressing S in terms of defining 
generators of G. 
<P>
<P>
<P>
<PRE>
&gt; S eq Evaluate (W, [G.i: i in [1..Ngens (G)]]);
true
</PRE>
<P>
We next express a random element of G as a SLP in S and then 
check that the standard generators satisfy the standard presentation. 
<P>
<P>
<P>
<PRE>
&gt; g := Random (G);
&gt; f, w := ClassicalRewriteNatural ("SL", CB, g);
&gt; Evaluate (w, S) eq g;
true
&gt; 
&gt; P, R := ClassicalStandardPresentation ("SL", 6, 5^3);
&gt; Set (Evaluate (R, S));
{
    [      1       0       0       0       0       0]
    [      0       1       0       0       0       0]
    [      0       0       1       0       0       0]
    [      0       0       0       1       0       0]
    [      0       0       0       0       1       0]
    [      0       0       0       0       0       1]
}
</PRE>
<P>
We perform constructive recognition on a random conjugate of 
Sp(10, 3<sup>6</sup>) and again check that the standard generators satisfy 
the standard presentation.
<P>
<P>
<P>
<PRE>
&gt; G := RandomConjugate (Sp(10, 3^6));
&gt; f, S, W := ClassicalConstructiveRecognition (G);
&gt; f;
true
</PRE>
<P>
The return variable W is list of SLPs expressing S in terms of defining 
generators of G.
<P>
<P>
<P>
<PRE>
&gt; S eq Evaluate (W, [G.i: i in [1..Ngens (G)]]);
true
&gt;
&gt; g := Random (G);
&gt; CB := ClassicalChangeOfBasis (G);
&gt; f, w := ClassicalRewriteNatural ("Sp", CB, g);
&gt; Evaluate (w, S) eq g;
true
&gt; 
&gt; P, R := ClassicalStandardPresentation ("Sp", 10, 3^6);
&gt; Set (Evaluate (R, S));
{
    [1 0 0 0 0 0 0 0 0 0]
    [0 1 0 0 0 0 0 0 0 0]
    [0 0 1 0 0 0 0 0 0 0]
    [0 0 0 1 0 0 0 0 0 0]
    [0 0 0 0 1 0 0 0 0 0]
    [0 0 0 0 0 1 0 0 0 0]
    [0 0 0 0 0 0 1 0 0 0]
    [0 0 0 0 0 0 0 1 0 0]
    [0 0 0 0 0 0 0 0 1 0]
    [0 0 0 0 0 0 0 0 0 1]
}
</PRE>
<P>
As another demonstration, we constructively recognise &Omega;<sup> - </sup>(16, 2<sup>6</sup>).
<P>
<P>
<P>
<PRE>
&gt; G := RandomConjugate (OmegaMinus (16, 2^6));
&gt; f, S, W := ClassicalConstructiveRecognition (G);
&gt; f;
true
</PRE>
<P>
A random element of G is expressed as an SLP in S: 
<P>
<P>
<P>
<PRE>
&gt; g := Random (G);
&gt; CB := ClassicalChangeOfBasis (G);
&gt; f, w := ClassicalRewriteNatural ("Omega-", CB, g);
&gt; Evaluate (w, S) eq g;
true
</PRE>
<P>
Finally, we illustrate using <TT>ClassicalRewrite</TT> 
to write an element of a classical group in a non-natural
representation as an SLP in its standard generators. 
<P>
<P>
<P>
<PRE>
&gt; gens := [ExteriorSquare (x) : x in ClassicalStandardGenerators ("Sp", 6, 25)]; 
&gt; G := sub&lt;Universe (gens) | gens&gt;;
&gt; x := Random (G); 
&gt; f, w := ClassicalRewrite (G, gens, "Sp", 6, 25, x);
&gt; f;
true
&gt; Evaluate (w, gens) eq x;
true
&gt; f, w := ClassicalRewrite (G, gens, "Sp", 6, 25, x : Method := "BB");
&gt; f;          
true
&gt; Evaluate (w, gens) eq x;
true
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text679.htm">[Next]</A><A  HREF = "text677.htm">[Prev]</A> <A  HREF = "text679.htm">[Right]</A> <A  HREF = "text677.htm">[Left]</A> <A  HREF = "text673.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>