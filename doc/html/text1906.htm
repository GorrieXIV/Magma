<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Hilbert Spaces</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text1895.htm">[Next]</A><A  HREF = "text1905.htm">[Prev]</A> <A  HREF = "text1895.htm">[Right]</A> <A  HREF = "text1905.htm">[Left]</A> <A  HREF = "text1896.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "21204">Hilbert Spaces</A></H3>

<P>
<P>
<P>
In this first release, Magma offers a basic package for creating
and computing with quantum Hilbert spaces. 
A Hilbert space in Magma can either be <I>densely</I> or <I>sparsely</I>
represented, depending on how many qubits are required and
how dense the desired quantum states will be.
While a dense representation has a speed advantage in computations,
the sparse representation uses less memory.
Currently there are capabilities for doing basic unitary transformations
and manipulations of quantum states.
<P>
<P>
In future versions, functionality
will be added for more complex unitary transformations 
and measurements, allowing
for a more general simulation of quantum computations.
There will also be machinery for encoding quantum states using
quantum error correcting codes, and testing their effectiveness
by simulating a noisy quantum channel and decoding the results.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text1906.htm#21213">Creation of Quantum States</A>
<LI> <A  HREF = "text1906.htm#21220">Manipulation of Quantum States</A>
<LI> <A  HREF = "text1906.htm#21229">Inner Product and Probabilities of Quantum States</A>
<LI> <A  HREF = "text1906.htm#21238">Unitary Transformations on Quantum States</A>
</UL>
<H5><A NAME = "21205">HilbertSpace(F, n) : FldCom, RngIntElt -&gt; HilbSpc</A></H5>

<PRE>    IsDense: BoolElt                    Default: </PRE>
<BLOCKQUOTE>
Given a complex field F and a positive integer n, return then
quantum Hilbert Space on n qubits over F.
<P>
If the variable argument <TT>IsDense</TT> is set to 
either <TT>true</TT> or <TT>false</TT>
then return a densely or sparsely represented quantum space respectively.
If no value is set for <TT>IsDense</TT> then Magma will decide automatically.
</BLOCKQUOTE>
<H5><A NAME = "21206">Field(H) : HilbSpc -&gt; FldCom</A></H5>
<BLOCKQUOTE>
Given a Hilbert space H, return the complex field over which the coefficients
of states of H are defined.
</BLOCKQUOTE>
<H5><A NAME = "21207">NumberOfQubits(H) : HilbSpc -&gt; RngIntElt</A></H5>
<H5>Nqubits(H) : HilbSpc -&gt; RngIntElt</H5>
<BLOCKQUOTE>
Given a Hilbert space H, return the number of qubits which comprises
the space.
</BLOCKQUOTE>
<H5><A NAME = "21208">Dimension(H) : HilbSpc -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Given a Hilbert space H, return its dimension. This is 2<sup>n</sup>, where
n is the number of qubits of H.
</BLOCKQUOTE>
<H5><A NAME = "21209">IsDenselyRepresented(H) : HilbSpc -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the quantum Hilbert space H uses a dense representation.
</BLOCKQUOTE>
<H5><A NAME = "21210">H1 eq H2 : HilbSpc, HilbSpc -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the Hilbert spaces are equal.
</BLOCKQUOTE>
<H5><A NAME = "21211">H1 ne H2 : HilbSpc, HilbSpc -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if the Hilbert spaces are not equal.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21212">Example <TT>QECC_HilbertSpaceCreate (H164E29)</TT></A></H3>
A Hilbert space over 5 qubits will by default be a densely represented
quantum space. It can however be manually chosen to use a sparse representation,
it can be seen that these two space are not considered equal.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(4);
&gt; H := HilbertSpace(F, 5);
&gt; H;
A densely represented Hilbert Space on 5 qubits to precision 4
&gt; Dimension(H);
32
&gt; IsDenselyRepresented(H);
true
&gt;
&gt; H1 := HilbertSpace(F, 5 : IsDense := false);
&gt; H1;
A sparely represented Hilbert Space on 5 qubits to precision 4
&gt; IsDenselyRepresented(H1);
false
&gt; H eq H1;
false
</PRE>
<HR>
<H4><A NAME = "21213">Creation of Quantum States</A></H4>



<H5><A NAME = "21214">QuantumState(H, v) : HilbSpc, ModTupFldElt -&gt; HilbSpcElt</A></H5>
<H5>QuantumState(H, v) : HilbSpc, MtrxSprs -&gt; HilbSpcElt</H5>
<BLOCKQUOTE>
Given a Hilbert space H and coefficients v 
(which can be either a dense or a sparse vector),
of length equal to the dimension of H, 
then return the quantum state in H defined by v.
</BLOCKQUOTE>
<H5><A NAME = "21215">H ! i : HilbSpc, RngIntElt -&gt; HilbSpcElt</A></H5>
<BLOCKQUOTE>
Return the i-th quantum basis state of the Hilbert space H.
This corresponds to the basis state whose qubits giving a binary 
representation of i.
</BLOCKQUOTE>
<H5><A NAME = "21216">H ! s : HilbSpc, [RngIntElt] -&gt; HilbSpcElt</A></H5>
<BLOCKQUOTE>
Given a sequence s of binary values, whose length is equal to
the number of qubits of the Hilbert space H, return the
quantum basis state corresponding to s.
</BLOCKQUOTE>
<H5><A NAME = "21217">SetPrintKetsInteger(b) : BoolElt -&gt;</A></H5>
<BLOCKQUOTE>
Input is a boolean value b, which controls a global variable determining
the way quantum states are printed.
If set to <TT>false</TT> (which is the default) then values in basis kets will
be printed as binary sequences such as ket(1010).
If set to <TT>true</TT> then basis kets will be printed using integer values
to represent the binary sequences, the previous example becoming ket(5).
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21218">Example <TT>QECC_QuantumStateCreate (H164E30)</TT></A></H3>
One way to create a quantum state is to specify each
coefficient of the state with a vector of length equal 
to the dimension of the Hilbert space.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(4);
&gt; H := HilbertSpace(F, 4);
&gt; KS := KSpace(F, Dimension(H));
&gt; v := KS! [F| i,    1,    0, -i,
&gt;              2,    0,    0, 1+i,
&gt;              -i-1, -3*i, 7, 0.5,
&gt;              2.5*i, 0,   0, 1.2];
&gt; v;
(1.000*i 1.000 0.0000 -1.000*i 2.000 0.0000 0.0000 1.000 + 1.000*i
    -1.000 - 1.000*i -3.000*i 7.000 0.5000 2.500*i 0.0000 0.0000
    1.200)
&gt; e := QuantumState(H, v);
&gt; e;
1.000*i|0000&gt; + |1000&gt; - 1.000*i|1100&gt; + 2.000|0010&gt; + (1.000 +
1.000*i)|1110&gt; - (1.000 + 1.000*i)|0001&gt; - 3.000*i|1001&gt; + 7.000|0101&gt;
+ 0.5000|1101&gt; + 2.500*i|0011&gt; + 1.200|1111&gt;
</PRE>
<HR>
<H3><A NAME = "21219">Example <TT>QECC_QuantumStateCreateCoerce (H164E31)</TT></A></H3>
Quantum states can be created by combining basis states,
input as either integer values or binary sequences.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(4);
&gt; H := HilbertSpace(F, 12);
&gt; Dimension(H);
4096
&gt; e1 := H!1 + (1+i)*(H!76) - H!3000;
&gt; e1;
|100000000000&gt; + (1.000 + 1.000*i)|001100100000&gt; - |000111011101&gt;
&gt; e2 := H![1,0,1,1,1,0,0,0,1,1,0,0] - H![1,1,0,1,0,0,0,0,1,1,0,1];
&gt; e2;
|101110001100&gt; - |110100001101&gt;
</PRE>
By using the function <TT>SetPrintKetsInteger</TT> basis states can also
be printed as either integer values of binary sequences.
<P>
<P>
<PRE>
&gt; SetPrintKetsInteger(true);
&gt; e1;
|1&gt; + (1.000 + 1.000*i)|76&gt; - |3000&gt;
&gt; e2;
|797&gt; - |2827&gt;
</PRE>
<HR>
<H4><A NAME = "21220">Manipulation of Quantum States</A></H4>



<H5><A NAME = "21221">a * e : FldComElt , HilbSpcElt -&gt; HilbSpcElt</A></H5>
<BLOCKQUOTE>
Given a complex scalar value a, multiply the coefficients
of the quantum state e by a.
</BLOCKQUOTE>
<H5><A NAME = "21222">- e : HilbSpcElt -&gt; HilbSpcElt</A></H5>
<BLOCKQUOTE>
Negate all coefficients of the quantum state e.
</BLOCKQUOTE>
<H5><A NAME = "21223">e1 + e2 : HilbSpcElt, HilbSpcElt -&gt; HilbSpcElt</A></H5>
<H5>e1 - e2 : HilbSpcElt, HilbSpcElt -&gt; HilbSpcElt</H5>
<BLOCKQUOTE>
Addition and subtraction of the quantum states e<sub>1</sub> and e<sub>2</sub>.
</BLOCKQUOTE>
<H5><A NAME = "21224">Normalisation(e) : HilbSpcElt -&gt; HilbSpcElt</A></H5>
<H5>Normalisation(~e) : HilbSpcElt -&gt;</H5>
<H5>Normalization(e) : HilbSpcElt -&gt; HilbSpcElt</H5>
<H5>Normalization(~e) : HilbSpcElt -&gt;</H5>
<BLOCKQUOTE>
Normalize the coefficients of the quantum state e, giving an
equivalent state whose normalization coefficient is equal to one.
Available either as a procedure or a function.
</BLOCKQUOTE>
<H5><A NAME = "21225">NormalisationCoefficient(e) : HilbSpc -&gt; FldComElt</A></H5>
<H5>NormalizationCoefficient(e) : HilbSpc -&gt; FldComElt</H5>
<BLOCKQUOTE>
Return the normalisation coefficient of the quantum state e
</BLOCKQUOTE>
<H5><A NAME = "21226">e1 eq e2 : HilbSpcElt, HilbSpcElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the quantum states e<sub>1</sub> and e<sub>2</sub>
are equal. 
States are still considered equal if they 
have different normalizations.
</BLOCKQUOTE>
<H5><A NAME = "21227">e1 ne e2 : HilbSpcElt, HilbSpcElt -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Return <TT>true</TT> if and only if the quantum states e<sub>1</sub> and e<sub>2</sub>
are not equal.
States are still considered equal if they 
have different normalizations.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21228">Example <TT>QECC_QuantumStateNormalisation (H164E32)</TT></A></H3>
Although a quantum state can be expressed with any normalisation,
in reality a quantum state occupies a ray in a Hilbert space.
So two quantum states are still considered equal if they 
lie on the same ray.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(8);
&gt; H := HilbertSpace(F, 1);
&gt; e := H!0 + H!1;
&gt; e;
|0&gt; + |1&gt;
&gt; NormalisationCoefficient(e);
2.0000000
&gt; e1 := Normalisation(e);
&gt; e1;
0.70710678|0&gt; + 0.70710678|1&gt;
&gt; NormalisationCoefficient(e1);
0.99999999
&gt; e eq e1;
true
</PRE>
<HR>
<H4><A NAME = "21229">Inner Product and Probabilities of Quantum States</A></H4>



<H5><A NAME = "21230">InnerProduct(e1, e2) : HilbSpcElt, HilbSpcElt -&gt; HilbSpcElt</A></H5>
<BLOCKQUOTE>
Return the inner product of the quantum states e<sub>1</sub> and e<sub>2</sub>.
</BLOCKQUOTE>
<H5><A NAME = "21231">ProbabilityDistribution(e) : HilbSpcElt -&gt; Mtrx</A></H5>
<BLOCKQUOTE>
Return the probability distribution of the
quantum state as a vector over the reals.
</BLOCKQUOTE>
<H5><A NAME = "21232">Probability(e, i) : HilbSpcElt, RngIntElt -&gt; FldReElt</A></H5>
<BLOCKQUOTE>
Return the probability of basis state i being returned as the result
of a measurement on the quantum state e.
</BLOCKQUOTE>
<H5><A NAME = "21233">Probability(e, v) : HilbSpcElt, RngIntElt -&gt; FldReElt</A></H5>
<BLOCKQUOTE>
Given a binary vector v of length equal to the number of qubits
in the quantum state e,
return the probability of basis state corresponding to v 
being returned as the result of a measurement on e.
</BLOCKQUOTE>
<H5><A NAME = "21234">PrintProbabilityDistribution(e) : HilbSpcElt -&gt;</A></H5>
<BLOCKQUOTE>
Print the probability distribution of the
quantum state.
</BLOCKQUOTE>
<H5><A NAME = "21235">PrintSortedProbabilityDistribution(e) : HilbSpcElt -&gt;</A></H5>

<PRE>    Max: RngIntElt                      Default: &infin;</PRE>

<PRE>    MinProbability: RngIntElt           Default: 0</PRE>
<BLOCKQUOTE>
Print the probability distribution of the
quantum state in sorted order, with the most probable states
printed first.
<P>
If the variable argument <TT>Max</TT> is set to a positive integer, then it will
denote the maximum number of basis states to be printed.
<P>
If the variable argument <TT>MinProbability</TT> is set to some integer between
1 and 100, then it will denote the minimum probability of any
basis state to be printed. This is useful for investigating those
basis states which will are the likely results of any measurement.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21236">Example <TT>QECC_QuantumStateProbabilities (H164E33)</TT></A></H3>
From a quantum state it is possible to either access the 
full probability distribution, or the probabilities of individual 
basis states.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(4);
&gt; H := HilbertSpace(F, 3);
&gt; e := -0.5*H!0 + 6*i*H!3 + 7*H!4 - (1+i)*H!7;
&gt; ProbabilityDistribution(e);
(0.002865 0.0000 0.0000 0.4126 0.5616 0.0000 0.0000 0.02292)
&gt; Probability(e, 0);
0.002865
&gt; Probability(e, 1);
0.0000
</PRE>
It is also possible to print out the full probability distribution.
<P>
<P>
<PRE>
&gt; PrintProbabilityDistribution(e);
Non-zero probabilities:
|000&gt;:  0.2865
|110&gt;:  41.26
|001&gt;:  56.16
|111&gt;:  2.292
</PRE>
<HR>
<H3><A NAME = "21237">Example <TT>QECC_QuantumStateSortedProbabilities (H164E34)</TT></A></H3>
It is usually only those basis states with large probabilities
that are of interest. With the function
<TT>PrintSortedProbabilitydistribution</TT> these basis states
can be identified.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(4);
&gt; H := HilbertSpace(F, 4);
&gt; KS := KSpace(F, 2^4);
&gt; v := KS! [F| i,   11,   0, -3*i,
&gt;              2,   0,    0, 6+i,
&gt;             -i-1, -3*i, 7, -0.5,
&gt;             2.5*i, 0,   0, 9.2];
&gt; e := QuantumState(H, v);
&gt; e;
1.000*i|0000&gt; + 11.00|1000&gt; - 3.000*i|1100&gt; + 2.000|0010&gt; + (6.000 +
1.000*i)|1110&gt; - (1.000 + 1.000*i)|0001&gt; - 3.000*i|1001&gt; + 7.000|0101&gt;
- 0.5000|1101&gt; + 2.500*i|0011&gt; + 9.200|1111&gt;
&gt; PrintSortedProbabilityDistribution(e);
Non-zero probabilities:
|1000&gt;:         37.45
|1111&gt;:         26.19
|0101&gt;:         15.16
|1110&gt;:         11.45
|1100&gt;:         2.785
|1001&gt;:         2.785
|0011&gt;:         1.934
|0010&gt;:         1.238
|0001&gt;:         0.6190
|0000&gt;:         0.3095
|1101&gt;:         0.07737
</PRE>
A useful way to isolate the important basis states is to provide a 
minimum cutoff probability.
<P>
<P>
<PRE>
&gt; PrintSortedProbabilityDistribution(e: MinProbability := 15);
Non-zero probabilities:
|1000&gt;:         37.45
|1111&gt;:         26.19
|0101&gt;:         15.16
Reached Minimum Percentage
</PRE>
Another way is to supply the maximum number basis states that
should be printed. A combination of these methods can also be used
<P>
<P>
<PRE>
&gt; PrintSortedProbabilityDistribution(e: Max := 6);
Non-zero probabilities:
|1000&gt;:         37.45
|1111&gt;:         26.19
|0101&gt;:         15.16
|1110&gt;:         11.45
|1100&gt;:         2.785
|1001&gt;:         2.785
Reached Maximum count
</PRE>
<HR>
<H4><A NAME = "21238">Unitary Transformations on Quantum States</A></H4>

<P>
<P>
<P>
In this first release Magma offers a small selection of
unitary transformations on quantum states. In future
versions this list will be expanded to include more
complex operations.


<H5><A NAME = "21239">BitFlip(e, k) : HilbSpcElt,RngIntElt -&gt; HilbSpcElt</A></H5>
<H5>BitFlip(~e, k) : HilbSpcElt,RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Flip the value of the k-th qubit of the quantum state e.
</BLOCKQUOTE>
<H5><A NAME = "21240">BitFlip(e, B) : HilbSpcElt, RngIntElt -&gt; HilbSpcElt</A></H5>
<H5>BitFlip(~e, B) : HilbSpcElt,RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given a set of positive integers B, 
flip the value of the qubits of the quantum state e indexed by the entries
in B.
</BLOCKQUOTE>
<H5><A NAME = "21241">PhaseFlip(e, k) : HilbSpcElt,RngIntElt -&gt; HilbSpcElt</A></H5>
<H5>PhaseFlip(~e, k) : HilbSpcElt,RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Flip the phase on the k-th qubit of the quantum state e.
</BLOCKQUOTE>
<H5><A NAME = "21242">PhaseFlip(e, B) : HilbSpcElt, RngIntElt -&gt; HilbSpcElt</A></H5>
<H5>PhaseFlip(~e, B) : HilbSpcElt,RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Given a set of positive integers B, 
flip the phase on the qubits of the quantum state e indexed by the entries
in B.
</BLOCKQUOTE>
<H5><A NAME = "21243">ControlledNot(e, B, k) : HilbSpcElt, RngIntElt, RngIntElt -&gt; HilbSpcElt</A></H5>
<H5>ControlledNot(~e, B, k) : HilbSpcElt, RngIntElt, RngIntElt -&gt;</H5>
<BLOCKQUOTE>
Flip the k-th bit of the quantum state e if all bits contained
in B are set to 1.
</BLOCKQUOTE>
<H5><A NAME = "21244">HadamardTrasformation(e) : HilbSpcElt -&gt; HilbSpcElt</A></H5>
<H5>HadamardTrasformation(~e) : HilbSpcElt -&gt;</H5>
<BLOCKQUOTE>
Perform a Hadamard transformation on the quantum state e, which
must be densely represented.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "21245">Example <TT>QECC_QuantumStateUnitary (H164E35)</TT></A></H3>
The behaviours of several of the available unitary transformations
are displayed on a quantum state.
<P>
<P>
<PRE>
&gt; F&lt;i&gt; := ComplexField(4);
&gt; H := HilbertSpace(F, 4);
&gt; e := H!0 + H!3 + H!6 + H!15;
&gt; PhaseFlip(~e, 4); e;
|0000&gt; + |1100&gt; + |0110&gt; - |1111&gt;
&gt; ControlledNot(~e, {1,2}, 4); e;
|0000&gt; + |0110&gt; - |1110&gt; + |1101&gt;
&gt; BitFlip(~e, 2); e;
|0100&gt; + |0010&gt; - |1010&gt; + |1001&gt;
&gt; ControlledNot(~e, {2}, 3); e;
|0010&gt; - |1010&gt; + |0110&gt; + |1001&gt;
</PRE>
<PRE></PRE> <A  HREF = "text1895.htm">[Next]</A><A  HREF = "text1905.htm">[Prev]</A> <A  HREF = "text1895.htm">[Right]</A> <A  HREF = "text1905.htm">[Left]</A> <A  HREF = "text1896.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>