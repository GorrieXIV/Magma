<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Identification</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text647.htm">[Next]</A><A  HREF = "text645.htm">[Prev]</A> <A  HREF = "text647.htm">[Right]</A> <A  HREF = "text645.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "7278">Identification</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text646.htm#7279">Identification as an Abstract  Group</A>
<LI> <A  HREF = "text646.htm#7281">Identification as a Permutation  Group</A>
</UL>
<H4><A NAME = "7279">Identification as an Abstract  Group</A></H4>



<H5><A NAME = "7280">NameSimple(G) : GrpPerm -&gt; &lt;RngIntElt, RngIntElt, RngIntElt&gt;</A></H5>
<BLOCKQUOTE>
Given a simple group G, determine the isomorphism type of
G. The type is returned in the form of a triple of three
integers f, d and q, where the interpretation of these
integers is that given in the description of the function
<TT>CompositionFactors</TT>.
</BLOCKQUOTE>
<H4><A NAME = "7281">Identification as a Permutation  Group</A></H4>

<P>
<P>
The first functions described in this subsection detect whether or not
a permutation group is alternating or symmetric in its natural
representation. They are based on the algorithm `Detect Alternating' 
outlined in <A  HREF = "text628.htm#bib_struct-gps">[CB92]</A>.


<H5><A NAME = "7282">IsAlternating(G) : GrpPerm -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the permutation group G defined as acting on X is the
alternating group Alt(X). 
</BLOCKQUOTE>
<H5><A NAME = "7283">IsSymmetric(G) : GrpPerm -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the permutation group G defined as acting on X is the
symmetric group Sym(X).
</BLOCKQUOTE>
<H5><A NAME = "7284">IsAltsym(G) : GrpPerm -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Returns <TT>true</TT> if the permutation group G defined as acting on X contains
the alternating group Alt(X).
</BLOCKQUOTE>
<H5><A NAME = "7285">TwoTransitiveGroupIdentification(G) : GrpPerm  -&gt; Tup</A></H5>
<BLOCKQUOTE>
Given a 2-transitive group G, return a tuple giving the abstract
isomorphism type of the group. This is an implementation of the
method of Cameron and Cannon <A  HREF = "text628.htm#bib_two_trans">[CC91]</A>.
</BLOCKQUOTE>
<H5><A NAME = "7286">IsEven(G): GrpPerm -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a permutation group G check if G is even, ie. contained
in the alternating group.
</BLOCKQUOTE>
<H5><A NAME = "7287">RecogniseAlternatingOrSymmetric(G : parameters) : Grp, RngIntElt -&gt; BoolElt, Map, Map, Map, Map, BoolElt</A></H5>

<PRE>    N: RngIntElt                        Default: 0</PRE>

<PRE>    Extension: BoolElt                  Default: <TT>false</TT></PRE>

<PRE>    Epsilson: FldRElt                   Default: 0.01</PRE>

<PRE>    Asymptotic: BoolElt                 Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The input group G is isomorphic to H, the alternating 
or symmetric group for some n &ge;5.  
Note that G can be either a matrix or permutation representation of H.
<P>
The algorithm used is that of <A  HREF = "text628.htm#bib_altsymrecogN">[JLNP13]</A>.
Since this is Las Vegas,
there is a small probability controlled by the optional parameter
<TT>Epsilon</TT> that it returns <TT>false</TT> incorrectly. 
<P>
If the algorithm succeeds, then it returns <TT>true</TT>, 
an isomorphism from G to H, an isomorphism from H to G, 
the map from G to its word group, and the map from the word group to G. 
The sixth value returned is <TT>true</TT> if H is the 
symmetric group, otherwise <TT>false</TT>.
<P>
<P>
The optional parameter <TT>N</TT> is an upper bound for the degree of H.
If <TT>N</TT> is 0, then the maximal theoretically possible bound for the 
degree is assumed; this is the degree of G if G is a permutation group, 
and max(9, d + 2) or max(9, d + 1)
if G is a matrix group of degree d, 
depending on the characteristic of the field.
If the optional parameter <TT>Extension</TT> is <TT>true</TT>, then G is isomorphic to 
a central extension of H for some n &ge;5.
Now the first two maps returned are an epimorphism 
from G onto H with kernel Z(G) and a map from H to G that induces an
isomorphism from H onto G/Z(G). 
<P>
If the optional parameter <TT>Asymptotic</TT> is <TT>true</TT>, then the 
map from H to G 
implements the asymptotically efficient algorithm of Beals 
et al. <A  HREF = "text628.htm#bib_altsymrecog1">[BLGN+03]</A>.
Otherwise, the algorithm employed for this map is 
that of <A  HREF = "text628.htm#bib_bratus-pak">[BP00]</A>,
which is usually faster for moderate degrees.
<P>
If the algorithm is not successful, then <TT>false</TT> is returned. 
<P>
The algorithm consists of two parts.
The first part finds the degree of the alternating group and 
constructs standard generators, cf. <A  HREF = "text628.htm#bib_altsymrecogN">[JLNP13]</A>.
The second part verifies that these elements generate G, 
and constructs isomorphisms
between G and H, cf. <A  HREF = "text628.htm#bib_altsymrecog1">[BLGN+03]</A>.
The implementation of the first part was developed by Sebastian Jambor.
The implementation of the second part was developed by Jonathan Conder; 
he also extended the 
algorithm to work for both n &isin;{5, ..., 10} and central extensions. 
</BLOCKQUOTE>
<H5><A NAME = "7288">AlternatingOrSymmetricElementToWord(G, g): Grp, GrpElt -&gt; BoolElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If g &isin;G and G has been recognised 
by <TT>RecogniseAlternatingOrSymmetric</TT>, this function returns <TT>true</TT>
and an element of the word group for G which evaluates to g. 
Otherwise, it returns <TT>false</TT>. This facilitates membership testing in G. 
<P>
The implementation was developed by Jonathan Conder.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7289">Example <TT>GrpPerm_RecogniseAltsym2 (H63E39)</TT></A></H3>
We illustrate the use of these functions for a representation
of A<sub>13</sub>.
<P>
<P>
<P>
<PRE>
&gt; A:= AlternatingGroup (13);
&gt; H:= Stabiliser(A, {1,2});
&gt; G := CosetImage (A, H);
&gt; Degree (G);
78
&gt; success, bb_to_perm, perm_to_bb, bb_to_wg, wg_to_bb, is_sym := 
&gt; RecogniseAlternatingOrSymmetric (G);
&gt; 
&gt; success;
true
&gt; is_sym;
false
&gt; 
&gt;  x:= Sym(78)!(1, 35, 16, 28, 14, 26, 69, 5, 74)(2, 54,
&gt;  67, 18, 51, 63, 6, 50, 77)(3, 33, 78, 12, 34, 29, 19, 15, 73)
&gt;  (4, 52, 61, 24, 49, 60, 68, 38, 64)(7, 20, 71, 17,
&gt;  32, 11, 72, 8, 36)(9, 76, 47, 31, 56, 62, 13, 53, 59)
&gt;  (10, 70, 57, 23, 37, 22, 21, 27, 25)(30, 45, 46, 43, 42,
&gt;  44, 40, 41, 75)(39, 55, 65)(48, 66, 58);
&gt; 
&gt; flag, w := AlternatingOrSymmetricElementToWord (G, x);
&gt; "Is x in G?", flag;
Is x in G? true
&gt; Evaluate (w, [G.i: i in [1..Ngens (G)]]) eq x;
true
&gt; 
&gt; perm_image:= bb_to_perm(x);
&gt; perm_image;
(1, 4, 9)(2, 6, 3, 5, 10, 7, 8, 11, 12)
&gt; 
&gt; y := Random (G);
&gt; w := bb_to_wg (y);
&gt; Evaluate (w, [G.i: i in [1..Ngens (G)]]) eq y;
true
</PRE>
<HR>
<H5><A NAME = "7290">RecogniseSymmetric(G, n: parameters) : Grp, RngIntElt -&gt;    BoolElt, Map, Map, Map, Map, BoolElt</A></H5>

<PRE>    maxtries: RngIntElt                 Default: 100n + 5000</PRE>

<PRE>    Extension: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The group G should be known to be isomorphic to the symmetric group
S<sub>n</sub> for some n &ge;8. The Bratus-Pak algorithm  <A  HREF = "text628.htm#bib_bratus-pak">[BP00]</A>
(implemented by Derek Holt)
is used to define an isomorphism between G and S<sub>n</sub>.
If successful,
return <TT>true</TT>, homomorphism from G to S<sub>n</sub>, homomorphism from
S<sub>n</sub> to G, the map from G to its word group and the
map from the word group to G.
<P>
If the optional parameter <TT>Extension</TT> is set, then the group G
should be known to be isomorphic either to S<sub>n</sub> or to a perfect central
extension 2.S<sub>n</sub>. In that case, the first two maps returned will be
a homomorphism from G to S<sub>n</sub> and a map from S<sub>n</sub> to G that induces
a homomorphism onto G/Z(G). The sixth value returned will be <TT>true</TT>,
if G isomorphic to 2.S<sub>n</sub> and <TT>false</TT>, if  G isomorphic to 2.A<sub>n</sub>.
<P>
If unsuccessful, <TT>false</TT> is returned. This will always occur if the input
group is not isomorphic to S<sub>n</sub> (or 2.S<sub>n</sub> when <TT>Extension</TT> is set)
with n &ge;8, and may occur occasionally
even when G is isomorphic to S<sub>n</sub>. The optional parameter <TT>maxtries</TT>
(default 100n + 5000) can be used to control the number of random elements
chosen before giving up.
</BLOCKQUOTE>
<H5><A NAME = "7291">SymmetricElementToWord (G, g) : Grp, GrpElt -&gt; BoolElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If g is an element of G which has been constructively recognised to
be isomorphic to S<sub>n</sub> (or 2.S<sub>n</sub>), then return <TT>true</TT> and
element of word group for G which evaluates to g.
Otherwise return <TT>false</TT>.
This facilitates membership testing in G.
</BLOCKQUOTE>
<H5><A NAME = "7292">RecogniseAlternating(G, n: parameters) : Grp, RngIntElt -&gt;    BoolElt, Map, Map, Map, Map, BoolElt</A></H5>

<PRE>    maxtries: RngIntElt                 Default: 100n + 5000</PRE>

<PRE>    Extension: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The group G should be known to be isomorphic to the alternating group
A<sub>n</sub> for some n &ge;9. The Bratus-Pak algorithm  <A  HREF = "text628.htm#bib_bratus-pak">[BP00]</A>
(implemented by Derek Holt)
is used to define an isomorphism between G and A<sub>n</sub>.
If successful,
return <TT>true</TT>, homomorphism from G to A<sub>n</sub>, homomorphism from
A<sub>n</sub> to G, the map from G to its word group and the
map from the word group to G.
<P>
If the optional parameter <TT>Extension</TT> is set, then the group G
should be known to be isomorphic either to A<sub>n</sub> or to a perfect central
extension 2.A<sub>n</sub>. In that case, the first two maps returned will be
a homomorphism from G to A<sub>n</sub> and a map from A<sub>n</sub> to G that induces
a homomorphism onto G/Z(G). The sixth value returned will be <TT>true</TT>,
if G isomorphic to 2.A<sub>n</sub> and <TT>false</TT> otherwise.
<P>
If unsuccessful, <TT>false</TT> is returned. This will always occur if the input
group is not isomorphic to A<sub>n</sub> (or 2.A<sub>n</sub> when <TT>Extension</TT> is set)
with n &ge;9, and may occur occasionally
even when G is isomorphic to A<sub>n</sub>. The optional parameter <TT>maxtries</TT>
(default 100n + 5000) can be used to control the number of random elements
chosen before giving up.
</BLOCKQUOTE>
<H5><A NAME = "7293">AlternatingElementToWord (G, g) : Grp, GrpElt -&gt; BoolElt, GrpSLPElt</A></H5>
<BLOCKQUOTE>
If g is an element of G which has been constructively recognised to
be isomorphic to A<sub>n</sub> (or 2.A<sub>n</sub>), then return <TT>true</TT> and
element of word group for G which evaluates to g. 
Otherwise return <TT>false</TT>. 
This facilitates membership testing in G.
</BLOCKQUOTE>
<H5><A NAME = "7294">GuessAltsymDegree(G: parameters) : Grp -&gt; BoolElt, MonStgElt, RngIntElt</A></H5>

<PRE>    maxtries: RngIntElt                 Default: 5000</PRE>

<PRE>    Extension: BoolElt                  Default: <TT>false</TT></PRE>
<BLOCKQUOTE>
The group G should be believed to be isomorphic to S<sub>n</sub> or A<sub>n</sub> for
some n &gt; 6, or to 2.S<sub>n</sub> or 2.A<sub>n</sub> if the optional parameter
<TT>Extension</TT> is set. This function attempts to determine n and whether
G is symmetric or alternating. It does this by sampling orders of elements.
It returns either <TT>false</TT>, if it is unable to make a decision after
sampling <TT>maxtries</TT> elements (default 5000), or <TT>true</TT>, <TT>type</TT> and n,
where <TT>type</TT> is "Symmetric" or "Alternating", and n is the degree. 
If G is not isomorphic to S<sub>n</sub> or A<sub>n</sub> (or 2.S<sub>n</sub> or 2.A<sub>n</sub>
when <TT>Extension</TT> is set) for n &gt; 6, then the output is
meaningless - there is no guarantee that <TT>false</TT> will be returned. There is also
a small probability of a wrong result or <TT>false</TT> being returned even when G is
S<sub>n</sub> or A<sub>n</sub> with n &gt; 6. This function was written by Derek Holt.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "7295">Example <TT>GrpPerm_RecogniseAltsym2 (H63E40)</TT></A></H3>
For a group G which is believed to be isomorphic to S<sub>n</sub> or A<sub>n</sub> for
some unknown value of n &gt; 6, the function <TT>GuessAltsymDegree</TT> can be 
used to try to guess  n, and then <TT>RecogniseSymmetric</TT> or 
<TT>RecogniseAlternating</TT> can be used to confirm the guess.
<P>
<P>
<PRE>
&gt; SetSeed(1);
&gt; G:= sub&lt; GL(10,5) |
&gt; PermutationMatrix(GF(5),Sym(10)![2,3,4,5,6,7,8,9,1,10]),
&gt; PermutationMatrix(GF(5),Sym(10)![1,3,4,5,6,7,8,9,10,2]) &gt;;
&gt; GuessAltsymDegree(G);
true Alternating 10
&gt; flag, m1, m2, m3, m4  := RecogniseAlternating(G,10);
&gt; flag;
true
&gt; x:=Random(G); Order(x);
8
&gt; m1(x);
(1, 2, 4, 9, 10, 8, 6, 3)(5, 7)
&gt; m2(m1(x)) eq x;
true
&gt; m4(m3(x)) eq x;
true
&gt; flag, w := AlternatingElementToWord(G,x);
&gt; flag;
true
&gt; m4(w) eq x;                                           
true
&gt; y := Random(Generic(G));
&gt; flag, w := AlternatingElementToWord(G,y);
&gt; flag;
false
&gt; flag, m1, m2, m3, m4 := RecogniseAlternating(G,11);
&gt; flag;
false
&gt; flag, m1, m2, m3, m4 := RecogniseSymmetric(G,10);
&gt; flag;
false
</PRE>
<P>
The nature of the <TT>GuessAltsymDegree</TT> function is that it assumes that
its input is either an alternating or symmetric group and then tries to guess
which one and the degree. As such, it is almost always correct when the input
is an alternating or symmetric group, but will often return a bad guess when
the input group is not of this form, as in the following example.
<P>
<P>
<P>
<PRE>
&gt; GuessAltsymDegree(Sym(50));
true Symmetric 50
&gt; GuessAltsymDegree(Alt(73));
true Alternating 73
&gt; GuessAltsymDegree(PSL(5,5)); 
true Alternating 82
</PRE>
<HR>
<PRE></PRE> <A  HREF = "text647.htm">[Next]</A><A  HREF = "text645.htm">[Prev]</A> <A  HREF = "text647.htm">[Right]</A> <A  HREF = "text645.htm">[Left]</A> <A  HREF = "text629.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>