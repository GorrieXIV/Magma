<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Homomorphisms</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text846.htm">[Next]</A><A  HREF = "text851.htm">[Prev]</A> <A  HREF = "text846.htm">[Right]</A> <A  HREF = "text851.htm">[Left]</A> <A  HREF = "text847.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9885">Homomorphisms</A></H3>

<P>
<P>
For a general description of homomorphisms, we refer to Chapter <A  HREF = "text138.htm#949">MAPPINGS</A>.
This section describes some special aspects of homomorphisms whose domain
is in the category <A  HREF = "text848.htm#GrpBrd"> <TT>GrpBrd</TT></A>.



<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text852.htm#9886">General Remarks</A>
<LI> <A  HREF = "text852.htm#9887">Constructing Homomorphisms</A>
<LI> <A  HREF = "text852.htm#9889">Accessing Homomorphisms</A>
<LI> <A  HREF = "text852.htm#9897">Representations of Braid Groups</A>
</UL>
<H4><A NAME = "9886">General Remarks</A></H4>

<P>
<P>
<P>
An important special case of homomorphisms with domain in the category
<A  HREF = "text848.htm#GrpBrd"> <TT>GrpBrd</TT></A> is the following. A homomorphism f:B -&gt; G, where
B and B<sup>prime</sup> are braid groups on n and m strings, respectively, and
f is an embedding of B in G induced by
 s<sub>i</sub> - - &gt; s<sup>prime</sup><sub>k + e i</sub>   (i=1, ..., n - 1) 
where the s<sub>i</sub> are the Artin generators of B, the s<sup>prime</sup><sub>j</sub>
are the Artin generators of B<sup>prime</sup>, |e| = 1 and k is a
suitable constant.
The Magma implementation uses special optimisation techniques, if a
homomorphism with domain in the category <A  HREF = "text848.htm#GrpBrd"> <TT>GrpBrd</TT></A> has the additional
properties listed above. Compared to the general case, this results in
faster evaluation of such homomorphisms, in particular in the case e = 1. 
<P>
Computing preimages under homomorphisms with domain in the category
<A  HREF = "text848.htm#GrpBrd"> <TT>GrpBrd</TT></A> currently is only supported for the special case described
above.  Moreover, computing the preimage of an element u under a map
f may fail, even if u is contained in the image of f.


<H4><A NAME = "9887">Constructing Homomorphisms</A></H4>



<H5><A NAME = "9888">hom&lt; B -&gt; G | S : parameters &gt; : Struct , Struct -&gt; Map</A></H5>

<PRE>    Check: BoolElt                      Default: <TT>true</TT></PRE>
<BLOCKQUOTE>
Returns the homomorphism from the braid group B to the group G defined
by the assignment S. S can be the one of the following:
<DL COMPACT class='compact'>
<DT>(i)</DT><DD>A list, sequence or indexed set containing the images of all
k Artin generators B.1, ..., B.k of B. Here, the i-th element
of S is interpreted as the image of B.i, that is, the order of the
elements in S is important.
<DT>(ii)</DT><DD>A list, sequence, enumerated set or indexed set, containing
k tuples &lt;x<sub>i</sub>, y<sub>i</sub>&gt; or arrow pairs x<sub>i</sub>  - &gt; y<sub>i</sub>, where x<sub>i</sub>
is a generator of B and y<sub>i</sub>&isin;G (i=1, ..., k) and the set
{x<sub>1</sub>, ..., x<sub>k</sub>} is the full set of Artin generators of B.
In this case, y<sub>i</sub> is assigned as the image of x<sub>i</sub>, hence the order
of the elements in S is not important.
<P>
<P>
</DL>
Note, that it is currently not possible to define a homomorphism by assigning
images to the elements of an arbitrary generating set of B.
<P>
<P>
If the category of the codomain supports element arithmetic and element
comparison, by default the constructed homomorphism is checked by verifying
that the  would-be images of the Artin generators satisfy the braid
relations of B. In this case, it is assured that the returned map is a
well-defined homomorphism.  The most important situation in which
it is not possible to perform checking is the case in which the domain is a
finitely presented group (<TT>FPGroup</TT>; cf. Chapter <A  HREF = "text808.htm#9089">FINITELY PRESENTED GROUPS</A>)
which is not free. Checking may be disabled by setting the parameter
<TT>Check</TT> to <TT>false</TT>.
</BLOCKQUOTE>
<H4><A NAME = "9889">Accessing Homomorphisms</A></H4>



<H5><A NAME = "9890">e @ f : GrpBrdElt, Map -&gt; GrpElt</A></H5>
<H5>f(e) : Map, GrpBrdElt -&gt; GrpElt</H5>
<BLOCKQUOTE>
Given a homomorphism whose domain is a braid group B and an element e
of B, return the image of e under f as element of the codomain of f.
</BLOCKQUOTE>
<H5><A NAME = "9891">B @ f : GrpBrd, Map -&gt; Grp</A></H5>
<H5>f(B) : Map, GrpBrd -&gt; Grp</H5>
<BLOCKQUOTE>
Given a homomorphism whose domain is a braid group B, return the image
of B under f as a subgroup of the codomain of f.
<P>
<P>
This function is not supported for all codomain categories.
</BLOCKQUOTE>
<H5><A NAME = "9892">u @@ f : GrpElt, Map -&gt; GrpBrdElt</A></H5>
<BLOCKQUOTE>
Given a homomorphism whose domain is a braid group B and an element u
of the image of f, return the preimage of u under f as an element
of B.
<P>
<P>
This function currently is only supported if f is an embedding of
one braid group into another as described in Section
<A  HREF = "text852.htm#9886">General Remarks</A>.  Note, moreover, that
computing the preimage of u may fail, even if u is
contained in the image of f.
</BLOCKQUOTE>
<H5><A NAME = "9893">Domain(f) : Map -&gt; Grp</A></H5>
<BLOCKQUOTE>
The domain of the homomorphism f.
</BLOCKQUOTE>
<H5><A NAME = "9894">Codomain(f) : Map -&gt; Grp</A></H5>
<BLOCKQUOTE>
The codomain of the homomorphism f.
</BLOCKQUOTE>
<H5><A NAME = "9895">Image(f) : Map -&gt; Grp</A></H5>
<BLOCKQUOTE>
The image or range of the homomorphism f as a subgroup of the codomain of
 f.
<P>
<P>
This function is not supported for all codomain categories.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9896">Example <TT>GrpBrd_Homomorphisms (H78E10)</TT></A></H3>
<DL COMPACT class='compact'>
<DT>(1)</DT><DD>The symmetric group on n letters is an epimorphic image of the braid
group on n strings, where for 0 &lt; i &lt; n the image of the Artin generator a<sub>i</sub> 
is given by the transposition (i, i + 1).
<P>
</DL>
We construct this homomorphism for the case n = 10.
<P>
<P>
<PRE>
&gt; Bn := BraidGroup(10);
&gt; Sn := Sym(10);
&gt; f := hom&lt; Bn-&gt;Sn | [ Sn!(i,i+1) : i in [1..Ngens(Bn)] ] &gt;;
</PRE>
Of course, the image of <TT>f</TT> is the full symmetric group.
<P>
<P>
<PRE>
&gt; Image(f) eq Sn;
true
</PRE>
Now we compute the image of a pseudo-random element of <TT>Bn</TT> under <TT>f</TT>.
<P>
<P>
<PRE>
&gt; f(Random(Bn));
(1, 5, 8)(2, 4, 9, 7, 6, 3)
</PRE>
<P>
<P>
<DL COMPACT class='compact'>
<DT>(2)</DT><DD>(Key exchange as proposed in <A  HREF = "text846.htm#bib_braid_cryptosystem">[KLC+00]</A>)
<P>
<P>
<P>
</DL>
Consider a collection of l + r strings t<sub>1</sub>, ..., t<sub>l + r</sub> and the braid group
B acting on t<sub>1</sub>, ..., t<sub>l + r</sub> with Artin generators s<sub>1</sub>, ..., s<sub>l + r - 1</sub> .
The subgroups of B fixing the
strings t<sub>l + 1</sub>, ..., t<sub>l + r</sub> and t<sub>1</sub>, ..., t<sub>l</sub> may be
identified with braid groups L on l strings and R on r strings,
respectively, with the Artin generators of L and R corresponding to s<sub>1</sub>, ..., s<sub>l - 1</sub>  and s<sub>l + 1</sub>, ..., s<sub>l + r - 1</sub>,
respectively.
<P>
<P>
We set up these groups for l = 6 and r = 7 using the BKL presentations.
<P>
<P>
<PRE>
&gt; l := 6;
&gt; r := 7;
&gt; B := BraidGroup(l+r : Presentation := "BKL");
&gt; L := BraidGroup(l : Presentation := "BKL");
&gt; R := BraidGroup(r : Presentation := "BKL");
</PRE>
We now construct the embeddings f : L -&gt; B and
g : R -&gt; B.
<P>
<P>
<PRE>
&gt; f := hom&lt; L-&gt; B | [ L.i -&gt; B.i : i in [1..Ngens(L)] ] &gt;;
&gt; g := hom&lt; R-&gt; B | [ R.i -&gt; B.(l+i) : i in [1..Ngens(R)] ] &gt;;
</PRE>
To complete the preparatory steps, we choose a random element of B which
is not too short.
<P>
<P>
<PRE>
&gt; x := Random(B, 15, 25);
</PRE>
The data constructed so far is assumed to be publicly available.  Each
time two users A and B require a shared key, the following steps are performed.
<P>
<P>
<P>
<DL COMPACT class='compact'>
<DL COMPACT class='compact'>
<DT>(a)</DT><DD>A chooses a random secret element a&isin;L and sends the
normal form of y<sub>1</sub> := x<sup>a</sup> to B.
<DT>(b)</DT><DD>B chooses a random secret element b&isin;R and sends  the
normal form of y<sub>2</sub> := x<sup>b</sup> to A.
<DT>(c)</DT><DD>A receives y<sub>2</sub> and computes the normal form of y<sub>2</sub><sup>a</sup>.
<DT>(d)</DT><DD>B receives y<sub>1</sub> and computes the normal form of y<sub>1</sub><sup>b</sup>.
<P>
<P>
<P>
</DL>
</DL>
Note the following.
<P>
<P>
<P>
<DL COMPACT class='compact'>
<DL COMPACT class='compact'>
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>Transmitting y<sub>1</sub> and y<sub>2</sub> in normal form disguises
 their structure as products a<sup> - 1</sup>xa and b<sup> - 1</sup>xb, provided the words
 used are long enough and prevents simply reading off the conjugating elements
 a and b.
<DT><IMG SRC="closed.gif" ALT="" WIDTH=7 HEIGHT=7></DT><DD>Since the subgroups L and R of B commute, we have
 ab = ba, which implies y<sub>2</sub><sup>a</sup> = x<sup>ba</sup> = x<sup>ab</sup> = y<sub>1</sub><sup>b</sup>. Thus, the
 normal forms computed by A and B in steps (c) and (d), respectively, must be
 identical and can be used to extract a secret shared key.
<P>
<P>
<P>
</DL>
</DL>
We illustrate this, using the groups set up above.  For step (a):
<P>
<P>
<PRE>
&gt; a := Random(L, 15, 25);
&gt; y1 := NormalForm(x^f(a));
</PRE>
Now for step (b):
<P>
<P>
<PRE>
&gt; b := Random(R, 15, 25);
&gt; y2 := NormalForm(x^g(b));
</PRE>
We now verify that A and B arrive at the same information in steps (c)
and (d).
<P>
<P>
<PRE>
&gt; K_A := NormalForm(y2^f(a));
&gt; K_B := NormalForm(y1^g(b));
&gt; AreIdentical(K_A, K_B);
true
</PRE>
We see that the information computed by A and B in steps (c) and (d) is indeed
identical and hence can be used (in suitable form) as a common secret.
Note, however, that the number of strings and the lengths of the elements
used in the example above are much smaller than the values suggested for
real cryptographic purposes.
<P>
<P>
<DL COMPACT class='compact'>
<DT>(3)</DT><DD>(Attack on key exchange)
<P>
<P>
<P>
</DL>
We now show an attack on the key exchange outlined above using conjugacy
search based on ultra summit sets.
<P>
<P>
<P>
An eavesdropper can try to compute an element c conjugating x to y<sub>1</sub>.
While this is not guaranteed to reproduce the braid a, the chances for
a successful key recovery are quite good.
<P>
<P>
<P>
We decide to change to the Artin presentation of B and use the function
<TT>MyIsConjugate</TT> from Example <A  HREF = "text851.htm#9877">H78E8</A> for
computing a conjugating element c as above.
<P>
<P>
<PRE>
&gt; SetPresentation(~B, "Artin");
&gt; time _, c := MyIsConjugate(x, y1);
42 elements computed
Time: 0.020
</PRE>
Finding a conjugating element is no problem at all.
Using the conjugating element, we can try to recover the shared secret.
In this example we are lucky.
<P>
<P>
<PRE>
&gt; NormalForm(y2^c) eq K_A;
true
</PRE>
<P>
In the conjugacy search above, a conjugating element was found after computing
42 ultra summit elements.  The ultra summit set itself is larger, but can
still be computed very easily.
<P>
<P>
<PRE>
&gt; time Ux := UltraSummitSet(x);
Time: 3.150
&gt; #Ux;
1584
</PRE>
<P>
The super summit set is, even in this small example, too large to be computed;
conjugacy search based on super summit sets would quite likely fail.
<P>
<P>
<PRE>
&gt; time Sx := SuperSummitSet(x);
Current total memory usage: 4055.1MB
System error: Out of memory.
</PRE>
<P>
<P>
<P>
Finally, we show that the attack using conjugacy search based on
ultra summit sets is also applicable to larger examples.
We try to recover a key, which is generated using elements with canonical
lengths between 500 and 1000 in a braid group on 100 strings.
<P>
<P>
<PRE>
&gt; l := 50;
&gt; r := 50;
&gt; B := BraidGroup(l+r);
&gt; L := BraidGroup(l);
&gt; R := BraidGroup(r);
&gt; 
&gt; f := hom&lt; L-&gt; B | [ L.i -&gt; B.i : i in [1..Ngens(L)] ] &gt;;
&gt; g := hom&lt; R-&gt; B | [ R.i -&gt; B.(l+i) : i in [1..Ngens(R)] ] &gt;;
&gt; 
&gt; x := Random(B, 0, 1, 500, 1000);
&gt; 
&gt; a := Random(L, 0, 1, 500, 1000);
&gt; y1 := NormalForm(x^f(a));
&gt; 
&gt; b := Random(R, 0, 1, 500, 1000);
&gt; y2 := NormalForm(x^g(b));
&gt; 
&gt; K_A := NormalForm(y2^f(a));
&gt; K_B := NormalForm(y1^g(b));
&gt; AreIdentical(K_A, K_B);
true
</PRE>
<P>
We again try to recover the key by computing an element conjugating x to
y<sub>1</sub>.  This time, we use the built-in Magma function for efficiency
reasons.
<P>
<P>
<PRE>
&gt; time _, c := IsConjugate(x, y1);
Time: 18.350
&gt; K_A eq NormalForm(y2^c);
false
</PRE>
<P>
Bad luck. -- We managed to compute a conjugating element, but this failed to
recover the key.
<P>
We try with an element conjugating x to y<sub>2</sub>.
<P>
<P>
<PRE>
&gt; time _, c := IsConjugate(x, y2);
Time: 3.800
&gt; K_B eq NormalForm(y1^c);      
true
</PRE>
Success! -- Good that we didn't use this key to encrypt our credit card
number!
<HR>
<H4><A NAME = "9897">Representations of Braid Groups</A></H4>

<P>
<P>
This section describes the functions available for creating a number of
well known representations of braid groups.


<H5><A NAME = "9898">SymmetricRepresentation(B) : GrpBrd -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings, return the natural epimorphism
from B onto the symmetric group on n points, induced by the action
of B on the strings by which B is defined.
</BLOCKQUOTE>
<H5><A NAME = "9899">BurauRepresentation(B) : GrpBrd -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings, return the Burau representation
of B as homomorphism from B to the matrix algebra of degree n over
the rational function field over the integers.
</BLOCKQUOTE>
<H5><A NAME = "9900">BurauRepresentation(B, p) : GrpBrd, RngIntElt -&gt; Map</A></H5>
<BLOCKQUOTE>
Given a braid group B on n strings and a prime p, return the
p-modular Burau representation of B as homomorphism from B to
the matrix algebra of degree n over the rational function field over
the field with p elements.
</BLOCKQUOTE>
<HR>
<H3><A NAME = "9901">Example <TT>GrpBrd_Representations (H78E11)</TT></A></H3>
We construct the Burau representation of the braid group on 4 strings.
<P>
<P>
<PRE>
&gt; B := BraidGroup(4);
&gt; f := BurauRepresentation(B);
</PRE>
Its codomain is a matrix algebra of degree 4 over the rational function
field over the integers.
<P>
<P>
<PRE>
&gt; A := Codomain(f);
&gt; A;
GL(4, FunctionField(IntegerRing()))
&gt; F := BaseRing(A);
&gt; F;
Univariate rational function field over Integer Ring
Variables: $.1
</PRE>
To obtain nicer printing, we assign the name t to the generator of the
function field F.
<P>
<P>
<PRE>
&gt; AssignNames(~F, ["t"]);
</PRE>
Now we can check easily whether we remembered the definition of the Burau
representation correctly.
<P>
<P>
<PRE>
&gt; f(B.1);
[-t + 1      t      0      0]
[     1      0      0      0]
[     0      0      1      0]
[     0      0      0      1]


&gt; f(B.2);
[     1      0      0      0]
[     0 -t + 1      t      0]
[     0      1      0      0]
[     0      0      0      1]


&gt; f(B.3);
[     1      0      0      0]
[     0      1      0      0]
[     0      0 -t + 1      t]
[     0      0      1      0]
</PRE>
<PRE></PRE> <A  HREF = "text846.htm">[Next]</A><A  HREF = "text851.htm">[Prev]</A> <A  HREF = "text846.htm">[Right]</A> <A  HREF = "text851.htm">[Left]</A> <A  HREF = "text847.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>