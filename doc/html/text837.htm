<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <link rel='stylesheet' href='help.css' type='text/css'>
  <TITLE>Set-Theoretic Operations in a  Group</TITLE>
</head>
<body BGCOLOR="#FFFFFF">

 <A  HREF = "text838.htm">[Next]</A><A  HREF = "text836.htm">[Prev]</A> <A  HREF = "text838.htm">[Right]</A> <A  HREF = "text836.htm">[Left]</A> <A  HREF = "text831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<PRE></PRE><H3><A NAME = "9649">Set-Theoretic Operations in a  Group</A></H3>




<H5>Subsections</H5>
<UL>
<LI> <A  HREF = "text837.htm#9650">Functions Relating to Group Order</A>
<LI> <A  HREF = "text837.htm#9655">Membership and Equality</A>
<LI> <A  HREF = "text837.htm#9664">Set Operations</A>
</UL>
<H4><A NAME = "9650">Functions Relating to Group Order</A></H4>



<H5><A NAME = "9651">FactoredIndex(G, H) : GrpGPC, GrpGPC -&gt; [&lt;RngIntElt, RngIntElt&gt;]</A></H5>
<BLOCKQUOTE>
Given a group G and a subgroup H of G of finite index, return the
 factored index of H in G
</BLOCKQUOTE>
<H5><A NAME = "9652">FactoredOrder(G) : GrpGPC -&gt; [&lt;RngIntElt, RngIntElt&gt;]</A></H5>
<BLOCKQUOTE>
The factored order of the finite group G.
</BLOCKQUOTE>
<H5><A NAME = "9653">Index(G, H) : GrpGPC, GrpGPC -&gt; RngIntElt</A></H5>
<BLOCKQUOTE>
The index of the subgroup H in the group G, returned as an
ordinary integer.
</BLOCKQUOTE>
<H5><A NAME = "9654">Order(G) : GrpGPC -&gt; RngIntElt</A></H5>
<H5># G : GrpGPC -&gt; RngIntElt</H5>
<BLOCKQUOTE>
The order of the group G, returned as an ordinary integer.
</BLOCKQUOTE>
<H4><A NAME = "9655">Membership and Equality</A></H4>



<H5><A NAME = "9656">g in G : GrpGPCElt, GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given an element g and a group G, return <TT>true</TT> if g is an element
of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9657">g notin G : GrpGPCElt, GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given an element g and a group G, return <TT>true</TT> if g is not an
element of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9658">S subset G : { GrpGPCElt } , GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a group G and a set S of elements belonging to a group H,
where G and H have some covering group, return <TT>true</TT> if S is
a subset of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9659">S notsubset G : { GrpGPCElt } , GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given a group G and a set S of elements belonging to a group H,
where G and H have some covering group, return <TT>true</TT> if S is
not a subset of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9660">H subset G : GrpGPC, GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, having some covering group, return
<TT>true</TT> if H is a subgroup of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9661">H notsubset G : GrpGPC, GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, having some covering group, return
<TT>true</TT> if H is not a subgroup of G, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9662">G eq H : GrpGPC, GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, having some covering group, return
<TT>true</TT> if G and H are the same group, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H5><A NAME = "9663">G ne H : GrpGPC, GrpGPC -&gt; BoolElt</A></H5>
<BLOCKQUOTE>
Given groups G and H, having some covering group, return
<TT>true</TT> if G and H are distinct groups, <TT>false</TT> otherwise.
</BLOCKQUOTE>
<H4><A NAME = "9664">Set Operations</A></H4>



<H5><A NAME = "9665">Representative(G) : GrpGPC -&gt; GrpGPCElt</A></H5>
<H5>Rep(G) : GrpGPC -&gt; GrpGPCElt</H5>
<BLOCKQUOTE>
A representative element of G.
</BLOCKQUOTE>
<H5><A NAME = "9666"></A><A NAME = "GrpGPC:RandomProcess">RandomProcess</A>(G) : GrpGPC -&gt; Process</H5>

<PRE>    <A NAME = "GrpGPC:Slots">Slots</A>: RngIntElt Default: 10</PRE>

<PRE>    <A NAME = "GrpGPC:Scramble">Scramble</A>: RngIntElt Default: 100</PRE>
<BLOCKQUOTE>
Create a process to generate pseudo-randomly chosen elements from the
group G. The process uses an `expansion' procedure
to construct a set of elements corresponding to fairly long words in the
generators of G <A  HREF = "text830.htm#bib_randomelements">[CLGM+95]</A>.  At all times, N elements forming
a generating set for G are stored. Here, N is
the maximum of n + 1 and the specified value for <A  HREF = "text837.htm#GrpGPC:Slots">Slots</A>, where
n is the number of generators of G.
Initially, these are just the generators of G and products of pairs
of generators of G.  Random elements are now produced by successive
calls to <A  HREF = "text837.htm#GrpGPC:Random">Random</A><TT>(P)</TT>, where P is the process created
by this
function.  Each such call chooses an element previously stored by the process 
as the new random element. The process then replaces this stored element
with the product of this element and another one of the stored elements (on
the left or the right).  Setting <A  HREF = "text837.htm#GrpGPC:Scramble">Scramble</A><TT>:= m</TT> causes 
m such operations to be performed before the process is returned.
<P>
Care should be taken when trying to apply this function to infinite 
polycyclic groups. Firstly, the computations may take a considerable 
amount of time and secondly, the quality of the pseudo-random element 
generator may be extremely poor, depending on the required properties 
of the sequence of pseudo-random elements.
</BLOCKQUOTE>
<H5><A NAME = "9667"></A><A NAME = "GrpGPC:Random">Random</A>(P) : Process -&gt; GrpGPCElt</H5>
<BLOCKQUOTE>
Given a random element process P created by the function
<A  HREF = "text837.htm#GrpGPC:RandomProcess">RandomProcess</A><TT>(G)</TT> for the group G,
construct a pseudo-random element of G by forming a
random product over the expanded generating set currently
stored by the process.
The remarks concerning random elements of infinite polycyclic 
groups given in the description of <A  HREF = "text837.htm#GrpGPC:RandomProcess">RandomProcess</A>
apply here.
</BLOCKQUOTE>
<H5><A NAME = "9668">Random(G) : GrpGPC -&gt; GrpGPCElt</A></H5>
<H5>Random(G, max) : GrpGPC, RngIntElt -&gt; GrpGPCElt</H5>
<BLOCKQUOTE>
An element, pseudo-randomly chosen, from the group G. An exponent vector in normal form is chosen at random. Exponents of polycyclic generators for which there is no power relation, are chosen to have absolute value less or equal to <TT>max</TT>. A default value for <TT>max</TT> is 10.
<P>
It should be kept in mind that the distribution of the elements returned by <TT>Random</TT> is uniform only in the case that G is finite.
</BLOCKQUOTE>
<PRE></PRE> <A  HREF = "text838.htm">[Next]</A><A  HREF = "text836.htm">[Prev]</A> <A  HREF = "text838.htm">[Right]</A> <A  HREF = "text836.htm">[Left]</A> <A  HREF = "text831.htm">[Up]</A> <A  HREF = "ind.htm">[Index]</A> <A  HREF = "MAGMA.htm">[Root]</A>
<br><small>Version: V2.22 of <I>
Thu Jun  9 16:37:49 EST 2016
</I></small>
</body></html>